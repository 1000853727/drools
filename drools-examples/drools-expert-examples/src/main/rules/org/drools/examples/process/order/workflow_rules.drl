/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.examples.process.order

import org.drools.process.instance.impl.WorkItemImpl
import org.jbpm.workflow.instance.node.WorkItemNodeInstance
import org.drools.WorkingMemory
import org.drools.FactHandle

function void updateIfExists(WorkingMemory workingMemory, Object o) {
    FactHandle factHandle = workingMemory.getFactHandle(o);
    if (factHandle != null) {
        workingMemory.update(factHandle, o);
    }
}

rule "Execute Pending Work Item" salience 20
    when
        workItemNodeInstance: WorkItemNodeInstance( workItemId <= 0 )
        workItem: WorkItemImpl( state == WorkItemImpl.PENDING ) from workItemNodeInstance.getWorkItem()
    then
        ((org.drools.process.instance.WorkItemManager)
            workItemNodeInstance.getProcessInstance().getKnowledgeRuntime()
                .getWorkItemManager()).internalExecuteWorkItem(workItem);
        workItemNodeInstance.internalSetWorkItemId(workItem.getId());
        updateIfExists(drools.getWorkingMemory(), workItemNodeInstance);
end

rule "Complete WorkItemNodeInstance" salience 20
    when
        workItemNodeInstance: WorkItemNodeInstance( )
        WorkItemImpl( state == WorkItemImpl.COMPLETED ) from workItemNodeInstance.getWorkItem()
    then
        workItemNodeInstance.triggerCompleted();
end
