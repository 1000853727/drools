package org.drools.examples

import org.drools.examples.PetStore.Order
import org.drools.examples.PetStore.Purchase
import org.drools.examples.PetStore.Product
import java.util.ArrayList

global javax.swing.JFrame frame 
global javax.swing.JTextArea textArea

dialect "mvel"

// insert each item in the shopping cart into the Working Memory 
rule "Explode Cart"
    salience 10
	dialect "java"
	when
	    $order : Order()
		$item : Purchase() from $order.items
	then
		insert( $item );
//		drools.getWorkingMemory().getRuleBase().removeRule("org.drools.examples", "Explode Cart" );
		
end

// Free Fish Food sample when we buy a Gold Fish if we haven't already  bought 
// Fish Food and dont already have a Fish Food Sample
rule "Free Fish Food Sample"
	dialect "java"
	when
	    $order : Order()
		not ( $p : Product( name == "Fish Food") && Purchase( product == $p ) )
		not ( $p : Product( name == "Fish Food Sample") && Purchase( product == $p ) )		
		exists ( $p : Product( name == "Gold Fish") && Purchase( product == $p ) )				
	then
		System.out.println( "Adding free Fish Food Sample to cart" );
		Product product = new Product( "Fish Food Sample", 0.00 );
		Purchase purchase = new Purchase($order, product);
		insert( purchase );
		$order.addItem( purchase );	
end
/*
// Suggest a tank if we have bought more than 5 gold fish and dont already have one
rule "Suggest Tank"
	when
		not CartItem(name == "Fish Tank" )
		ArrayList( size > 5 ) from collect( CartItem(name == "Gold Fish" ) )
	then
end	

rule "Apply 5% Discount"
	dialect "java"
	when
		$cart : ShoppingCart( grossCost >= 10 && < 20, discount < 0.05 )
	then
//	    with( $cart ) { discount = 0.05 };
		$cart.setDiscount( 0.05 );
end

rule "Apply 10% Discount"
	dialect "java"
	when
		$cart : ShoppingCart( grossCost >= 20, discount < 0.10 )
	then
//	    with( $cart ) { discount = 0.10 };
		$cart.setDiscount( 0.10 );
end
*/
rule "Gross Total"
    salience -10
    dialect "java"
	when
	    $order : Order()
		Number( total : doubleValue ) from accumulate( Purchase( price : product.price ) from $order.items,
   			        			   					   sum( price) )
	then	
	     textArea.append( "gross total=" + total + "\n" );
end
	