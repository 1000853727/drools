package org.drools.adventures

import org.drools.adventures.Room;
import org.drools.adventures.Thing;

import org.drools.adventures.Request;
import org.drools.adventures.Response;
import org.drools.adventures.SessionCharacter

import org.drools.adventures.MoveCommand
import org.drools.adventures.Command
import org.drools.adventures.PickupCommand
import org.drools.adventures.DropCommand
import org.drools.adventures.LookCommand
import org.drools.adventures.SetSessionCharacterCommand

global org.drools.adventures.Counter counter

dialect "mvel"


rule lookCmd agenda-group "commands" lock-on-active auto-focus  when
    lc : LookCommand(  c : character )
    ?look( c, r, things, exits; )
then    
    str = "You are in the " + r + "\n";
    str +="You can see " + things + "\n";
    str +="Available exits are  " + exits + "\n";
    str +="\n";
            
    res = new Response( str );
    res.localId = lc.request;
    insert( res );    
end

rule setUserSessionCharacter agenda-group "commands" lock-on-active auto-focus  when
    $c : SetSessionCharacterCommand()    
    $sc : SessionCharacter( session == $c.session, character !=  $c.character )
then
    modify( $sc ) { character = $c.character }; 
    insert( new CharacterSelectedEvent( $c.character ) );   
end

rule invalidMove agenda-group "commands" lock-on-active auto-focus when
    mc : MoveCommand( c : character, r : room )    
    l  : Location( thing == c, ltarget : target )
    not ?connect( r, ltarget; ) 
then
    res = new Response( "Invalid Move: " + mc );
    res.localId = mc.request;
    insert( res ); 
end

rule validMove agenda-group "commands" lock-on-active auto-focus  when
    mc : MoveCommand( c : character, r : room )    
    l  : Location( thing == c, ltarget : target )
    exists ?connect( r, ltarget; ) 
then
    exit = new ExitEvent( c, (Room) l.target )
    enter = new EnterEvent( c, r );
        
    modify( l ) { target = r };
            
    insert( exit );
    insert( enter );    
    
    res = new Response( "You have entered the " + l.target + "\n" );
    res.localId = mc.request;
    insert( res );    
end

rule invalidPickup agenda-group "commands" lock-on-active auto-focus  when
    pc : PickupCommand( c : character, t : thing)            
    cl  : Location( thing == c )
    not Location( thing == t, target == cl.target ) 
then
    res = new Response( "Invalid Pickup: " + pc );
    res.localId = pc.request;
    insert( res ); 
end

rule validPickup agenda-group "commands" lock-on-active auto-focus  when
    pc : PickupCommand( c : character, t : thing)    
    
    cl  : Location( thing == c )
    tl : Location( thing == t, target == cl.target ) 
then
    insert( new Holding(  c, t ) );
    modify( tl ) { target =  c };
    insert( new PickupEvent( c, t ) );
    
    res = new Response( "You have picked up the " + t + "\n" );
    res.localId = pc.request;
    insert( res );  
end

rule invalidDrop agenda-group "commands" lock-on-active auto-focus  when
    dc : DropCommand( c : character, t : thing)           
    not ( Holding( c, t;) )
then
    res = new Response( "Invalid Drop: " + dc );
    res.localId = dc.request;
    insert( res ); 
end

rule validDrop agenda-group "commands" lock-on-active auto-focus  when
    dc : DropCommand( c : character, t : thing)    
    
    cl  : Location( thing == c )    
    tl  : Location( thing == t ) 
    h : Holding( c, t;)
then
    modify( tl ) { target = cl.target };
    retract ( h );
    insert( new DropEvent( c, t ) );    
    
    res = new Response( "You have droped the " + t + "\n" );
    res.localId = dc.request;
    insert( res );      
end
                     

rule retractCommand agenda-group "commands" lock-on-active auto-focus salience -100 when
    c : Command()
then
    retract( c );
end
