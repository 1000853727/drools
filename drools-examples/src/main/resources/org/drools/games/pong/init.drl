package org.drools.games.pong

import org.drools.games.pong.Ball
import org.drools.games.pong.Bat
import org.drools.games.pong.Player
import org.drools.games.pong.PlayerId
import org.drools.games.pong.PongGame
import org.drools.games.pong.PointWin
import org.drools.games.pong.KeyPressed
import org.drools.games.pong.Collision
import org.drools.games.pong.CollisionType

import org.kie.api.runtime.KieRuntime

import java.lang.Math

import java.awt.Color
import java.awt.Graphics
import java.awt.event.KeyEvent

global PongConfiguration pconf

dialect "mvel"

function Player initPlayer(PlayerId playerId, int batX, PongConfiguration pconf, KieRuntime kruntime, PongUI ui) {
    int batY =  ( pconf.getTableHeight() / 2 ) - ( pconf.getBatHeight() / 2 );
    Bat bat = new Bat( batX, batY, pconf.getBatWidth(), pconf.getBatHeight() );
    bat.setSpeed( pconf.getBatSpeed() );
    ui.drawBat(bat);

    Player p = new Player(playerId, bat);

    kruntime.insert( bat );
    kruntime.insert( p);
    return p;
}

function void initBall(KieRuntime kruntime, PongConfiguration pconf, PongUI ui) {
    Ball ball = new Ball( (pconf.getTableWidth()/2)-(pconf.getBallWidth()/2),
                     (pconf.getTableHeight()/2)-(pconf.getBallWidth()/2),
                      pconf.getBallWidth());
    ball.setSpeed( pconf.getBallStartingSpeed() );
    ball.setDx( -2 );
    ui.drawBall(ball);
    kruntime.insert( ball );
}

rule "Create GUI" agenda-group "Init"  when
then
    PongUI ui = new PongUI(pconf);
    ui.init( (StatefulKnowledgeSession) kcontext.getKnowledgeRuntime() );
    insert( ui );
end

rule "Draw Top and Bottom Lines and Net" agenda-group "Init" when
    ui : PongUI( )
then
    Graphics tableG = ui.getGraphics(); //ui.getTablePanel().getTableG();
    tableG.setColor( Color.WHITE ); // background

    int padding = pconf.padding;
    int tableWidth = pconf.tableWidth;
    int tableHeight = pconf.tableHeight;
    int sideLineWidth = pconf.sideLineWidth;

    tableG.fillRect( padding, padding,
                     tableWidth-(padding*2), sideLineWidth );
    tableG.fillRect( padding, tableHeight-padding-sideLineWidth,
                     tableWidth-(padding*2), sideLineWidth );
    // draw dash line net
    int netWidth = pconf.netWidth;
    int gap = pconf.netGap;
    int dash = pconf.netDash;
    int x = (tableWidth/2) - (netWidth/2);
    for (int i = 0; i < tableHeight; i = i + dash + gap) {
        tableG.fillRect( (int) x, i, netWidth, dash );
    }
end

rule "Init Game" agenda-group "Init" when
    ui : PongUI()
then

    Player p1 = initPlayer( PlayerId.PlayerOne, pconf.getPadding(),
                            pconf, kcontext.getKnowledgeRuntime(), ui);

    ui.drawScore(p1, 100, pconf);

    Player p2 = initPlayer( PlayerId.PlayerTwo, pconf.tableWidth - pconf.padding - pconf.batWidth,
                            pconf, kcontext.getKnowledgeRuntime(), ui);


     ui.drawScore(p1, pconf.getTableWidth()-120, pconf);

    insert( new PongGame(p1, p2) );

    initBall(kcontext.getKnowledgeRuntime(), pconf, ui);
end