
@comment{
    Template for the DRL declaration of a datafield bean

   /**
    * @param name        - common name of the class
    * @param type        - type (int, string, double, ...)
    * @param continuous  - flag for cont. datatypes
    * @param ordinal     - flag for ordinal datatypes
    * @param cyclic      - flag for cyclic datatypes
    * @param categorical - flag for categorical datatypes
    * @param fullName    - full, display name of the class (presentation purpose only, no effect)
    */
}
@declare{'ioTypeDeclareRule'}
 // Display Name : @{fullName}
 @comment{
 // Categorical=@{categorical}, Ordinal=@{ordinal}, Continuous=@{continuous}, Cyclic=@{cyclic}
 // @code{ comparable = (! cyclic && ! categorical); }
 }
 declare @{name} extends @if{ super != null } @{super} @else{} DataField @end{}
  @@role(event)

   value : @{type} @@key  @position(1) @comment{
                                        //@if{continuous} @@comparable @elseif{cyclic} @@comparable(cyclic) @elseif{ordinal} @@comparable(ordinal) @end{}
                                       }
   displayValue : String = @if{ fullName != null } @{format("string",fullName)} @else{} @{name} @end{}

   @if{ "NeuralNetwork".equals(modelType) }
     residual : Double
     standardError : Double
     probability  : double = -1.0
     entityId  : int = -1
   @elseif{ "Association".equals(modelType) }
     probability : double = -1.0
     entityId  : int = -1
     ruleValue : String
   @elseif{ "Clustering".equals(modelType) }
     entityId   : int = -1
     clusterId : int = -1
     clusterAffinity  : double = -1.0
   @elseif{ "GenRegression".equals(modelType) || "Regression".equals(modelType) ||  "SVM".equals(modelType)}
     residual : Double
     standardError : Double
     probability  : double = -1.0
   @elseif{ "NaiveBayes".equals(modelType) }
     residual : Double
     probability  : double = -1.0
   @elseif{ "RuleSet".equals(modelType) || "Tree".equals(modelType) }
     residual : Double
     probability : double = -1.0
     entityId : int  = -1
   @end{}

 end
@end{}




@comment{
	1) DataField section
	- a bean is generated for each field
	- a validation rule is generated for each field
	- fields extend "Datafield", which is missing (and invalid) by default
	- fields are events, just in case...

	"name" is used to generate class name
	"datatype" is mapped onto some java type
	"displayname" is used to generate a comment

	"optype" :
		- categorical : the field holds a value from a given set. validation rules
		will ensure that a value is valid.
		- ordinal : the field holds a value from a given set, as in the previous case
		The set is ordered, so it is possible to write field1 > field2.
		(and any other ordinal comparison operator)
		- continuous : the domain can be defined using intervals as well as values.
		The field value also supports arithmetic ops : +,-,*,/,...

	"cyclic" : ordinal and continuous fields are comparable,
	i.e. it is possible to write field1 > field2 instead
	of accessing the values directly field1.value > field2.value.
	But NOT if cyclic.

}



@comment{
*******************************************************************************************************
        1.1) Declare types
              Converts basic data from entry-points into data field events
*******************************************************************************************************
}


@includeNamed{'ioTypeDeclareRule'}




