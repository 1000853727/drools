import org.drools.pmml_4_0.descr.*;
import org.drools.pmml_4_0.*;
import org.mvel2.templates.*;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

global StringBuilder theory;
global TemplateRegistry registry;
global Map fld2var;
global PMML4Wrapper utils;



 function void applyTemplate(String templateName, Object context, TemplateRegistry registry, Map vars, StringBuilder builder) {
    CompiledTemplate template = (CompiledTemplate) registry.getNamedTemplate(templateName);
    builder.append(TemplateRuntime.execute(template, context, vars));
	//builder.append(TemplateRuntime.execute(template, context, new org.mvel2.integration.impl.DefaultLocalVariableResolverFactory()));
 }




rule "Questionnaire"
dialect "mvel"
when
    MiningSchema( $inputs : miningFields )
then
    //System.err.println("Found Mined Field " + $fld.name );
    HashMap map = new HashMap();
        map.put("fields",$inputs);
        map.put("model",utils.context);
    applyTemplate("modelQuestionnaire.drlt", utils, registry, map, theory);
end



rule "Question"
dialect "java"
when
    MiningSchema(  $inputs : miningFields )
    $fld : MiningField( this memberOf $inputs,  $name : name, usageType == null || usageType.value == "active" )
    TypeOfField( name == $name, $type : dataType )
    $dfld : DataField( $vsize : values.size == 0, name == $name )
then
    HashMap map = new HashMap();
        map.put("name",utils.compactUpperCase($name));
        map.put("model",utils.context);
        map.put("dataType",$type);
    applyTemplate("modelQuestion.drlt", utils, registry, map, theory);
    applyTemplate("modelQuestionBinding.drlt", utils, registry, map, theory);
end


rule "Question_Multi"
dialect "java"
when
    MiningSchema(  $inputs : miningFields )
    $fld : MiningField( this memberOf $inputs,  $name : name, usageType == null || usageType.value == "active" )
    TypeOfField( name == $name, $type : dataType )
    $dfld : DataField( $vals : values, $vsize : values.size > 0, name == $name )
    $validz : List( size > 0 ) from accumulate(
                        $val : Value( property == null || (property != "missing" && property != "invalid") ) from $vals ,
                        init( List validz = new java.util.LinkedList(); ),
                        action( validz.add(utils.format($dfld,$val)); ),
                        result( validz )
                      )

then
    HashMap map = new HashMap();
        map.put("name",utils.compactUpperCase($name));
        map.put("model",utils.context);
        map.put("dataType",$type);
        map.put("valid",$validz);
        map.put("invalid",new java.util.ArrayList());
        map.put("missing",new java.util.ArrayList());
    applyTemplate("modelMultiQuestion.drlt", utils, registry, map, theory);
    applyTemplate("modelQuestionBinding.drlt", utils, registry, map, theory);
end