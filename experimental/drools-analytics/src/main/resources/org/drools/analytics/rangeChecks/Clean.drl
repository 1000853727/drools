#created on: 24.9.2007
package org.drools.analytics.rangeChecks.cleanUp

import org.drools.analytics.result.Gap;
import org.drools.analytics.result.MissingNumberPattern;

import org.drools.analytics.dao.AnalyticsData;

#declare any global variables here
global AnalyticsData data;

#
# Example: missing ( x >= 10 ) and ( x <= 10 ). This is the same as ( x == 10 )
#
rule "Merge gaps"
	when
		$g1 :Gap(
			evaluator == ">="
		)
		$g2 :Gap( 
			id != $g1.id,
			field == $g1.field,
			evaluator == "<=",
			valueAsString == $g1.valueAsString
		)		
	then	
		data.remove( $g1 );
		data.remove( $g2 );
		retract( $g1 );
		retract( $g2 );
		
		MissingNumberPattern mnp = new MissingNumberPattern( $g1.getField(), "==", $g1.getValueAsString() );
		mnp.setFiredRuleName( drools.getRule().getName() );
		data.save( mnp );
		insert( mnp );
end
/*
#
# Example: covered ( x > 10 ) and ( x < 100 ) ( x == 50 )
# reports that ( x > 50 ) and ( x < 50 ) are missing.
#
rule "Remove useless gaps"
	when
		$r1 :LiteralRestriction( fieldType == Field.FieldType.INT )
		
		# gap ( x > 50 )
		$g :Gap(
			evaluator == ">",
			restriction == $r1
		)
		
		# covered ( x > 50 )
		$r2 :LiteralRestriction( 
			fieldId = $r1.fieldId,
			patternIsNot == $r1.patternIsNot, 
			( evaluator == ">" || == ">=" )
			intValue < $r1.intValue()
		)

		not LiteralRestriction( 
			fieldId = $r.fieldId,
			patternIsNot == $r.patternIsNot, 
			intValue < $r1.intValue(),
			intValue < $r2.intValue()
		)
	then
		#
		#
		#
		#
		#
		#
		#
		#
end
*/













