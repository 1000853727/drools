package org.drools.compiler.test;

import java.lang.Integer;
import java.lang.Float;
import java.lang.Double;
import java.lang.Short;
import java.lang.String;
import org.drools.compiler.CheeseEqual;

global java.lang.String ga;
global java.lang.String gb;
global java.lang.Short gs;

rule "assert-item"
    when
        i : Integer()
    then
        insertLogical(new Double(2.0));
    System.out.println( kcontext.getRule().getName() );
end

rule "kickstart-accumulation"
    when
        i : Integer()
    then
        insertLogical(new Float(1.0));
        System.out.println( kcontext.getRule().getName() );
end

rule "item qualifies"
    when
        d : Double()
        f : Float()
    then
        //assert(new Short((short)3));
        insert(gs);
        insertLogical(new CheeseEqual(ga, 4));
        System.out.println( kcontext.getRule().getName() );
end

rule "accumulate item"
    when
        f : Float()
        s : Short()
        c : CheeseEqual(type == (ga), price == 4)
        not CheeseEqual(type == (gb), price == 5)
    then
        //update(f);
        insert(new CheeseEqual(gb, 5));
        System.out.println( kcontext.getRule().getName() );
end

rule "clean-up-1"
    when
        s : Short()
        not Float()
    then
        retract(s);
        System.out.println( kcontext.getRule().getName() );
end

rule "clean-up-2"
    when
        c : CheeseEqual(type == (gb), price == 5)
        not Float()
    then
        retract(c);
        System.out.println( kcontext.getRule().getName() );
end
