<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<section>
  <title>Quick start guide</title>

  <section>
    <title>Quick start guide</title>

    <para>If you are reading this, you must be the impatient type who wants to
    kick the tyres (and light the fires) and have a look around as soon as
    possible. This section will provide a quick end to end tour of the steps
    involved (but does not go through the concepts in detail). This assumes
    you have installed the repository correctly, and are able to access the
    main login screen.</para>

    <figure>
      <title>Main feature areas of BRMS</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="BRMSFeatures.png" format="PNG"
                     scalefit="1" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The above picture shows the main feature areas of the BRMS.</para>

    <itemizedlist>
      <listitem>
        <para>Info: This is the initial screen, with links to
        resources.</para>
      </listitem>

      <listitem>
        <para>Rules: This is the category and business user
        perspective.</para>
      </listitem>

      <listitem>
        <para>Package: This is where packages are configured and
        managed.</para>
      </listitem>

      <listitem>
        <para>Deployment: this is where deployment snapshots are
        managed.</para>
      </listitem>

      <listitem>
        <para>Admin: Administrative functions (categories, statuses, import
        and export)</para>
      </listitem>
    </itemizedlist>

    <para>You can also consult the wiki:
    http://wiki.jboss.org/wiki/Wiki.jsp?page=RulesRepository for some
    tutorials and user tips (it IS a wiki, so you can even contribute your own
    tips and examples and even upload files if you desire !).</para>

    <section>
      <title>Initial configuration</title>

      <para>Some initial setup is required the first time. The first time the
      server starts up, it will create an empty repository, then take the
      following steps:</para>

      <itemizedlist>
        <listitem>
          <para>Once deployed, go to "http://&lt;your
          server&gt;/drools-jbrms/" (This will show the initial info screen -
          or login screen depending on the configuration).</para>
        </listitem>

        <listitem>
          <para>If it is a brand new repository, you will want to go to
          "Admin", and choose "Manage Categories"</para>

          <para>(Add a few categories of your choosing, categories are only
          for classification, not for execution or anything else.)</para>
        </listitem>

        <listitem>
          <para>Rules need a fact model (object model) to work off, so next
          you will want to go to the Package management feature. From here you
          can click on the icon to create a new package (give it a meaningful
          name, with no spaces).</para>
        </listitem>

        <listitem>
          <para>To upload a model, use a jar which has the fact model (API)
          that you will be using in your rules and your code (go and make one
          now if you need to !). When you are in the model editor screen, you
          can upload a jar file, choose the package name from the list that
          you created in the previous step.</para>
        </listitem>

        <listitem>
          <para>Now edit your package configuration (you just created) to
          import the fact types you just uploaded (add import statements), and
          save the changes.</para>
        </listitem>

        <listitem>
          <para>At this point, the package is configured and ready to go (you
          generally won't have to go through that step very often).</para>

          <para>(Note that you can also import an existing drl package - it
          will store the rules in the repository as individual assets).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Writing some rules</title>

      <itemizedlist>
        <listitem>
          <para>Once you have at least one category and one package setup, you
          can author rules.</para>
        </listitem>

        <listitem>
          <para>There are multiple rule "formats", but from the BRMS point of
          view, they are all "assets".</para>
        </listitem>

        <listitem>
          <para>You create a rule by clicking the icon with the rules logo
          (the head), and from that you enter a name.</para>
        </listitem>

        <listitem>
          <para>You will also have to choose one category. Cateogies provide a
          way of viewing rules that is separate to packages (and you can make
          rules appear in multiple packages) - think of it like
          tagging.</para>
        </listitem>

        <listitem>
          <para>Chose the "Business rule (guided editor)" formats.</para>
        </listitem>

        <listitem>
          <para>This will open a rule modeller, which is a guided editor. You
          can add and edit conditions and actions based on the model that is
          in use in the current package. Also, any DSL sentence templates
          setup for the package will be available.</para>
        </listitem>

        <listitem>
          <para>When you are done with rule editing, you can check in the
          changes (save), or you can validate or "view source" (for the
          effective source).</para>
        </listitem>

        <listitem>
          <para>You can also add/remove categories from the rule editor, and
          other attributes such as documentation (if you aren't sure what to
          do, write a document in natural language describing the rule, and
          check it in, that can also serve as a template later)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Finding stuff</title>

      <para>In terms of navigating, you can either use the Rules feature,
      which shows things grouped by categories, or you can use the Package
      feature, and view by package (and rule type). If you know the name or
      part of the name of an asset, you can also use the "Quick find", start
      typing a rule name and it will return a list of matches as you type (so
      if you have a sensible naming scheme, it will make it very quick to find
      stuff).</para>
    </section>

    <section>
      <title>Deployment</title>

      <itemizedlist>
        <listitem>
          <para>After you have edited some rules in a package, you can click
          on the package feature, open the package that you wish, and build
          the whole package.</para>
        </listitem>

        <listitem>
          <para>If that succeeds, then you will be able to download a binary
          package file which can be deployed into a runtime system.</para>
        </listitem>

        <listitem>
          <para>You can also take a "snapshot" of a package for deployment.
          This freezes the package at that point in time, so any concurrent
          changes to not effect the package. It also makes the package
          available on a URL of the form: "http://&lt;your
          server&gt;/drools-jbrms/org.drools.brms.JBRMS/packages/&lt;packageName&gt;/&lt;snapshotName&gt;"
          (where you can use that URL and downloads will be covered in the
          section on deployment).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>BRMS concepts</title>

    <section>
      <title>Rules are assets</title>

      <para>As the BRMS can manage many different types of rules (and more),
      they are all classed as "assets". An asset is anything that can be
      stored as a version in the repository. This includes decision tables,
      models, DSLs and more. Sometimes the word "rule" will be used to really
      mean "asset" (ie the things you can do also apply to the other asset
      types). You can think of asset as a lot like a file in a folder. Assets
      are grouped together for viewing, or to make a package for deployment
      etc.</para>
    </section>

    <section>
      <title>Categorisation</title>

      <figure>
        <title>Categories</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="CatZoom.png" format="PNG"
                       scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Categories allow rules (assets) to be labelled (or tagged) with
      any number of categories that you define. This means that you can then
      view a list of rules that match a specific category. Rules can belong to
      any number of categories. In the above diagram, you can see this can in
      effect create a folder/explorer like view of assets. The names can be
      anything you want, and are defined by the BRMS administrator (you can
      also remove/add new categories - you can only remove them if they are
      not currently in use).</para>

      <para>Generally categories are created with meaningful name that match
      the area of the business the rule applies to (if the rule applies to
      multiple areas, multiple categories can be attached). Categories can
      also be used to "tag" rules as part of their lifecycle, for example to
      mark as "Draft" or "For Review".</para>

      <figure>
        <title>Assets can have multiple categories</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="CatEdit.png" format="PNG"
                       scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The view above shows the category editor/viewer that is seen when
      you open an asset. In this example you can see the asset belongs to 2
      categories, with a "+" button to add additional items (use the trash can
      item to remove them). This means that when either category is used to
      show a list of assets, you will see that asset.</para>

      <para>In the above example, the first Category "Finance" is a "top
      level" category. The second one: "HR/Awards/QAS" is a still a single
      category, but its a nested category: Categories are hierarchical. This
      means there is a category called "HR", which contains a category
      "Awards" (it will in fact have more sub-categories of course), and
      "Awards" has a sub-category of QAS. The screen shows this as
      "HR/Awards/QAS" - its very much like a folder structure you would have
      on your hard disk (the notable exception is of course that rules can
      appear in multiple places).</para>

      <para>When you open an asset to view or edit, it will show a list of
      categories that it currently belongs to If you make a change (remove or
      add a category) you will need to save the asset - this will create a new
      item in the version history. Changing the categories of a rule has no
      effect on its execution.</para>

      <figure>
        <title>Creating categories</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="AdminCats.png" format="PNG"
                       scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above view shows the administration screen for setting up
      categories (there) are no categories in the system by default. As the
      categories can be hierachical you chose the "parent" category that you
      want to create a sub-category for. From here categories can also be
      removed (but only if they are not in use by any current versions of
      assets).</para>

      <para>As a general rule, an asset should only belong to 1 or 2
      categories at a time. Categories are critical in cases where you have
      large numbers of rules. The hierarchies do not need to be too deep, but
      should be able to see how this can help you break down rules/assets into
      manageable chunks. Its ok if its not clear at first, you are free to
      change categories as you go.</para>
    </section>

    <section>
      <title>The asset editor</title>

      <figure>
        <title>The Asset editor view</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="AssetEditor.png" format="PNG"
                       scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The above diagram shows the "asset editor" with some annotated
      areas. The asset editor is where all rule changes are made. Below is a
      list which describes the different parts of the editor.</para>

      <itemizedlist>
        <listitem>
          <para>A</para>

          <para>This is where the "editor widget" lives - exactly what form
          the editor takes depends on the asset or rule type.</para>
        </listitem>

        <listitem>
          <para>B</para>

          <para>This is the documentation area - a free text area where
          descriptions of the rule can live. It is encouraged to write a plain
          description in the rule here before editing.</para>
        </listitem>

        <listitem>
          <para>C</para>

          <para>These are the actions - for saving, archiving, changing status
          etc. Archiving is the equivalent of deleting an asset.</para>
        </listitem>

        <listitem>
          <para>D</para>

          <para>This has the asset name, as well as the list of categories
          that the asset belongs to.</para>
        </listitem>

        <listitem>
          <para>E</para>

          <para>This section contains read-only meta data, including when
          changes were made, and by whom.</para>

          <para>"Modified on:" - this is the last modified date.</para>

          <para>"By:" - who made the last change.</para>

          <para>"Note:" - this is the comment made when the asset was last
          updated (ie why a change was made)</para>

          <para>"Version:" - this is a number which is incremented by 1 each
          time a change is checked in (saved).</para>

          <para>"Created on:" - the date and time the asset was
          created.</para>

          <para>"Created by:" - this initial author of the asset.</para>

          <para>"Format:" - the short format name of the type of asset.</para>
        </listitem>

        <listitem>
          <para>F</para>

          <para>This shows what package the asset belong to (you can also
          change it from here).</para>
        </listitem>

        <listitem>
          <para>G</para>

          <para>This is some more (optional) meta data (taken from the Dublin
          Core meta data standard)</para>
        </listitem>

        <listitem>
          <para>H</para>

          <para>This will show the version history list when requested.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Rule types and formats</title>

      <para>[enumerate and have some screenshots of different rule assets,
      including functions, briefly describe]</para>

      <para>Vanilla DRL - regular DRL "files" can be managed in the BRMs. A
      DRL can either be a whole chunk of rules, or an individual rule. if its
      an individual rule, no package statement or imports are required.
      Normally you would use the IDE to edit raw DRL files, since it has all
      the advanced tooling and content assistance and debugging.</para>

      <para>If you import a vanilla DRL into a new package, it will
      automatically break apart the rules in to separate assets.</para>
    </section>

    <section>
      <title>Status management</title>

      <para>Each asset (and also package) in the BRMS has a status flag set.
      The values of the status flag are set in the Administration section of
      the BRMS. (you can add your own status names). Similar to Categories,
      Statuses do NOT effect the execution in any way, and are purely
      informational. Unlike categories, assets only have one status AT A
      TIME.</para>

      <para>Using statuses is completely optional. You can use it to manage
      the lifecycle of assets (which you can alternatively do with categories
      if you like).</para>

      <figure>
        <title>Asset status</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="AssetChangeStatus.png"
                       format="PNG" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can change the status of an individual asset (like in the
      diagram above). Its change takes effect immediately, no separate save is
      needed.</para>

      <figure>
        <title>Asset status</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="PackageChangeStatus.png"
                       format="PNG" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can change the status of a whole package - this sets the
      status flag on the package itself, but it ALSO changes the statuses on
      ALL the assets that belong to this package in one hit (to be the same as
      what you set the package to).</para>
    </section>

    <section>
      <title>Package management</title>

      <para>Configuring packages is generally something that is done once, and
      by someone with some experience with rules/models. Generally speaking,
      very few people will need to configure packages, and once they are
      setup, they can be copied over and over if needed. Package configuration
      is most definately a technical task that requires the appropriate
      expertise.</para>

      <para>All assets live in "packages" in the BRMS - a package is like a
      folder (it also serves as a "namespace"). A home folder for rule assets
      to live in. Rules in particular need to know what the fact model is,
      what the namespace is etc.</para>

      <para><figure>
          <title>The package explorer</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="PackageExplorer.png"
                         format="PNG" scalefit="1" />
            </imageobject>
          </mediaobject>
        </figure>The above picture shows the package explorer. Clicking on an
      asset type will show a list of matches (for packages with thousands of
      rules, showing the list may take several seconds - hence the importance
      of using categories to help you find your way around).</para>

      <para>So whilst rules (and assets in general) can appear in any number
      of categories, they only live in one package. If you think of the BRMS
      as a file system, then each package is a folder, and the assets live in
      that folder - as one big happy list of files. When you create a
      deployment snapshot of a package, you are effectively copying all the
      assets in that "folder" into another special "folder".</para>

      <para>The package management feature allows you to see a list of
      packages, and then "expand" them, to show lists of each "type" of asset
      (there are many assets, so some of them are grouped together):</para>

      <para>The asset types: <itemizedlist>
          <listitem>
            <para>Business rule assets: this shows a list of all "business
            rule" types, which include decision tables, business rules
            etc.</para>
          </listitem>

          <listitem>
            <para>Technical rule assets: this is a list of rules that would be
            considered technical (eg DRL files).</para>
          </listitem>

          <listitem>
            <para>Functions: In the BRMS you can also have functions defined
            (optionally of course).</para>
          </listitem>

          <listitem>
            <para>DSL: Domain Specific Lanaguages can also be stored as an
            asset. If they exist (generally there is only one), then they will
            be used in the appropriate editor GUIs.</para>
          </listitem>

          <listitem>
            <para>Model: A package requires at least one model - for the
            rules.</para>
          </listitem>
        </itemizedlist></para>

      <para><figure>
          <title>Creating new assets</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="PackageNewItemTooltip.png"
                         format="PNG" scalefit="1" />
            </imageobject>
          </mediaobject>
        </figure> From the package explorer you can create new rules, or new
      assets. Some assets you can only create from the package explorer. The
      above picture shows the icons which launch wizards for this purpose. If
      you hover the mouse over them, a tooltip will tell you what they
      do.</para>

      <para><figure>
          <title>Package configuration</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="PackageConfig.png"
                         format="PNG" scalefit="1" />
            </imageobject>
          </mediaobject>
        </figure>One of the most critical things you need to do is configure
      packages. This is mostly importing the classes used by the rules, and
      globals variables. Once you make a change, you need to save it, and that
      package is then configured and ready to be built. For example, you may
      add a model which has a class called "com.something.Hello", you would
      then add "import com.something.Hello" in your package configuration and
      save the change.</para>

      <para><figure>
          <title>Package building</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="PackageBuild.png"
                         format="PNG" scalefit="1" />
            </imageobject>
          </mediaobject>
        </figure>Finally you would "build" a package. Any errors caught are
      then shown at this point. If the build was successful, then you will
      have the option to create a snapshot for deployment. You can also view
      the "drl" that this package results in. WARNING: in cases of large
      numbers of rules, all these operations can take some time.</para>
      
      <section>
      	<title>Importing drl packages</title>
      	<para>It is also possible to create a package by importing an existing "drl" file.
      	When you choose to create a new package, you can choose an option to upload a .drl file. The BRMS
      	will then attempt to understand that drl, break create a package for you. The rules in it will be stored as individual assets (but still as drl text content).
      	Note that to actually build the package, you will need to upload an appropriate model (as a jar) to validate against, as a separate step.
      </section>
      
    </section>

    <section>
      <title>Version management</title>

      <para>Both assets and whole packages of assets are "versioned" in the
      BRMS, but the mechanism is slightly different. Individual assets are
      saved a bit like a version of a file in a source control system.
      However, packages of assets are versioned "on demand" by taking a
      snapshot (typically which is used for deployment). The next section
      talks about deployment management and snapshots.</para>

      <figure>
        <title>Asset versions</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="AssetVersionHistory.png"
                       format="PNG" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Each time you make a change to an asset, it creates a new item in
      the version history. This is a bit like having an unlimited undo. You
      can look back through the history of an individual asset like the list
      above, and view it (and restore it) from that point in time.</para>
    </section>

    <section>
      <title>Deployment management</title>

      <para>Snapshots, URLS and binary packages</para>
    </section>

    <section>
      <title>Navigating and finding rules</title>

      <para>The two main ways of viewing the repository are by using
      user-driven Categorisation (tagging) as outlined above, and the package
      explorer view.</para>

      <para>The category view provides a way to navigate your rules in a way
      that makes sense to your organisation.</para>

      <para>The alternative and more technical view is to use the package
      explorer. This shows the rules (assets) closer to how they are actually
      stored in the database, and also separates rules into packages (name
      spaces) and their type (format, as rules can be in many different
      formats).</para>

      <para>[picture of rules explorer list, and package explorer]</para>
    </section>
  </section>

  <section>
    <title>Rule authoring</title>

    <para>[detail on guided editor, how to use DSLs, dsl editor, upload rf +
    dt etc]</para>

    <para>[also mention possibility of creating templates to copy etc]</para>
  </section>

  <section>
    <title>The business user perspective</title>

    <para>You can see from this manual, that some expertise and practice is
    required to use the BRMS. In fact any software system in some sense
    requires that people be "technical" even if it has a nice looking GUI.
    Having said that, in the right hands the BRMS can be setup to provide a
    sutiable environment for non technical users.</para>

    <para>The most appropriate rule formats for this use are using the Guided
    editor, Decision tables and DSL rules. You can use some DSL expressions
    also in the guided editor (so it provides "forms" for people to enter
    values).</para>

    <para>You can use categories to isolate rules and assets from non
    technical users. Only assets which have a category assigned will appear in
    the "rules" feature.</para>

    <para>The initial setup of the BRMS will need to be done by a
    developer/technical person who will set the foundations for all the rules.
    They may also create "templates" which are rules which may be copied (they
    would typically live in a "dummy" package, and have a category of
    "template" - this can also help ease the way).</para>

    <para>Deployment should also not be done by non technical users (as
    mentioned previously this happens from the "Package" feature).</para>
  </section>

  <section>
    <title>Deployment: Integrating rules with your applications</title>

    <para>Its all very interesting to manage rules, but how to you use or
    "consume" them in your application? This section covers the usage of the
    RuleAgent deployment component that automates most of this for you.</para>

    <section>
      <title>The Rule Agent</title>

      <para>The rule agent is a component which is embedded in the core
      runtime of the rules engine. To use this, you don't need any extra
      components. In fact, if you are using the BRMS, your application should
      only need to include the drools-core.jar in its classpath, and no other
      rules specific dependencies.</para>

      <para>Once you have "built" your rules in a package in the BRMS, you are
      ready to use the agent in your target application.</para>

      <para>To use the rule agent, you will use a call in your applications
      code like:</para>

      <programlisting>RuleAgent agent = RuleAgent.newRuleAgent("/MyRules.properties");     
RuleBase rb = agent.getRuleBase(); 
rb.newStatefulSession.... 
//now assert your facts into the session and away you go !
</programlisting>

      <para>IMPORTANT: You should only have one instance of the RuleAgent per
      rulebase you are using. This means you should (for example) keep the
      RuleBase in JNDI (or similar).</para>

      <para>This assumes that there is a MyRules.properties in the root of
      your classpath. You can also pass in a Properties object with the
      parameters set up (the parameters are discussed next).</para>

      <para>The following shows the content of MyRules.properties:</para>

      <programlisting>##
## RuleAgent configuration file example
##

newInstance=true
file=/foo/bar/boo.pkg /foo/bar/boo2.pkg
dir=/my/dir
url=http://some.url/here http://some.url/here
localCacheDir=/foo/bar/cache
poll=30


name=MyConfig</programlisting>

      <para>You can only have one type of key in each configuration (eg only
      one "file", "dir" etc - even though you can specify multiple items by
      space separating them). Note also, instead of a discrete properties
      file, you can construct a java.utils.Properties object, and pass it in
      to the RuleBase methods.</para>

      <para>Referring to the above example, the "keys" in the properties
      are:</para>

      <itemizedlist>
        <listitem>
          <para>newInstance</para>

          <para>Setting this to "true" means that the RuleBase instance will
          be created fresh each time there is a change. this means you need to
          do agent.getRuleBase() to get the new updated rulebase (any existing
          ones in use will be untouched). The default is false, which means
          rulebases are updated "in place" - ie you don't need to keep calling
          getRuleBase() to make sure you have the latest rules (also any
          StatefulSessions will be updated automatically with rule
          changes).</para>
        </listitem>

        <listitem>
          <para>file</para>

          <para>This is a space-separated list of files - each file is a
          binary package as exported by the BRMS. You can have one or many.
          The name of the file is not important. Each package must be in its
          own file.</para>
        </listitem>

        <listitem>
          <para>dir</para>

          <para>This is similar to file, except that instead of specifying a
          list of files you specify a directory, and it will pick up all the
          files in there (each one is a package) and add them to the rulebase.
          Each package must be in its own file.</para>
        </listitem>

        <listitem>
          <para>url</para>

          <para>This is a space separated list of URLs to the BRMS which is
          exposing the packages (see below for more details).</para>
        </listitem>

        <listitem>
          <para>localCacheDir</para>

          <para>This is used in conjunction with the url above, so that if the
          BRMS is down (the url is not accessable) then if the runtime has to
          start up, it can start up with the last known "good" versions of the
          packages.</para>
        </listitem>

        <listitem>
          <para>poll</para>

          <para>This is set to the number of seconds to check for changes to
          the resources (a timer is used).</para>
        </listitem>

        <listitem>
          <para>name</para>

          <para>This is used to specify the name of the agent which is used
          when logging events (as typically you would have multiple agents in
          a system).</para>
        </listitem>
      </itemizedlist>

      <para>Following shows the deployment screen of the BRMS, which provides
      URLs and downloads of packages.</para>

      <figure>
        <title>Snapshot deployment</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="SnapshotDeploy.png"
                       format="PNG" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can see the "Package URI" - this is the URL that you would
      copy and paste into the agent .properties file to specify that you want
      this package. It specifies an exact version (in this case to a snapshot)
      - each snapshot has its own URL. If you want the "latest" - then replace
      "NewSnapshot" with "LATEST".</para>

      <para>You can also download a .pkg file from here, which you can drop in
      a directory and use the "file" or "dir" feature of the RuleAgent if
      needed (in some cases people will not want to have the runtime
      automatically contact the BRMS for updates - but that is generally the
      easiest way for many people).</para>
    </section>

    <section>
      <title>Manual deployment</title>

      <para>This section is only needed for advanced users who are integrating
      deployment into their own mechanism. Normally you should use the rule
      agent.</para>

      <para>For those who do not wish to use the automatic deployment of the
      RuleAgent, "rolling your own" is quite simple. The binary packages
      emitted by the BRMS are serialized Package objects. You can deserialize
      them and add them into any rulebase - essentially that is all you need
      to do.</para>

      <para>From the BRMS, binary packages are provided either from the latest
      version of a package (once you have successfully validated and built a
      package) or from the deployment snapshots. The URLs that the BRMS web
      application exposes provide the binary package via http. You can also
      issue a "HEAD" command to get the last time a package was
      updated.</para>
    </section>
  </section>
</section>