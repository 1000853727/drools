<?xml version="1.0" encoding="UTF-8"?>
<section>
  <title>Why use a Rule Engine</title>

  <para>Two questions often asked are</para>

  <orderedlist>
    <listitem>
      <para>What advantage does this have over hand coded "if ..... then"
      approaches?</para>
    </listitem>

    <listitem>
      <para>Why should I use a Rule Engine instead of a scripting framework,
      like <indexterm>
          <primary>BeanShell</primary>
        </indexterm> Beanshell?</para>
    </listitem>
  </orderedlist>

  <para></para>

  <itemizedlist>
    <listitem>
      <para>Declarative Programming</para>

      <para>Rule englines allow you to say "What to do" not "How to do
      it".</para>
    </listitem>

    <listitem>
      <para>Logic and Data Separation</para>
    </listitem>

    <listitem>
      <para>Speed and Scalability</para>

      <para>The Rete algorithm, and its descendents such as Drools'
      Reteoo,</para>
    </listitem>

    <listitem>
      <para>Centralisation Knowledge</para>
    </listitem>

    <listitem>
      <para>Tool Integration</para>
    </listitem>
  </itemizedlist>

  <section>
	  <title>When not to use a rule engine</title>
	  <para>
		To quote a Drools mailing list regular (Dave Hamu):
		"It seems to me that in the excitement of working
with rules engines, that people forget that a rules engine is only one
piece of a complex application or solution.  Rules engines are not
really intended to handle workflow or process executions nor are
workflow engines or process management tools designed to do rules.  Use
the right tool for the job.  Sure, a pair of pliers can be used as a
hammering tool in a pinch, but that's not what it's designed for."

	  </para>
  </section>

</section>