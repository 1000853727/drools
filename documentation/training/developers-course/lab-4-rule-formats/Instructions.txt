---------------------------------------------
JBoss Rules Essentials Lab Excercise 4
	- Alternative rule formats -
---------------------------------------------

Instructions:
	This excercise is a self contained Eclipse project. 	
	There are 2 parts, decision tables, and DSLs.	
	
	FOR DECISION TABLES:
	
	Step 1: Import the project into eclipse.
	Step 2: Note the location of PolicyPricing.xls decision table (in /src/rules/decisiontables/). Note that it is in a classpath
			accessible location (seperate to the source code).
	Step 3: Right click on the PolicyPricing.xls spreadsheet, and choose the Open With menu item
			followed by "System Editor". This will open up the decision table in the spreadsheet app.
	
	Step 4: Find the org.acme.insurance package, and note the domain object in there (they have default 
			values for fields). Open the PricingRuleLauncher class in the launcher sub package.
	Step 5: Fire the launcher (it has a main method). Run menu, Run-as, Java application
			You should see some results - one item being the base price, another the discount. You
			can also see messages being logged by the rules (one of the action columns).
	Step 6: Change some values in the message being logged, and/or the values of discount or price.
			You can also change the attributes of the driver, to see other rules fired.
	Step 7: See if you can find any inconsitencies/gaps in the rule rows (where a price may not be found, or
			where there is a "conflict" and 2 rules may match).
				- Note: if there is a conflict, either add more conditions to make it unique, 
				  or, use the "sequential" flag to force the rules to have a top to bottom order.
				  You can then have a "hidden" action that does "drools.clearAgenda()" to stop for the first match 
				  found. This is what we call a "dirty hack", but can be useful from time to time.
	Step 8: Uncomment the line that prints out the DRL from the spreadsheet, inspect.
	
	Step 9: Make a grammatical error in the "rule template" row, check out the errors being reported (ie how to debug).
	Step 10: For advanced folks, you can try the excel feature for "locking" cells so you can allow non 
				techie folk to edit in relative safety.			  
				 (http://support.microsoft.com/?kbid=214081)
			
	NOTE: when you make a change to the spreadsheet, you will need to refresh the eclipse project to pick up 
	the latest (of course, if you change it to load direct from a file system, not the classpath,
	then you won't need to do this).
	
	DSLs:
	
	Step 11: Locate the src/rules/approval package. Open the approval rules.
	Step 12: Locate the PolicyApprovalLauncher class.
	Step 13: Run the PolicyApprovalLauncher class as a java application, note the console output.
	Step 14: open the acme.dsl and examine the mappings for the domain language.
	         Add a mapping for the "then" section to log some debug message. 
	         Open the approval.drl and add the log expression to a rule that you think
	         will fire. Then re-run the launcher.
	Step 15: Modify or add a constraint to a rule, re-launch and observe
	Step 16: open the technical.drl file, and change APPROVAL or REJECTED messages.	Relaunch.         
	Step 17: Right click on the .dsl file, and open as a text file, note the format of the mappings.
	Step 18: Open the approval.drl file, make a "typo" and save, observe an error showing up on the appropriate line
				 (errors may be parse errors, or an "expand" error).
	Step 18: (optional) - store rules from approval in seperate files. Modify the launcher to load them all up from 
				the seperate files.
	Step 19: (optional - advanced) - note the way that multiple patterns
				are added to the "d : Driver(..)" construct.
				Discuss alternative ways, perhaps more mappings for combinations
				that capture all constraints on a line.
								 
				Add a mapping like: "Set Driver to 'd'" which will simply
				bind a Driver instance to a "d" variable. 
				Then add mappings to add constraints in the form of 
				"eval( /* java code with 'd' */)" - this is less efficient
				but can provide more flexibility.
	Step 20: Open the archive/raw.drl file, to see what the rules would look like
				without	a DSL. Note the use of little facts like "Approve" and "Rejection"
				to control the behaviour.		
	
	
Pre-requisites:
	Eclipse 3.2 must be installed
	JBoss Rules plug in installed into Eclipse
	(including the decision tables module).
	Microsoft Excel or Open Office 2.0 should be installed.