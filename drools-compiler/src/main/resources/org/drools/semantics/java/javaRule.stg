group javaMethods;

returnValueMethod(declarations, declarationTypes, localDeclarations, localDeclarationTypes, globals, globalTypes, methodName, text) ::= <<
public static org.drools.spi.FieldValue <methodName>(<declarationTypes, declarations:{ type, declr | <type> <declr.identifier>}; separator=","><if(localDeclarations)><if(declarations)>,<endif><endif> 
                                                     <localDeclarationTypes, localDeclarations:{ type, declr | <type> <declr.identifier>}; separator=","><if(globals)><if(localDeclarations)>,<endif><if(!localDeclarations)><if(declarations)>,<endif><endif><endif>
                                                     <globalTypes, globals:{ type, identifier | <type> <identifier>}; separator=","> ) throws Exception {
    return org.drools.base.FieldFactory.getFieldValue( <text> );
}
>>

predicateMethod(declaration, declarationType, declarations, declarationTypes, localDeclarations, localDeclarationTypes, globals, globalTypes, methodName, text) ::= <<
public static boolean <methodName>(<declarationType> <declaration.identifier><if(declarations)>,<endif> 
                                   <declarationTypes, declarations:{ type, declr | <type> <declr.identifier>}; separator=","><if(localDeclarations)>,<endif> 
                                   <localDeclarationTypes, localDeclarations:{ type, declr | <type> <declr.identifier>}; separator=","><if(globals)>,<endif>
                                   <globalTypes, globals:{ type, identifier | <type> <identifier>}; separator=","> ) throws Exception {
    return ( <text> );
}
>>

evalMethod(declarations, declarationTypes, globals, globalTypes, methodName, text) ::= <<
public static boolean <methodName>(<declarationTypes, declarations:{ type, declr | <type> <declr.identifier>}; separator=","><if(globals)><if(declarations)>,<endif><endif> <globalTypes, globals:{ type, identifier | <type> <identifier>}; separator=","> ) throws Exception {
    return ( <text> );
}
>>

accumulateMethod(declarations, declarationTypes, innerDeclarations, globals, globalTypes, methodName, columnType, columnDeclaration, resultType, initCode, actionCode, resultCode) ::= <<
public static <resultType> <methodName>(org.drools.rule.Declaration[] innerDeclarations, java.util.List matchingObjects<if(declarations)>, <endif><declarationTypes, declarations:{ type, declr | <type> <declr.identifier>}; separator=","><if(globals)>,<endif> <globalTypes, globals:{ type, identifier | <type> <identifier>}; separator=","> ) throws Exception {
    <initCode>
    for( java.util.Iterator it = matchingObjects.iterator(); it.hasNext(); ) {
      Object __itNextElem__ = it.next();
      <innerDeclarations:{ declr | <declr.extractor.extractToClass.name> <declr.identifier> = (<declr.extractor.extractToClass.name>) innerDeclarations[<i0>].<declr.extractor.nativeReadMethod.name>( __itNextElem__ );}; separator="\n">
      <actionCode>
    }
    return ( <resultCode> );
}
>>

consequenceMethod(declarations, declarationTypes, globals, globalTypes, methodName, text) ::= <<
public static void <methodName>(org.drools.spi.KnowledgeHelper drools<if(declarations)>,<endif> <declarationTypes, declarations:{ type, declr | <type> <declr.identifier>, org.drools.FactHandle <declr.identifier>__Handle__}; separator=","><if(globals)>,<endif> <globalTypes, globals:{ type, identifier | <type> <identifier>}; separator=","> ) throws Exception {
    <text>
}
>>