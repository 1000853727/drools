returnValueMethod() ::=<<
public static org.drools.spi.FieldValue @{methodName}(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier} @end{","} @if{localDeclarations != empty && declarations != empty},@end{}
                                                      @foreach{localDeclarationTypes, localDeclarations as type, declr } @{type} @{declr.identifier} @end{","} @if{globals != empty && (localDeclarations != empty || declarations != empty)},@end{}
                                                      @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","} ) throws Exception {
    return org.drools.base.FieldFactory.getFieldValue( @{text} );
}
>>=::

predicateMethod() ::=<<
public static boolean @{methodName}(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier} @end{","} @if{localDeclarations != empty && declarations != empty},@end{}
                                                      @foreach{localDeclarationTypes, localDeclarations as type, declr } @{type} @{declr.identifier} @end{","} @if{globals != empty && (localDeclarations != empty || declarations != empty)},@end{}
                                                      @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","} ) throws Exception {
    return ( @{text} );
}
>>=::

evalMethod() ::=<<
public static boolean @{methodName}(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier} @end{","} @if{globals != empty && declarations != empty},@end{}
                                    @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","} ) throws Exception {
    return ( @{text} );
}
>>=::

accumulateInnerClass() ::=<<
public static class @{className} {

    @foreach{attributesTypes, attributes as type, attr} private @{type} @{attr};
    @end{}    
    
    public @{className}() {
    }

    public void init(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier}@end{","}@if{globals != empty},@end{} 
                     @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","}
                     ) throws Exception {
        @{initCode}
    }
    
    public void accumulate(org.drools.WorkingMemory workingMemory,
                           org.drools.rule.Declaration[] innerDeclarations, 
                           Object object @if{declarations != empty}, @end{}
                           @foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier}@end{","}@if{globals != empty},@end{} 
                           @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","}@if{innerDeclarations != empty},@end{}
                           @foreach{innerDeclarations as declr}@{declr.extractor.extractToClassName} @{declr.identifier}@end{","}
                           ) throws Exception {
        @{actionCode}
    }
    
    public void reverse(org.drools.WorkingMemory workingMemory,
                           org.drools.rule.Declaration[] innerDeclarations, 
                           Object object @if{declarations != empty}, @end{}
                           @foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier}@end{","}@if{globals != empty},@end{} 
                           @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","}@if{innerDeclarations != empty},@end{}
                           @foreach{innerDeclarations as declr}@{declr.extractor.extractToClassName} @{declr.identifier}@end{","}
                           ) throws Exception {
        @{reverseCode}
    }
    
    public Object getResult(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier}@end{","}@if{globals != empty},@end{} 
                            @foreach{globalTypes, globals as type, identifier}@{type} @{identifier} @end{","}
                           ) throws Exception {
        return ( @{resultCode} );
    }
    
    public boolean supportsReverse() {
        return @{supportsReverse};
    }
}
>>=::

consequenceMethod() ::=<<
public static void @{methodName}(org.drools.spi.KnowledgeHelper drools@if{declarations != empty},@end{} @foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier}, org.drools.FactHandle @{declr.identifier}__Handle__ @end{","}@if{globals != empty},@end{} @foreach{globalTypes, globals as type, identifier}  @{type} @{identifier} @end{","} ) throws Exception {
    @{text}
}
>>=::

actionMethod() ::=<<
public static void @{methodName}(@foreach{globalTypes, globals as type, identifier}  @{type} @{identifier} @end{","} ) throws Exception {
    @{text}
}
>>=::