@declare{"returnValueMethod"}
public static org.drools.spi.FieldValue @{methodName}(@foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier} @end{","} @if{localDeclarations != empty && declarations != empty},@end{}
                                                      @foreach{type : localDeclarationTypes, declr : localDeclarations} @{type} @{declr.identifier} @end{","} @if{globals != empty && (localDeclarations != empty || declarations != empty)},@end{}
                                                      @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} @end{","} ) throws Exception {
    return org.drools.base.FieldFactory.getFieldValue( @{text} );
}
@end{}

@declare{"predicateMethod"}
public static boolean @{methodName}(@foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier} @end{","} @if{localDeclarations != empty && declarations != empty},@end{}
                                                      @foreach{type : localDeclarationTypes, declr : localDeclarations } @{type} @{declr.identifier} @end{","} @if{globals != empty && (localDeclarations != empty || declarations != empty)},@end{}
                                                      @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} @end{","} ) throws Exception {
    return ( @{text} );
}
@end{}

@declare{"evalMethod"}
public static boolean @{methodName}(@foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier} @end{","} @if{globals != empty && declarations != empty},@end{}
                                    @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} @end{","} ) throws Exception {
    return ( @{text} );
}
@end{}

@declare{"accumulateInnerClass"}
public static class @{className} implements java.io.Serializable {

    private static final long    serialVersionUID = 400L;

    @foreach{type : attributesTypes, attr : attributes} private @{type} @{attr};
    @end{}    
    
    public @{className}() {
    }

    public void init(@foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier}@end{","}@if{globals != empty && declarations != empty},@end{} 
                     @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} @end{","}
                     ) throws Exception {
        @{initCode}
    }
    
    public void accumulate(org.drools.WorkingMemory workingMemory,
                           org.drools.rule.Declaration[] innerDeclarations, 
                           Object object @if{declarations != empty}, @end{}
                           @foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier}@end{","}@if{globals != empty},@end{}
                           @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} @end{","}@if{innerDeclarations != empty},@end{}
                           @foreach{declr : innerDeclarations}@{declr.extractor.extractToClassName} @{declr.identifier}@end{","}
                           ) throws Exception {
        @{actionCode}
    }
    
    public void reverse(org.drools.WorkingMemory workingMemory,
                           org.drools.rule.Declaration[] innerDeclarations, 
                           Object object @if{declarations != empty}, @end{}
                           @foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier}@end{","}@if{globals != empty},@end{}
                           @foreach{type : globalTypes, identifier : globals} @{type} @{identifier} @end{","}@if{innerDeclarations != empty},@end{}
                           @foreach{declr : innerDeclarations}@{declr.extractor.extractToClassName} @{declr.identifier}@end{","}
                           ) throws Exception {
        @{reverseCode}
    }
    
    public Object getResult(@foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier}@end{","}@if{globals != empty && declarations != empty},@end{}
                            @foreach{type : globalTypes, identifier : globals}@{type} @{identifier} @end{","}
                           ) throws Exception {
        return ( @{resultCode} );
    }
    
    public boolean supportsReverse() {
        return @{supportsReverse};
    }
    
}
@end{}

@declare{"consequenceMethod"}
public static void @{methodName}(org.drools.spi.KnowledgeHelper drools@if{declarations != empty},@end{} @foreach{type : declarationTypes, declr : declarations} @{type} @{declr.identifier}, org.drools.FactHandle @{declr.identifier}__Handle__ @end{","}@if{globals != empty},@end{} @foreach{type : globalTypes, identifier : globals}  @{type} @{identifier} @end{","} ) throws Exception {
    @{text}
}
@end{}

@declare{"actionMethod"}
public static void @{methodName}(org.drools.spi.KnowledgeHelper drools@if{globals != empty},@end{} @foreach{type :globalTypes, identifier : globals}  @{type} @{identifier} @end{","} ) throws Exception {
    @{text}
}
@end{}

@declare{"returnValueEvaluatorMethod"}
public static Object @{methodName}(@foreach{type : globalTypes, identifier : globals}  @{type} @{identifier} @end{","} ) throws Exception {
    @{text}
}
@end{}