returnValueMethod() ::=<<
public static org.drools.spi.FieldValue @{methodName}(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier} @end{","} @if{localDeclarations != empty && declarations != empty},@end{}
                                                      @foreach{localDeclarationTypes, localDeclarations as type, declr } @{type} @{declr.identifier} @end{","} @if{globals != empty && (localDeclarations != empty || declarations != empty)},@end{}
                                                      @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","} ) throws Exception {
    return org.drools.base.FieldFactory.getFieldValue( @{text} );
}
>>=::

predicateMethod() ::=<<
public static boolean @{methodName}(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier} @end{","} @if{localDeclarations != empty && declarations != empty},@end{}
                                                      @foreach{localDeclarationTypes, localDeclarations as type, declr } @{type} @{declr.identifier} @end{","} @if{globals != empty && (localDeclarations != empty || declarations != empty)},@end{}
                                                      @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","} ) throws Exception {
    return ( @{text} );
}
>>=::

evalMethod() ::=<<
public static boolean @{methodName}(@foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier} @end{","} @if{globals != empty && declarations != empty},@end{}
                                    @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","} ) throws Exception {
    return ( @{text} );
}
>>=::

accumulateMethod() ::=<<
public static @{resultType} @{methodName}(org.drools.rule.Declaration[] innerDeclarations, java.util.List matchingObjects@if{declarations != empty}, @end{}
                                          @foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier}@end{","}
                                          @if{globals != empty},@end{} @foreach{globalTypes, globals as type, identifier} @{type} @{identifier} @end{","} ) throws Exception {

    @{initCode}
    for( java.util.Iterator it = matchingObjects.iterator(); it.hasNext(); ) {
      Object __itNextElem__ = it.next();
      @foreach{innerDeclarations as declr} @{declr.extractor.extractToClass.getName()} @{declr.identifier} = (@{declr.extractor.extractToClass.getName()}) innerDeclarations[@{i0}].@{declr.extractor.nativeReadMethod.name}( __itNextElem__ );
      @end{}
      @{actionCode}
    }
    return ( @{resultCode} );
}
>>=::

consequenceMethod() ::=<<
public static void @{methodName}(org.drools.spi.KnowledgeHelper drools@if{declarations != empty},@end{} @foreach{declarationTypes, declarations as type, declr} @{type} @{declr.identifier}, org.drools.FactHandle @{declr.identifier}__Handle__ @end{","}@if{globals != empty},@end{} @foreach{globalTypes, globals as type, identifier}  @{type} @{identifier} @end{","} ) throws Exception {
    @{text}
}
>>=::