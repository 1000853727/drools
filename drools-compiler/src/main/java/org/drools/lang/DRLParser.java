// $ANTLR 3.2 Sep 23, 2009 14:05:07 src/main/resources/org/drools/lang/DRL.g 2010-11-26 12:31:45

	package org.drools.lang;
	
	import java.util.List;
	import java.util.LinkedList;
	import org.drools.compiler.DroolsParserException;
	import org.drools.lang.ParserHelper;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class DRLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "VT_COMPILATION_UNIT", "VT_FUNCTION_IMPORT", "VT_FACT", "VT_CONSTRAINTS", "VT_LABEL", "VT_QUERY_ID", "VT_TYPE_DECLARE_ID", "VT_TYPE_NAME", "VT_RULE_ID", "VT_ENTRYPOINT_ID", "VT_RULE_ATTRIBUTES", "VT_PKG_ATTRIBUTES", "VT_RHS_CHUNK", "VT_CURLY_CHUNK", "VT_SQUARE_CHUNK", "VT_PAREN_CHUNK", "VT_BEHAVIOR", "VT_AND_IMPLICIT", "VT_AND_PREFIX", "VT_OR_PREFIX", "VT_AND_INFIX", "VT_OR_INFIX", "VT_ACCUMULATE_INIT_CLAUSE", "VT_ACCUMULATE_ID_CLAUSE", "VT_FROM_SOURCE", "VT_EXPRESSION_CHAIN", "VT_PATTERN", "VT_FACT_BINDING", "VT_FACT_OR", "VT_BIND_FIELD", "VT_FIELD", "VT_ACCESSOR_PATH", "VT_ACCESSOR_ELEMENT", "VT_DATA_TYPE", "VT_PATTERN_TYPE", "VT_PACKAGE_ID", "VT_IMPORT_ID", "VT_GLOBAL_ID", "VT_FUNCTION_ID", "VT_PARAM_LIST", "VK_DATE_EFFECTIVE", "VK_DATE_EXPIRES", "VK_LOCK_ON_ACTIVE", "VK_NO_LOOP", "VK_AUTO_FOCUS", "VK_ACTIVATION_GROUP", "VK_AGENDA_GROUP", "VK_RULEFLOW_GROUP", "VK_TIMER", "VK_CALENDARS", "VK_DIALECT", "VK_SALIENCE", "VK_ENABLED", "VK_ATTRIBUTES", "VK_RULE", "VK_EXTEND", "VK_IMPLEMENTS", "VK_IMPORT", "VK_PACKAGE", "VK_QUERY", "VK_DECLARE", "VK_FUNCTION", "VK_GLOBAL", "VK_EVAL", "VK_ENTRY_POINT", "VK_NOT", "VK_IN", "VK_OR", "VK_AND", "VK_EXISTS", "VK_FORALL", "VK_FOR", "VK_ACTION", "VK_REVERSE", "VK_RESULT", "VK_OPERATOR", "VK_END", "VK_INIT", "VK_INSTANCEOF", "VK_EXTENDS", "VK_SUPER", "VK_PRIMITIVE_TYPE", "VK_THIS", "VK_VOID", "VK_CLASS", "VK_NEW", "VK_FINAL", "VK_IF", "VK_ELSE", "VK_WHILE", "VK_DO", "VK_CASE", "VK_DEFAULT", "VK_TRY", "VK_CATCH", "VK_FINALLY", "VK_SWITCH", "VK_SYNCHRONIZED", "VK_RETURN", "VK_THROW", "VK_BREAK", "VK_CONTINUE", "VK_ASSERT", "VK_MODIFY", "VK_STATIC", "VK_PUBLIC", "VK_PROTECTED", "VK_PRIVATE", "VK_ABSTRACT", "VK_NATIVE", "VK_TRANSIENT", "VK_VOLATILE", "VK_STRICTFP", "VK_THROWS", "VK_INTERFACE", "VK_ENUM", "SIGNED_DECIMAL", "SIGNED_HEX", "SIGNED_FLOAT", "VT_PROP_KEY", "VT_PROP_VALUE", "SEMICOLON", "ID", "DOT", "DOT_STAR", "STRING", "COLON", "EQUALS_ASSIGN", "WHEN", "COMMA", "BOOL", "LEFT_PAREN", "RIGHT_PAREN", "FROM", "OVER", "TimePeriod", "DECIMAL", "ACCUMULATE", "COLLECT", "DOUBLE_PIPE", "DOUBLE_AMPER", "ARROW", "EQUALS", "GREATER", "GREATER_EQUALS", "LESS", "LESS_EQUALS", "NOT_EQUALS", "LEFT_SQUARE", "RIGHT_SQUARE", "NULL", "PLUS", "MINUS", "HEX", "FLOAT", "THEN", "LEFT_CURLY", "RIGHT_CURLY", "QUESTION", "PIPE", "XOR", "AMPER", "SHIFT_LEFT", "SHIFT_RIGHT_UNSIG", "SHIFT_RIGHT", "STAR", "DIV", "MOD", "INCR", "DECR", "TILDE", "NEGATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "AT", "EOL", "WS", "Exponent", "FloatTypeSuffix", "HexDigit", "IntegerTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "SH_STYLE_SINGLE_LINE_COMMENT", "C_STYLE_SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "IdentifierStart", "IdentifierPart", "MISC"
    };
    public static final int MINUS=156;
    public static final int VK_DIALECT=54;
    public static final int HexDigit=189;
    public static final int OR_ASSIGN=181;
    public static final int MISC=199;
    public static final int VK_QUERY=63;
    public static final int VK_INTERFACE=118;
    public static final int TILDE=174;
    public static final int AND_ASSIGN=180;
    public static final int DOT=127;
    public static final int NOT_EQUALS=151;
    public static final int VT_PACKAGE_ID=39;
    public static final int VK_FINAL=90;
    public static final int VK_RETURN=102;
    public static final int VT_FACT=6;
    public static final int FloatTypeSuffix=188;
    public static final int MINUS_ASSIGN=177;
    public static final int LEFT_PAREN=135;
    public static final int IdentifierPart=198;
    public static final int VT_PROP_KEY=123;
    public static final int IntegerTypeSuffix=190;
    public static final int VT_ACCESSOR_PATH=35;
    public static final int WHEN=132;
    public static final int VT_ENTRYPOINT_ID=13;
    public static final int MOD_ASSIGN=183;
    public static final int VK_SALIENCE=55;
    public static final int WS=186;
    public static final int OVER=138;
    public static final int VK_AND=72;
    public static final int STRING=129;
    public static final int VT_ACCESSOR_ELEMENT=36;
    public static final int LESS_EQUALS=150;
    public static final int VK_THROWS=117;
    public static final int VK_FORALL=74;
    public static final int VT_COMPILATION_UNIT=4;
    public static final int VK_CATCH=98;
    public static final int VK_RESULT=78;
    public static final int VK_VOLATILE=115;
    public static final int EQUALS=146;
    public static final int UnicodeEscape=192;
    public static final int DIV_ASSIGN=179;
    public static final int VT_RULE_ID=12;
    public static final int SIGNED_FLOAT=122;
    public static final int VK_NO_LOOP=47;
    public static final int NULL=154;
    public static final int XOR=164;
    public static final int COLON=130;
    public static final int AMPER=165;
    public static final int MULTI_LINE_COMMENT=196;
    public static final int VT_RULE_ATTRIBUTES=14;
    public static final int TimePeriod=139;
    public static final int SHIFT_LEFT=166;
    public static final int VK_AGENDA_GROUP=50;
    public static final int INCR=172;
    public static final int VK_DATE_EXPIRES=45;
    public static final int VK_THROW=103;
    public static final int ARROW=145;
    public static final int FLOAT=158;
    public static final int VK_ASSERT=106;
    public static final int VK_PUBLIC=109;
    public static final int MOD=171;
    public static final int PLUS_ASSIGN=176;
    public static final int QUESTION=162;
    public static final int VT_OR_PREFIX=23;
    public static final int VK_END=80;
    public static final int DOUBLE_PIPE=143;
    public static final int LESS=149;
    public static final int EscapeSequence=191;
    public static final int VK_EXISTS=73;
    public static final int VT_BIND_FIELD=33;
    public static final int VK_RULE=58;
    public static final int VK_EVAL=67;
    public static final int VK_FOR=75;
    public static final int VT_FACT_BINDING=31;
    public static final int VT_PKG_ATTRIBUTES=15;
    public static final int ID=126;
    public static final int FROM=137;
    public static final int VK_SWITCH=100;
    public static final int VK_PRIMITIVE_TYPE=85;
    public static final int VT_TYPE_NAME=11;
    public static final int RIGHT_CURLY=161;
    public static final int VK_OPERATOR=79;
    public static final int VT_PARAM_LIST=43;
    public static final int BOOL=134;
    public static final int VT_FROM_SOURCE=28;
    public static final int VK_LOCK_ON_ACTIVE=46;
    public static final int VK_TRANSIENT=114;
    public static final int VK_SUPER=84;
    public static final int VK_IN=70;
    public static final int VT_RHS_CHUNK=16;
    public static final int VK_CLASS=88;
    public static final int VT_GLOBAL_ID=41;
    public static final int GREATER_EQUALS=148;
    public static final int VK_RULEFLOW_GROUP=51;
    public static final int VT_CONSTRAINTS=7;
    public static final int EOL=185;
    public static final int VK_INIT=81;
    public static final int VK_ACTIVATION_GROUP=49;
    public static final int VK_EXTENDS=83;
    public static final int OctalEscape=193;
    public static final int VK_ACTION=76;
    public static final int SIGNED_HEX=121;
    public static final int VK_CALENDARS=53;
    public static final int C_STYLE_SINGLE_LINE_COMMENT=195;
    public static final int COMMA=133;
    public static final int VT_PATTERN_TYPE=38;
    public static final int VT_ACCUMULATE_ID_CLAUSE=27;
    public static final int VK_IMPLEMENTS=60;
    public static final int VK_FUNCTION=65;
    public static final int VK_ATTRIBUTES=57;
    public static final int VK_IF=91;
    public static final int VT_EXPRESSION_CHAIN=29;
    public static final int XOR_ASSIGN=182;
    public static final int VT_AND_PREFIX=22;
    public static final int VK_INSTANCEOF=82;
    public static final int VK_NATIVE=113;
    public static final int THEN=159;
    public static final int VK_AUTO_FOCUS=48;
    public static final int PIPE=163;
    public static final int VK_IMPORT=61;
    public static final int MULT_ASSIGN=178;
    public static final int LEFT_SQUARE=152;
    public static final int SH_STYLE_SINGLE_LINE_COMMENT=194;
    public static final int VK_TIMER=52;
    public static final int VT_DATA_TYPE=37;
    public static final int PLUS=155;
    public static final int LEFT_CURLY=160;
    public static final int VK_ABSTRACT=112;
    public static final int AT=184;
    public static final int VK_VOID=87;
    public static final int DOUBLE_AMPER=144;
    public static final int VT_QUERY_ID=9;
    public static final int NEGATION=175;
    public static final int VT_LABEL=8;
    public static final int VT_FIELD=34;
    public static final int VK_REVERSE=77;
    public static final int VK_GLOBAL=66;
    public static final int VT_ACCUMULATE_INIT_CLAUSE=26;
    public static final int VK_ENUM=119;
    public static final int VT_BEHAVIOR=20;
    public static final int VT_SQUARE_CHUNK=18;
    public static final int VT_PAREN_CHUNK=19;
    public static final int VK_ENABLED=56;
    public static final int COLLECT=142;
    public static final int VK_CASE=95;
    public static final int VK_PACKAGE=62;
    public static final int IdentifierStart=197;
    public static final int SEMICOLON=125;
    public static final int VK_THIS=86;
    public static final int VT_AND_IMPLICIT=21;
    public static final int EQUALS_ASSIGN=131;
    public static final int VK_STATIC=108;
    public static final int DIV=170;
    public static final int VK_TRY=97;
    public static final int VK_ELSE=92;
    public static final int HEX=157;
    public static final int RIGHT_SQUARE=153;
    public static final int VK_WHILE=93;
    public static final int VT_FACT_OR=32;
    public static final int VK_NOT=69;
    public static final int DECR=173;
    public static final int VK_FINALLY=99;
    public static final int VK_MODIFY=107;
    public static final int VK_EXTEND=59;
    public static final int VT_CURLY_CHUNK=17;
    public static final int VK_NEW=89;
    public static final int VK_SYNCHRONIZED=101;
    public static final int DECIMAL=140;
    public static final int VT_TYPE_DECLARE_ID=10;
    public static final int VT_PATTERN=30;
    public static final int VK_DATE_EFFECTIVE=44;
    public static final int GREATER=147;
    public static final int Exponent=187;
    public static final int VK_ENTRY_POINT=68;
    public static final int VT_AND_INFIX=24;
    public static final int VK_DO=94;
    public static final int VK_BREAK=104;
    public static final int VT_FUNCTION_IMPORT=5;
    public static final int VK_PRIVATE=111;
    public static final int VT_OR_INFIX=25;
    public static final int VK_CONTINUE=105;
    public static final int DOT_STAR=128;
    public static final int VK_OR=71;
    public static final int VK_DEFAULT=96;
    public static final int ACCUMULATE=141;
    public static final int SIGNED_DECIMAL=120;
    public static final int VT_FUNCTION_ID=42;
    public static final int SHIFT_RIGHT=168;
    public static final int EOF=-1;
    public static final int VT_IMPORT_ID=40;
    public static final int VT_PROP_VALUE=124;
    public static final int STAR=169;
    public static final int RIGHT_PAREN=136;
    public static final int VK_STRICTFP=116;
    public static final int SHIFT_RIGHT_UNSIG=167;
    public static final int VK_DECLARE=64;
    public static final int VK_PROTECTED=110;

    // delegates
    // delegators


        public DRLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public DRLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[398+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return DRLParser.tokenNames; }
    public String getGrammarFileName() { return "src/main/resources/org/drools/lang/DRL.g"; }


        private ParserHelper helper = new ParserHelper( this,
                                                        tokenNames,
                                                        input,
                                                        state );
                                                        
        public ParserHelper getHelper()                           { return helper; }
        public boolean hasErrors()                                { return helper.hasErrors(); }
        public List<DroolsParserException> getErrors()            { return helper.getErrors(); }
        public List<String> getErrorMessages()                    { return helper.getErrorMessages(); }
        public void enableEditorInterface()                       {        helper.enableEditorInterface(); }
        public void disableEditorInterface()                      {        helper.disableEditorInterface(); }
        public LinkedList<DroolsSentence> getEditorInterface()    { return helper.getEditorInterface(); }
        public void reportError(RecognitionException ex)          {        helper.reportError( ex ); }
        /** Overrided this method to not output mesages */
        public void emitErrorMessage(String msg)                  {}



    public static class compilation_unit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilation_unit"
    // src/main/resources/org/drools/lang/DRL.g:216:1: compilation_unit : ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) ;
    public final DRLParser.compilation_unit_return compilation_unit() throws RecognitionException {
        DRLParser.compilation_unit_return retval = new DRLParser.compilation_unit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF5=null;
        DRLParser.package_statement_return package_statement1 = null;

        DRLParser.resync_return resync2 = null;

        DRLParser.statement_return statement3 = null;

        DRLParser.resync_return resync4 = null;


        Object EOF5_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_package_statement=new RewriteRuleSubtreeStream(adaptor,"rule package_statement");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_resync=new RewriteRuleSubtreeStream(adaptor,"rule resync");
        try {
            // src/main/resources/org/drools/lang/DRL.g:217:2: ( ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) )
            // src/main/resources/org/drools/lang/DRL.g:217:4: ( package_statement )? resync ( statement resync )* EOF
            {
            // src/main/resources/org/drools/lang/DRL.g:217:4: ( package_statement )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:217:4: package_statement
                    {
                    pushFollow(FOLLOW_package_statement_in_compilation_unit629);
                    package_statement1=package_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_statement.add(package_statement1.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_resync_in_compilation_unit648);
            resync2=resync();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resync.add(resync2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:219:3: ( statement resync )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))))) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:219:5: statement resync
            	    {
            	    pushFollow(FOLLOW_statement_in_compilation_unit655);
            	    statement3=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement3.getTree());
            	    pushFollow(FOLLOW_resync_in_compilation_unit657);
            	    resync4=resync();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_resync.add(resync4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            EOF5=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF5);



            // AST REWRITE
            // elements: statement, package_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 221:3: -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:221:6: ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:221:28: ( package_statement )?
                if ( stream_package_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_package_statement.nextTree());

                }
                stream_package_statement.reset();
                // src/main/resources/org/drools/lang/DRL.g:221:47: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException e ) {

            		helper.reportError( e );
            	
        }
        catch ( RewriteEmptyStreamException e ) {

            	
        }
        finally {

            	if (helper.isEditorInterfaceEnabled && retval.tree == null) {
            		retval.tree = root_0;
            		root_0 = (Object) adaptor.nil();
            		Object root_1 = (Object) adaptor.nil();
            		root_1 = (Object) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);
            		if (stream_package_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_package_statement.nextTree());
            		}
            		while (stream_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_statement.nextTree());
            		}
            		adaptor.addChild(root_0, root_1);
            		retval.stop = input.LT(-1);
            		retval.tree = (Object) adaptor.rulePostProcessing(root_0);
            		adaptor.setTokenBoundaries(retval.tree, retval.start,
            				retval.stop);
            	}
            	if (helper.isEditorInterfaceEnabled && helper.hasErrors()) {
            		Tree rootNode = (Tree) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), adaptor.nil());
            		for (int i = 0; i < ((Tree)retval.tree).getChildCount(); i++) {
            			Tree childNode = (Tree) ((Tree)retval.tree).getChild(i);
            			if (!(childNode instanceof CommonErrorNode)) {
            				rootNode.addChild(childNode);
            			}
            		}
            		retval.tree = rootNode; 
            	}

        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public static class resync_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resync"
    // src/main/resources/org/drools/lang/DRL.g:264:1: resync : ;
    public final DRLParser.resync_return resync() throws RecognitionException {
        DRLParser.resync_return retval = new DRLParser.resync_return();
        retval.start = input.LT(1);

        Object root_0 = null;


            // Consume any garbled tokens that come before the next statement
            // or the end of the block. The only slight risk here is that the
            // block becomes MORE inclusive than it should but as the script is
            // in error, this is a better course than throwing out the block
            // when the error occurs and screwing up the whole meaning of
            // the rest of the token stream.
            //
            helper.syncToSet();
        try {
            // src/main/resources/org/drools/lang/DRL.g:275:5: ()
            // src/main/resources/org/drools/lang/DRL.g:277:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "resync"

    public static class package_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_statement"
    // src/main/resources/org/drools/lang/DRL.g:282:1: package_statement : package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) ;
    public final DRLParser.package_statement_return package_statement() throws RecognitionException {
        DRLParser.package_statement_return retval = new DRLParser.package_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON8=null;
        DRLParser.package_key_return package_key6 = null;

        DRLParser.packageOrTypeName_return packageOrTypeName7 = null;


        Object SEMICOLON8_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_packageOrTypeName=new RewriteRuleSubtreeStream(adaptor,"rule packageOrTypeName");
         helper.pushParaphrases(DroolsParaphraseTypes.PACKAGE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.PACKAGE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:285:2: ( package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) )
            // src/main/resources/org/drools/lang/DRL.g:285:4: package_key packageOrTypeName ( SEMICOLON )?
            {
            pushFollow(FOLLOW_package_key_in_package_statement758);
            package_key6=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key6.getTree());
            pushFollow(FOLLOW_packageOrTypeName_in_package_statement762);
            packageOrTypeName7=packageOrTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_packageOrTypeName.add(packageOrTypeName7.getTree());
            // src/main/resources/org/drools/lang/DRL.g:286:21: ( SEMICOLON )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SEMICOLON) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:286:21: SEMICOLON
                    {
                    SEMICOLON8=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_statement764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON8);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON8, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: packageOrTypeName, package_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:3: -> ^( package_key packageOrTypeName )
            {
                // src/main/resources/org/drools/lang/DRL.g:288:6: ^( package_key packageOrTypeName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_package_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_packageOrTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_statement"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // src/main/resources/org/drools/lang/DRL.g:296:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );
    public final DRLParser.statement_return statement() throws RecognitionException {
        DRLParser.statement_return retval = new DRLParser.statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_attribute_return rule_attribute9 = null;

        DRLParser.function_import_statement_return function_import_statement10 = null;

        DRLParser.import_statement_return import_statement11 = null;

        DRLParser.global_return global12 = null;

        DRLParser.function_return function13 = null;

        DRLParser.type_declaration_return type_declaration14 = null;

        DRLParser.rule_return rule15 = null;

        DRLParser.query_return query16 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:299:3: ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query )
            int alt4=8;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:299:5: rule_attribute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_attribute_in_statement804);
                    rule_attribute9=rule_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule_attribute9.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:300:4: function_import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_import_statement_in_statement809);
                    function_import_statement10=function_import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_import_statement10.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:301:10: import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_import_statement_in_statement822);
                    import_statement11=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement11.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:302:4: global
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_global_in_statement828);
                    global12=global();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global12.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:303:4: function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_in_statement834);
                    function13=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function13.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:304:4: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_statement839);
                    type_declaration14=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration14.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:305:4: rule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_in_statement844);
                    rule15=rule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule15.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:306:4: query
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_query_in_statement849);
                    query16=query();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query16.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_statement"
    // src/main/resources/org/drools/lang/DRL.g:312:1: import_statement : import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) ;
    public final DRLParser.import_statement_return import_statement() throws RecognitionException {
        DRLParser.import_statement_return retval = new DRLParser.import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON19=null;
        DRLParser.import_key_return import_key17 = null;

        DRLParser.import_name_return import_name18 = null;


        Object SEMICOLON19_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.IMPORT_STATEMENT);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:315:2: ( import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:315:4: import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )?
            {
            pushFollow(FOLLOW_import_key_in_import_statement875);
            import_key17=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(import_key17.getTree());
            pushFollow(FOLLOW_import_name_in_import_statement877);
            import_name18=import_name(DroolsParaphraseTypes.IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name18.getTree());
            // src/main/resources/org/drools/lang/DRL.g:315:57: ( SEMICOLON )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==SEMICOLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:315:57: SEMICOLON
                    {
                    SEMICOLON19=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_import_statement880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON19);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON19, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_key, import_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:3: -> ^( import_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:317:6: ^( import_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_import_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_statement"

    public static class function_import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_import_statement"
    // src/main/resources/org/drools/lang/DRL.g:320:1: function_import_statement : {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) ;
    public final DRLParser.function_import_statement_return function_import_statement() throws RecognitionException {
        DRLParser.function_import_statement_return retval = new DRLParser.function_import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON22=null;
        DRLParser.import_key_return imp = null;

        DRLParser.function_key_return function_key20 = null;

        DRLParser.import_name_return import_name21 = null;


        Object SEMICOLON22_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION_IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION_IMPORT_STATEMENT); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:323:2: ({...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:323:4: {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )?
            {
            if ( !((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_import_statement", "helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION)");
            }
            pushFollow(FOLLOW_import_key_in_function_import_statement920);
            imp=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(imp.getTree());
            pushFollow(FOLLOW_function_key_in_function_import_statement922);
            function_key20=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key20.getTree());
            pushFollow(FOLLOW_import_name_in_function_import_statement934);
            import_name21=import_name(DroolsParaphraseTypes.FUNCTION_IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name21.getTree());
            // src/main/resources/org/drools/lang/DRL.g:324:61: ( SEMICOLON )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==SEMICOLON) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:324:61: SEMICOLON
                    {
                    SEMICOLON22=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_import_statement937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON22);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON22, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_name, function_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:3: -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:326:6: ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FUNCTION_IMPORT, (imp!=null?((Token)imp.start):null)), root_1);

                adaptor.addChild(root_1, stream_function_key.nextTree());
                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_import_statement"

    public static class import_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_name"
    // src/main/resources/org/drools/lang/DRL.g:329:1: import_name[DroolsParaphraseTypes importType] : id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) ;
    public final DRLParser.import_name_return import_name(DroolsParaphraseTypes importType) throws RecognitionException {
        DRLParser.import_name_return retval = new DRLParser.import_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_DOT_STAR=new RewriteRuleTokenStream(adaptor,"token DOT_STAR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:330:2: (id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) )
            // src/main/resources/org/drools/lang/DRL.g:330:4: id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )?
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_import_name971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:330:11: (id+= DOT id+= ID )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DOT) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:330:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_import_name977); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_import_name981); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:330:33: (id+= DOT_STAR )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DOT_STAR) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:330:33: id+= DOT_STAR
                    {
                    id=(Token)match(input,DOT_STAR,FOLLOW_DOT_STAR_in_import_name988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT_STAR.add(id);

                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(importType, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: DOT_STAR, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:3: -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:333:6: ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_IMPORT_ID, "VT_IMPORT_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:333:25: ( DOT_STAR )?
                if ( stream_DOT_STAR.hasNext() ) {
                    adaptor.addChild(root_1, stream_DOT_STAR.nextNode());

                }
                stream_DOT_STAR.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_name"

    public static class global_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global"
    // src/main/resources/org/drools/lang/DRL.g:339:1: global : global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) ;
    public final DRLParser.global_return global() throws RecognitionException {
        DRLParser.global_return retval = new DRLParser.global_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON26=null;
        DRLParser.global_key_return global_key23 = null;

        DRLParser.data_type_return data_type24 = null;

        DRLParser.global_id_return global_id25 = null;


        Object SEMICOLON26_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_global_id=new RewriteRuleSubtreeStream(adaptor,"rule global_id");
        RewriteRuleSubtreeStream stream_global_key=new RewriteRuleSubtreeStream(adaptor,"rule global_key");
         helper.pushParaphrases(DroolsParaphraseTypes.GLOBAL);  if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.GLOBAL); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:342:2: ( global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) )
            // src/main/resources/org/drools/lang/DRL.g:342:4: global_key data_type global_id ( SEMICOLON )?
            {
            pushFollow(FOLLOW_global_key_in_global1031);
            global_key23=global_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_key.add(global_key23.getTree());
            pushFollow(FOLLOW_data_type_in_global1033);
            data_type24=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type24.getTree());
            pushFollow(FOLLOW_global_id_in_global1035);
            global_id25=global_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_id.add(global_id25.getTree());
            // src/main/resources/org/drools/lang/DRL.g:342:35: ( SEMICOLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMICOLON) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:342:35: SEMICOLON
                    {
                    SEMICOLON26=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_global1037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON26, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: global_id, global_key, data_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:3: -> ^( global_key data_type global_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:344:6: ^( global_key data_type global_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_global_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_data_type.nextTree());
                adaptor.addChild(root_1, stream_global_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global"

    public static class global_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_id"
    // src/main/resources/org/drools/lang/DRL.g:347:1: global_id : id= ID -> VT_GLOBAL_ID[$id] ;
    public final DRLParser.global_id_return global_id() throws RecognitionException {
        DRLParser.global_id_return retval = new DRLParser.global_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:348:2: (id= ID -> VT_GLOBAL_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:348:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_global_id1066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.GLOBAL, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:3: -> VT_GLOBAL_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_GLOBAL_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_id"

    public static class function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function"
    // src/main/resources/org/drools/lang/DRL.g:357:1: function : function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) ;
    public final DRLParser.function_return function() throws RecognitionException {
        DRLParser.function_return retval = new DRLParser.function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.function_key_return function_key27 = null;

        DRLParser.data_type_return data_type28 = null;

        DRLParser.function_id_return function_id29 = null;

        DRLParser.parameters_return parameters30 = null;

        DRLParser.curly_chunk_return curly_chunk31 = null;


        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_curly_chunk=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:360:2: ( function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:360:4: function_key ( data_type )? function_id parameters curly_chunk
            {
            pushFollow(FOLLOW_function_key_in_function1101);
            function_key27=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key27.getTree());
            // src/main/resources/org/drools/lang/DRL.g:360:17: ( data_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID) ) {
                int LA10_1 = input.LA(2);

                if ( ((LA10_1>=ID && LA10_1<=DOT)||LA10_1==LEFT_SQUARE) ) {
                    alt10=1;
                }
            }
            switch (alt10) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:360:17: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_function1103);
                    data_type28=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_data_type.add(data_type28.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_id_in_function1106);
            function_id29=function_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_id.add(function_id29.getTree());
            pushFollow(FOLLOW_parameters_in_function1108);
            parameters30=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters.add(parameters30.getTree());
            pushFollow(FOLLOW_curly_chunk_in_function1110);
            curly_chunk31=curly_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk.add(curly_chunk31.getTree());


            // AST REWRITE
            // elements: data_type, function_key, parameters, function_id, curly_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:3: -> ^( function_key ( data_type )? function_id parameters curly_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:361:6: ^( function_key ( data_type )? function_id parameters curly_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_function_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:361:21: ( data_type )?
                if ( stream_data_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_data_type.nextTree());

                }
                stream_data_type.reset();
                adaptor.addChild(root_1, stream_function_id.nextTree());
                adaptor.addChild(root_1, stream_parameters.nextTree());
                adaptor.addChild(root_1, stream_curly_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function"

    public static class function_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_id"
    // src/main/resources/org/drools/lang/DRL.g:364:1: function_id : id= ID -> VT_FUNCTION_ID[$id] ;
    public final DRLParser.function_id_return function_id() throws RecognitionException {
        DRLParser.function_id_return retval = new DRLParser.function_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:365:2: (id= ID -> VT_FUNCTION_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:365:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_function_id1140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.FUNCTION, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:3: -> VT_FUNCTION_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FUNCTION_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_id"

    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // src/main/resources/org/drools/lang/DRL.g:374:1: query : query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) ;
    public final DRLParser.query_return query() throws RecognitionException {
        DRLParser.query_return retval = new DRLParser.query_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON36=null;
        DRLParser.end_key_return end = null;

        DRLParser.query_key_return query_key32 = null;

        DRLParser.query_id_return query_id33 = null;

        DRLParser.parameters_return parameters34 = null;

        DRLParser.normal_lhs_block_return normal_lhs_block35 = null;


        Object SEMICOLON36_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_query_key=new RewriteRuleSubtreeStream(adaptor,"rule query_key");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        RewriteRuleSubtreeStream stream_query_id=new RewriteRuleSubtreeStream(adaptor,"rule query_id");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
         helper.pushParaphrases(DroolsParaphraseTypes.QUERY); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.QUERY); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:377:2: ( query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:377:4: query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )?
            {
            pushFollow(FOLLOW_query_key_in_query1175);
            query_key32=query_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_key.add(query_key32.getTree());
            pushFollow(FOLLOW_query_id_in_query1177);
            query_id33=query_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_id.add(query_id33.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:379:3: ( parameters )?
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:379:3: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_query1185);
                    parameters34=parameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameters.add(parameters34.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_query1194);
            normal_lhs_block35=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block35.getTree());
            pushFollow(FOLLOW_end_key_in_query1201);
            end=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end.getTree());
            // src/main/resources/org/drools/lang/DRL.g:382:15: ( SEMICOLON )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==SEMICOLON) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:382:15: SEMICOLON
                    {
                    SEMICOLON36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_query1203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON36);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON36, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: normal_lhs_block, query_key, parameters, end_key, query_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:3: -> ^( query_key query_id ( parameters )? normal_lhs_block end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:384:6: ^( query_key query_id ( parameters )? normal_lhs_block end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_query_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_query_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:384:27: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();
                adaptor.addChild(root_1, stream_normal_lhs_block.nextTree());
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query"

    public static class query_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_id"
    // src/main/resources/org/drools/lang/DRL.g:387:1: query_id : (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] );
    public final DRLParser.query_id_return query_id() throws RecognitionException {
        DRLParser.query_id_return retval = new DRLParser.query_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:388:2: (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ID) ) {
                alt13=1;
            }
            else if ( (LA13_0==STRING) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:388:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_query_id1238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 390:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:391:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_query_id1254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 393:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_id"

    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // src/main/resources/org/drools/lang/DRL.g:399:1: type_declaration : declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* ( decl_method )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) ;
    public final DRLParser.type_declaration_return type_declaration() throws RecognitionException {
        DRLParser.type_declaration_return retval = new DRLParser.type_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.declare_key_return declare_key37 = null;

        DRLParser.type_declare_id_return type_declare_id38 = null;

        DRLParser.type_decl_extends_return type_decl_extends39 = null;

        DRLParser.type_decl_implements_return type_decl_implements40 = null;

        DRLParser.decl_metadata_return decl_metadata41 = null;

        DRLParser.decl_field_return decl_field42 = null;

        DRLParser.decl_method_return decl_method43 = null;

        DRLParser.end_key_return end_key44 = null;


        RewriteRuleSubtreeStream stream_decl_field=new RewriteRuleSubtreeStream(adaptor,"rule decl_field");
        RewriteRuleSubtreeStream stream_type_decl_implements=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_implements");
        RewriteRuleSubtreeStream stream_decl_method=new RewriteRuleSubtreeStream(adaptor,"rule decl_method");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
        RewriteRuleSubtreeStream stream_type_decl_extends=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_extends");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_type_declare_id=new RewriteRuleSubtreeStream(adaptor,"rule type_declare_id");
         helper.pushParaphrases(DroolsParaphraseTypes.TYPE_DECLARE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.TYPE_DECLARATION); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:402:2: ( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* ( decl_method )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:402:4: declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* ( decl_method )* end_key
            {
            pushFollow(FOLLOW_declare_key_in_type_declaration1287);
            declare_key37=declare_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declare_key.add(declare_key37.getTree());
            pushFollow(FOLLOW_type_declare_id_in_type_declaration1290);
            type_declare_id38=type_declare_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declare_id.add(type_declare_id38.getTree());
            // src/main/resources/org/drools/lang/DRL.g:402:33: ( type_decl_extends )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==ID) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==ID) ) {
                    int LA14_3 = input.LA(3);

                    if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                        alt14=1;
                    }
                }
            }
            switch (alt14) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:402:33: type_decl_extends
                    {
                    pushFollow(FOLLOW_type_decl_extends_in_type_declaration1292);
                    type_decl_extends39=type_decl_extends();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_extends.add(type_decl_extends39.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:402:52: ( type_decl_implements )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==ID) ) {
                int LA15_1 = input.LA(2);

                if ( (LA15_1==ID) ) {
                    int LA15_3 = input.LA(3);

                    if ( (LA15_3==DOT||LA15_3==COMMA||LA15_3==AT) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
                        alt15=1;
                    }
                    else if ( (LA15_3==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) {
                        int LA15_6 = input.LA(4);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {
                            alt15=1;
                        }
                    }
                }
            }
            switch (alt15) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:402:52: type_decl_implements
                    {
                    pushFollow(FOLLOW_type_decl_implements_in_type_declaration1295);
                    type_decl_implements40=type_decl_implements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_implements.add(type_decl_implements40.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:403:3: ( decl_metadata )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==AT) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:403:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_type_declaration1300);
            	    decl_metadata41=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata41.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:404:3: ( decl_field )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==ID) ) {
                    int LA17_1 = input.LA(2);

                    if ( ((LA17_1>=COLON && LA17_1<=EQUALS_ASSIGN)) ) {
                        alt17=1;
                    }


                }


                switch (alt17) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:404:3: decl_field
            	    {
            	    pushFollow(FOLLOW_decl_field_in_type_declaration1305);
            	    decl_field42=decl_field();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_field.add(decl_field42.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:405:3: ( decl_method )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==ID) ) {
                    int LA18_1 = input.LA(2);

                    if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) ) {
                        alt18=1;
                    }


                }


                switch (alt18) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:405:3: decl_method
            	    {
            	    pushFollow(FOLLOW_decl_method_in_type_declaration1310);
            	    decl_method43=decl_method();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_method.add(decl_method43.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_type_declaration1315);
            end_key44=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key44.getTree());


            // AST REWRITE
            // elements: decl_metadata, type_decl_implements, declare_key, type_decl_extends, end_key, decl_field, type_declare_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:3: -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:407:6: ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_declare_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_type_declare_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:407:36: ( type_decl_extends )?
                if ( stream_type_decl_extends.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_extends.nextTree());

                }
                stream_type_decl_extends.reset();
                // src/main/resources/org/drools/lang/DRL.g:407:55: ( type_decl_implements )?
                if ( stream_type_decl_implements.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_implements.nextTree());

                }
                stream_type_decl_implements.reset();
                // src/main/resources/org/drools/lang/DRL.g:407:77: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:407:92: ( decl_field )*
                while ( stream_decl_field.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field.nextTree());

                }
                stream_decl_field.reset();
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_declare_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declare_id"
    // src/main/resources/org/drools/lang/DRL.g:410:1: type_declare_id : id= ID -> VT_TYPE_DECLARE_ID[$id] ;
    public final DRLParser.type_declare_id_return type_declare_id() throws RecognitionException {
        DRLParser.type_declare_id_return retval = new DRLParser.type_declare_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:411:2: (id= ID -> VT_TYPE_DECLARE_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:411:5: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_type_declare_id1353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.TYPE_DECLARE, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:79: -> VT_TYPE_DECLARE_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_DECLARE_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declare_id"

    public static class type_decl_extends_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_extends"
    // src/main/resources/org/drools/lang/DRL.g:418:1: type_decl_extends : extends_key typeName ;
    public final DRLParser.type_decl_extends_return type_decl_extends() throws RecognitionException {
        DRLParser.type_decl_extends_return retval = new DRLParser.type_decl_extends_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.extends_key_return extends_key45 = null;

        DRLParser.typeName_return typeName46 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:419:2: ( extends_key typeName )
            // src/main/resources/org/drools/lang/DRL.g:419:4: extends_key typeName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_extends_key_in_type_decl_extends1376);
            extends_key45=extends_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(extends_key45.getTree(), root_0);
            pushFollow(FOLLOW_typeName_in_type_decl_extends1379);
            typeName46=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName46.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_extends"

    public static class type_decl_implements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_implements"
    // src/main/resources/org/drools/lang/DRL.g:422:1: type_decl_implements : implements_key typeNameList ;
    public final DRLParser.type_decl_implements_return type_decl_implements() throws RecognitionException {
        DRLParser.type_decl_implements_return retval = new DRLParser.type_decl_implements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.implements_key_return implements_key47 = null;

        DRLParser.typeNameList_return typeNameList48 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:423:2: ( implements_key typeNameList )
            // src/main/resources/org/drools/lang/DRL.g:423:4: implements_key typeNameList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_implements_key_in_type_decl_implements1391);
            implements_key47=implements_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(implements_key47.getTree(), root_0);
            pushFollow(FOLLOW_typeNameList_in_type_decl_implements1394);
            typeNameList48=typeNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList48.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_implements"

    public static class decl_metadata_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_metadata"
    // src/main/resources/org/drools/lang/DRL.g:430:1: decl_metadata : annotation ;
    public final DRLParser.decl_metadata_return decl_metadata() throws RecognitionException {
        DRLParser.decl_metadata_return retval = new DRLParser.decl_metadata_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotation_return annotation49 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:431:2: ( annotation )
            // src/main/resources/org/drools/lang/DRL.g:431:4: annotation
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_annotation_in_decl_metadata1409);
            annotation49=annotation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation49.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_metadata"

    public static class decl_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field"
    // src/main/resources/org/drools/lang/DRL.g:443:1: decl_field : ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) ;
    public final DRLParser.decl_field_return decl_field() throws RecognitionException {
        DRLParser.decl_field_return retval = new DRLParser.decl_field_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID50=null;
        Token COLON52=null;
        DRLParser.decl_field_initialization_return decl_field_initialization51 = null;

        DRLParser.data_type_return data_type53 = null;

        DRLParser.decl_metadata_return decl_metadata54 = null;


        Object ID50_tree=null;
        Object COLON52_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_decl_field_initialization=new RewriteRuleSubtreeStream(adaptor,"rule decl_field_initialization");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        try {
            // src/main/resources/org/drools/lang/DRL.g:444:2: ( ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) )
            // src/main/resources/org/drools/lang/DRL.g:444:4: ID ( decl_field_initialization )? COLON data_type ( decl_metadata )*
            {
            ID50=(Token)match(input,ID,FOLLOW_ID_in_decl_field1429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID50);

            if ( state.backtracking==0 ) {
              	helper.emit(ID50, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:445:3: ( decl_field_initialization )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==EQUALS_ASSIGN) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:445:3: decl_field_initialization
                    {
                    pushFollow(FOLLOW_decl_field_initialization_in_decl_field1435);
                    decl_field_initialization51=decl_field_initialization();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decl_field_initialization.add(decl_field_initialization51.getTree());

                    }
                    break;

            }

            COLON52=(Token)match(input,COLON,FOLLOW_COLON_in_decl_field1441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON52);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON52, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_data_type_in_decl_field1447);
            data_type53=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type53.getTree());
            // src/main/resources/org/drools/lang/DRL.g:448:3: ( decl_metadata )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==AT) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:448:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_decl_field1451);
            	    decl_metadata54=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata54.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);



            // AST REWRITE
            // elements: decl_field_initialization, decl_metadata, ID, data_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:3: -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:449:6: ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ID.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:449:11: ( decl_field_initialization )?
                if ( stream_decl_field_initialization.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field_initialization.nextTree());

                }
                stream_decl_field_initialization.reset();
                adaptor.addChild(root_1, stream_data_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:449:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field"

    public static class decl_field_initialization_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field_initialization"
    // src/main/resources/org/drools/lang/DRL.g:452:1: decl_field_initialization : EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) ;
    public final DRLParser.decl_field_initialization_return decl_field_initialization() throws RecognitionException {
        DRLParser.decl_field_initialization_return retval = new DRLParser.decl_field_initialization_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN55=null;
        DRLParser.paren_chunk_return paren_chunk56 = null;


        Object EQUALS_ASSIGN55_tree=null;
        RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:453:2: ( EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:453:4: EQUALS_ASSIGN paren_chunk
            {
            EQUALS_ASSIGN55=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN55);

            if ( state.backtracking==0 ) {
              	helper.emit(EQUALS_ASSIGN55, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_decl_field_initialization1485);
            paren_chunk56=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk56.getTree());


            // AST REWRITE
            // elements: EQUALS_ASSIGN, paren_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:2: -> ^( EQUALS_ASSIGN paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:455:5: ^( EQUALS_ASSIGN paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_EQUALS_ASSIGN.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field_initialization"

    public static class decl_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_method"
    // src/main/resources/org/drools/lang/DRL.g:458:1: decl_method options {backtrack=true; memoize=true; } : ( methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest );
    public final DRLParser.decl_method_return decl_method() throws RecognitionException {
        DRLParser.decl_method_return retval = new DRLParser.decl_method_return();
        retval.start = input.LT(1);
        int decl_method_StartIndex = input.index();
        Object root_0 = null;

        Token ID59=null;
        Token ID61=null;
        DRLParser.methodDeclaration_return methodDeclaration57 = null;

        DRLParser.void_key_return void_key58 = null;

        DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest60 = null;

        DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest62 = null;


        Object ID59_tree=null;
        Object ID61_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:460:2: ( methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest )
            int alt21=3;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==ID) ) {
                int LA21_1 = input.LA(2);

                if ( (((synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||synpred1_DRL()||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))))) ) {
                    alt21=1;
                }
                else if ( ((synpred2_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))) ) {
                    alt21=2;
                }
                else if ( (true) ) {
                    alt21=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:460:4: methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_decl_method1519);
                    methodDeclaration57=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaration57.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:461:4: void_key ID voidMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_void_key_in_decl_method1524);
                    void_key58=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key58.getTree());
                    ID59=(Token)match(input,ID,FOLLOW_ID_in_decl_method1526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID59_tree = (Object)adaptor.create(ID59);
                    adaptor.addChild(root_0, ID59_tree);
                    }
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_decl_method1528);
                    voidMethodDeclaratorRest60=voidMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, voidMethodDeclaratorRest60.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:462:4: ID constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    ID61=(Token)match(input,ID,FOLLOW_ID_in_decl_method1533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID61_tree = (Object)adaptor.create(ID61);
                    adaptor.addChild(root_0, ID61_tree);
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_decl_method1535);
                    constructorDeclaratorRest62=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest62.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, decl_method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decl_method"

    public static class rule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // src/main/resources/org/drools/lang/DRL.g:468:1: rule : rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) ;
    public final DRLParser.rule_return rule() throws RecognitionException {
        DRLParser.rule_return retval = new DRLParser.rule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_key_return rule_key63 = null;

        DRLParser.rule_id_return rule_id64 = null;

        DRLParser.extend_key_return extend_key65 = null;

        DRLParser.rule_id_return rule_id66 = null;

        DRLParser.decl_metadata_return decl_metadata67 = null;

        DRLParser.rule_attributes_return rule_attributes68 = null;

        DRLParser.when_part_return when_part69 = null;

        DRLParser.rhs_chunk_return rhs_chunk70 = null;


        RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
        RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
        RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
        RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
        RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.RULE);
        try {
            // src/main/resources/org/drools/lang/DRL.g:471:2: ( rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:472:3: rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk
            {
            pushFollow(FOLLOW_rule_key_in_rule1562);
            rule_key63=rule_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_key.add(rule_key63.getTree());
            pushFollow(FOLLOW_rule_id_in_rule1580);
            rule_id64=rule_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_id.add(rule_id64.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:475:3: ( extend_key rule_id )?
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:475:4: extend_key rule_id
                    {
                    pushFollow(FOLLOW_extend_key_in_rule1589);
                    extend_key65=extend_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extend_key.add(extend_key65.getTree());
                    pushFollow(FOLLOW_rule_id_in_rule1591);
                    rule_id66=rule_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_id.add(rule_id66.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:475:25: ( decl_metadata )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==AT) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:475:25: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_rule1595);
            	    decl_metadata67=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata67.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:475:40: ( rule_attributes )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:475:40: rule_attributes
                    {
                    pushFollow(FOLLOW_rule_attributes_in_rule1598);
                    rule_attributes68=rule_attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_attributes.add(rule_attributes68.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:475:57: ( when_part )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==WHEN) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:475:57: when_part
                    {
                    pushFollow(FOLLOW_when_part_in_rule1601);
                    when_part69=when_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_when_part.add(when_part69.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rhs_chunk_in_rule1604);
            rhs_chunk70=rhs_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk.add(rhs_chunk70.getTree());


            // AST REWRITE
            // elements: rule_id, extend_key, rule_key, rule_attributes, rule_id, when_part, decl_metadata, rhs_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:3: -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:476:6: ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rule_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_rule_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:476:25: ( ^( extend_key rule_id ) )?
                if ( stream_extend_key.hasNext()||stream_rule_id.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:476:25: ^( extend_key rule_id )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_extend_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_rule_id.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_extend_key.reset();
                stream_rule_id.reset();
                // src/main/resources/org/drools/lang/DRL.g:476:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:476:63: ( rule_attributes )?
                if ( stream_rule_attributes.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attributes.nextTree());

                }
                stream_rule_attributes.reset();
                // src/main/resources/org/drools/lang/DRL.g:476:80: ( when_part )?
                if ( stream_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_when_part.nextTree());

                }
                stream_when_part.reset();
                adaptor.addChild(root_1, stream_rhs_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(6) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			input.LA(5) == MINUS && input.LA(6) == ID && 
            			helper.validateLT(1, DroolsSoftKeywords.LOCK) && helper.validateLT(3, DroolsSoftKeywords.ON) &&
            			helper.validateLT(5, DroolsSoftKeywords.ACTIVE)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(4), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(5), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(4) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			(	(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.NO) && helper.validateLT(3, DroolsSoftKeywords.LOOP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AUTO) && helper.validateLT(3, DroolsSoftKeywords.FOCUS)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.RULEFLOW) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AGENDA) && helper.validateLT(3, DroolsSoftKeywords.GROUP))	)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(2) == EOF && input.LA(1) == ID && 
            				(helper.validateLT(1, DroolsSoftKeywords.DIALECT) || helper.validateLT(1, DroolsSoftKeywords.ENABLED) ||
            				 helper.validateLT(1, DroolsSoftKeywords.SALIENCE) || helper.validateLT(1, DroolsSoftKeywords.DURATION) ||
            				 helper.validateLT(1, DroolsSoftKeywords.TIMER))){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "when_part"
    // src/main/resources/org/drools/lang/DRL.g:522:1: when_part : WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block ;
    public final DRLParser.when_part_return when_part() throws RecognitionException {
        DRLParser.when_part_return retval = new DRLParser.when_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHEN71=null;
        Token COLON72=null;
        DRLParser.normal_lhs_block_return normal_lhs_block73 = null;


        Object WHEN71_tree=null;
        Object COLON72_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        try {
            // src/main/resources/org/drools/lang/DRL.g:523:2: ( WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block )
            // src/main/resources/org/drools/lang/DRL.g:523:5: WHEN ( COLON )? normal_lhs_block
            {
            WHEN71=(Token)match(input,WHEN,FOLLOW_WHEN_in_when_part1648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN71);

            if ( state.backtracking==0 ) {
              	helper.emit(WHEN71, DroolsEditorType.KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:524:3: ( COLON )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==COLON) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:524:3: COLON
                    {
                    COLON72=(Token)match(input,COLON,FOLLOW_COLON_in_when_part1654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON72);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COLON72, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_when_part1664);
            normal_lhs_block73=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block73.getTree());


            // AST REWRITE
            // elements: WHEN, normal_lhs_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:2: -> WHEN normal_lhs_block
            {
                adaptor.addChild(root_0, stream_WHEN.nextNode());
                adaptor.addChild(root_0, stream_normal_lhs_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "when_part"

    public static class rule_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_id"
    // src/main/resources/org/drools/lang/DRL.g:530:1: rule_id : (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] );
    public final DRLParser.rule_id_return rule_id() throws RecognitionException {
        DRLParser.rule_id_return retval = new DRLParser.rule_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:531:2: (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ID) ) {
                alt27=1;
            }
            else if ( (LA27_0==STRING) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:531:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_rule_id1685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 533:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:534:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_rule_id1701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 536:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_id"

    public static class rule_attributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attributes"
    // src/main/resources/org/drools/lang/DRL.g:539:1: rule_attributes : ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) ;
    public final DRLParser.rule_attributes_return rule_attributes() throws RecognitionException {
        DRLParser.rule_attributes_return retval = new DRLParser.rule_attributes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON75=null;
        Token COMMA77=null;
        DRLParser.rule_attribute_return attr = null;

        DRLParser.attributes_key_return attributes_key74 = null;

        DRLParser.rule_attribute_return rule_attribute76 = null;


        Object COLON75_tree=null;
        Object COMMA77_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
        RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
        try {
            // src/main/resources/org/drools/lang/DRL.g:540:2: ( ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:540:4: ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )*
            {
            // src/main/resources/org/drools/lang/DRL.g:540:4: ( attributes_key COLON )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
                int LA28_1 = input.LA(2);

                if ( (LA28_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
                    alt28=1;
                }
            }
            switch (alt28) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:540:6: attributes_key COLON
                    {
                    pushFollow(FOLLOW_attributes_key_in_rule_attributes1722);
                    attributes_key74=attributes_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attributes_key.add(attributes_key74.getTree());
                    COLON75=(Token)match(input,COLON,FOLLOW_COLON_in_rule_attributes1724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON75);

                    if ( state.backtracking==0 ) {
                      	helper.emit(COLON75, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_rule_attribute_in_rule_attributes1734);
            rule_attribute76=rule_attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_attribute.add(rule_attribute76.getTree());
            // src/main/resources/org/drools/lang/DRL.g:541:18: ( ( COMMA )? attr= rule_attribute )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==ID||LA30_0==COMMA) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:541:20: ( COMMA )? attr= rule_attribute
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:541:20: ( COMMA )?
            	    int alt29=2;
            	    int LA29_0 = input.LA(1);

            	    if ( (LA29_0==COMMA) ) {
            	        alt29=1;
            	    }
            	    switch (alt29) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:541:20: COMMA
            	            {
            	            COMMA77=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1738); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA77);


            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA77, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1745);
            	    attr=rule_attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rule_attribute.add(attr.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);



            // AST REWRITE
            // elements: attributes_key, rule_attribute
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 542:3: -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:542:6: ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_RULE_ATTRIBUTES, "VT_RULE_ATTRIBUTES"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:542:27: ( attributes_key )?
                if ( stream_attributes_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_attributes_key.nextTree());

                }
                stream_attributes_key.reset();
                if ( !(stream_rule_attribute.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rule_attribute.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attribute.nextTree());

                }
                stream_rule_attribute.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_attributes"

    public static class rule_attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attribute"
    // src/main/resources/org/drools/lang/DRL.g:545:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );
    public final DRLParser.rule_attribute_return rule_attribute() throws RecognitionException {
        DRLParser.rule_attribute_return retval = new DRLParser.rule_attribute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_return salience78 = null;

        DRLParser.no_loop_return no_loop79 = null;

        DRLParser.agenda_group_return agenda_group80 = null;

        DRLParser.timer_return timer81 = null;

        DRLParser.activation_group_return activation_group82 = null;

        DRLParser.auto_focus_return auto_focus83 = null;

        DRLParser.date_effective_return date_effective84 = null;

        DRLParser.date_expires_return date_expires85 = null;

        DRLParser.enabled_return enabled86 = null;

        DRLParser.ruleflow_group_return ruleflow_group87 = null;

        DRLParser.lock_on_active_return lock_on_active88 = null;

        DRLParser.dialect_return dialect89 = null;

        DRLParser.calendars_return calendars90 = null;



         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE_ATTRIBUTE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:548:2: ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars )
            int alt31=13;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:548:4: salience
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_salience_in_rule_attribute1784);
                    salience78=salience();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, salience78.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:549:4: no_loop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_no_loop_in_rule_attribute1790);
                    no_loop79=no_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_loop79.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:550:4: agenda_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_agenda_group_in_rule_attribute1795);
                    agenda_group80=agenda_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, agenda_group80.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:551:4: timer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_timer_in_rule_attribute1802);
                    timer81=timer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timer81.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:552:4: activation_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_activation_group_in_rule_attribute1809);
                    activation_group82=activation_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, activation_group82.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:553:4: auto_focus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_auto_focus_in_rule_attribute1815);
                    auto_focus83=auto_focus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, auto_focus83.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:554:4: date_effective
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_effective_in_rule_attribute1821);
                    date_effective84=date_effective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_effective84.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:555:4: date_expires
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_expires_in_rule_attribute1827);
                    date_expires85=date_expires();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_expires85.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:556:4: enabled
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enabled_in_rule_attribute1833);
                    enabled86=enabled();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enabled86.getTree());

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:557:4: ruleflow_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1839);
                    ruleflow_group87=ruleflow_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ruleflow_group87.getTree());

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:558:4: lock_on_active
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_on_active_in_rule_attribute1845);
                    lock_on_active88=lock_on_active();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_on_active88.getTree());

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:559:4: dialect
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dialect_in_rule_attribute1850);
                    dialect89=dialect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dialect89.getTree());

                    }
                    break;
                case 13 :
                    // src/main/resources/org/drools/lang/DRL.g:560:6: calendars
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_calendars_in_rule_attribute1858);
                    calendars90=calendars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, calendars90.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; if (!(retval.tree instanceof CommonErrorNode)) helper.emit(Location.LOCATION_RULE_HEADER); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(2) == EOF && input.LA(1) == ID){
            			helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule_attribute"

    public static class date_effective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective"
    // src/main/resources/org/drools/lang/DRL.g:570:1: date_effective : date_effective_key STRING ;
    public final DRLParser.date_effective_return date_effective() throws RecognitionException {
        DRLParser.date_effective_return retval = new DRLParser.date_effective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING92=null;
        DRLParser.date_effective_key_return date_effective_key91 = null;


        Object STRING92_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:571:2: ( date_effective_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:571:4: date_effective_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_effective_key_in_date_effective1872);
            date_effective_key91=date_effective_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_effective_key91.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING92=(Token)match(input,STRING,FOLLOW_STRING_in_date_effective1877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING92_tree = (Object)adaptor.create(STRING92);
            adaptor.addChild(root_0, STRING92_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING92, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective"

    public static class date_expires_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires"
    // src/main/resources/org/drools/lang/DRL.g:575:1: date_expires : date_expires_key STRING ;
    public final DRLParser.date_expires_return date_expires() throws RecognitionException {
        DRLParser.date_expires_return retval = new DRLParser.date_expires_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING94=null;
        DRLParser.date_expires_key_return date_expires_key93 = null;


        Object STRING94_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:576:2: ( date_expires_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:576:4: date_expires_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_expires_key_in_date_expires1891);
            date_expires_key93=date_expires_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_expires_key93.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING94=(Token)match(input,STRING,FOLLOW_STRING_in_date_expires1896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING94_tree = (Object)adaptor.create(STRING94);
            adaptor.addChild(root_0, STRING94_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING94, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires"

    public static class enabled_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled"
    // src/main/resources/org/drools/lang/DRL.g:580:1: enabled : enabled_key ( BOOL | paren_chunk ) ;
    public final DRLParser.enabled_return enabled() throws RecognitionException {
        DRLParser.enabled_return retval = new DRLParser.enabled_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL96=null;
        DRLParser.enabled_key_return enabled_key95 = null;

        DRLParser.paren_chunk_return paren_chunk97 = null;


        Object BOOL96_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:581:2: ( enabled_key ( BOOL | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:581:4: enabled_key ( BOOL | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enabled_key_in_enabled1911);
            enabled_key95=enabled_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(enabled_key95.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:582:6: ( BOOL | paren_chunk )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BOOL) ) {
                alt32=1;
            }
            else if ( (LA32_0==LEFT_PAREN) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:582:8: BOOL
                    {
                    BOOL96=(Token)match(input,BOOL,FOLLOW_BOOL_in_enabled1924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL96_tree = (Object)adaptor.create(BOOL96);
                    adaptor.addChild(root_0, BOOL96_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL96, DroolsEditorType.BOOLEAN_CONST );	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:583:8: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_enabled1935);
                    paren_chunk97=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk97.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled"

    public static class salience_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience"
    // src/main/resources/org/drools/lang/DRL.g:587:1: salience : salience_key ( signed_decimal | paren_chunk ) ;
    public final DRLParser.salience_return salience() throws RecognitionException {
        DRLParser.salience_return retval = new DRLParser.salience_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_key_return salience_key98 = null;

        DRLParser.signed_decimal_return signed_decimal99 = null;

        DRLParser.paren_chunk_return paren_chunk100 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:588:2: ( salience_key ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:588:4: salience_key ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_salience_key_in_salience1955);
            salience_key98=salience_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(salience_key98.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:589:3: ( signed_decimal | paren_chunk )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==DECIMAL||(LA33_0>=PLUS && LA33_0<=MINUS)) ) {
                alt33=1;
            }
            else if ( (LA33_0==LEFT_PAREN) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:589:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_salience1964);
                    signed_decimal99=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal99.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:590:5: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_salience1971);
                    paren_chunk100=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk100.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience"

    public static class no_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop"
    // src/main/resources/org/drools/lang/DRL.g:594:1: no_loop : no_loop_key ( BOOL )? ;
    public final DRLParser.no_loop_return no_loop() throws RecognitionException {
        DRLParser.no_loop_return retval = new DRLParser.no_loop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL102=null;
        DRLParser.no_loop_key_return no_loop_key101 = null;


        Object BOOL102_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:595:2: ( no_loop_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:595:4: no_loop_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_no_loop_key_in_no_loop1986);
            no_loop_key101=no_loop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(no_loop_key101.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:595:73: ( BOOL )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BOOL) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:595:73: BOOL
                    {
                    BOOL102=(Token)match(input,BOOL,FOLLOW_BOOL_in_no_loop1991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL102_tree = (Object)adaptor.create(BOOL102);
                    adaptor.addChild(root_0, BOOL102_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL102, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop"

    public static class auto_focus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus"
    // src/main/resources/org/drools/lang/DRL.g:599:1: auto_focus : auto_focus_key ( BOOL )? ;
    public final DRLParser.auto_focus_return auto_focus() throws RecognitionException {
        DRLParser.auto_focus_return retval = new DRLParser.auto_focus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL104=null;
        DRLParser.auto_focus_key_return auto_focus_key103 = null;


        Object BOOL104_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:600:2: ( auto_focus_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:600:4: auto_focus_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_auto_focus_key_in_auto_focus2006);
            auto_focus_key103=auto_focus_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(auto_focus_key103.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:600:76: ( BOOL )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==BOOL) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:600:76: BOOL
                    {
                    BOOL104=(Token)match(input,BOOL,FOLLOW_BOOL_in_auto_focus2011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL104_tree = (Object)adaptor.create(BOOL104);
                    adaptor.addChild(root_0, BOOL104_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL104, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus"

    public static class activation_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group"
    // src/main/resources/org/drools/lang/DRL.g:604:1: activation_group : activation_group_key STRING ;
    public final DRLParser.activation_group_return activation_group() throws RecognitionException {
        DRLParser.activation_group_return retval = new DRLParser.activation_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING106=null;
        DRLParser.activation_group_key_return activation_group_key105 = null;


        Object STRING106_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:605:2: ( activation_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:605:4: activation_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_activation_group_key_in_activation_group2028);
            activation_group_key105=activation_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(activation_group_key105.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING106=(Token)match(input,STRING,FOLLOW_STRING_in_activation_group2033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING106_tree = (Object)adaptor.create(STRING106);
            adaptor.addChild(root_0, STRING106_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING106, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group"

    public static class ruleflow_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group"
    // src/main/resources/org/drools/lang/DRL.g:609:1: ruleflow_group : ruleflow_group_key STRING ;
    public final DRLParser.ruleflow_group_return ruleflow_group() throws RecognitionException {
        DRLParser.ruleflow_group_return retval = new DRLParser.ruleflow_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING108=null;
        DRLParser.ruleflow_group_key_return ruleflow_group_key107 = null;


        Object STRING108_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:610:2: ( ruleflow_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:610:4: ruleflow_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ruleflow_group_key_in_ruleflow_group2047);
            ruleflow_group_key107=ruleflow_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(ruleflow_group_key107.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING108=(Token)match(input,STRING,FOLLOW_STRING_in_ruleflow_group2052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING108_tree = (Object)adaptor.create(STRING108);
            adaptor.addChild(root_0, STRING108_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING108, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group"

    public static class agenda_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group"
    // src/main/resources/org/drools/lang/DRL.g:614:1: agenda_group : agenda_group_key STRING ;
    public final DRLParser.agenda_group_return agenda_group() throws RecognitionException {
        DRLParser.agenda_group_return retval = new DRLParser.agenda_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING110=null;
        DRLParser.agenda_group_key_return agenda_group_key109 = null;


        Object STRING110_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:615:2: ( agenda_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:615:4: agenda_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_agenda_group_key_in_agenda_group2066);
            agenda_group_key109=agenda_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(agenda_group_key109.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING110=(Token)match(input,STRING,FOLLOW_STRING_in_agenda_group2071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING110_tree = (Object)adaptor.create(STRING110);
            adaptor.addChild(root_0, STRING110_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING110, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group"

    public static class timer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer"
    // src/main/resources/org/drools/lang/DRL.g:619:1: timer : ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) ;
    public final DRLParser.timer_return timer() throws RecognitionException {
        DRLParser.timer_return retval = new DRLParser.timer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.duration_key_return duration_key111 = null;

        DRLParser.timer_key_return timer_key112 = null;

        DRLParser.signed_decimal_return signed_decimal113 = null;

        DRLParser.paren_chunk_return paren_chunk114 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:620:2: ( ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:620:4: ( duration_key | timer_key ) ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:620:4: ( duration_key | timer_key )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
                int LA36_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                    alt36=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:620:5: duration_key
                    {
                    pushFollow(FOLLOW_duration_key_in_timer2086);
                    duration_key111=duration_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(duration_key111.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:620:19: timer_key
                    {
                    pushFollow(FOLLOW_timer_key_in_timer2089);
                    timer_key112=timer_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(timer_key112.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:621:3: ( signed_decimal | paren_chunk )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==DECIMAL||(LA37_0>=PLUS && LA37_0<=MINUS)) ) {
                alt37=1;
            }
            else if ( (LA37_0==LEFT_PAREN) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:621:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_timer2100);
                    signed_decimal113=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal113.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:622:9: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_timer2111);
                    paren_chunk114=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk114.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer"

    public static class calendars_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars"
    // src/main/resources/org/drools/lang/DRL.g:626:1: calendars : calendars_key string_list ;
    public final DRLParser.calendars_return calendars() throws RecognitionException {
        DRLParser.calendars_return retval = new DRLParser.calendars_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.calendars_key_return calendars_key115 = null;

        DRLParser.string_list_return string_list116 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:627:2: ( calendars_key string_list )
            // src/main/resources/org/drools/lang/DRL.g:627:4: calendars_key string_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_calendars_key_in_calendars2132);
            calendars_key115=calendars_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(calendars_key115.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            pushFollow(FOLLOW_string_list_in_calendars2137);
            string_list116=string_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_list116.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars"

    public static class dialect_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect"
    // src/main/resources/org/drools/lang/DRL.g:630:1: dialect : dialect_key STRING ;
    public final DRLParser.dialect_return dialect() throws RecognitionException {
        DRLParser.dialect_return retval = new DRLParser.dialect_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING118=null;
        DRLParser.dialect_key_return dialect_key117 = null;


        Object STRING118_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:631:2: ( dialect_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:631:4: dialect_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_dialect_key_in_dialect2148);
            dialect_key117=dialect_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(dialect_key117.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING118=(Token)match(input,STRING,FOLLOW_STRING_in_dialect2153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING118_tree = (Object)adaptor.create(STRING118);
            adaptor.addChild(root_0, STRING118_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING118, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect"

    public static class lock_on_active_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active"
    // src/main/resources/org/drools/lang/DRL.g:635:1: lock_on_active : lock_on_active_key ( BOOL )? ;
    public final DRLParser.lock_on_active_return lock_on_active() throws RecognitionException {
        DRLParser.lock_on_active_return retval = new DRLParser.lock_on_active_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL120=null;
        DRLParser.lock_on_active_key_return lock_on_active_key119 = null;


        Object BOOL120_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:636:2: ( lock_on_active_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:636:4: lock_on_active_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lock_on_active_key_in_lock_on_active2171);
            lock_on_active_key119=lock_on_active_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(lock_on_active_key119.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:636:80: ( BOOL )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==BOOL) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:636:80: BOOL
                    {
                    BOOL120=(Token)match(input,BOOL,FOLLOW_BOOL_in_lock_on_active2176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL120_tree = (Object)adaptor.create(BOOL120);
                    adaptor.addChild(root_0, BOOL120_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL120, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active"

    public static class normal_lhs_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normal_lhs_block"
    // src/main/resources/org/drools/lang/DRL.g:643:1: normal_lhs_block : ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) ;
    public final DRLParser.normal_lhs_block_return normal_lhs_block() throws RecognitionException {
        DRLParser.normal_lhs_block_return retval = new DRLParser.normal_lhs_block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_return lhs121 = null;


        RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs");
        try {
            // src/main/resources/org/drools/lang/DRL.g:644:2: ( ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) )
            // src/main/resources/org/drools/lang/DRL.g:644:4: ( lhs )*
            {
            // src/main/resources/org/drools/lang/DRL.g:644:4: ( lhs )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==ID) ) {
                    int LA39_1 = input.LA(2);

                    if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) ) {
                        alt39=1;
                    }


                }
                else if ( (LA39_0==LEFT_PAREN) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:644:4: lhs
            	    {
            	    pushFollow(FOLLOW_lhs_in_normal_lhs_block2194);
            	    lhs121=lhs();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_lhs.add(lhs121.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);



            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:2: -> ^( VT_AND_IMPLICIT ( lhs )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:645:5: ^( VT_AND_IMPLICIT ( lhs )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_IMPLICIT, "VT_AND_IMPLICIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:645:23: ( lhs )*
                while ( stream_lhs.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs.nextTree());

                }
                stream_lhs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normal_lhs_block"

    public static class lhs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs"
    // src/main/resources/org/drools/lang/DRL.g:648:1: lhs : lhs_or ;
    public final DRLParser.lhs_return lhs() throws RecognitionException {
        DRLParser.lhs_return retval = new DRLParser.lhs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_or_return lhs_or122 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:648:5: ( lhs_or )
            // src/main/resources/org/drools/lang/DRL.g:648:7: lhs_or
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_or_in_lhs2215);
            lhs_or122=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or122.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs"

    public static class lhs_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_or"
    // src/main/resources/org/drools/lang/DRL.g:651:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );
    public final DRLParser.lhs_or_return lhs_or() throws RecognitionException {
        DRLParser.lhs_or_return retval = new DRLParser.lhs_or_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN123=null;
        Token RIGHT_PAREN125=null;
        DRLParser.or_key_return or = null;

        DRLParser.or_key_return value = null;

        DRLParser.lhs_and_return lhs_and124 = null;

        DRLParser.lhs_and_return lhs_and126 = null;

        DRLParser.lhs_and_return lhs_and127 = null;


        Object LEFT_PAREN123_tree=null;
        Object RIGHT_PAREN125_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_lhs_and=new RewriteRuleSubtreeStream(adaptor,"rule lhs_and");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:654:3: ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==LEFT_PAREN) ) {
                int LA42_1 = input.LA(2);

                if ( (synpred3_DRL()) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA42_0==ID) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:654:5: ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN
                    {
                    LEFT_PAREN123=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or2239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN123);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN123, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_key_in_lhs_or2249);
                    or=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:658:4: ( lhs_and )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ID||LA40_0==LEFT_PAREN) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:658:4: lhs_and
                    	    {
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2257);
                    	    lhs_and124=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and124.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);

                    RIGHT_PAREN125=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or2263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN125);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN125, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: RIGHT_PAREN, lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 660:3: -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:660:6: ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_PREFIX, (or!=null?((Token)or.start):null)), root_1);

                        if ( !(stream_lhs_and.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_and.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_and.nextTree());

                        }
                        stream_lhs_and.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:661:4: ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:661:4: ( lhs_and -> lhs_and )
                    // src/main/resources/org/drools/lang/DRL.g:661:5: lhs_and
                    {
                    pushFollow(FOLLOW_lhs_and_in_lhs_or2286);
                    lhs_and126=lhs_and();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and126.getTree());


                    // AST REWRITE
                    // elements: lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 661:13: -> lhs_and
                    {
                        adaptor.addChild(root_0, stream_lhs_and.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:662:3: ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==ID) ) {
                            int LA41_1 = input.LA(2);

                            if ( ((synpred4_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) ) {
                                alt41=1;
                            }


                        }


                        switch (alt41) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:662:5: ( or_key )=> (value= or_key ) lhs_and
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:662:16: (value= or_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:662:17: value= or_key
                    	    {
                    	    pushFollow(FOLLOW_or_key_in_lhs_or2306);
                    	    value=or_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      orToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2318);
                    	    lhs_and127=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and127.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_and, lhs_or
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 665:3: -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:665:6: ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_INFIX, orToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_and.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_or"

    public static class lhs_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_and"
    // src/main/resources/org/drools/lang/DRL.g:668:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );
    public final DRLParser.lhs_and_return lhs_and() throws RecognitionException {
        DRLParser.lhs_and_return retval = new DRLParser.lhs_and_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN128=null;
        Token RIGHT_PAREN130=null;
        DRLParser.and_key_return and = null;

        DRLParser.and_key_return value = null;

        DRLParser.lhs_unary_return lhs_unary129 = null;

        DRLParser.lhs_unary_return lhs_unary131 = null;

        DRLParser.lhs_unary_return lhs_unary132 = null;


        Object LEFT_PAREN128_tree=null;
        Object RIGHT_PAREN130_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
        RewriteRuleSubtreeStream stream_lhs_unary=new RewriteRuleSubtreeStream(adaptor,"rule lhs_unary");

        	Token andToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:671:3: ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==LEFT_PAREN) ) {
                int LA45_1 = input.LA(2);

                if ( (synpred5_DRL()) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==ID) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:671:5: ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN
                    {
                    LEFT_PAREN128=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and2359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN128);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN128, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_and_key_in_lhs_and2369);
                    and=and_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_and_key.add(and.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:675:4: ( lhs_unary )+
                    int cnt43=0;
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==ID||LA43_0==LEFT_PAREN) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:675:4: lhs_unary
                    	    {
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2377);
                    	    lhs_unary129=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary129.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt43 >= 1 ) break loop43;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(43, input);
                                throw eee;
                        }
                        cnt43++;
                    } while (true);

                    RIGHT_PAREN130=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and2383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN130);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN130, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: RIGHT_PAREN, lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 677:3: -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:677:6: ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_PREFIX, (and!=null?((Token)and.start):null)), root_1);

                        if ( !(stream_lhs_unary.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_unary.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                        }
                        stream_lhs_unary.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:678:4: ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:678:4: ( lhs_unary -> lhs_unary )
                    // src/main/resources/org/drools/lang/DRL.g:678:5: lhs_unary
                    {
                    pushFollow(FOLLOW_lhs_unary_in_lhs_and2407);
                    lhs_unary131=lhs_unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary131.getTree());


                    // AST REWRITE
                    // elements: lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 678:15: -> lhs_unary
                    {
                        adaptor.addChild(root_0, stream_lhs_unary.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:679:3: ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ID) ) {
                            int LA44_2 = input.LA(2);

                            if ( ((synpred6_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.AND))))) ) {
                                alt44=1;
                            }


                        }


                        switch (alt44) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:679:5: ( and_key )=> (value= and_key ) lhs_unary
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:679:17: (value= and_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:679:18: value= and_key
                    	    {
                    	    pushFollow(FOLLOW_and_key_in_lhs_and2427);
                    	    value=and_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_and_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      andToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2439);
                    	    lhs_unary132=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary132.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_unary, lhs_and
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 682:3: -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:682:6: ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_INFIX, andToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_and"

    public static class lhs_unary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_unary"
    // src/main/resources/org/drools/lang/DRL.g:685:1: lhs_unary : ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )? ;
    public final DRLParser.lhs_unary_return lhs_unary() throws RecognitionException {
        DRLParser.lhs_unary_return retval = new DRLParser.lhs_unary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN139=null;
        Token RIGHT_PAREN141=null;
        Token SEMICOLON143=null;
        DRLParser.lhs_exist_return lhs_exist133 = null;

        DRLParser.lhs_not_binding_return lhs_not_binding134 = null;

        DRLParser.lhs_not_return lhs_not135 = null;

        DRLParser.lhs_eval_return lhs_eval136 = null;

        DRLParser.lhs_forall_return lhs_forall137 = null;

        DRLParser.lhs_for_return lhs_for138 = null;

        DRLParser.lhs_or_return lhs_or140 = null;

        DRLParser.pattern_source_return pattern_source142 = null;


        Object LEFT_PAREN139_tree=null;
        Object RIGHT_PAREN141_tree=null;
        Object SEMICOLON143_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:686:2: ( ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )? )
            // src/main/resources/org/drools/lang/DRL.g:686:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:686:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )
            int alt46=8;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:686:6: lhs_exist
                    {
                    pushFollow(FOLLOW_lhs_exist_in_lhs_unary2470);
                    lhs_exist133=lhs_exist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_exist133.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:687:4: {...}? => lhs_not_binding
                    {
                    if ( !((helper.validateNotWithBinding())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "lhs_unary", "helper.validateNotWithBinding()");
                    }
                    pushFollow(FOLLOW_lhs_not_binding_in_lhs_unary2478);
                    lhs_not_binding134=lhs_not_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not_binding134.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:688:5: lhs_not
                    {
                    pushFollow(FOLLOW_lhs_not_in_lhs_unary2484);
                    lhs_not135=lhs_not();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not135.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:689:5: lhs_eval
                    {
                    pushFollow(FOLLOW_lhs_eval_in_lhs_unary2490);
                    lhs_eval136=lhs_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_eval136.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:690:5: lhs_forall
                    {
                    pushFollow(FOLLOW_lhs_forall_in_lhs_unary2496);
                    lhs_forall137=lhs_forall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_forall137.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:691:6: lhs_for
                    {
                    pushFollow(FOLLOW_lhs_for_in_lhs_unary2503);
                    lhs_for138=lhs_for();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_for138.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:692:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN139=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary2509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN139, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_unary2520);
                    lhs_or140=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or140.getTree());
                    RIGHT_PAREN141=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary2526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN141_tree = (Object)adaptor.create(RIGHT_PAREN141);
                    adaptor.addChild(root_0, RIGHT_PAREN141_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN141, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:695:5: pattern_source
                    {
                    pushFollow(FOLLOW_pattern_source_in_lhs_unary2534);
                    pattern_source142=pattern_source();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_source142.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:697:3: ( ( SEMICOLON )=> SEMICOLON )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SEMICOLON) ) {
                int LA47_1 = input.LA(2);

                if ( (synpred7_DRL()) ) {
                    alt47=1;
                }
            }
            switch (alt47) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:697:4: ( SEMICOLON )=> SEMICOLON
                    {
                    SEMICOLON143=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_unary2548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(SEMICOLON143, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_unary"

    public static class lhs_exist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_exist"
    // src/main/resources/org/drools/lang/DRL.g:700:1: lhs_exist : exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_exist_return lhs_exist() throws RecognitionException {
        DRLParser.lhs_exist_return retval = new DRLParser.lhs_exist_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN146=null;
        Token RIGHT_PAREN148=null;
        DRLParser.exists_key_return exists_key144 = null;

        DRLParser.lhs_or_return lhs_or145 = null;

        DRLParser.lhs_or_return lhs_or147 = null;

        DRLParser.lhs_pattern_return lhs_pattern149 = null;


        Object LEFT_PAREN146_tree=null;
        Object RIGHT_PAREN148_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_exists_key=new RewriteRuleSubtreeStream(adaptor,"rule exists_key");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        try {
            // src/main/resources/org/drools/lang/DRL.g:701:2: ( exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:701:4: exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_exists_key_in_lhs_exist2564);
            exists_key144=exists_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exists_key.add(exists_key144.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS);	
            }
            // src/main/resources/org/drools/lang/DRL.g:703:10: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt48=3;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==LEFT_PAREN) ) {
                int LA48_1 = input.LA(2);

                if ( (synpred8_DRL()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA48_0==ID) ) {
                int LA48_2 = input.LA(2);

                if ( (((synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FOR))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))))||synpred8_DRL()||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))))||((synpred8_DRL()&&(helper.validateNotWithBinding()))&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:703:12: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2591);
                    lhs_or145=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or145.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:704:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN146=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_exist2598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN146);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN146, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2606);
                    lhs_or147=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or147.getTree());
                    RIGHT_PAREN148=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_exist2613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN148);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN148, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:707:12: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_exist2628);
                    lhs_pattern149=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern149.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: exists_key, RIGHT_PAREN, lhs_or, lhs_pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 709:10: -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:709:13: ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exists_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:709:26: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:709:34: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:709:47: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_exist"

    public static class lhs_not_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not_binding"
    // src/main/resources/org/drools/lang/DRL.g:712:1: lhs_not_binding : not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) ;
    public final DRLParser.lhs_not_binding_return lhs_not_binding() throws RecognitionException {
        DRLParser.lhs_not_binding_return retval = new DRLParser.lhs_not_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.not_key_return not_key150 = null;

        DRLParser.fact_binding_return fact_binding151 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:713:2: ( not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) )
            // src/main/resources/org/drools/lang/DRL.g:713:4: not_key fact_binding
            {
            pushFollow(FOLLOW_not_key_in_lhs_not_binding2674);
            not_key150=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key150.getTree());
            pushFollow(FOLLOW_fact_binding_in_lhs_not_binding2676);
            fact_binding151=fact_binding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding151.getTree());


            // AST REWRITE
            // elements: fact_binding, not_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:2: -> ^( not_key ^( VT_PATTERN fact_binding ) )
            {
                // src/main/resources/org/drools/lang/DRL.g:714:5: ^( not_key ^( VT_PATTERN fact_binding ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:714:15: ^( VT_PATTERN fact_binding )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_2);

                adaptor.addChild(root_2, stream_fact_binding.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not_binding"

    public static class lhs_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not"
    // src/main/resources/org/drools/lang/DRL.g:717:1: lhs_not : not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_not_return lhs_not() throws RecognitionException {
        DRLParser.lhs_not_return retval = new DRLParser.lhs_not_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN154=null;
        Token RIGHT_PAREN156=null;
        DRLParser.not_key_return not_key152 = null;

        DRLParser.lhs_or_return lhs_or153 = null;

        DRLParser.lhs_or_return lhs_or155 = null;

        DRLParser.lhs_pattern_return lhs_pattern157 = null;


        Object LEFT_PAREN154_tree=null;
        Object RIGHT_PAREN156_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        try {
            // src/main/resources/org/drools/lang/DRL.g:717:9: ( not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:717:11: not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_not_key_in_lhs_not2699);
            not_key152=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key152.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_NOT);	
            }
            // src/main/resources/org/drools/lang/DRL.g:719:3: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt49=3;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==LEFT_PAREN) ) {
                int LA49_1 = input.LA(2);

                if ( (synpred9_DRL()) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==ID) ) {
                int LA49_2 = input.LA(2);

                if ( (synpred9_DRL()) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:719:5: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2721);
                    lhs_or153=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or153.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:720:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN154=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_not2728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN154);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN154, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2737);
                    lhs_or155=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or155.getTree());
                    RIGHT_PAREN156=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_not2743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN156);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN156, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:723:6: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_not2753);
                    lhs_pattern157=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern157.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lhs_or, lhs_pattern, RIGHT_PAREN, not_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 724:10: -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:724:13: ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:724:23: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:724:31: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:724:44: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not"

    public static class lhs_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_eval"
    // src/main/resources/org/drools/lang/DRL.g:727:1: lhs_eval : ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) ;
    public final DRLParser.lhs_eval_return lhs_eval() throws RecognitionException {
        DRLParser.lhs_eval_return retval = new DRLParser.lhs_eval_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.eval_key_return ev = null;

        DRLParser.paren_chunk_return pc = null;


        RewriteRuleSubtreeStream stream_eval_key=new RewriteRuleSubtreeStream(adaptor,"rule eval_key");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:728:2: (ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:728:4: ev= eval_key pc= paren_chunk
            {
            pushFollow(FOLLOW_eval_key_in_lhs_eval2792);
            ev=eval_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eval_key.add(ev.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_EVAL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_lhs_eval2801);
            pc=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(pc.getTree());
            if ( state.backtracking==0 ) {
              	if (((DroolsTree) (pc!=null?((Object)pc.tree):null)).getText() != null){
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	            		
              		}
              	
            }
            if ( state.backtracking==0 ) {
              	String body = helper.safeSubstring( (pc!=null?input.toString(pc.start,pc.stop):null), 1, (pc!=null?input.toString(pc.start,pc.stop):null).length()-1 );
              		helper.checkTrailingSemicolon( body, (ev!=null?((Token)ev.start):null) );	
            }


            // AST REWRITE
            // elements: paren_chunk, eval_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 737:3: -> ^( eval_key paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:737:6: ^( eval_key paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_eval_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_eval"

    public static class lhs_forall_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_forall"
    // src/main/resources/org/drools/lang/DRL.g:740:1: lhs_forall : forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) ;
    public final DRLParser.lhs_forall_return lhs_forall() throws RecognitionException {
        DRLParser.lhs_forall_return retval = new DRLParser.lhs_forall_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN159=null;
        Token RIGHT_PAREN161=null;
        DRLParser.forall_key_return forall_key158 = null;

        DRLParser.pattern_source_return pattern_source160 = null;


        Object LEFT_PAREN159_tree=null;
        Object RIGHT_PAREN161_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:741:2: ( forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:741:4: forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN
            {
            pushFollow(FOLLOW_forall_key_in_lhs_forall2828);
            forall_key158=forall_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forall_key.add(forall_key158.getTree());
            LEFT_PAREN159=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN159);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN159, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:743:4: ( pattern_source )+
            int cnt50=0;
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==ID) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:743:4: pattern_source
            	    {
            	    pushFollow(FOLLOW_pattern_source_in_lhs_forall2841);
            	    pattern_source160=pattern_source();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source160.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt50 >= 1 ) break loop50;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(50, input);
                        throw eee;
                }
                cnt50++;
            } while (true);

            RIGHT_PAREN161=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN161);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN161, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: pattern_source, forall_key, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 745:3: -> ^( forall_key ( pattern_source )+ RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:745:6: ^( forall_key ( pattern_source )+ RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_forall_key.nextNode(), root_1);

                if ( !(stream_pattern_source.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pattern_source.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern_source.nextTree());

                }
                stream_pattern_source.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_forall"

    public static class lhs_for_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_for"
    // src/main/resources/org/drools/lang/DRL.g:748:1: lhs_for : for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN -> ^( for_key lhs_or for_functions ( constraints )? ) ;
    public final DRLParser.lhs_for_return lhs_for() throws RecognitionException {
        DRLParser.lhs_for_return retval = new DRLParser.lhs_for_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN163=null;
        Token SEMICOLON165=null;
        Token SEMICOLON167=null;
        Token RIGHT_PAREN169=null;
        DRLParser.for_key_return for_key162 = null;

        DRLParser.lhs_or_return lhs_or164 = null;

        DRLParser.for_functions_return for_functions166 = null;

        DRLParser.constraints_return constraints168 = null;


        Object LEFT_PAREN163_tree=null;
        Object SEMICOLON165_tree=null;
        Object SEMICOLON167_tree=null;
        Object RIGHT_PAREN169_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_for_functions=new RewriteRuleSubtreeStream(adaptor,"rule for_functions");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:749:2: ( for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN -> ^( for_key lhs_or for_functions ( constraints )? ) )
            // src/main/resources/org/drools/lang/DRL.g:749:4: for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_for_key_in_lhs_for2873);
            for_key162=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key162.getTree());
            LEFT_PAREN163=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_for2878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN163);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN163, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_lhs_for2886);
            lhs_or164=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or164.getTree());
            SEMICOLON165=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON165);

            pushFollow(FOLLOW_for_functions_in_lhs_for2893);
            for_functions166=for_functions();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_functions.add(for_functions166.getTree());
            // src/main/resources/org/drools/lang/DRL.g:753:4: ( SEMICOLON constraints )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SEMICOLON) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:753:5: SEMICOLON constraints
                    {
                    SEMICOLON167=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON167);

                    pushFollow(FOLLOW_constraints_in_lhs_for2901);
                    constraints168=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints168.getTree());

                    }
                    break;

            }

            RIGHT_PAREN169=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_for2907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN169);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN169, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: for_key, lhs_or, constraints, for_functions
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 755:3: -> ^( for_key lhs_or for_functions ( constraints )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:755:6: ^( for_key lhs_or for_functions ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_for_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                adaptor.addChild(root_1, stream_for_functions.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:755:37: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_for"

    public static class for_functions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_functions"
    // src/main/resources/org/drools/lang/DRL.g:758:1: for_functions : for_function ( COMMA for_function )* ;
    public final DRLParser.for_functions_return for_functions() throws RecognitionException {
        DRLParser.for_functions_return retval = new DRLParser.for_functions_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA171=null;
        DRLParser.for_function_return for_function170 = null;

        DRLParser.for_function_return for_function172 = null;


        Object COMMA171_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:759:2: ( for_function ( COMMA for_function )* )
            // src/main/resources/org/drools/lang/DRL.g:759:4: for_function ( COMMA for_function )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_for_function_in_for_functions2936);
            for_function170=for_function();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_function170.getTree());
            // src/main/resources/org/drools/lang/DRL.g:759:17: ( COMMA for_function )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==COMMA) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:759:18: COMMA for_function
            	    {
            	    COMMA171=(Token)match(input,COMMA,FOLLOW_COMMA_in_for_functions2939); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA171_tree = (Object)adaptor.create(COMMA171);
            	    adaptor.addChild(root_0, COMMA171_tree);
            	    }
            	    pushFollow(FOLLOW_for_function_in_for_functions2941);
            	    for_function172=for_function();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_function172.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_functions"

    public static class for_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_function"
    // src/main/resources/org/drools/lang/DRL.g:762:1: for_function : label ID arguments ;
    public final DRLParser.for_function_return for_function() throws RecognitionException {
        DRLParser.for_function_return retval = new DRLParser.for_function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID174=null;
        DRLParser.label_return label173 = null;

        DRLParser.arguments_return arguments175 = null;


        Object ID174_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:763:2: ( label ID arguments )
            // src/main/resources/org/drools/lang/DRL.g:763:5: label ID arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_label_in_for_function2957);
            label173=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label173.getTree());
            ID174=(Token)match(input,ID,FOLLOW_ID_in_for_function2959); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID174_tree = (Object)adaptor.create(ID174);
            adaptor.addChild(root_0, ID174_tree);
            }
            pushFollow(FOLLOW_arguments_in_for_function2961);
            arguments175=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments175.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_function"

    public static class pattern_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_source"
    // src/main/resources/org/drools/lang/DRL.g:766:1: pattern_source : lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? ;
    public final DRLParser.pattern_source_return pattern_source() throws RecognitionException {
        DRLParser.pattern_source_return retval = new DRLParser.pattern_source_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FROM178=null;
        DRLParser.lhs_pattern_return lhs_pattern176 = null;

        DRLParser.over_clause_return over_clause177 = null;

        DRLParser.accumulate_statement_return accumulate_statement179 = null;

        DRLParser.collect_statement_return collect_statement180 = null;

        DRLParser.entrypoint_statement_return entrypoint_statement181 = null;

        DRLParser.from_source_return from_source182 = null;


        Object FROM178_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:769:2: ( lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? )
            // src/main/resources/org/drools/lang/DRL.g:769:4: lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_pattern_in_pattern_source2983);
            lhs_pattern176=lhs_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_pattern176.getTree());
            // src/main/resources/org/drools/lang/DRL.g:770:3: ( over_clause )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==OVER) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:770:3: over_clause
                    {
                    pushFollow(FOLLOW_over_clause_in_pattern_source2987);
                    over_clause177=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause177.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:771:3: ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==FROM) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:772:4: FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    {
                    FROM178=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2997); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FROM178_tree = (Object)adaptor.create(FROM178);
                    root_0 = (Object)adaptor.becomeRoot(FROM178_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FROM178, DroolsEditorType.KEYWORD);
                      			helper.emit(Location.LOCATION_LHS_FROM);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:775:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    int alt54=4;
                    alt54 = dfa54.predict(input);
                    switch (alt54) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:775:14: accumulate_statement
                            {
                            pushFollow(FOLLOW_accumulate_statement_in_pattern_source3017);
                            accumulate_statement179=accumulate_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_statement179.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:776:15: collect_statement
                            {
                            pushFollow(FOLLOW_collect_statement_in_pattern_source3033);
                            collect_statement180=collect_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collect_statement180.getTree());

                            }
                            break;
                        case 3 :
                            // src/main/resources/org/drools/lang/DRL.g:777:15: entrypoint_statement
                            {
                            pushFollow(FOLLOW_entrypoint_statement_in_pattern_source3050);
                            entrypoint_statement181=entrypoint_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, entrypoint_statement181.getTree());

                            }
                            break;
                        case 4 :
                            // src/main/resources/org/drools/lang/DRL.g:778:15: from_source
                            {
                            pushFollow(FOLLOW_from_source_in_pattern_source3066);
                            from_source182=from_source();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_source182.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_ACCUMULATE);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_COLLECT);
            	}

        }
        return retval;
    }
    // $ANTLR end "pattern_source"

    public static class over_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_clause"
    // src/main/resources/org/drools/lang/DRL.g:796:1: over_clause : OVER over_elements ( COMMA over_elements )* ;
    public final DRLParser.over_clause_return over_clause() throws RecognitionException {
        DRLParser.over_clause_return retval = new DRLParser.over_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OVER183=null;
        Token COMMA185=null;
        DRLParser.over_elements_return over_elements184 = null;

        DRLParser.over_elements_return over_elements186 = null;


        Object OVER183_tree=null;
        Object COMMA185_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:797:2: ( OVER over_elements ( COMMA over_elements )* )
            // src/main/resources/org/drools/lang/DRL.g:797:4: OVER over_elements ( COMMA over_elements )*
            {
            root_0 = (Object)adaptor.nil();

            OVER183=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause3098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OVER183_tree = (Object)adaptor.create(OVER183);
            root_0 = (Object)adaptor.becomeRoot(OVER183_tree, root_0);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(OVER183, DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_over_elements_in_over_clause3103);
            over_elements184=over_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements184.getTree());
            // src/main/resources/org/drools/lang/DRL.g:798:4: ( COMMA over_elements )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    int LA56_2 = input.LA(2);

                    if ( (LA56_2==ID) ) {
                        int LA56_3 = input.LA(3);

                        if ( (LA56_3==COLON) ) {
                            alt56=1;
                        }


                    }


                }


                switch (alt56) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:798:5: COMMA over_elements
            	    {
            	    COMMA185=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause3110); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA185, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_over_elements_in_over_clause3115);
            	    over_elements186=over_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements186.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_clause"

    public static class over_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_elements"
    // src/main/resources/org/drools/lang/DRL.g:801:1: over_elements : id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) ;
    public final DRLParser.over_elements_return over_elements() throws RecognitionException {
        DRLParser.over_elements_return retval = new DRLParser.over_elements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token t=null;
        Token COLON187=null;
        Token LEFT_PAREN188=null;
        Token RIGHT_PAREN189=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object t_tree=null;
        Object COLON187_tree=null;
        Object LEFT_PAREN188_tree=null;
        Object RIGHT_PAREN189_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_TimePeriod=new RewriteRuleTokenStream(adaptor,"token TimePeriod");

        try {
            // src/main/resources/org/drools/lang/DRL.g:802:2: (id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) )
            // src/main/resources/org/drools/lang/DRL.g:802:4: id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN
            {
            id1=(Token)match(input,ID,FOLLOW_ID_in_over_elements3130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.IDENTIFIER);	
            }
            COLON187=(Token)match(input,COLON,FOLLOW_COLON_in_over_elements3137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON187);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON187, DroolsEditorType.SYMBOL);	
            }
            id2=(Token)match(input,ID,FOLLOW_ID_in_over_elements3146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              	helper.emit(id2, DroolsEditorType.IDENTIFIER);	
            }
            LEFT_PAREN188=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_over_elements3153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN188);

            // src/main/resources/org/drools/lang/DRL.g:806:4: (t= TimePeriod | t= DECIMAL )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==TimePeriod) ) {
                alt57=1;
            }
            else if ( (LA57_0==DECIMAL) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:807:5: t= TimePeriod
                    {
                    t=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_over_elements3168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TimePeriod.add(t);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:807:20: t= DECIMAL
                    {
                    t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_over_elements3174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(t);


                    }
                    break;

            }

            RIGHT_PAREN189=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_over_elements3184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN189);



            // AST REWRITE
            // elements: id2, id1
            // token labels: id1, id2
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 810:2: -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
            {
                // src/main/resources/org/drools/lang/DRL.g:810:5: ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BEHAVIOR, "VT_BEHAVIOR"), root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());
                adaptor.addChild(root_1, stream_id2.nextNode());
                adaptor.addChild(root_1, (Object)adaptor.create(VT_PAREN_CHUNK, t));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_elements"

    public static class accumulate_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_statement"
    // src/main/resources/org/drools/lang/DRL.g:813:1: accumulate_statement : ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) ;
    public final DRLParser.accumulate_statement_return accumulate_statement() throws RecognitionException {
        DRLParser.accumulate_statement_return retval = new DRLParser.accumulate_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ACCUMULATE190=null;
        Token LEFT_PAREN191=null;
        Token COMMA193=null;
        Token RIGHT_PAREN196=null;
        DRLParser.lhs_or_return lhs_or192 = null;

        DRLParser.accumulate_init_clause_return accumulate_init_clause194 = null;

        DRLParser.accumulate_id_clause_return accumulate_id_clause195 = null;


        Object ACCUMULATE190_tree=null;
        Object LEFT_PAREN191_tree=null;
        Object COMMA193_tree=null;
        Object RIGHT_PAREN196_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
        RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
        try {
            // src/main/resources/org/drools/lang/DRL.g:814:2: ( ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:814:4: ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN
            {
            ACCUMULATE190=(Token)match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement3211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ACCUMULATE.add(ACCUMULATE190);

            if ( state.backtracking==0 ) {
              	helper.emit(ACCUMULATE190, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE);	
            }
            LEFT_PAREN191=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement3220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN191);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN191, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_accumulate_statement3228);
            lhs_or192=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or192.getTree());
            // src/main/resources/org/drools/lang/DRL.g:818:3: ( COMMA )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==COMMA) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:818:3: COMMA
                    {
                    COMMA193=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement3233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA193);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COMMA193, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:819:3: ( accumulate_init_clause | accumulate_id_clause )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==ID) ) {
                int LA59_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                    alt59=1;
                }
                else if ( (true) ) {
                    alt59=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:819:5: accumulate_init_clause
                    {
                    pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement3243);
                    accumulate_init_clause194=accumulate_init_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_init_clause.add(accumulate_init_clause194.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:820:5: accumulate_id_clause
                    {
                    pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement3249);
                    accumulate_id_clause195=accumulate_id_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_id_clause.add(accumulate_id_clause195.getTree());

                    }
                    break;

            }

            RIGHT_PAREN196=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement3257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN196);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN196, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, accumulate_id_clause, ACCUMULATE, accumulate_init_clause, lhs_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 824:3: -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:824:6: ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ACCUMULATE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:824:26: ( accumulate_init_clause )?
                if ( stream_accumulate_init_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_init_clause.nextTree());

                }
                stream_accumulate_init_clause.reset();
                // src/main/resources/org/drools/lang/DRL.g:824:50: ( accumulate_id_clause )?
                if ( stream_accumulate_id_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_id_clause.nextTree());

                }
                stream_accumulate_id_clause.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_statement"

    public static class accumulate_init_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_init_clause"
    // src/main/resources/org/drools/lang/DRL.g:828:1: accumulate_init_clause : init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) ;
    public final DRLParser.accumulate_init_clause_return accumulate_init_clause() throws RecognitionException {
        DRLParser.accumulate_init_clause_return retval = new DRLParser.accumulate_init_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token cm1=null;
        Token cm2=null;
        Token cm3=null;
        DRLParser.accumulate_paren_chunk_return pc1 = null;

        DRLParser.accumulate_paren_chunk_return pc2 = null;

        DRLParser.accumulate_paren_chunk_return pc3 = null;

        DRLParser.result_key_return res1 = null;

        DRLParser.accumulate_paren_chunk_return pc4 = null;

        DRLParser.init_key_return init_key197 = null;

        DRLParser.action_key_return action_key198 = null;

        DRLParser.reverse_key_return reverse_key199 = null;


        Object cm1_tree=null;
        Object cm2_tree=null;
        Object cm3_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_accumulate_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk");
        RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_init_key=new RewriteRuleSubtreeStream(adaptor,"rule init_key");
        RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:831:2: ( init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) )
            // src/main/resources/org/drools/lang/DRL.g:831:4: init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE]
            {
            pushFollow(FOLLOW_init_key_in_accumulate_init_clause3303);
            init_key197=init_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_init_key.add(init_key197.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3313);
            pc1=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc1.getTree());
            // src/main/resources/org/drools/lang/DRL.g:833:84: (cm1= COMMA )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==COMMA) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:833:84: cm1= COMMA
                    {
                    cm1=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm1, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);	
            }
            pushFollow(FOLLOW_action_key_in_accumulate_init_clause3329);
            action_key198=action_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_action_key.add(action_key198.getTree());
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3333);
            pc2=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:835:97: (cm2= COMMA )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==COMMA) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:835:97: cm2= COMMA
                    {
                    cm2=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm2);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm2, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null && pc2 != null && ((DroolsTree) pc2.getTree()).getText() != null ) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);	
            }
            // src/main/resources/org/drools/lang/DRL.g:837:2: ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==ID) ) {
                int LA63_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                    alt63=1;
                }
            }
            switch (alt63) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:837:4: reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )?
                    {
                    pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause3350);
                    reverse_key199=reverse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reverse_key.add(reverse_key199.getTree());
                    pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3354);
                    pc3=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc3.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:837:100: (cm3= COMMA )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==COMMA) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:837:100: cm3= COMMA
                            {
                            cm3=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3359); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(cm3);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      	helper.emit(cm3, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if ((pc1 != null && ((DroolsTree) pc1.tree).getText() != null) &&
                          			(pc2 != null && ((DroolsTree) pc2.tree).getText() != null) &&
                          			(pc3 != null && ((DroolsTree) pc3.tree).getText() != null)) {
              			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
              		}	
              	
            }
            pushFollow(FOLLOW_result_key_in_accumulate_init_clause3375);
            res1=result_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_key.add(res1.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit((res1!=null?((Token)res1.start):null), DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3381);
            pc4=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc4.getTree());


            // AST REWRITE
            // elements: action_key, pc3, pc4, result_key, pc2, pc1, init_key, reverse_key
            // token labels: 
            // rule labels: pc2, pc4, pc3, pc1, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"rule pc2",pc2!=null?pc2.tree:null);
            RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"rule pc4",pc4!=null?pc4.tree:null);
            RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"rule pc3",pc3!=null?pc3.tree:null);
            RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"rule pc1",pc1!=null?pc1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 846:2: -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
            {
                // src/main/resources/org/drools/lang/DRL.g:846:5: ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_INIT_CLAUSE, "VT_ACCUMULATE_INIT_CLAUSE"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:846:33: ^( init_key $pc1)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_init_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc1.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:846:50: ^( action_key $pc2)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_action_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc2.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:846:69: ( ^( reverse_key $pc3) )?
                if ( stream_pc3.hasNext()||stream_reverse_key.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:846:69: ^( reverse_key $pc3)
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_reverse_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_pc3.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_pc3.reset();
                stream_reverse_key.reset();
                // src/main/resources/org/drools/lang/DRL.g:846:90: ^( result_key $pc4)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_result_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc4.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.RESULT)) {
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		if (input.LA(1) == LEFT_PAREN){
            			input.consume();
            			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "accumulate_init_clause"

    public static class accumulate_paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:859:1: accumulate_paren_chunk[int locationType] : pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.accumulate_paren_chunk_return accumulate_paren_chunk(int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_return retval = new DRLParser.accumulate_paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accumulate_paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_accumulate_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:862:3: (pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:862:5: pc= accumulate_paren_chunk_data[false,$locationType]
            {
            pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3439);
            pc=accumulate_paren_chunk_data(false, locationType);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 863:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk"

    public static class accumulate_paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:866:1: accumulate_paren_chunk_data[boolean isRecursive, int locationType] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN ;
    public final DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data(boolean isRecursive, int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_data_return retval = new DRLParser.accumulate_paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data200 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:867:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:867:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              				helper.emit(locationType);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:875:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )*
            loop64:
            do {
                int alt64=3;
                int LA64_0 = input.LA(1);

                if ( ((LA64_0>=VT_COMPILATION_UNIT && LA64_0<=BOOL)||(LA64_0>=FROM && LA64_0<=MISC)) ) {
                    alt64=1;
                }
                else if ( (LA64_0==LEFT_PAREN) ) {
                    alt64=2;
                }


                switch (alt64) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:875:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:875:94: accumulate_paren_chunk_data[true,-1]
            	    {
            	    pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3491);
            	    accumulate_paren_chunk_data200=accumulate_paren_chunk_data(true, -1);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_paren_chunk_data200.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk_data"

    public static class accumulate_id_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_id_clause"
    // src/main/resources/org/drools/lang/DRL.g:885:1: accumulate_id_clause : ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) ;
    public final DRLParser.accumulate_id_clause_return accumulate_id_clause() throws RecognitionException {
        DRLParser.accumulate_id_clause_return retval = new DRLParser.accumulate_id_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID201=null;
        DRLParser.paren_chunk_return paren_chunk202 = null;


        Object ID201_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:886:2: ( ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:886:4: ID paren_chunk
            {
            ID201=(Token)match(input,ID,FOLLOW_ID_in_accumulate_id_clause3518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID201);

            if ( state.backtracking==0 ) {
              	helper.emit(ID201, DroolsEditorType.IDENTIFIER);	
            }
            pushFollow(FOLLOW_paren_chunk_in_accumulate_id_clause3524);
            paren_chunk202=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk202.getTree());


            // AST REWRITE
            // elements: paren_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 888:2: -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:888:5: ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_ID_CLAUSE, "VT_ACCUMULATE_ID_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_id_clause"

    public static class collect_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collect_statement"
    // src/main/resources/org/drools/lang/DRL.g:891:1: collect_statement : COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) ;
    public final DRLParser.collect_statement_return collect_statement() throws RecognitionException {
        DRLParser.collect_statement_return retval = new DRLParser.collect_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLLECT203=null;
        Token LEFT_PAREN204=null;
        Token RIGHT_PAREN206=null;
        DRLParser.pattern_source_return pattern_source205 = null;


        Object COLLECT203_tree=null;
        Object LEFT_PAREN204_tree=null;
        Object RIGHT_PAREN206_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COLLECT=new RewriteRuleTokenStream(adaptor,"token COLLECT");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        try {
            // src/main/resources/org/drools/lang/DRL.g:892:2: ( COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:892:4: COLLECT LEFT_PAREN pattern_source RIGHT_PAREN
            {
            COLLECT203=(Token)match(input,COLLECT,FOLLOW_COLLECT_in_collect_statement3546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLLECT.add(COLLECT203);

            if ( state.backtracking==0 ) {
              	helper.emit(COLLECT203, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            LEFT_PAREN204=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement3555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN204);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN204, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_pattern_source_in_collect_statement3562);
            pattern_source205=pattern_source();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source205.getTree());
            RIGHT_PAREN206=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement3567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN206);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN206, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: COLLECT, pattern_source, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 898:2: -> ^( COLLECT pattern_source RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:898:5: ^( COLLECT pattern_source RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_COLLECT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_pattern_source.nextTree());
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "collect_statement"

    public static class entrypoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_statement"
    // src/main/resources/org/drools/lang/DRL.g:901:1: entrypoint_statement : entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) ;
    public final DRLParser.entrypoint_statement_return entrypoint_statement() throws RecognitionException {
        DRLParser.entrypoint_statement_return retval = new DRLParser.entrypoint_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.entry_point_key_return entry_point_key207 = null;

        DRLParser.entrypoint_id_return entrypoint_id208 = null;


        RewriteRuleSubtreeStream stream_entrypoint_id=new RewriteRuleSubtreeStream(adaptor,"rule entrypoint_id");
        RewriteRuleSubtreeStream stream_entry_point_key=new RewriteRuleSubtreeStream(adaptor,"rule entry_point_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:902:2: ( entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) )
            // src/main/resources/org/drools/lang/DRL.g:902:4: entry_point_key entrypoint_id
            {
            pushFollow(FOLLOW_entry_point_key_in_entrypoint_statement3594);
            entry_point_key207=entry_point_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entry_point_key.add(entry_point_key207.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            pushFollow(FOLLOW_entrypoint_id_in_entrypoint_statement3602);
            entrypoint_id208=entrypoint_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entrypoint_id.add(entrypoint_id208.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: entry_point_key, entrypoint_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 906:2: -> ^( entry_point_key entrypoint_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:906:5: ^( entry_point_key entrypoint_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_entry_point_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_entrypoint_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_statement"

    public static class entrypoint_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_id"
    // src/main/resources/org/drools/lang/DRL.g:909:1: entrypoint_id : (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] );
    public final DRLParser.entrypoint_id_return entrypoint_id() throws RecognitionException {
        DRLParser.entrypoint_id_return retval = new DRLParser.entrypoint_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;

        Object value_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:910:2: (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==ID) ) {
                alt65=1;
            }
            else if ( (LA65_0==STRING) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:910:5: value= ID
                    {
                    value=(Token)match(input,ID,FOLLOW_ID_in_entrypoint_id3628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 911:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:912:5: value= STRING
                    {
                    value=(Token)match(input,STRING,FOLLOW_STRING_in_entrypoint_id3645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 913:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_id"

    public static class from_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_source"
    // src/main/resources/org/drools/lang/DRL.g:917:1: from_source options {backtrack=true; memoize=true; } : fs= expression -> VT_FROM_SOURCE[$fs.text] ;
    public final DRLParser.from_source_return from_source() throws RecognitionException {
        DRLParser.from_source_return retval = new DRLParser.from_source_return();
        retval.start = input.LT(1);
        int from_source_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.expression_return fs = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:919:2: (fs= expression -> VT_FROM_SOURCE[$fs.text] )
            // src/main/resources/org/drools/lang/DRL.g:919:4: fs= expression
            {
            pushFollow(FOLLOW_expression_in_from_source3682);
            fs=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(fs.getTree());
            if ( state.backtracking==0 ) {
               if ( input.LA(1) != EOF || input.get(input.index() - 1).getType() == WS ) { helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION); } 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 920:10: -> VT_FROM_SOURCE[$fs.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FROM_SOURCE, (fs!=null?input.toString(fs.start,fs.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, from_source_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_source"

    public static class lhs_pattern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_pattern"
    // src/main/resources/org/drools/lang/DRL.g:926:1: lhs_pattern : ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) );
    public final DRLParser.lhs_pattern_return lhs_pattern() throws RecognitionException {
        DRLParser.lhs_pattern_return retval = new DRLParser.lhs_pattern_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.fact_binding_return fact_binding209 = null;

        DRLParser.fact_return fact210 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        try {
            // src/main/resources/org/drools/lang/DRL.g:927:2: ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==ID) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==COLON) ) {
                    alt66=1;
                }
                else if ( (LA66_1==DOT||LA66_1==LEFT_PAREN||LA66_1==LEFT_SQUARE) ) {
                    alt66=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:927:4: fact_binding
                    {
                    pushFollow(FOLLOW_fact_binding_in_lhs_pattern3713);
                    fact_binding209=fact_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding209.getTree());


                    // AST REWRITE
                    // elements: fact_binding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 927:17: -> ^( VT_PATTERN fact_binding )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:927:20: ^( VT_PATTERN fact_binding )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact_binding.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:928:4: fact
                    {
                    pushFollow(FOLLOW_fact_in_lhs_pattern3726);
                    fact210=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact210.getTree());


                    // AST REWRITE
                    // elements: fact
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 928:9: -> ^( VT_PATTERN fact )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:928:12: ^( VT_PATTERN fact )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_pattern"

    public static class fact_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding"
    // src/main/resources/org/drools/lang/DRL.g:931:1: fact_binding : label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.fact_binding_return fact_binding() throws RecognitionException {
        DRLParser.fact_binding_return retval = new DRLParser.fact_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN213=null;
        Token RIGHT_PAREN215=null;
        DRLParser.label_return label211 = null;

        DRLParser.fact_return fact212 = null;

        DRLParser.fact_binding_expression_return fact_binding_expression214 = null;


        Object LEFT_PAREN213_tree=null;
        Object RIGHT_PAREN215_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_fact_binding_expression=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding_expression");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        try {
            // src/main/resources/org/drools/lang/DRL.g:932:3: ( label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:932:5: label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            {
            pushFollow(FOLLOW_label_in_fact_binding3746);
            label211=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label.add(label211.getTree());
            // src/main/resources/org/drools/lang/DRL.g:933:3: ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==ID) ) {
                alt67=1;
            }
            else if ( (LA67_0==LEFT_PAREN) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:933:5: fact
                    {
                    pushFollow(FOLLOW_fact_in_fact_binding3752);
                    fact212=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact212.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:934:6: LEFT_PAREN fact_binding_expression RIGHT_PAREN
                    {
                    LEFT_PAREN213=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_binding3759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN213);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN213, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_fact_binding_expression_in_fact_binding3767);
                    fact_binding_expression214=fact_binding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding_expression.add(fact_binding_expression214.getTree());
                    RIGHT_PAREN215=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_binding3775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN215);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN215, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: fact_binding_expression, fact, RIGHT_PAREN, label
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 938:3: -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:938:6: ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_BINDING, "VT_FACT_BINDING"), root_1);

                adaptor.addChild(root_1, stream_label.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:938:30: ( fact )?
                if ( stream_fact.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact.nextTree());

                }
                stream_fact.reset();
                // src/main/resources/org/drools/lang/DRL.g:938:36: ( fact_binding_expression )?
                if ( stream_fact_binding_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact_binding_expression.nextTree());

                }
                stream_fact_binding_expression.reset();
                // src/main/resources/org/drools/lang/DRL.g:938:61: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding"

    public static class fact_binding_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding_expression"
    // src/main/resources/org/drools/lang/DRL.g:941:1: fact_binding_expression : ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* ;
    public final DRLParser.fact_binding_expression_return fact_binding_expression() throws RecognitionException {
        DRLParser.fact_binding_expression_return retval = new DRLParser.fact_binding_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token pipe=null;
        DRLParser.or_key_return value = null;

        DRLParser.fact_return fact216 = null;

        DRLParser.fact_return fact217 = null;


        Object pipe_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:944:3: ( ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* )
            // src/main/resources/org/drools/lang/DRL.g:944:5: ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            {
            // src/main/resources/org/drools/lang/DRL.g:944:5: ( fact -> fact )
            // src/main/resources/org/drools/lang/DRL.g:944:6: fact
            {
            pushFollow(FOLLOW_fact_in_fact_binding_expression3816);
            fact216=fact();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact.add(fact216.getTree());


            // AST REWRITE
            // elements: fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 944:11: -> fact
            {
                adaptor.addChild(root_0, stream_fact.nextTree());

            }

            retval.tree = root_0;}
            }

            // src/main/resources/org/drools/lang/DRL.g:944:20: ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
                    alt69=1;
                }
                else if ( (LA69_0==DOUBLE_PIPE) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:944:22: (value= or_key | pipe= DOUBLE_PIPE ) fact
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:944:22: (value= or_key | pipe= DOUBLE_PIPE )
            	    int alt68=2;
            	    int LA68_0 = input.LA(1);

            	    if ( (LA68_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            	        alt68=1;
            	    }
            	    else if ( (LA68_0==DOUBLE_PIPE) ) {
            	        alt68=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 68, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt68) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:944:23: value= or_key
            	            {
            	            pushFollow(FOLLOW_or_key_in_fact_binding_expression3828);
            	            value=or_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
            	            if ( state.backtracking==0 ) {
            	              orToken = (value!=null?((Token)value.start):null);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/main/resources/org/drools/lang/DRL.g:944:62: pipe= DOUBLE_PIPE
            	            {
            	            pipe=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3834); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOUBLE_PIPE.add(pipe);

            	            if ( state.backtracking==0 ) {
            	              orToken = pipe;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_fact_in_fact_binding_expression3839);
            	    fact217=fact();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_fact.add(fact217.getTree());


            	    // AST REWRITE
            	    // elements: fact_binding_expression, fact
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 945:3: -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	    {
            	        // src/main/resources/org/drools/lang/DRL.g:945:6: ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_OR, orToken), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_fact.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding_expression"

    public static class fact_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact"
    // src/main/resources/org/drools/lang/DRL.g:948:1: fact : pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) ;
    public final DRLParser.fact_return fact() throws RecognitionException {
        DRLParser.fact_return retval = new DRLParser.fact_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN219=null;
        Token RIGHT_PAREN221=null;
        DRLParser.pattern_type_return pattern_type218 = null;

        DRLParser.constraints_return constraints220 = null;


        Object LEFT_PAREN219_tree=null;
        Object RIGHT_PAREN221_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_pattern_type=new RewriteRuleSubtreeStream(adaptor,"rule pattern_type");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
         boolean isFailedOnConstraints = true; helper.pushParaphrases(DroolsParaphraseTypes.PATTERN); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:951:2: ( pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) )
            // src/main/resources/org/drools/lang/DRL.g:951:4: pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_pattern_type_in_fact3879);
            pattern_type218=pattern_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_type.add(pattern_type218.getTree());
            LEFT_PAREN219=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact3884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN219);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN219, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            }
            // src/main/resources/org/drools/lang/DRL.g:954:4: ( constraints )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID||LA70_0==LEFT_PAREN) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:954:4: constraints
                    {
                    pushFollow(FOLLOW_constraints_in_fact3895);
                    constraints220=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints220.getTree());

                    }
                    break;

            }

            RIGHT_PAREN221=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact3901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN221);

            if ( state.backtracking==0 ) {
              	isFailedOnConstraints = false;	
            }
            if ( state.backtracking==0 ) {
              	if ((RIGHT_PAREN221!=null?RIGHT_PAREN221.getText():null).equals(")") ){ //WORKAROUND FOR ANTLR BUG!
              			helper.emit(RIGHT_PAREN221, DroolsEditorType.SYMBOL);
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
              		}	
            }


            // AST REWRITE
            // elements: constraints, pattern_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 960:2: -> ^( VT_FACT pattern_type ( constraints )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:960:5: ^( VT_FACT pattern_type ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT, "VT_FACT"), root_1);

                adaptor.addChild(root_1, stream_pattern_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:960:28: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases();	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailedOnConstraints && input.LA(1) == EOF && input.get(input.index() - 1).getType() == WS){
            		if (!(helper.getActiveSentence().getContent().getLast() instanceof Integer) && input.LA(-1) != COLON) {
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "fact"

    public static class constraints_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraints"
    // src/main/resources/org/drools/lang/DRL.g:970:1: constraints : constraint ( COMMA constraint )* ;
    public final DRLParser.constraints_return constraints() throws RecognitionException {
        DRLParser.constraints_return retval = new DRLParser.constraints_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA223=null;
        DRLParser.constraint_return constraint222 = null;

        DRLParser.constraint_return constraint224 = null;


        Object COMMA223_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:971:2: ( constraint ( COMMA constraint )* )
            // src/main/resources/org/drools/lang/DRL.g:971:4: constraint ( COMMA constraint )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_in_constraints3933);
            constraint222=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint222.getTree());
            // src/main/resources/org/drools/lang/DRL.g:971:15: ( COMMA constraint )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:971:17: COMMA constraint
            	    {
            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_constraints3937); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA223, DroolsEditorType.SYMBOL);
            	      		helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            	    }
            	    pushFollow(FOLLOW_constraint_in_constraints3944);
            	    constraint224=constraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint224.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraints"

    public static class constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // src/main/resources/org/drools/lang/DRL.g:976:1: constraint : or_constr ;
    public final DRLParser.constraint_return constraint() throws RecognitionException {
        DRLParser.constraint_return retval = new DRLParser.constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.or_constr_return or_constr225 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:977:2: ( or_constr )
            // src/main/resources/org/drools/lang/DRL.g:977:4: or_constr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_or_constr_in_constraint3958);
            or_constr225=or_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr225.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint"

    public static class or_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_constr"
    // src/main/resources/org/drools/lang/DRL.g:980:1: or_constr : and_constr ( DOUBLE_PIPE and_constr )* ;
    public final DRLParser.or_constr_return or_constr() throws RecognitionException {
        DRLParser.or_constr_return retval = new DRLParser.or_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE227=null;
        DRLParser.and_constr_return and_constr226 = null;

        DRLParser.and_constr_return and_constr228 = null;


        Object DOUBLE_PIPE227_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:981:2: ( and_constr ( DOUBLE_PIPE and_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:981:4: and_constr ( DOUBLE_PIPE and_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_constr_in_or_constr3969);
            and_constr226=and_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr226.getTree());
            // src/main/resources/org/drools/lang/DRL.g:981:15: ( DOUBLE_PIPE and_constr )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==DOUBLE_PIPE) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:981:17: DOUBLE_PIPE and_constr
            	    {
            	    DOUBLE_PIPE227=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_constr3973); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE227_tree = (Object)adaptor.create(DOUBLE_PIPE227);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE227_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE227, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_constr_in_or_constr3980);
            	    and_constr228=and_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr228.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_constr"

    public static class and_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_constr"
    // src/main/resources/org/drools/lang/DRL.g:985:1: and_constr : unary_constr ( DOUBLE_AMPER unary_constr )* ;
    public final DRLParser.and_constr_return and_constr() throws RecognitionException {
        DRLParser.and_constr_return retval = new DRLParser.and_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER230=null;
        DRLParser.unary_constr_return unary_constr229 = null;

        DRLParser.unary_constr_return unary_constr231 = null;


        Object DOUBLE_AMPER230_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:986:2: ( unary_constr ( DOUBLE_AMPER unary_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:986:4: unary_constr ( DOUBLE_AMPER unary_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unary_constr_in_and_constr3995);
            unary_constr229=unary_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr229.getTree());
            // src/main/resources/org/drools/lang/DRL.g:986:17: ( DOUBLE_AMPER unary_constr )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==DOUBLE_AMPER) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:986:19: DOUBLE_AMPER unary_constr
            	    {
            	    DOUBLE_AMPER230=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_constr3999); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER230_tree = (Object)adaptor.create(DOUBLE_AMPER230);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER230_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER230, DroolsEditorType.SYMBOL);;	
            	    }
            	    pushFollow(FOLLOW_unary_constr_in_and_constr4006);
            	    unary_constr231=unary_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr231.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_constr"

    public static class unary_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_constr"
    // src/main/resources/org/drools/lang/DRL.g:990:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );
    public final DRLParser.unary_constr_return unary_constr() throws RecognitionException {
        DRLParser.unary_constr_return retval = new DRLParser.unary_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN235=null;
        Token RIGHT_PAREN237=null;
        DRLParser.eval_key_return eval_key232 = null;

        DRLParser.paren_chunk_return paren_chunk233 = null;

        DRLParser.field_constraint_return field_constraint234 = null;

        DRLParser.or_constr_return or_constr236 = null;


        Object LEFT_PAREN235_tree=null;
        Object RIGHT_PAREN237_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:994:2: ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN )
            int alt74=3;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:994:4: eval_key paren_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_eval_key_in_unary_constr4039);
                    eval_key232=eval_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(eval_key232.getTree(), root_0);
                    pushFollow(FOLLOW_paren_chunk_in_unary_constr4042);
                    paren_chunk233=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk233.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:995:4: field_constraint
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_field_constraint_in_unary_constr4047);
                    field_constraint234=field_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_constraint234.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:996:5: LEFT_PAREN or_constr RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN235=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_constr4053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN235, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_constr_in_unary_constr4063);
                    or_constr236=or_constr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr236.getTree());
                    RIGHT_PAREN237=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_constr4068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN237_tree = (Object)adaptor.create(RIGHT_PAREN237);
                    adaptor.addChild(root_0, RIGHT_PAREN237_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN237, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS)
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}

        }
        return retval;
    }
    // $ANTLR end "unary_constr"

    public static class field_constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_constraint"
    // src/main/resources/org/drools/lang/DRL.g:1009:1: field_constraint : ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) );
    public final DRLParser.field_constraint_return field_constraint() throws RecognitionException {
        DRLParser.field_constraint_return retval = new DRLParser.field_constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token arw=null;
        DRLParser.label_return label238 = null;

        DRLParser.accessor_path_return accessor_path239 = null;

        DRLParser.or_restr_connective_return or_restr_connective240 = null;

        DRLParser.paren_chunk_return paren_chunk241 = null;

        DRLParser.accessor_path_return accessor_path242 = null;

        DRLParser.or_restr_connective_return or_restr_connective243 = null;


        Object arw_tree=null;
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");

        	boolean isArrow = false;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1012:3: ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ID) ) {
                int LA76_1 = input.LA(2);

                if ( ((LA76_1>=ID && LA76_1<=DOT)||LA76_1==LEFT_PAREN||(LA76_1>=EQUALS && LA76_1<=LEFT_SQUARE)) ) {
                    alt76=2;
                }
                else if ( (LA76_1==COLON) ) {
                    alt76=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1012:5: label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )?
                    {
                    pushFollow(FOLLOW_label_in_field_constraint4088);
                    label238=label();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label.add(label238.getTree());
                    pushFollow(FOLLOW_accessor_path_in_field_constraint4090);
                    accessor_path239=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path239.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1013:3: ( or_restr_connective | arw= ARROW paren_chunk )?
                    int alt75=3;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                        alt75=1;
                    }
                    else if ( (LA75_0==LEFT_PAREN||(LA75_0>=EQUALS && LA75_0<=NOT_EQUALS)) ) {
                        alt75=1;
                    }
                    else if ( (LA75_0==ARROW) ) {
                        alt75=2;
                    }
                    switch (alt75) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1013:5: or_restr_connective
                            {
                            pushFollow(FOLLOW_or_restr_connective_in_field_constraint4097);
                            or_restr_connective240=or_restr_connective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective240.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1013:27: arw= ARROW paren_chunk
                            {
                            arw=(Token)match(input,ARROW,FOLLOW_ARROW_in_field_constraint4103); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ARROW.add(arw);

                            if ( state.backtracking==0 ) {
                              	helper.emit(arw, DroolsEditorType.SYMBOL);	
                            }
                            pushFollow(FOLLOW_paren_chunk_in_field_constraint4107);
                            paren_chunk241=paren_chunk();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk241.getTree());
                            if ( state.backtracking==0 ) {
                              isArrow = true;
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: accessor_path, or_restr_connective, paren_chunk, label, label, accessor_path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1014:3: -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )?
                    if (isArrow) {
                        // src/main/resources/org/drools/lang/DRL.g:1014:17: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1014:39: ^( VT_FIELD accessor_path )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        // src/main/resources/org/drools/lang/DRL.g:1014:66: ( ^( VK_EVAL[$arw] paren_chunk ) )?
                        if ( stream_paren_chunk.hasNext() ) {
                            // src/main/resources/org/drools/lang/DRL.g:1014:66: ^( VK_EVAL[$arw] paren_chunk )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VK_EVAL, arw), root_1);

                            adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_paren_chunk.reset();

                    }
                    else // 1015:3: -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:1015:6: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1015:28: ^( VT_FIELD accessor_path ( or_restr_connective )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1015:53: ( or_restr_connective )?
                        if ( stream_or_restr_connective.hasNext() ) {
                            adaptor.addChild(root_2, stream_or_restr_connective.nextTree());

                        }
                        stream_or_restr_connective.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1016:4: accessor_path or_restr_connective
                    {
                    pushFollow(FOLLOW_accessor_path_in_field_constraint4161);
                    accessor_path242=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path242.getTree());
                    pushFollow(FOLLOW_or_restr_connective_in_field_constraint4163);
                    or_restr_connective243=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective243.getTree());


                    // AST REWRITE
                    // elements: or_restr_connective, accessor_path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1017:3: -> ^( VT_FIELD accessor_path or_restr_connective )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:1017:6: ^( VT_FIELD accessor_path or_restr_connective )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_accessor_path.nextTree());
                        adaptor.addChild(root_1, stream_or_restr_connective.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "field_constraint"

    public static class label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // src/main/resources/org/drools/lang/DRL.g:1020:1: label : value= ID COLON -> VT_LABEL[$value] ;
    public final DRLParser.label_return label() throws RecognitionException {
        DRLParser.label_return retval = new DRLParser.label_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;
        Token COLON244=null;

        Object value_tree=null;
        Object COLON244_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1021:2: (value= ID COLON -> VT_LABEL[$value] )
            // src/main/resources/org/drools/lang/DRL.g:1021:4: value= ID COLON
            {
            value=(Token)match(input,ID,FOLLOW_ID_in_label4188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(value);

            if ( state.backtracking==0 ) {
              	helper.emit(value, DroolsEditorType.IDENTIFIER_VARIABLE);	
            }
            COLON244=(Token)match(input,COLON,FOLLOW_COLON_in_label4195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON244);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON244, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1023:3: -> VT_LABEL[$value]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_LABEL, value));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class or_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:1026:1: or_restr_connective : and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* ;
    public final DRLParser.or_restr_connective_return or_restr_connective() throws RecognitionException {
        DRLParser.or_restr_connective_return retval = new DRLParser.or_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE246=null;
        DRLParser.and_restr_connective_return and_restr_connective245 = null;

        DRLParser.and_restr_connective_return and_restr_connective247 = null;


        Object DOUBLE_PIPE246_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1027:2: ( and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* )
            // src/main/resources/org/drools/lang/DRL.g:1027:4: and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4216);
            and_restr_connective245=and_restr_connective();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective245.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1027:25: ({...}? => DOUBLE_PIPE and_restr_connective )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==DOUBLE_PIPE) ) {
                    int LA77_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt77=1;
                    }


                }


                switch (alt77) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1027:26: {...}? => DOUBLE_PIPE and_restr_connective
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "or_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_PIPE246=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective4222); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE246_tree = (Object)adaptor.create(DOUBLE_PIPE246);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE246_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE246, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4230);
            	    and_restr_connective247=and_restr_connective();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective247.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_restr_connective"

    public static class and_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:1040:1: and_restr_connective : constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* ;
    public final DRLParser.and_restr_connective_return and_restr_connective() throws RecognitionException {
        DRLParser.and_restr_connective_return retval = new DRLParser.and_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER249=null;
        DRLParser.constraint_expression_return constraint_expression248 = null;

        DRLParser.constraint_expression_return constraint_expression250 = null;


        Object DOUBLE_AMPER249_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1041:2: ( constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* )
            // src/main/resources/org/drools/lang/DRL.g:1041:4: constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4251);
            constraint_expression248=constraint_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression248.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1041:26: ({...}? => DOUBLE_AMPER constraint_expression )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==DOUBLE_AMPER) ) {
                    int LA78_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt78=1;
                    }


                }


                switch (alt78) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1041:27: {...}? => DOUBLE_AMPER constraint_expression
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "and_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_AMPER249=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_restr_connective4257); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER249_tree = (Object)adaptor.create(DOUBLE_AMPER249);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER249_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER249, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4264);
            	    constraint_expression250=constraint_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression250.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_restr_connective"

    public static class constraint_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_expression"
    // src/main/resources/org/drools/lang/DRL.g:1054:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );
    public final DRLParser.constraint_expression_return constraint_expression() throws RecognitionException {
        DRLParser.constraint_expression_return retval = new DRLParser.constraint_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN253=null;
        Token RIGHT_PAREN255=null;
        DRLParser.compound_operator_return compound_operator251 = null;

        DRLParser.simple_operator_return simple_operator252 = null;

        DRLParser.or_restr_connective_return or_restr_connective254 = null;


        Object LEFT_PAREN253_tree=null;
        Object RIGHT_PAREN255_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1056:2: ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN )
            int alt79=3;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1056:4: compound_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compound_operator_in_constraint_expression4294);
                    compound_operator251=compound_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_operator251.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1057:4: simple_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_operator_in_constraint_expression4299);
                    simple_operator252=simple_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_operator252.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1058:4: LEFT_PAREN or_restr_connective RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN253=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression4304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN253, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_restr_connective_in_constraint_expression4313);
                    or_restr_connective254=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_restr_connective254.getTree());
                    RIGHT_PAREN255=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression4318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN255_tree = (Object)adaptor.create(RIGHT_PAREN255);
                    adaptor.addChild(root_0, RIGHT_PAREN255_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN255, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && 
            				input.LA(2) == ID && helper.validateLT(1, DroolsSoftKeywords.NOT)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF  && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.IN)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS){
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_END);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "constraint_expression"

    public static class simple_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_operator"
    // src/main/resources/org/drools/lang/DRL.g:1104:1: simple_operator : ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value ;
    public final DRLParser.simple_operator_return simple_operator() throws RecognitionException {
        DRLParser.simple_operator_return retval = new DRLParser.simple_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS256=null;
        Token GREATER257=null;
        Token GREATER_EQUALS258=null;
        Token LESS259=null;
        Token LESS_EQUALS260=null;
        Token NOT_EQUALS261=null;
        DRLParser.not_key_return not_key262 = null;

        DRLParser.operator_key_return operator_key263 = null;

        DRLParser.operator_params_return operator_params264 = null;

        DRLParser.expression_value_return expression_value265 = null;


        Object EQUALS256_tree=null;
        Object GREATER257_tree=null;
        Object GREATER_EQUALS258_tree=null;
        Object LESS259_tree=null;
        Object LESS_EQUALS260_tree=null;
        Object NOT_EQUALS261_tree=null;

        if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
        try {
            // src/main/resources/org/drools/lang/DRL.g:1106:2: ( ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value )
            // src/main/resources/org/drools/lang/DRL.g:1107:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1107:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) )
            int alt82=7;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==EQUALS) ) {
                alt82=1;
            }
            else if ( (LA82_0==GREATER) ) {
                alt82=2;
            }
            else if ( (LA82_0==GREATER_EQUALS) ) {
                alt82=3;
            }
            else if ( (LA82_0==LESS) ) {
                alt82=4;
            }
            else if ( (LA82_0==LESS_EQUALS) ) {
                alt82=5;
            }
            else if ( (LA82_0==NOT_EQUALS) ) {
                alt82=6;
            }
            else if ( (LA82_0==ID) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                alt82=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1108:3: EQUALS
                    {
                    EQUALS256=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator4353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS256_tree = (Object)adaptor.create(EQUALS256);
                    root_0 = (Object)adaptor.becomeRoot(EQUALS256_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(EQUALS256, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1109:4: GREATER
                    {
                    GREATER257=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4361); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER257_tree = (Object)adaptor.create(GREATER257);
                    root_0 = (Object)adaptor.becomeRoot(GREATER257_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER257, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1110:4: GREATER_EQUALS
                    {
                    GREATER_EQUALS258=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator4369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_EQUALS258_tree = (Object)adaptor.create(GREATER_EQUALS258);
                    root_0 = (Object)adaptor.becomeRoot(GREATER_EQUALS258_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER_EQUALS258, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1111:4: LESS
                    {
                    LESS259=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS259_tree = (Object)adaptor.create(LESS259);
                    root_0 = (Object)adaptor.becomeRoot(LESS259_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS259, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1112:4: LESS_EQUALS
                    {
                    LESS_EQUALS260=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator4385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_EQUALS260_tree = (Object)adaptor.create(LESS_EQUALS260);
                    root_0 = (Object)adaptor.becomeRoot(LESS_EQUALS260_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS_EQUALS260, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1113:4: NOT_EQUALS
                    {
                    NOT_EQUALS261=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator4393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EQUALS261_tree = (Object)adaptor.create(NOT_EQUALS261);
                    root_0 = (Object)adaptor.becomeRoot(NOT_EQUALS261_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NOT_EQUALS261, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1114:4: ( not_key )? ( operator_key ( operator_params )? )
                    {
                    // src/main/resources/org/drools/lang/DRL.g:1114:4: ( not_key )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==ID) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                        int LA80_1 = input.LA(2);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                            alt80=1;
                        }
                    }
                    switch (alt80) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1114:4: not_key
                            {
                            pushFollow(FOLLOW_not_key_in_simple_operator4401);
                            not_key262=not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key262.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1115:3: ( operator_key ( operator_params )? )
                    // src/main/resources/org/drools/lang/DRL.g:1115:5: operator_key ( operator_params )?
                    {
                    pushFollow(FOLLOW_operator_key_in_simple_operator4408);
                    operator_key263=operator_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(operator_key263.getTree(), root_0);
                    // src/main/resources/org/drools/lang/DRL.g:1115:19: ( operator_params )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==LEFT_SQUARE) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1115:20: operator_params
                            {
                            pushFollow(FOLLOW_operator_params_in_simple_operator4412);
                            operator_params264=operator_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_params264.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            pushFollow(FOLLOW_expression_value_in_simple_operator4425);
            expression_value265=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value265.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_operator"

    public static class operator_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_params"
    // src/main/resources/org/drools/lang/DRL.g:1121:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );
    public final DRLParser.operator_params_return operator_params() throws RecognitionException {
        DRLParser.operator_params_return retval = new DRLParser.operator_params_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.operator_args_return ops = null;

        DRLParser.square_chunk_return square_chunk266 = null;


        RewriteRuleSubtreeStream stream_operator_args=new RewriteRuleSubtreeStream(adaptor,"rule operator_args");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1122:2: ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk )
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1122:4: ( operator_args )=>ops= operator_args
                    {
                    pushFollow(FOLLOW_operator_args_in_operator_params4444);
                    ops=operator_args();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_operator_args.add(ops.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1123:2: -> VT_SQUARE_CHUNK[$ops.start, $ops.text]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (ops!=null?((Token)ops.start):null), (ops!=null?input.toString(ops.start,ops.stop):null)));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1124:4: square_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_square_chunk_in_operator_params4456);
                    square_chunk266=square_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk266.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_params"

    public static class operator_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_args"
    // src/main/resources/org/drools/lang/DRL.g:1127:1: operator_args : LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE ;
    public final DRLParser.operator_args_return operator_args() throws RecognitionException {
        DRLParser.operator_args_return retval = new DRLParser.operator_args_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE267=null;
        Token COMMA269=null;
        Token RIGHT_SQUARE271=null;
        DRLParser.operator_arg_return operator_arg268 = null;

        DRLParser.operator_arg_return operator_arg270 = null;


        Object LEFT_SQUARE267_tree=null;
        Object COMMA269_tree=null;
        Object RIGHT_SQUARE271_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1128:2: ( LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1128:4: LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE267=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_operator_args4467); if (state.failed) return retval;
            pushFollow(FOLLOW_operator_arg_in_operator_args4470);
            operator_arg268=operator_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg268.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1128:30: ( COMMA operator_arg )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1128:31: COMMA operator_arg
            	    {
            	    COMMA269=(Token)match(input,COMMA,FOLLOW_COMMA_in_operator_args4473); if (state.failed) return retval;
            	    pushFollow(FOLLOW_operator_arg_in_operator_args4476);
            	    operator_arg270=operator_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg270.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            RIGHT_SQUARE271=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_operator_args4480); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_args"

    public static class operator_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_arg"
    // src/main/resources/org/drools/lang/DRL.g:1131:1: operator_arg : TimePeriod ;
    public final DRLParser.operator_arg_return operator_arg() throws RecognitionException {
        DRLParser.operator_arg_return retval = new DRLParser.operator_arg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TimePeriod272=null;

        Object TimePeriod272_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1132:2: ( TimePeriod )
            // src/main/resources/org/drools/lang/DRL.g:1132:4: TimePeriod
            {
            root_0 = (Object)adaptor.nil();

            TimePeriod272=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_operator_arg4493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TimePeriod272_tree = (Object)adaptor.create(TimePeriod272);
            adaptor.addChild(root_0, TimePeriod272_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_arg"

    public static class compound_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_operator"
    // src/main/resources/org/drools/lang/DRL.g:1136:1: compound_operator : ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN ;
    public final DRLParser.compound_operator_return compound_operator() throws RecognitionException {
        DRLParser.compound_operator_return retval = new DRLParser.compound_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN276=null;
        Token COMMA278=null;
        Token RIGHT_PAREN280=null;
        DRLParser.in_key_return in_key273 = null;

        DRLParser.not_key_return not_key274 = null;

        DRLParser.in_key_return in_key275 = null;

        DRLParser.expression_value_return expression_value277 = null;

        DRLParser.expression_value_return expression_value279 = null;


        Object LEFT_PAREN276_tree=null;
        Object COMMA278_tree=null;
        Object RIGHT_PAREN280_tree=null;

         if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:1138:2: ( ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1139:2: ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1139:2: ( in_key | not_key in_key )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                int LA85_1 = input.LA(2);

                if ( (LA85_1==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
                    alt85=1;
                }
                else if ( (LA85_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1139:4: in_key
                    {
                    pushFollow(FOLLOW_in_key_in_compound_operator4516);
                    in_key273=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key273.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1139:14: not_key in_key
                    {
                    pushFollow(FOLLOW_not_key_in_compound_operator4521);
                    not_key274=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key274.getTree());
                    pushFollow(FOLLOW_in_key_in_compound_operator4523);
                    in_key275=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key275.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            LEFT_PAREN276=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN276, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_expression_value_in_compound_operator4542);
            expression_value277=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value277.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1142:21: ( COMMA expression_value )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==COMMA) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1142:23: COMMA expression_value
            	    {
            	    COMMA278=(Token)match(input,COMMA,FOLLOW_COMMA_in_compound_operator4546); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA278, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_expression_value_in_compound_operator4551);
            	    expression_value279=expression_value();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value279.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);

            RIGHT_PAREN280=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN280_tree = (Object)adaptor.create(RIGHT_PAREN280);
            adaptor.addChild(root_0, RIGHT_PAREN280_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN280, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
            		helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}	
        }
        return retval;
    }
    // $ANTLR end "compound_operator"

    public static class expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_value"
    // src/main/resources/org/drools/lang/DRL.g:1153:1: expression_value : ( accessor_path | signed_literal | paren_chunk ) ;
    public final DRLParser.expression_value_return expression_value() throws RecognitionException {
        DRLParser.expression_value_return retval = new DRLParser.expression_value_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accessor_path_return accessor_path281 = null;

        DRLParser.signed_literal_return signed_literal282 = null;

        DRLParser.paren_chunk_return paren_chunk283 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1154:2: ( ( accessor_path | signed_literal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:1154:4: ( accessor_path | signed_literal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1154:4: ( accessor_path | signed_literal | paren_chunk )
            int alt87=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt87=1;
                }
                break;
            case STRING:
            case BOOL:
            case DECIMAL:
            case NULL:
            case PLUS:
            case MINUS:
            case HEX:
            case FLOAT:
                {
                alt87=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1154:5: accessor_path
                    {
                    pushFollow(FOLLOW_accessor_path_in_expression_value4580);
                    accessor_path281=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_path281.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1155:4: signed_literal
                    {
                    pushFollow(FOLLOW_signed_literal_in_expression_value4585);
                    signed_literal282=signed_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_literal282.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1156:4: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_expression_value4591);
                    paren_chunk283=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk283.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if (helper.isEditorInterfaceEnabled && !(input.LA(1) == EOF && input.get(input.index() - 1).getType() != WS))
              			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF) {
            		if (input.LA(1) == DOUBLE_PIPE) {
            			helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "expression_value"

    public static class signed_literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_literal"
    // src/main/resources/org/drools/lang/DRL.g:1170:1: signed_literal : ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL );
    public final DRLParser.signed_literal_return signed_literal() throws RecognitionException {
        DRLParser.signed_literal_return retval = new DRLParser.signed_literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING284=null;
        Token BOOL288=null;
        Token NULL289=null;
        DRLParser.signed_decimal_return signed_decimal285 = null;

        DRLParser.signed_hex_return signed_hex286 = null;

        DRLParser.signed_float_return signed_float287 = null;


        Object STRING284_tree=null;
        Object BOOL288_tree=null;
        Object NULL289_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1171:9: ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL )
            int alt88=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt88=1;
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case HEX:
                    {
                    alt88=3;
                    }
                    break;
                case FLOAT:
                    {
                    alt88=4;
                    }
                    break;
                case DECIMAL:
                    {
                    alt88=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 2, input);

                    throw nvae;
                }

                }
                break;
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case HEX:
                    {
                    alt88=3;
                    }
                    break;
                case DECIMAL:
                    {
                    alt88=2;
                    }
                    break;
                case FLOAT:
                    {
                    alt88=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 3, input);

                    throw nvae;
                }

                }
                break;
            case DECIMAL:
                {
                alt88=2;
                }
                break;
            case HEX:
                {
                alt88=3;
                }
                break;
            case FLOAT:
                {
                alt88=4;
                }
                break;
            case BOOL:
                {
                alt88=5;
                }
                break;
            case NULL:
                {
                alt88=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1171:17: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING284=(Token)match(input,STRING,FOLLOW_STRING_in_signed_literal4623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING284_tree = (Object)adaptor.create(STRING284);
                    adaptor.addChild(root_0, STRING284_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(STRING284, DroolsEditorType.STRING_CONST);  
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1172:17: signed_decimal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_decimal_in_signed_literal4660);
                    signed_decimal285=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal285.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1173:17: signed_hex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_hex_in_signed_literal4678);
                    signed_hex286=signed_hex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_hex286.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1174:17: signed_float
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_float_in_signed_literal4696);
                    signed_float287=signed_float();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_float287.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1175:17: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL288=(Token)match(input,BOOL,FOLLOW_BOOL_in_signed_literal4714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL288_tree = (Object)adaptor.create(BOOL288);
                    adaptor.addChild(root_0, BOOL288_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(BOOL288, DroolsEditorType.BOOLEAN_CONST); 
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1176:17: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL289=(Token)match(input,NULL,FOLLOW_NULL_in_signed_literal4753); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL289_tree = (Object)adaptor.create(NULL289);
                    adaptor.addChild(root_0, NULL289_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(NULL289, DroolsEditorType.NULL_CONST); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_literal"

    public static class signed_decimal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal"
    // src/main/resources/org/drools/lang/DRL.g:1179:1: signed_decimal : sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] ;
    public final DRLParser.signed_decimal_return signed_decimal() throws RecognitionException {
        DRLParser.signed_decimal_return retval = new DRLParser.signed_decimal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_decimal_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_decimal_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_decimal_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1180:9: (sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1180:17: sdm= signed_decimal_match
            {
            pushFollow(FOLLOW_signed_decimal_match_in_signed_decimal4807);
            sdm=signed_decimal_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_decimal_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1180:42: -> SIGNED_DECIMAL[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_DECIMAL, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal"

    public static class signed_decimal_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal_match"
    // src/main/resources/org/drools/lang/DRL.g:1183:1: signed_decimal_match : ( PLUS | MINUS )? DECIMAL ;
    public final DRLParser.signed_decimal_match_return signed_decimal_match() throws RecognitionException {
        DRLParser.signed_decimal_match_return retval = new DRLParser.signed_decimal_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS290=null;
        Token MINUS291=null;
        Token DECIMAL292=null;

        Object PLUS290_tree=null;
        Object MINUS291_tree=null;
        Object DECIMAL292_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1184:9: ( ( PLUS | MINUS )? DECIMAL )
            // src/main/resources/org/drools/lang/DRL.g:1184:17: ( PLUS | MINUS )? DECIMAL
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1184:17: ( PLUS | MINUS )?
            int alt89=3;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==PLUS) ) {
                alt89=1;
            }
            else if ( (LA89_0==MINUS) ) {
                alt89=2;
            }
            switch (alt89) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1184:18: PLUS
                    {
                    PLUS290=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_decimal_match4844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS290_tree = (Object)adaptor.create(PLUS290);
                    adaptor.addChild(root_0, PLUS290_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS290, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1184:81: MINUS
                    {
                    MINUS291=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_decimal_match4850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS291_tree = (Object)adaptor.create(MINUS291);
                    adaptor.addChild(root_0, MINUS291_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS291, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            DECIMAL292=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_signed_decimal_match4872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECIMAL292_tree = (Object)adaptor.create(DECIMAL292);
            adaptor.addChild(root_0, DECIMAL292_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(DECIMAL292, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal_match"

    public static class signed_hex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex"
    // src/main/resources/org/drools/lang/DRL.g:1188:1: signed_hex : sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] ;
    public final DRLParser.signed_hex_return signed_hex() throws RecognitionException {
        DRLParser.signed_hex_return retval = new DRLParser.signed_hex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_hex_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_hex_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_hex_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1189:9: (sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1189:17: sdm= signed_hex_match
            {
            pushFollow(FOLLOW_signed_hex_match_in_signed_hex4907);
            sdm=signed_hex_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_hex_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1189:38: -> SIGNED_HEX[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_HEX, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex"

    public static class signed_hex_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex_match"
    // src/main/resources/org/drools/lang/DRL.g:1192:1: signed_hex_match : ( PLUS | MINUS )? HEX ;
    public final DRLParser.signed_hex_match_return signed_hex_match() throws RecognitionException {
        DRLParser.signed_hex_match_return retval = new DRLParser.signed_hex_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS293=null;
        Token MINUS294=null;
        Token HEX295=null;

        Object PLUS293_tree=null;
        Object MINUS294_tree=null;
        Object HEX295_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1193:9: ( ( PLUS | MINUS )? HEX )
            // src/main/resources/org/drools/lang/DRL.g:1193:17: ( PLUS | MINUS )? HEX
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1193:17: ( PLUS | MINUS )?
            int alt90=3;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==PLUS) ) {
                alt90=1;
            }
            else if ( (LA90_0==MINUS) ) {
                alt90=2;
            }
            switch (alt90) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1193:18: PLUS
                    {
                    PLUS293=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_hex_match4944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS293_tree = (Object)adaptor.create(PLUS293);
                    adaptor.addChild(root_0, PLUS293_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS293, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1193:81: MINUS
                    {
                    MINUS294=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_hex_match4950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS294_tree = (Object)adaptor.create(MINUS294);
                    adaptor.addChild(root_0, MINUS294_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS294, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            HEX295=(Token)match(input,HEX,FOLLOW_HEX_in_signed_hex_match4972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            HEX295_tree = (Object)adaptor.create(HEX295);
            adaptor.addChild(root_0, HEX295_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(HEX295, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex_match"

    public static class signed_float_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float"
    // src/main/resources/org/drools/lang/DRL.g:1197:1: signed_float : sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] ;
    public final DRLParser.signed_float_return signed_float() throws RecognitionException {
        DRLParser.signed_float_return retval = new DRLParser.signed_float_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_float_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_float_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_float_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1198:9: (sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1198:17: sdm= signed_float_match
            {
            pushFollow(FOLLOW_signed_float_match_in_signed_float5007);
            sdm=signed_float_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_float_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1198:40: -> SIGNED_FLOAT[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_FLOAT, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float"

    public static class signed_float_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float_match"
    // src/main/resources/org/drools/lang/DRL.g:1201:1: signed_float_match : ( PLUS | MINUS )? FLOAT ;
    public final DRLParser.signed_float_match_return signed_float_match() throws RecognitionException {
        DRLParser.signed_float_match_return retval = new DRLParser.signed_float_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS296=null;
        Token MINUS297=null;
        Token FLOAT298=null;

        Object PLUS296_tree=null;
        Object MINUS297_tree=null;
        Object FLOAT298_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1202:9: ( ( PLUS | MINUS )? FLOAT )
            // src/main/resources/org/drools/lang/DRL.g:1202:17: ( PLUS | MINUS )? FLOAT
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1202:17: ( PLUS | MINUS )?
            int alt91=3;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==PLUS) ) {
                alt91=1;
            }
            else if ( (LA91_0==MINUS) ) {
                alt91=2;
            }
            switch (alt91) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1202:18: PLUS
                    {
                    PLUS296=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_float_match5044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS296_tree = (Object)adaptor.create(PLUS296);
                    adaptor.addChild(root_0, PLUS296_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS296, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1202:81: MINUS
                    {
                    MINUS297=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_float_match5050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS297_tree = (Object)adaptor.create(MINUS297);
                    adaptor.addChild(root_0, MINUS297_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS297, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            FLOAT298=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_signed_float_match5072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLOAT298_tree = (Object)adaptor.create(FLOAT298);
            adaptor.addChild(root_0, FLOAT298_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(FLOAT298, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float_match"

    public static class pattern_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_type"
    // src/main/resources/org/drools/lang/DRL.g:1205:1: pattern_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.pattern_type_return pattern_type() throws RecognitionException {
        DRLParser.pattern_type_return retval = new DRLParser.pattern_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition299 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1206:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1206:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type5093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1206:11: (id+= DOT id+= ID )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==DOT) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1206:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_type5099); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type5103); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PATTERN, helper.buildStringFromTokens(list_id));	
            }
            // src/main/resources/org/drools/lang/DRL.g:1209:6: ( dimension_definition )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==LEFT_SQUARE) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1209:6: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_pattern_type5118);
            	    dimension_definition299=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition299.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);



            // AST REWRITE
            // elements: ID, dimension_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1210:3: -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1210:6: ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN_TYPE, "VT_PATTERN_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1210:28: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern_type"

    public static class data_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // src/main/resources/org/drools/lang/DRL.g:1213:1: data_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.data_type_return data_type() throws RecognitionException {
        DRLParser.data_type_return retval = new DRLParser.data_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition300 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1214:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1214:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_data_type5146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1214:11: (id+= DOT id+= ID )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==DOT) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1214:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_data_type5152); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_data_type5156); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:1214:31: ( dimension_definition )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==LEFT_SQUARE) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1214:31: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_data_type5161);
            	    dimension_definition300=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition300.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);	
            }


            // AST REWRITE
            // elements: dimension_definition, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1216:3: -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1216:6: ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_DATA_TYPE, "VT_DATA_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1216:25: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class dimension_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dimension_definition"
    // src/main/resources/org/drools/lang/DRL.g:1219:1: dimension_definition : LEFT_SQUARE RIGHT_SQUARE ;
    public final DRLParser.dimension_definition_return dimension_definition() throws RecognitionException {
        DRLParser.dimension_definition_return retval = new DRLParser.dimension_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE301=null;
        Token RIGHT_SQUARE302=null;

        Object LEFT_SQUARE301_tree=null;
        Object RIGHT_SQUARE302_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1220:2: ( LEFT_SQUARE RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1220:4: LEFT_SQUARE RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE301=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_dimension_definition5190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE301_tree = (Object)adaptor.create(LEFT_SQUARE301);
            adaptor.addChild(root_0, LEFT_SQUARE301_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_SQUARE301, DroolsEditorType.SYMBOL);	
            }
            RIGHT_SQUARE302=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_dimension_definition5197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE302_tree = (Object)adaptor.create(RIGHT_SQUARE302);
            adaptor.addChild(root_0, RIGHT_SQUARE302_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_SQUARE302, DroolsEditorType.SYMBOL);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dimension_definition"

    public static class accessor_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_path"
    // src/main/resources/org/drools/lang/DRL.g:1224:1: accessor_path : accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) ;
    public final DRLParser.accessor_path_return accessor_path() throws RecognitionException {
        DRLParser.accessor_path_return retval = new DRLParser.accessor_path_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT304=null;
        DRLParser.accessor_element_return accessor_element303 = null;

        DRLParser.accessor_element_return accessor_element305 = null;


        Object DOT304_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_accessor_element=new RewriteRuleSubtreeStream(adaptor,"rule accessor_element");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1225:2: ( accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1225:4: accessor_element ( DOT accessor_element )*
            {
            pushFollow(FOLLOW_accessor_element_in_accessor_path5211);
            accessor_element303=accessor_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element303.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1225:21: ( DOT accessor_element )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==DOT) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1225:23: DOT accessor_element
            	    {
            	    DOT304=(Token)match(input,DOT,FOLLOW_DOT_in_accessor_path5215); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT304);

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOT304, DroolsEditorType.IDENTIFIER);	
            	    }
            	    pushFollow(FOLLOW_accessor_element_in_accessor_path5219);
            	    accessor_element305=accessor_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element305.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);



            // AST REWRITE
            // elements: accessor_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1226:2: -> ^( VT_ACCESSOR_PATH ( accessor_element )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1226:5: ^( VT_ACCESSOR_PATH ( accessor_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_PATH, "VT_ACCESSOR_PATH"), root_1);

                if ( !(stream_accessor_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_accessor_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessor_element.nextTree());

                }
                stream_accessor_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_path"

    public static class accessor_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_element"
    // src/main/resources/org/drools/lang/DRL.g:1229:1: accessor_element : ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) ;
    public final DRLParser.accessor_element_return accessor_element() throws RecognitionException {
        DRLParser.accessor_element_return retval = new DRLParser.accessor_element_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID306=null;
        DRLParser.square_chunk_return square_chunk307 = null;


        Object ID306_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1230:2: ( ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1230:4: ID ( square_chunk )*
            {
            ID306=(Token)match(input,ID,FOLLOW_ID_in_accessor_element5243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID306);

            if ( state.backtracking==0 ) {
              	helper.emit(ID306, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1231:3: ( square_chunk )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==LEFT_SQUARE) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1231:3: square_chunk
            	    {
            	    pushFollow(FOLLOW_square_chunk_in_accessor_element5249);
            	    square_chunk307=square_chunk();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_square_chunk.add(square_chunk307.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);



            // AST REWRITE
            // elements: ID, square_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1232:2: -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1232:5: ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_ELEMENT, "VT_ACCESSOR_ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // src/main/resources/org/drools/lang/DRL.g:1232:30: ( square_chunk )*
                while ( stream_square_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_square_chunk.nextTree());

                }
                stream_square_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_element"

    public static class rhs_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1238:1: rhs_chunk : rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] ;
    public final DRLParser.rhs_chunk_return rhs_chunk() throws RecognitionException {
        DRLParser.rhs_chunk_return retval = new DRLParser.rhs_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rhs_chunk_data_return rc = null;


        RewriteRuleSubtreeStream stream_rhs_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1241:3: (rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1241:5: rc= rhs_chunk_data
            {
            pushFollow(FOLLOW_rhs_chunk_data_in_rhs_chunk5281);
            rc=rhs_chunk_data();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk_data.add(rc.getTree());
            if ( state.backtracking==0 ) {
              text = (rc!=null?input.toString(rc.start,rc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1242:2: -> VT_RHS_CHUNK[$rc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_RHS_CHUNK, (rc!=null?((Token)rc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk"

    public static class rhs_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1245:1: rhs_chunk_data : THEN ( not_end_key )* end_key ( SEMICOLON )? ;
    public final DRLParser.rhs_chunk_data_return rhs_chunk_data() throws RecognitionException {
        DRLParser.rhs_chunk_data_return retval = new DRLParser.rhs_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token THEN308=null;
        Token SEMICOLON311=null;
        DRLParser.not_end_key_return not_end_key309 = null;

        DRLParser.end_key_return end_key310 = null;


        Object THEN308_tree=null;
        Object SEMICOLON311_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1246:2: ( THEN ( not_end_key )* end_key ( SEMICOLON )? )
            // src/main/resources/org/drools/lang/DRL.g:1246:4: THEN ( not_end_key )* end_key ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            THEN308=(Token)match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data5300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN308_tree = (Object)adaptor.create(THEN308);
            adaptor.addChild(root_0, THEN308_tree);
            }
            if ( state.backtracking==0 ) {
              	if ((THEN308!=null?THEN308.getText():null).equalsIgnoreCase("then")){
              			helper.emit(THEN308, DroolsEditorType.KEYWORD);
              			helper.emit(Location.LOCATION_RHS);
              		}	
            }
            // src/main/resources/org/drools/lang/DRL.g:1251:4: ( not_end_key )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==ID) && (((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) {
                    int LA98_1 = input.LA(2);

                    if ( ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                        alt98=1;
                    }


                }
                else if ( ((LA98_0>=VT_COMPILATION_UNIT && LA98_0<=SEMICOLON)||(LA98_0>=DOT && LA98_0<=MISC)) && ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1251:4: not_end_key
            	    {
            	    pushFollow(FOLLOW_not_end_key_in_rhs_chunk_data5309);
            	    not_end_key309=not_end_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_end_key309.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_rhs_chunk_data5315);
            end_key310=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, end_key310.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1253:3: ( SEMICOLON )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==SEMICOLON) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1253:3: SEMICOLON
                    {
                    SEMICOLON311=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data5320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON311_tree = (Object)adaptor.create(SEMICOLON311);
                    adaptor.addChild(root_0, SEMICOLON311_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON311, DroolsEditorType.KEYWORD);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk_data"

    public static class curly_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1256:1: curly_chunk : cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] ;
    public final DRLParser.curly_chunk_return curly_chunk() throws RecognitionException {
        DRLParser.curly_chunk_return retval = new DRLParser.curly_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.curly_chunk_data_return cc = null;


        RewriteRuleSubtreeStream stream_curly_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1259:3: (cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1259:5: cc= curly_chunk_data[false]
            {
            pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk5339);
            cc=curly_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk_data.add(cc.getTree());
            if ( state.backtracking==0 ) {
              text = (cc!=null?input.toString(cc.start,cc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1260:2: -> VT_CURLY_CHUNK[$cc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_CURLY_CHUNK, (cc!=null?((Token)cc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk"

    public static class curly_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1263:1: curly_chunk_data[boolean isRecursive] : lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY ;
    public final DRLParser.curly_chunk_data_return curly_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.curly_chunk_data_return retval = new DRLParser.curly_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lc1=null;
        Token any=null;
        Token rc1=null;
        DRLParser.curly_chunk_data_return curly_chunk_data312 = null;


        Object lc1_tree=null;
        Object any_tree=null;
        Object rc1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1264:2: (lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1264:4: lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            lc1=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_chunk_data5362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lc1_tree = (Object)adaptor.create(lc1);
            adaptor.addChild(root_0, lc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1271:4: (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )*
            loop100:
            do {
                int alt100=3;
                int LA100_0 = input.LA(1);

                if ( ((LA100_0>=VT_COMPILATION_UNIT && LA100_0<=THEN)||(LA100_0>=QUESTION && LA100_0<=MISC)) ) {
                    alt100=1;
                }
                else if ( (LA100_0==LEFT_CURLY) ) {
                    alt100=2;
                }


                switch (alt100) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1271:5: any=~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=THEN)||(input.LA(1)>=QUESTION && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1271:94: curly_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk_data5390);
            	    curly_chunk_data312=curly_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_chunk_data312.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            rc1=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_chunk_data5401); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rc1_tree = (Object)adaptor.create(rc1);
            adaptor.addChild(root_0, rc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk_data"

    public static class paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1281:1: paren_chunk : pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.paren_chunk_return paren_chunk() throws RecognitionException {
        DRLParser.paren_chunk_return retval = new DRLParser.paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1284:3: (pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1284:5: pc= paren_chunk_data[false]
            {
            pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk5422);
            pc=paren_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1285:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk"

    public static class paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1288:1: paren_chunk_data[boolean isRecursive] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN ;
    public final DRLParser.paren_chunk_data_return paren_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.paren_chunk_data_return retval = new DRLParser.paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.paren_chunk_data_return paren_chunk_data313 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1289:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1289:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_chunk_data5446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1296:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )*
            loop101:
            do {
                int alt101=3;
                int LA101_0 = input.LA(1);

                if ( ((LA101_0>=VT_COMPILATION_UNIT && LA101_0<=BOOL)||(LA101_0>=FROM && LA101_0<=MISC)) ) {
                    alt101=1;
                }
                else if ( (LA101_0==LEFT_PAREN) ) {
                    alt101=2;
                }


                switch (alt101) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1296:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1296:94: paren_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk_data5474);
            	    paren_chunk_data313=paren_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk_data313.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_chunk_data5485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk_data"

    public static class square_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1306:1: square_chunk : sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] ;
    public final DRLParser.square_chunk_return square_chunk() throws RecognitionException {
        DRLParser.square_chunk_return retval = new DRLParser.square_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.square_chunk_data_return sc = null;


        RewriteRuleSubtreeStream stream_square_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1309:3: (sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1309:5: sc= square_chunk_data[false]
            {
            pushFollow(FOLLOW_square_chunk_data_in_square_chunk5506);
            sc=square_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_square_chunk_data.add(sc.getTree());
            if ( state.backtracking==0 ) {
              text = (sc!=null?input.toString(sc.start,sc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1310:2: -> VT_SQUARE_CHUNK[$sc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (sc!=null?((Token)sc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk"

    public static class square_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1313:1: square_chunk_data[boolean isRecursive] : ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE ;
    public final DRLParser.square_chunk_data_return square_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.square_chunk_data_return retval = new DRLParser.square_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ls1=null;
        Token any=null;
        Token rs1=null;
        DRLParser.square_chunk_data_return square_chunk_data314 = null;


        Object ls1_tree=null;
        Object any_tree=null;
        Object rs1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1314:2: (ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1314:4: ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            ls1=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_square_chunk_data5529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ls1_tree = (Object)adaptor.create(ls1);
            adaptor.addChild(root_0, ls1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(ls1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(ls1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1321:4: (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )*
            loop102:
            do {
                int alt102=3;
                int LA102_0 = input.LA(1);

                if ( ((LA102_0>=VT_COMPILATION_UNIT && LA102_0<=NOT_EQUALS)||(LA102_0>=NULL && LA102_0<=MISC)) ) {
                    alt102=1;
                }
                else if ( (LA102_0==LEFT_SQUARE) ) {
                    alt102=2;
                }


                switch (alt102) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1321:5: any=~ ( LEFT_SQUARE | RIGHT_SQUARE )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=NOT_EQUALS)||(input.LA(1)>=NULL && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1321:95: square_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_square_chunk_data_in_square_chunk_data5556);
            	    square_chunk_data314=square_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk_data314.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            rs1=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_square_chunk_data5567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rs1_tree = (Object)adaptor.create(rs1);
            adaptor.addChild(root_0, rs1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rs1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rs1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk_data"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // src/main/resources/org/drools/lang/DRL.g:1334:1: literal : ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL );
    public final DRLParser.literal_return literal() throws RecognitionException {
        DRLParser.literal_return retval = new DRLParser.literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING315=null;
        Token DECIMAL316=null;
        Token HEX317=null;
        Token FLOAT318=null;
        Token BOOL319=null;
        Token NULL320=null;

        Object STRING315_tree=null;
        Object DECIMAL316_tree=null;
        Object HEX317_tree=null;
        Object FLOAT318_tree=null;
        Object BOOL319_tree=null;
        Object NULL320_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1335:2: ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL )
            int alt103=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt103=1;
                }
                break;
            case DECIMAL:
                {
                alt103=2;
                }
                break;
            case HEX:
                {
                alt103=3;
                }
                break;
            case FLOAT:
                {
                alt103=4;
                }
                break;
            case BOOL:
                {
                alt103=5;
                }
                break;
            case NULL:
                {
                alt103=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1335:4: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING315=(Token)match(input,STRING,FOLLOW_STRING_in_literal5585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING315_tree = (Object)adaptor.create(STRING315);
                    adaptor.addChild(root_0, STRING315_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(STRING315, DroolsEditorType.STRING_CONST);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1336:4: DECIMAL
                    {
                    root_0 = (Object)adaptor.nil();

                    DECIMAL316=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL316_tree = (Object)adaptor.create(DECIMAL316);
                    adaptor.addChild(root_0, DECIMAL316_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(DECIMAL316, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1337:4: HEX
                    {
                    root_0 = (Object)adaptor.nil();

                    HEX317=(Token)match(input,HEX,FOLLOW_HEX_in_literal5617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX317_tree = (Object)adaptor.create(HEX317);
                    adaptor.addChild(root_0, HEX317_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(HEX317, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1338:4: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();

                    FLOAT318=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT318_tree = (Object)adaptor.create(FLOAT318);
                    adaptor.addChild(root_0, FLOAT318_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FLOAT318, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1339:4: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL319=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL319_tree = (Object)adaptor.create(BOOL319);
                    adaptor.addChild(root_0, BOOL319_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL319, DroolsEditorType.BOOLEAN_CONST);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1340:4: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL320=(Token)match(input,NULL,FOLLOW_NULL_in_literal5666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL320_tree = (Object)adaptor.create(NULL320);
                    adaptor.addChild(root_0, NULL320_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NULL320, DroolsEditorType.NULL_CONST);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // src/main/resources/org/drools/lang/DRL.g:1343:1: typeList : type ( COMMA type )* ;
    public final DRLParser.typeList_return typeList() throws RecognitionException {
        DRLParser.typeList_return retval = new DRLParser.typeList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA322=null;
        DRLParser.type_return type321 = null;

        DRLParser.type_return type323 = null;


        Object COMMA322_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1344:2: ( type ( COMMA type )* )
            // src/main/resources/org/drools/lang/DRL.g:1344:4: type ( COMMA type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5697);
            type321=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type321.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1344:9: ( COMMA type )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==COMMA) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1344:10: COMMA type
            	    {
            	    COMMA322=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5700); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA322_tree = (Object)adaptor.create(COMMA322);
            	    adaptor.addChild(root_0, COMMA322_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList5702);
            	    type323=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type323.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class typeNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeNameList"
    // src/main/resources/org/drools/lang/DRL.g:1347:1: typeNameList : typeName ( COMMA typeName )* ;
    public final DRLParser.typeNameList_return typeNameList() throws RecognitionException {
        DRLParser.typeNameList_return retval = new DRLParser.typeNameList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA325=null;
        DRLParser.typeName_return typeName324 = null;

        DRLParser.typeName_return typeName326 = null;


        Object COMMA325_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1348:2: ( typeName ( COMMA typeName )* )
            // src/main/resources/org/drools/lang/DRL.g:1348:4: typeName ( COMMA typeName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeName_in_typeNameList5716);
            typeName324=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName324.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1348:13: ( COMMA typeName )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1348:14: COMMA typeName
            	    {
            	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeNameList5719); if (state.failed) return retval;
            	    pushFollow(FOLLOW_typeName_in_typeNameList5722);
            	    typeName326=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName326.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeNameList"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // src/main/resources/org/drools/lang/DRL.g:1352:1: type options {backtrack=true; memoize=true; } : ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) );
    public final DRLParser.type_return type() throws RecognitionException {
        DRLParser.type_return retval = new DRLParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE328=null;
        Token RIGHT_SQUARE329=null;
        Token ID330=null;
        Token DOT332=null;
        Token ID333=null;
        Token LEFT_SQUARE335=null;
        Token RIGHT_SQUARE336=null;
        DRLParser.primitiveType_return primitiveType327 = null;

        DRLParser.typeArguments_return typeArguments331 = null;

        DRLParser.typeArguments_return typeArguments334 = null;


        Object LEFT_SQUARE328_tree=null;
        Object RIGHT_SQUARE329_tree=null;
        Object ID330_tree=null;
        Object DOT332_tree=null;
        Object ID333_tree=null;
        Object LEFT_SQUARE335_tree=null;
        Object RIGHT_SQUARE336_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1354:2: ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ID) ) {
                int LA111_1 = input.LA(2);

                if ( (((synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))))) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1354:5: ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1354:24: ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1354:26: primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type5762);
                    primitiveType327=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType327.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1354:40: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==LEFT_SQUARE) ) {
                            int LA106_2 = input.LA(2);

                            if ( (LA106_2==RIGHT_SQUARE) ) {
                                int LA106_3 = input.LA(3);

                                if ( (synpred12_DRL()) ) {
                                    alt106=1;
                                }


                            }


                        }


                        switch (alt106) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1354:41: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE328=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5772); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE328_tree = (Object)adaptor.create(LEFT_SQUARE328);
                    	    adaptor.addChild(root_0, LEFT_SQUARE328_tree);
                    	    }
                    	    RIGHT_SQUARE329=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5774); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE329_tree = (Object)adaptor.create(RIGHT_SQUARE329);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE329_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1355:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1355:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1355:6: ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    ID330=(Token)match(input,ID,FOLLOW_ID_in_type5785); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID330_tree = (Object)adaptor.create(ID330);
                    adaptor.addChild(root_0, ID330_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1355:9: ( ( typeArguments )=> typeArguments )?
                    int alt107=2;
                    alt107 = dfa107.predict(input);
                    switch (alt107) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1355:10: ( typeArguments )=> typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_type5792);
                            typeArguments331=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments331.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1355:43: ( DOT ID ( ( typeArguments )=> typeArguments )? )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==DOT) ) {
                            int LA109_2 = input.LA(2);

                            if ( (LA109_2==ID) ) {
                                alt109=1;
                            }


                        }


                        switch (alt109) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1355:44: DOT ID ( ( typeArguments )=> typeArguments )?
                    	    {
                    	    DOT332=(Token)match(input,DOT,FOLLOW_DOT_in_type5797); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT332_tree = (Object)adaptor.create(DOT332);
                    	    adaptor.addChild(root_0, DOT332_tree);
                    	    }
                    	    ID333=(Token)match(input,ID,FOLLOW_ID_in_type5799); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID333_tree = (Object)adaptor.create(ID333);
                    	    adaptor.addChild(root_0, ID333_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1355:51: ( ( typeArguments )=> typeArguments )?
                    	    int alt108=2;
                    	    alt108 = dfa108.predict(input);
                    	    switch (alt108) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1355:52: ( typeArguments )=> typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_type5806);
                    	            typeArguments334=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments334.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1355:88: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==LEFT_SQUARE) ) {
                            int LA110_2 = input.LA(2);

                            if ( (LA110_2==RIGHT_SQUARE) ) {
                                int LA110_3 = input.LA(3);

                                if ( (synpred15_DRL()) ) {
                                    alt110=1;
                                }


                            }


                        }


                        switch (alt110) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1355:89: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE335=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5821); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE335_tree = (Object)adaptor.create(LEFT_SQUARE335);
                    	    adaptor.addChild(root_0, LEFT_SQUARE335_tree);
                    	    }
                    	    RIGHT_SQUARE336=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5823); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE336_tree = (Object)adaptor.create(RIGHT_SQUARE336);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE336_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop110;
                        }
                    } while (true);


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // src/main/resources/org/drools/lang/DRL.g:1358:1: typeName : ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] ;
    public final DRLParser.typeName_return typeName() throws RecognitionException {
        DRLParser.typeName_return retval = new DRLParser.typeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID337=null;
        Token DOT338=null;
        Token ID339=null;

        Object ID337_tree=null;
        Object DOT338_tree=null;
        Object ID339_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1359:2: ( ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] )
            // src/main/resources/org/drools/lang/DRL.g:1359:6: ID ( DOT ID )*
            {
            ID337=(Token)match(input,ID,FOLLOW_ID_in_typeName5840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID337);

            // src/main/resources/org/drools/lang/DRL.g:1359:9: ( DOT ID )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==DOT) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1359:10: DOT ID
            	    {
            	    DOT338=(Token)match(input,DOT,FOLLOW_DOT_in_typeName5843); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT338);

            	    ID339=(Token)match(input,ID,FOLLOW_ID_in_typeName5845); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(ID339);


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1359:19: -> VT_TYPE_NAME[$typeName.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_NAME, input.toString(retval.start,input.LT(-1))));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // src/main/resources/org/drools/lang/DRL.g:1364:1: packageOrTypeName : id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) ;
    public final DRLParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        DRLParser.packageOrTypeName_return retval = new DRLParser.packageOrTypeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1365:2: (id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1365:4: id+= ID (id+= DOT id+= ID )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1365:11: (id+= DOT id+= ID )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==DOT) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1365:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_packageOrTypeName5879); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5883); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PACKAGE, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1368:3: -> ^( VT_PACKAGE_ID ( ID )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1368:6: ^( VT_PACKAGE_ID ( ID )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PACKAGE_ID, "VT_PACKAGE_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1371:1: typeArguments : LESS typeArgument ( COMMA typeArgument )* GREATER ;
    public final DRLParser.typeArguments_return typeArguments() throws RecognitionException {
        DRLParser.typeArguments_return retval = new DRLParser.typeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS340=null;
        Token COMMA342=null;
        Token GREATER344=null;
        DRLParser.typeArgument_return typeArgument341 = null;

        DRLParser.typeArgument_return typeArgument343 = null;


        Object LESS340_tree=null;
        Object COMMA342_tree=null;
        Object GREATER344_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1372:2: ( LESS typeArgument ( COMMA typeArgument )* GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1372:4: LESS typeArgument ( COMMA typeArgument )* GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS340=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS340_tree = (Object)adaptor.create(LESS340);
            adaptor.addChild(root_0, LESS340_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5913);
            typeArgument341=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument341.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1372:22: ( COMMA typeArgument )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==COMMA) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1372:23: COMMA typeArgument
            	    {
            	    COMMA342=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5916); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA342_tree = (Object)adaptor.create(COMMA342);
            	    adaptor.addChild(root_0, COMMA342_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments5918);
            	    typeArgument343=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument343.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            GREATER344=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER344_tree = (Object)adaptor.create(GREATER344);
            adaptor.addChild(root_0, GREATER344_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // src/main/resources/org/drools/lang/DRL.g:1375:1: typeArgument : ( type | QUESTION ( ( extends_key | super_key ) type )? );
    public final DRLParser.typeArgument_return typeArgument() throws RecognitionException {
        DRLParser.typeArgument_return retval = new DRLParser.typeArgument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION346=null;
        DRLParser.type_return type345 = null;

        DRLParser.extends_key_return extends_key347 = null;

        DRLParser.super_key_return super_key348 = null;

        DRLParser.type_return type349 = null;


        Object QUESTION346_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1376:2: ( type | QUESTION ( ( extends_key | super_key ) type )? )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==ID) ) {
                alt117=1;
            }
            else if ( (LA117_0==QUESTION) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1376:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument5934);
                    type345=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type345.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1377:4: QUESTION ( ( extends_key | super_key ) type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    QUESTION346=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_typeArgument5939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION346_tree = (Object)adaptor.create(QUESTION346);
                    adaptor.addChild(root_0, QUESTION346_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1377:13: ( ( extends_key | super_key ) type )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1377:14: ( extends_key | super_key ) type
                            {
                            // src/main/resources/org/drools/lang/DRL.g:1377:14: ( extends_key | super_key )
                            int alt115=2;
                            int LA115_0 = input.LA(1);

                            if ( (LA115_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
                                int LA115_1 = input.LA(2);

                                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                                    alt115=1;
                                }
                                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                                    alt115=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 115, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 115, 0, input);

                                throw nvae;
                            }
                            switch (alt115) {
                                case 1 :
                                    // src/main/resources/org/drools/lang/DRL.g:1377:15: extends_key
                                    {
                                    pushFollow(FOLLOW_extends_key_in_typeArgument5943);
                                    extends_key347=extends_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key347.getTree());

                                    }
                                    break;
                                case 2 :
                                    // src/main/resources/org/drools/lang/DRL.g:1377:29: super_key
                                    {
                                    pushFollow(FOLLOW_super_key_in_typeArgument5947);
                                    super_key348=super_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key348.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument5950);
                            type349=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type349.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameters"
    // src/main/resources/org/drools/lang/DRL.g:1380:1: parameters : LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) ;
    public final DRLParser.parameters_return parameters() throws RecognitionException {
        DRLParser.parameters_return retval = new DRLParser.parameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN350=null;
        Token COMMA352=null;
        Token RIGHT_PAREN354=null;
        DRLParser.param_definition_return param_definition351 = null;

        DRLParser.param_definition_return param_definition353 = null;


        Object LEFT_PAREN350_tree=null;
        Object COMMA352_tree=null;
        Object RIGHT_PAREN354_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_param_definition=new RewriteRuleSubtreeStream(adaptor,"rule param_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1381:2: ( LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:1381:4: LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN
            {
            LEFT_PAREN350=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parameters5963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN350);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN350, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1382:4: ( param_definition ( COMMA param_definition )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==ID) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1382:6: param_definition ( COMMA param_definition )*
                    {
                    pushFollow(FOLLOW_param_definition_in_parameters5972);
                    param_definition351=param_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_param_definition.add(param_definition351.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1382:23: ( COMMA param_definition )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==COMMA) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1382:24: COMMA param_definition
                    	    {
                    	    COMMA352=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters5975); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA352);

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(COMMA352, DroolsEditorType.SYMBOL);	
                    	    }
                    	    pushFollow(FOLLOW_param_definition_in_parameters5979);
                    	    param_definition353=param_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_param_definition.add(param_definition353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_PAREN354=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parameters5988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN354);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN354, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: param_definition, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1384:3: -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:1384:6: ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PARAM_LIST, "VT_PARAM_LIST"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:1384:22: ( param_definition )*
                while ( stream_param_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_param_definition.nextTree());

                }
                stream_param_definition.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameters"

    public static class param_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "param_definition"
    // src/main/resources/org/drools/lang/DRL.g:1387:1: param_definition : ( data_type )? argument ;
    public final DRLParser.param_definition_return param_definition() throws RecognitionException {
        DRLParser.param_definition_return retval = new DRLParser.param_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.data_type_return data_type355 = null;

        DRLParser.argument_return argument356 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1388:2: ( ( data_type )? argument )
            // src/main/resources/org/drools/lang/DRL.g:1388:4: ( data_type )? argument
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1388:4: ( data_type )?
            int alt120=2;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1388:4: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_param_definition6014);
                    data_type355=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type355.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_argument_in_param_definition6017);
            argument356=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument356.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "param_definition"

    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // src/main/resources/org/drools/lang/DRL.g:1391:1: argument : ID ( dimension_definition )* ;
    public final DRLParser.argument_return argument() throws RecognitionException {
        DRLParser.argument_return retval = new DRLParser.argument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID357=null;
        DRLParser.dimension_definition_return dimension_definition358 = null;


        Object ID357_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1392:2: ( ID ( dimension_definition )* )
            // src/main/resources/org/drools/lang/DRL.g:1392:4: ID ( dimension_definition )*
            {
            root_0 = (Object)adaptor.nil();

            ID357=(Token)match(input,ID,FOLLOW_ID_in_argument6028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID357_tree = (Object)adaptor.create(ID357);
            adaptor.addChild(root_0, ID357_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(ID357, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1393:3: ( dimension_definition )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==LEFT_SQUARE) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1393:3: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_argument6034);
            	    dimension_definition358=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dimension_definition358.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class string_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_list"
    // src/main/resources/org/drools/lang/DRL.g:1396:1: string_list : first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] ;
    public final DRLParser.string_list_return string_list() throws RecognitionException {
        DRLParser.string_list_return retval = new DRLParser.string_list_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token first=null;
        Token next=null;
        Token COMMA359=null;

        Object first_tree=null;
        Object next_tree=null;
        Object COMMA359_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");


            StringBuilder buf = new StringBuilder();

        try {
            // src/main/resources/org/drools/lang/DRL.g:1400:2: (first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] )
            // src/main/resources/org/drools/lang/DRL.g:1400:4: first= STRING ( COMMA next= STRING )*
            {
            first=(Token)match(input,STRING,FOLLOW_STRING_in_string_list6053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING.add(first);

            if ( state.backtracking==0 ) {
               buf.append( "[ "+ (first!=null?first.getText():null) ); 
            }
            // src/main/resources/org/drools/lang/DRL.g:1401:5: ( COMMA next= STRING )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==COMMA) ) {
                    int LA122_2 = input.LA(2);

                    if ( (LA122_2==STRING) ) {
                        alt122=1;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1401:6: COMMA next= STRING
            	    {
            	    COMMA359=(Token)match(input,COMMA,FOLLOW_COMMA_in_string_list6062); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA359);

            	    next=(Token)match(input,STRING,FOLLOW_STRING_in_string_list6066); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_STRING.add(next);

            	    if ( state.backtracking==0 ) {
            	       buf.append( ", " + (next!=null?next.getText():null) ); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);



            // AST REWRITE
            // elements: STRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1402:2: -> STRING[$first,buf.toString()+\" ]\"]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STRING, first, buf.toString()+" ]"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_list"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // src/main/resources/org/drools/lang/DRL.g:1419:1: block : LEFT_CURLY ( blockStatement )* RIGHT_CURLY ;
    public final DRLParser.block_return block() throws RecognitionException {
        DRLParser.block_return retval = new DRLParser.block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY360=null;
        Token RIGHT_CURLY362=null;
        DRLParser.blockStatement_return blockStatement361 = null;


        Object LEFT_CURLY360_tree=null;
        Object RIGHT_CURLY362_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1420:2: ( LEFT_CURLY ( blockStatement )* RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1420:4: LEFT_CURLY ( blockStatement )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY360=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_block6106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY360_tree = (Object)adaptor.create(LEFT_CURLY360);
            adaptor.addChild(root_0, LEFT_CURLY360_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1420:15: ( blockStatement )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( ((LA123_0>=SEMICOLON && LA123_0<=ID)||LA123_0==STRING||(LA123_0>=BOOL && LA123_0<=LEFT_PAREN)||LA123_0==DECIMAL||LA123_0==LESS||LA123_0==LEFT_SQUARE||(LA123_0>=NULL && LA123_0<=FLOAT)||LA123_0==LEFT_CURLY||(LA123_0>=INCR && LA123_0<=NEGATION)) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1420:15: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block6108);
            	    blockStatement361=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement361.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            RIGHT_CURLY362=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_block6111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY362_tree = (Object)adaptor.create(RIGHT_CURLY362);
            adaptor.addChild(root_0, RIGHT_CURLY362_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // src/main/resources/org/drools/lang/DRL.g:1423:1: blockStatement : ( ( final_key )=> localVariableDeclaration | rhs_statement );
    public final DRLParser.blockStatement_return blockStatement() throws RecognitionException {
        DRLParser.blockStatement_return retval = new DRLParser.blockStatement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.localVariableDeclaration_return localVariableDeclaration363 = null;

        DRLParser.rhs_statement_return rhs_statement364 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1424:2: ( ( final_key )=> localVariableDeclaration | rhs_statement )
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1424:4: ( final_key )=> localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement6128);
                    localVariableDeclaration363=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration363.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1426:6: rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rhs_statement_in_blockStatement6138);
                    rhs_statement364=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement364.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1432:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators SEMICOLON ;
    public final DRLParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        DRLParser.localVariableDeclaration_return retval = new DRLParser.localVariableDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON368=null;
        DRLParser.variableModifier_return variableModifier365 = null;

        DRLParser.type_return type366 = null;

        DRLParser.variableDeclarators_return variableDeclarators367 = null;


        Object SEMICOLON368_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1433:2: ( ( variableModifier )* type variableDeclarators SEMICOLON )
            // src/main/resources/org/drools/lang/DRL.g:1434:2: ( variableModifier )* type variableDeclarators SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1434:2: ( variableModifier )*
            loop125:
            do {
                int alt125=2;
                alt125 = dfa125.predict(input);
                switch (alt125) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1434:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration6157);
            	    variableModifier365=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier365.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration6162);
            type366=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type366.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration6164);
            variableDeclarators367=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators367.getTree());
            SEMICOLON368=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_localVariableDeclaration6166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON368_tree = (Object)adaptor.create(SEMICOLON368);
            adaptor.addChild(root_0, SEMICOLON368_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // src/main/resources/org/drools/lang/DRL.g:1437:1: variableModifier : final_key ;
    public final DRLParser.variableModifier_return variableModifier() throws RecognitionException {
        DRLParser.variableModifier_return retval = new DRLParser.variableModifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.final_key_return final_key369 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1438:2: ( final_key )
            // src/main/resources/org/drools/lang/DRL.g:1438:4: final_key
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_final_key_in_variableModifier6178);
            final_key369=final_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, final_key369.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // src/main/resources/org/drools/lang/DRL.g:1442:1: variableDeclaratorId : ID ( LEFT_SQUARE RIGHT_SQUARE )* ;
    public final DRLParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        DRLParser.variableDeclaratorId_return retval = new DRLParser.variableDeclaratorId_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID370=null;
        Token LEFT_SQUARE371=null;
        Token RIGHT_SQUARE372=null;

        Object ID370_tree=null;
        Object LEFT_SQUARE371_tree=null;
        Object RIGHT_SQUARE372_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1443:2: ( ID ( LEFT_SQUARE RIGHT_SQUARE )* )
            // src/main/resources/org/drools/lang/DRL.g:1443:4: ID ( LEFT_SQUARE RIGHT_SQUARE )*
            {
            root_0 = (Object)adaptor.nil();

            ID370=(Token)match(input,ID,FOLLOW_ID_in_variableDeclaratorId6190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID370_tree = (Object)adaptor.create(ID370);
            adaptor.addChild(root_0, ID370_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1443:7: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==LEFT_SQUARE) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1443:8: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE371=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_variableDeclaratorId6193); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE371_tree = (Object)adaptor.create(LEFT_SQUARE371);
            	    adaptor.addChild(root_0, LEFT_SQUARE371_tree);
            	    }
            	    RIGHT_SQUARE372=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_variableDeclaratorId6195); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE372_tree = (Object)adaptor.create(RIGHT_SQUARE372);
            	    adaptor.addChild(root_0, RIGHT_SQUARE372_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // src/main/resources/org/drools/lang/DRL.g:1446:1: variableDeclarators : variableDeclarator ( COMMA variableDeclarator )* ;
    public final DRLParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        DRLParser.variableDeclarators_return retval = new DRLParser.variableDeclarators_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA374=null;
        DRLParser.variableDeclarator_return variableDeclarator373 = null;

        DRLParser.variableDeclarator_return variableDeclarator375 = null;


        Object COMMA374_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1447:2: ( variableDeclarator ( COMMA variableDeclarator )* )
            // src/main/resources/org/drools/lang/DRL.g:1447:4: variableDeclarator ( COMMA variableDeclarator )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators6208);
            variableDeclarator373=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarator373.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1447:23: ( COMMA variableDeclarator )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==COMMA) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1447:24: COMMA variableDeclarator
            	    {
            	    COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_variableDeclarators6211); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA374_tree = (Object)adaptor.create(COMMA374);
            	    adaptor.addChild(root_0, COMMA374_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators6213);
            	    variableDeclarator375=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarator375.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // src/main/resources/org/drools/lang/DRL.g:1450:1: variableDeclarator : id= ID rest= variableDeclaratorRest ;
    public final DRLParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        DRLParser.variableDeclarator_return retval = new DRLParser.variableDeclarator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        DRLParser.variableDeclaratorRest_return rest = null;


        Object id_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1451:2: (id= ID rest= variableDeclaratorRest )
            // src/main/resources/org/drools/lang/DRL.g:1451:4: id= ID rest= variableDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            id=(Token)match(input,ID,FOLLOW_ID_in_variableDeclarator6228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (Object)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator6232);
            rest=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorRest"
    // src/main/resources/org/drools/lang/DRL.g:1454:1: variableDeclaratorRest : ( ( LEFT_SQUARE RIGHT_SQUARE )+ ( EQUALS_ASSIGN variableInitializer )? | EQUALS_ASSIGN variableInitializer | );
    public final DRLParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        DRLParser.variableDeclaratorRest_return retval = new DRLParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE376=null;
        Token RIGHT_SQUARE377=null;
        Token EQUALS_ASSIGN378=null;
        Token EQUALS_ASSIGN380=null;
        DRLParser.variableInitializer_return variableInitializer379 = null;

        DRLParser.variableInitializer_return variableInitializer381 = null;


        Object LEFT_SQUARE376_tree=null;
        Object RIGHT_SQUARE377_tree=null;
        Object EQUALS_ASSIGN378_tree=null;
        Object EQUALS_ASSIGN380_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1455:2: ( ( LEFT_SQUARE RIGHT_SQUARE )+ ( EQUALS_ASSIGN variableInitializer )? | EQUALS_ASSIGN variableInitializer | )
            int alt130=3;
            switch ( input.LA(1) ) {
            case LEFT_SQUARE:
                {
                alt130=1;
                }
                break;
            case EQUALS_ASSIGN:
                {
                alt130=2;
                }
                break;
            case EOF:
            case SEMICOLON:
            case COMMA:
                {
                alt130=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1455:4: ( LEFT_SQUARE RIGHT_SQUARE )+ ( EQUALS_ASSIGN variableInitializer )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1455:4: ( LEFT_SQUARE RIGHT_SQUARE )+
                    int cnt128=0;
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==LEFT_SQUARE) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1455:5: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE376=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_variableDeclaratorRest6246); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE376_tree = (Object)adaptor.create(LEFT_SQUARE376);
                    	    adaptor.addChild(root_0, LEFT_SQUARE376_tree);
                    	    }
                    	    RIGHT_SQUARE377=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_variableDeclaratorRest6248); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE377_tree = (Object)adaptor.create(RIGHT_SQUARE377);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE377_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt128 >= 1 ) break loop128;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(128, input);
                                throw eee;
                        }
                        cnt128++;
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1455:32: ( EQUALS_ASSIGN variableInitializer )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==EQUALS_ASSIGN) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1455:33: EQUALS_ASSIGN variableInitializer
                            {
                            EQUALS_ASSIGN378=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6253); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQUALS_ASSIGN378_tree = (Object)adaptor.create(EQUALS_ASSIGN378);
                            adaptor.addChild(root_0, EQUALS_ASSIGN378_tree);
                            }
                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest6255);
                            variableInitializer379=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer379.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1456:4: EQUALS_ASSIGN variableInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_ASSIGN380=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6262); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN380_tree = (Object)adaptor.create(EQUALS_ASSIGN380);
                    adaptor.addChild(root_0, EQUALS_ASSIGN380_tree);
                    }
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest6264);
                    variableInitializer381=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer381.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1458:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class rhs_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_statement"
    // src/main/resources/org/drools/lang/DRL.g:1465:1: rhs_statement options {backtrack=true; memoize=true; } : ( block | if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? | for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement | while_key parExpression rhs_statement | do_key rhs_statement while_key parExpression SEMICOLON | try_key block ( catches finally_key block | catches | finally_key block ) | switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY | synchronized_key parExpression block | return_key ( expression )? SEMICOLON | throw_key expression SEMICOLON | break_key ( ID )? SEMICOLON | continue_key ( ID )? SEMICOLON | SEMICOLON | expression SEMICOLON | ID COLON rhs_statement | modifyStatement | assert_key expression ( COLON expression )? SEMICOLON );
    public final DRLParser.rhs_statement_return rhs_statement() throws RecognitionException {
        DRLParser.rhs_statement_return retval = new DRLParser.rhs_statement_return();
        retval.start = input.LT(1);
        int rhs_statement_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN389=null;
        Token RIGHT_PAREN391=null;
        Token SEMICOLON400=null;
        Token LEFT_CURLY411=null;
        Token RIGHT_CURLY413=null;
        Token SEMICOLON419=null;
        Token SEMICOLON422=null;
        Token ID424=null;
        Token SEMICOLON425=null;
        Token ID427=null;
        Token SEMICOLON428=null;
        Token SEMICOLON429=null;
        Token SEMICOLON431=null;
        Token ID432=null;
        Token COLON433=null;
        Token COLON438=null;
        Token SEMICOLON440=null;
        DRLParser.block_return block382 = null;

        DRLParser.if_key_return if_key383 = null;

        DRLParser.parExpression_return parExpression384 = null;

        DRLParser.rhs_statement_return rhs_statement385 = null;

        DRLParser.else_key_return else_key386 = null;

        DRLParser.rhs_statement_return rhs_statement387 = null;

        DRLParser.for_key_return for_key388 = null;

        DRLParser.forControl_return forControl390 = null;

        DRLParser.rhs_statement_return rhs_statement392 = null;

        DRLParser.while_key_return while_key393 = null;

        DRLParser.parExpression_return parExpression394 = null;

        DRLParser.rhs_statement_return rhs_statement395 = null;

        DRLParser.do_key_return do_key396 = null;

        DRLParser.rhs_statement_return rhs_statement397 = null;

        DRLParser.while_key_return while_key398 = null;

        DRLParser.parExpression_return parExpression399 = null;

        DRLParser.try_key_return try_key401 = null;

        DRLParser.block_return block402 = null;

        DRLParser.catches_return catches403 = null;

        DRLParser.finally_key_return finally_key404 = null;

        DRLParser.block_return block405 = null;

        DRLParser.catches_return catches406 = null;

        DRLParser.finally_key_return finally_key407 = null;

        DRLParser.block_return block408 = null;

        DRLParser.switch_key_return switch_key409 = null;

        DRLParser.parExpression_return parExpression410 = null;

        DRLParser.switchBlockStatementGroups_return switchBlockStatementGroups412 = null;

        DRLParser.synchronized_key_return synchronized_key414 = null;

        DRLParser.parExpression_return parExpression415 = null;

        DRLParser.block_return block416 = null;

        DRLParser.return_key_return return_key417 = null;

        DRLParser.expression_return expression418 = null;

        DRLParser.throw_key_return throw_key420 = null;

        DRLParser.expression_return expression421 = null;

        DRLParser.break_key_return break_key423 = null;

        DRLParser.continue_key_return continue_key426 = null;

        DRLParser.expression_return expression430 = null;

        DRLParser.rhs_statement_return rhs_statement434 = null;

        DRLParser.modifyStatement_return modifyStatement435 = null;

        DRLParser.assert_key_return assert_key436 = null;

        DRLParser.expression_return expression437 = null;

        DRLParser.expression_return expression439 = null;


        Object LEFT_PAREN389_tree=null;
        Object RIGHT_PAREN391_tree=null;
        Object SEMICOLON400_tree=null;
        Object LEFT_CURLY411_tree=null;
        Object RIGHT_CURLY413_tree=null;
        Object SEMICOLON419_tree=null;
        Object SEMICOLON422_tree=null;
        Object ID424_tree=null;
        Object SEMICOLON425_tree=null;
        Object ID427_tree=null;
        Object SEMICOLON428_tree=null;
        Object SEMICOLON429_tree=null;
        Object SEMICOLON431_tree=null;
        Object ID432_tree=null;
        Object COLON433_tree=null;
        Object COLON438_tree=null;
        Object SEMICOLON440_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1467:2: ( block | if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? | for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement | while_key parExpression rhs_statement | do_key rhs_statement while_key parExpression SEMICOLON | try_key block ( catches finally_key block | catches | finally_key block ) | switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY | synchronized_key parExpression block | return_key ( expression )? SEMICOLON | throw_key expression SEMICOLON | break_key ( ID )? SEMICOLON | continue_key ( ID )? SEMICOLON | SEMICOLON | expression SEMICOLON | ID COLON rhs_statement | modifyStatement | assert_key expression ( COLON expression )? SEMICOLON )
            int alt137=17;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1467:4: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_rhs_statement6306);
                    block382=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block382.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1468:7: if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_if_key_in_rhs_statement6318);
                    if_key383=if_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_key383.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6320);
                    parExpression384=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression384.getTree());
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6322);
                    rhs_statement385=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement385.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1468:42: ( options {k=1; } : else_key rhs_statement )?
                    int alt131=2;
                    alt131 = dfa131.predict(input);
                    switch (alt131) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1468:59: else_key rhs_statement
                            {
                            pushFollow(FOLLOW_else_key_in_rhs_statement6333);
                            else_key386=else_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, else_key386.getTree());
                            pushFollow(FOLLOW_rhs_statement_in_rhs_statement6335);
                            rhs_statement387=rhs_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement387.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1469:7: for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_for_key_in_rhs_statement6345);
                    for_key388=for_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_key388.getTree());
                    LEFT_PAREN389=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rhs_statement6347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN389_tree = (Object)adaptor.create(LEFT_PAREN389);
                    adaptor.addChild(root_0, LEFT_PAREN389_tree);
                    }
                    pushFollow(FOLLOW_forControl_in_rhs_statement6349);
                    forControl390=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forControl390.getTree());
                    RIGHT_PAREN391=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rhs_statement6351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN391_tree = (Object)adaptor.create(RIGHT_PAREN391);
                    adaptor.addChild(root_0, RIGHT_PAREN391_tree);
                    }
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6353);
                    rhs_statement392=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement392.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1470:7: while_key parExpression rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_while_key_in_rhs_statement6361);
                    while_key393=while_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_key393.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6363);
                    parExpression394=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression394.getTree());
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6365);
                    rhs_statement395=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement395.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1471:7: do_key rhs_statement while_key parExpression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_do_key_in_rhs_statement6373);
                    do_key396=do_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_key396.getTree());
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6375);
                    rhs_statement397=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement397.getTree());
                    pushFollow(FOLLOW_while_key_in_rhs_statement6377);
                    while_key398=while_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_key398.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6379);
                    parExpression399=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression399.getTree());
                    SEMICOLON400=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON400_tree = (Object)adaptor.create(SEMICOLON400);
                    adaptor.addChild(root_0, SEMICOLON400_tree);
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1472:7: try_key block ( catches finally_key block | catches | finally_key block )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_try_key_in_rhs_statement6389);
                    try_key401=try_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_key401.getTree());
                    pushFollow(FOLLOW_block_in_rhs_statement6391);
                    block402=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block402.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1473:7: ( catches finally_key block | catches | finally_key block )
                    int alt132=3;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))))) {
                        int LA132_1 = input.LA(2);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                            alt132=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                            alt132=2;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                            alt132=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 132, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 132, 0, input);

                        throw nvae;
                    }
                    switch (alt132) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1473:9: catches finally_key block
                            {
                            pushFollow(FOLLOW_catches_in_rhs_statement6401);
                            catches403=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, catches403.getTree());
                            pushFollow(FOLLOW_finally_key_in_rhs_statement6403);
                            finally_key404=finally_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_key404.getTree());
                            pushFollow(FOLLOW_block_in_rhs_statement6405);
                            block405=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block405.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1474:9: catches
                            {
                            pushFollow(FOLLOW_catches_in_rhs_statement6415);
                            catches406=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, catches406.getTree());

                            }
                            break;
                        case 3 :
                            // src/main/resources/org/drools/lang/DRL.g:1475:9: finally_key block
                            {
                            pushFollow(FOLLOW_finally_key_in_rhs_statement6425);
                            finally_key407=finally_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_key407.getTree());
                            pushFollow(FOLLOW_block_in_rhs_statement6427);
                            block408=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block408.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1477:7: switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_switch_key_in_rhs_statement6443);
                    switch_key409=switch_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_key409.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6445);
                    parExpression410=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression410.getTree());
                    LEFT_CURLY411=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_rhs_statement6447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_CURLY411_tree = (Object)adaptor.create(LEFT_CURLY411);
                    adaptor.addChild(root_0, LEFT_CURLY411_tree);
                    }
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_rhs_statement6449);
                    switchBlockStatementGroups412=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroups412.getTree());
                    RIGHT_CURLY413=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_rhs_statement6451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_CURLY413_tree = (Object)adaptor.create(RIGHT_CURLY413);
                    adaptor.addChild(root_0, RIGHT_CURLY413_tree);
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1478:7: synchronized_key parExpression block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_synchronized_key_in_rhs_statement6459);
                    synchronized_key414=synchronized_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_key414.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6461);
                    parExpression415=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression415.getTree());
                    pushFollow(FOLLOW_block_in_rhs_statement6463);
                    block416=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block416.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1479:7: return_key ( expression )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_return_key_in_rhs_statement6471);
                    return_key417=return_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_key417.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1479:18: ( expression )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==ID||LA133_0==STRING||(LA133_0>=BOOL && LA133_0<=LEFT_PAREN)||LA133_0==DECIMAL||LA133_0==LESS||LA133_0==LEFT_SQUARE||(LA133_0>=NULL && LA133_0<=FLOAT)||(LA133_0>=INCR && LA133_0<=NEGATION)) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1479:18: expression
                            {
                            pushFollow(FOLLOW_expression_in_rhs_statement6473);
                            expression418=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression418.getTree());

                            }
                            break;

                    }

                    SEMICOLON419=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON419_tree = (Object)adaptor.create(SEMICOLON419);
                    adaptor.addChild(root_0, SEMICOLON419_tree);
                    }

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:1480:7: throw_key expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_throw_key_in_rhs_statement6484);
                    throw_key420=throw_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_key420.getTree());
                    pushFollow(FOLLOW_expression_in_rhs_statement6486);
                    expression421=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression421.getTree());
                    SEMICOLON422=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON422_tree = (Object)adaptor.create(SEMICOLON422);
                    adaptor.addChild(root_0, SEMICOLON422_tree);
                    }

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:1481:7: break_key ( ID )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_break_key_in_rhs_statement6496);
                    break_key423=break_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_key423.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1481:17: ( ID )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==ID) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1481:17: ID
                            {
                            ID424=(Token)match(input,ID,FOLLOW_ID_in_rhs_statement6498); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ID424_tree = (Object)adaptor.create(ID424);
                            adaptor.addChild(root_0, ID424_tree);
                            }

                            }
                            break;

                    }

                    SEMICOLON425=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON425_tree = (Object)adaptor.create(SEMICOLON425);
                    adaptor.addChild(root_0, SEMICOLON425_tree);
                    }

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:1482:7: continue_key ( ID )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_continue_key_in_rhs_statement6509);
                    continue_key426=continue_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_key426.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1482:20: ( ID )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==ID) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1482:20: ID
                            {
                            ID427=(Token)match(input,ID,FOLLOW_ID_in_rhs_statement6511); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ID427_tree = (Object)adaptor.create(ID427);
                            adaptor.addChild(root_0, ID427_tree);
                            }

                            }
                            break;

                    }

                    SEMICOLON428=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON428_tree = (Object)adaptor.create(SEMICOLON428);
                    adaptor.addChild(root_0, SEMICOLON428_tree);
                    }

                    }
                    break;
                case 13 :
                    // src/main/resources/org/drools/lang/DRL.g:1483:7: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON429=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON429_tree = (Object)adaptor.create(SEMICOLON429);
                    adaptor.addChild(root_0, SEMICOLON429_tree);
                    }

                    }
                    break;
                case 14 :
                    // src/main/resources/org/drools/lang/DRL.g:1485:5: expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_rhs_statement6529);
                    expression430=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression430.getTree());
                    SEMICOLON431=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON431_tree = (Object)adaptor.create(SEMICOLON431);
                    adaptor.addChild(root_0, SEMICOLON431_tree);
                    }

                    }
                    break;
                case 15 :
                    // src/main/resources/org/drools/lang/DRL.g:1486:7: ID COLON rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    ID432=(Token)match(input,ID,FOLLOW_ID_in_rhs_statement6543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID432_tree = (Object)adaptor.create(ID432);
                    adaptor.addChild(root_0, ID432_tree);
                    }
                    COLON433=(Token)match(input,COLON,FOLLOW_COLON_in_rhs_statement6545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON433_tree = (Object)adaptor.create(COLON433);
                    adaptor.addChild(root_0, COLON433_tree);
                    }
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6547);
                    rhs_statement434=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement434.getTree());

                    }
                    break;
                case 16 :
                    // src/main/resources/org/drools/lang/DRL.g:1489:7: modifyStatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifyStatement_in_rhs_statement6565);
                    modifyStatement435=modifyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifyStatement435.getTree());

                    }
                    break;
                case 17 :
                    // src/main/resources/org/drools/lang/DRL.g:1491:7: assert_key expression ( COLON expression )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_assert_key_in_rhs_statement6581);
                    assert_key436=assert_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assert_key436.getTree());
                    pushFollow(FOLLOW_expression_in_rhs_statement6583);
                    expression437=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression437.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1491:29: ( COLON expression )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==COLON) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1491:30: COLON expression
                            {
                            COLON438=(Token)match(input,COLON,FOLLOW_COLON_in_rhs_statement6586); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON438_tree = (Object)adaptor.create(COLON438);
                            adaptor.addChild(root_0, COLON438_tree);
                            }
                            pushFollow(FOLLOW_expression_in_rhs_statement6588);
                            expression439=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression439.getTree());

                            }
                            break;

                    }

                    SEMICOLON440=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON440_tree = (Object)adaptor.create(SEMICOLON440);
                    adaptor.addChild(root_0, SEMICOLON440_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, rhs_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rhs_statement"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // src/main/resources/org/drools/lang/DRL.g:1495:1: forControl options {backtrack=true; memoize=true; } : ( forVarControl | ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )? );
    public final DRLParser.forControl_return forControl() throws RecognitionException {
        DRLParser.forControl_return retval = new DRLParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token SEMICOLON443=null;
        Token SEMICOLON445=null;
        DRLParser.forVarControl_return forVarControl441 = null;

        DRLParser.forInit_return forInit442 = null;

        DRLParser.expression_return expression444 = null;

        DRLParser.forUpdate_return forUpdate446 = null;


        Object SEMICOLON443_tree=null;
        Object SEMICOLON445_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1497:2: ( forVarControl | ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )? )
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1497:4: forVarControl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_forVarControl_in_forControl6623);
                    forVarControl441=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forVarControl441.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1498:4: ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1498:4: ( forInit )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==ID||LA138_0==STRING||(LA138_0>=BOOL && LA138_0<=LEFT_PAREN)||LA138_0==DECIMAL||LA138_0==LESS||LA138_0==LEFT_SQUARE||(LA138_0>=NULL && LA138_0<=FLOAT)||(LA138_0>=INCR && LA138_0<=NEGATION)) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1498:4: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl6628);
                            forInit442=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, forInit442.getTree());

                            }
                            break;

                    }

                    SEMICOLON443=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON443_tree = (Object)adaptor.create(SEMICOLON443);
                    adaptor.addChild(root_0, SEMICOLON443_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1498:23: ( expression )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==ID||LA139_0==STRING||(LA139_0>=BOOL && LA139_0<=LEFT_PAREN)||LA139_0==DECIMAL||LA139_0==LESS||LA139_0==LEFT_SQUARE||(LA139_0>=NULL && LA139_0<=FLOAT)||(LA139_0>=INCR && LA139_0<=NEGATION)) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1498:23: expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl6633);
                            expression444=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression444.getTree());

                            }
                            break;

                    }

                    SEMICOLON445=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON445_tree = (Object)adaptor.create(SEMICOLON445);
                    adaptor.addChild(root_0, SEMICOLON445_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1498:45: ( forUpdate )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==ID||LA140_0==STRING||(LA140_0>=BOOL && LA140_0<=LEFT_PAREN)||LA140_0==DECIMAL||LA140_0==LESS||LA140_0==LEFT_SQUARE||(LA140_0>=NULL && LA140_0<=FLOAT)||(LA140_0>=INCR && LA140_0<=NEGATION)) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1498:45: forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl6638);
                            forUpdate446=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, forUpdate446.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // src/main/resources/org/drools/lang/DRL.g:1501:1: forInit options {backtrack=true; memoize=true; } : ( ( variableModifier )* type variableDeclarators | expressionList );
    public final DRLParser.forInit_return forInit() throws RecognitionException {
        DRLParser.forInit_return retval = new DRLParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.variableModifier_return variableModifier447 = null;

        DRLParser.type_return type448 = null;

        DRLParser.variableDeclarators_return variableDeclarators449 = null;

        DRLParser.expressionList_return expressionList450 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1503:2: ( ( variableModifier )* type variableDeclarators | expressionList )
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1503:4: ( variableModifier )* type variableDeclarators
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1503:4: ( variableModifier )*
                    loop142:
                    do {
                        int alt142=2;
                        alt142 = dfa142.predict(input);
                        switch (alt142) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1503:4: variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit6668);
                    	    variableModifier447=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier447.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit6671);
                    type448=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type448.getTree());
                    pushFollow(FOLLOW_variableDeclarators_in_forInit6673);
                    variableDeclarators449=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators449.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1504:4: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit6678);
                    expressionList450=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList450.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forVarControl"
    // src/main/resources/org/drools/lang/DRL.g:1507:1: forVarControl : ( variableModifier )* type ID COLON expression ;
    public final DRLParser.forVarControl_return forVarControl() throws RecognitionException {
        DRLParser.forVarControl_return retval = new DRLParser.forVarControl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID453=null;
        Token COLON454=null;
        DRLParser.variableModifier_return variableModifier451 = null;

        DRLParser.type_return type452 = null;

        DRLParser.expression_return expression455 = null;


        Object ID453_tree=null;
        Object COLON454_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1508:2: ( ( variableModifier )* type ID COLON expression )
            // src/main/resources/org/drools/lang/DRL.g:1508:4: ( variableModifier )* type ID COLON expression
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1508:4: ( variableModifier )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==ID) ) {
                    int LA144_1 = input.LA(2);

                    if ( (LA144_1==ID) ) {
                        int LA144_3 = input.LA(3);

                        if ( ((LA144_3>=ID && LA144_3<=DOT)||LA144_3==LESS||LA144_3==LEFT_SQUARE) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
                            alt144=1;
                        }


                    }


                }


                switch (alt144) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1508:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl6689);
            	    variableModifier451=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier451.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl6692);
            type452=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type452.getTree());
            ID453=(Token)match(input,ID,FOLLOW_ID_in_forVarControl6694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID453_tree = (Object)adaptor.create(ID453);
            adaptor.addChild(root_0, ID453_tree);
            }
            COLON454=(Token)match(input,COLON,FOLLOW_COLON_in_forVarControl6696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON454_tree = (Object)adaptor.create(COLON454);
            adaptor.addChild(root_0, COLON454_tree);
            }
            pushFollow(FOLLOW_expression_in_forVarControl6698);
            expression455=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression455.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // src/main/resources/org/drools/lang/DRL.g:1511:1: forUpdate : expressionList ;
    public final DRLParser.forUpdate_return forUpdate() throws RecognitionException {
        DRLParser.forUpdate_return retval = new DRLParser.forUpdate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.expressionList_return expressionList456 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1512:2: ( expressionList )
            // src/main/resources/org/drools/lang/DRL.g:1512:4: expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate6709);
            expressionList456=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList456.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // src/main/resources/org/drools/lang/DRL.g:1517:1: catches : catchClause ( catchClause )* ;
    public final DRLParser.catches_return catches() throws RecognitionException {
        DRLParser.catches_return retval = new DRLParser.catches_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.catchClause_return catchClause457 = null;

        DRLParser.catchClause_return catchClause458 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1518:2: ( catchClause ( catchClause )* )
            // src/main/resources/org/drools/lang/DRL.g:1518:4: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches6722);
            catchClause457=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause457.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1518:16: ( catchClause )*
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1518:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches6725);
            	    catchClause458=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause458.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // src/main/resources/org/drools/lang/DRL.g:1521:1: catchClause : catch_key LEFT_PAREN formalParameter RIGHT_PAREN block ;
    public final DRLParser.catchClause_return catchClause() throws RecognitionException {
        DRLParser.catchClause_return retval = new DRLParser.catchClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN460=null;
        Token RIGHT_PAREN462=null;
        DRLParser.catch_key_return catch_key459 = null;

        DRLParser.formalParameter_return formalParameter461 = null;

        DRLParser.block_return block463 = null;


        Object LEFT_PAREN460_tree=null;
        Object RIGHT_PAREN462_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1522:2: ( catch_key LEFT_PAREN formalParameter RIGHT_PAREN block )
            // src/main/resources/org/drools/lang/DRL.g:1522:4: catch_key LEFT_PAREN formalParameter RIGHT_PAREN block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catch_key_in_catchClause6739);
            catch_key459=catch_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catch_key459.getTree());
            LEFT_PAREN460=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_catchClause6741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN460_tree = (Object)adaptor.create(LEFT_PAREN460);
            adaptor.addChild(root_0, LEFT_PAREN460_tree);
            }
            pushFollow(FOLLOW_formalParameter_in_catchClause6743);
            formalParameter461=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameter461.getTree());
            RIGHT_PAREN462=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_catchClause6745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN462_tree = (Object)adaptor.create(RIGHT_PAREN462);
            adaptor.addChild(root_0, RIGHT_PAREN462_tree);
            }
            pushFollow(FOLLOW_block_in_catchClause6747);
            block463=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block463.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // src/main/resources/org/drools/lang/DRL.g:1525:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
    public final DRLParser.formalParameter_return formalParameter() throws RecognitionException {
        DRLParser.formalParameter_return retval = new DRLParser.formalParameter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.variableModifier_return variableModifier464 = null;

        DRLParser.type_return type465 = null;

        DRLParser.variableDeclaratorId_return variableDeclaratorId466 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1526:2: ( ( variableModifier )* type variableDeclaratorId )
            // src/main/resources/org/drools/lang/DRL.g:1526:4: ( variableModifier )* type variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1526:4: ( variableModifier )*
            loop146:
            do {
                int alt146=2;
                alt146 = dfa146.predict(input);
                switch (alt146) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1526:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter6758);
            	    variableModifier464=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier464.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter6761);
            type465=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type465.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter6763);
            variableDeclaratorId466=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId466.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // src/main/resources/org/drools/lang/DRL.g:1531:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final DRLParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        DRLParser.switchBlockStatementGroups_return retval = new DRLParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.switchBlockStatementGroup_return switchBlockStatementGroup467 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1532:2: ( ( switchBlockStatementGroup )* )
            // src/main/resources/org/drools/lang/DRL.g:1532:4: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1532:4: ( switchBlockStatementGroup )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))))) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1532:5: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6777);
            	    switchBlockStatementGroup467=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup467.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // src/main/resources/org/drools/lang/DRL.g:1535:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
    public final DRLParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        DRLParser.switchBlockStatementGroup_return retval = new DRLParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.switchLabel_return switchLabel468 = null;

        DRLParser.blockStatement_return blockStatement469 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1536:2: ( switchLabel ( blockStatement )* )
            // src/main/resources/org/drools/lang/DRL.g:1536:4: switchLabel ( blockStatement )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup6791);
            switchLabel468=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switchLabel468.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1536:16: ( blockStatement )*
            loop148:
            do {
                int alt148=2;
                alt148 = dfa148.predict(input);
                switch (alt148) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1536:16: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup6793);
            	    blockStatement469=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement469.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // src/main/resources/org/drools/lang/DRL.g:1539:1: switchLabel : ( case_key expression COLON | case_key ID COLON | default_key COLON );
    public final DRLParser.switchLabel_return switchLabel() throws RecognitionException {
        DRLParser.switchLabel_return retval = new DRLParser.switchLabel_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON472=null;
        Token ID474=null;
        Token COLON475=null;
        Token COLON477=null;
        DRLParser.case_key_return case_key470 = null;

        DRLParser.expression_return expression471 = null;

        DRLParser.case_key_return case_key473 = null;

        DRLParser.default_key_return default_key476 = null;


        Object COLON472_tree=null;
        Object ID474_tree=null;
        Object COLON475_tree=null;
        Object COLON477_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1541:2: ( case_key expression COLON | case_key ID COLON | default_key COLON )
            int alt149=3;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))))) {
                int LA149_1 = input.LA(2);

                if ( (LA149_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
                    alt149=3;
                }
                else if ( (LA149_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                    int LA149_3 = input.LA(3);

                    if ( (LA149_3==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                        int LA149_5 = input.LA(4);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                            alt149=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                            alt149=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 149, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA149_3>=ID && LA149_3<=DOT)||LA149_3==EQUALS_ASSIGN||LA149_3==LEFT_PAREN||(LA149_3>=DOUBLE_PIPE && LA149_3<=DOUBLE_AMPER)||(LA149_3>=EQUALS && LA149_3<=LEFT_SQUARE)||(LA149_3>=PLUS && LA149_3<=MINUS)||(LA149_3>=QUESTION && LA149_3<=DECR)||(LA149_3>=PLUS_ASSIGN && LA149_3<=MOD_ASSIGN)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                        alt149=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 149, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA149_1==STRING||(LA149_1>=BOOL && LA149_1<=LEFT_PAREN)||LA149_1==DECIMAL||LA149_1==LESS||LA149_1==LEFT_SQUARE||(LA149_1>=NULL && LA149_1<=FLOAT)||(LA149_1>=INCR && LA149_1<=NEGATION)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                    alt149=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1541:4: case_key expression COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_key_in_switchLabel6807);
                    case_key470=case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_key470.getTree());
                    pushFollow(FOLLOW_expression_in_switchLabel6809);
                    expression471=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression471.getTree());
                    COLON472=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6811); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON472_tree = (Object)adaptor.create(COLON472);
                    adaptor.addChild(root_0, COLON472_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1543:4: case_key ID COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_key_in_switchLabel6817);
                    case_key473=case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_key473.getTree());
                    ID474=(Token)match(input,ID,FOLLOW_ID_in_switchLabel6819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID474_tree = (Object)adaptor.create(ID474);
                    adaptor.addChild(root_0, ID474_tree);
                    }
                    COLON475=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON475_tree = (Object)adaptor.create(COLON475);
                    adaptor.addChild(root_0, COLON475_tree);
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1544:4: default_key COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_default_key_in_switchLabel6826);
                    default_key476=default_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key476.getTree());
                    COLON477=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON477_tree = (Object)adaptor.create(COLON477);
                    adaptor.addChild(root_0, COLON477_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class modifyStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifyStatement"
    // src/main/resources/org/drools/lang/DRL.g:1551:1: modifyStatement : s= modify_key parExpression LEFT_CURLY (e= expression ( COMMA e= expression )* )? RIGHT_CURLY ;
    public final DRLParser.modifyStatement_return modifyStatement() throws RecognitionException {
        DRLParser.modifyStatement_return retval = new DRLParser.modifyStatement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY479=null;
        Token COMMA480=null;
        Token RIGHT_CURLY481=null;
        DRLParser.modify_key_return s = null;

        DRLParser.expression_return e = null;

        DRLParser.parExpression_return parExpression478 = null;


        Object LEFT_CURLY479_tree=null;
        Object COMMA480_tree=null;
        Object RIGHT_CURLY481_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1552:2: (s= modify_key parExpression LEFT_CURLY (e= expression ( COMMA e= expression )* )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1552:4: s= modify_key parExpression LEFT_CURLY (e= expression ( COMMA e= expression )* )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modify_key_in_modifyStatement6850);
            s=modify_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
            pushFollow(FOLLOW_parExpression_in_modifyStatement6852);
            parExpression478=parExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression478.getTree());
            LEFT_CURLY479=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_modifyStatement6856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY479_tree = (Object)adaptor.create(LEFT_CURLY479);
            adaptor.addChild(root_0, LEFT_CURLY479_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1553:13: (e= expression ( COMMA e= expression )* )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ID||LA151_0==STRING||(LA151_0>=BOOL && LA151_0<=LEFT_PAREN)||LA151_0==DECIMAL||LA151_0==LESS||LA151_0==LEFT_SQUARE||(LA151_0>=NULL && LA151_0<=FLOAT)||(LA151_0>=INCR && LA151_0<=NEGATION)) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1553:15: e= expression ( COMMA e= expression )*
                    {
                    pushFollow(FOLLOW_expression_in_modifyStatement6864);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1553:30: ( COMMA e= expression )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==COMMA) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1553:31: COMMA e= expression
                    	    {
                    	    COMMA480=(Token)match(input,COMMA,FOLLOW_COMMA_in_modifyStatement6867); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA480_tree = (Object)adaptor.create(COMMA480);
                    	    adaptor.addChild(root_0, COMMA480_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_modifyStatement6871);
                    	    e=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_CURLY481=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_modifyStatement6880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY481_tree = (Object)adaptor.create(RIGHT_CURLY481);
            adaptor.addChild(root_0, RIGHT_CURLY481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifyStatement"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // src/main/resources/org/drools/lang/DRL.g:1567:1: expression options {backtrack=true; memoize=true; } : conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? ;
    public final DRLParser.expression_return expression() throws RecognitionException {
        DRLParser.expression_return retval = new DRLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.conditionalExpression_return conditionalExpression482 = null;

        DRLParser.assignmentOperator_return assignmentOperator483 = null;

        DRLParser.expression_return expression484 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1569:2: ( conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? )
            // src/main/resources/org/drools/lang/DRL.g:1569:4: conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression6917);
            conditionalExpression482=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression482.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1569:26: ( ( assignmentOperator )=> assignmentOperator expression )?
            int alt152=2;
            alt152 = dfa152.predict(input);
            switch (alt152) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1569:27: ( assignmentOperator )=> assignmentOperator expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression6926);
                    assignmentOperator483=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentOperator483.getTree());
                    pushFollow(FOLLOW_expression_in_expression6928);
                    expression484=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression484.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1572:1: conditionalExpression : conditionalOrExpression ( QUESTION expression COLON expression )? ;
    public final DRLParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        DRLParser.conditionalExpression_return retval = new DRLParser.conditionalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION486=null;
        Token COLON488=null;
        DRLParser.conditionalOrExpression_return conditionalOrExpression485 = null;

        DRLParser.expression_return expression487 = null;

        DRLParser.expression_return expression489 = null;


        Object QUESTION486_tree=null;
        Object COLON488_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1573:9: ( conditionalOrExpression ( QUESTION expression COLON expression )? )
            // src/main/resources/org/drools/lang/DRL.g:1573:17: conditionalOrExpression ( QUESTION expression COLON expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression6954);
            conditionalOrExpression485=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression485.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1573:41: ( QUESTION expression COLON expression )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==QUESTION) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1573:43: QUESTION expression COLON expression
                    {
                    QUESTION486=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression6958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION486_tree = (Object)adaptor.create(QUESTION486);
                    adaptor.addChild(root_0, QUESTION486_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6960);
                    expression487=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression487.getTree());
                    COLON488=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression6962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON488_tree = (Object)adaptor.create(COLON488);
                    adaptor.addChild(root_0, COLON488_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6964);
                    expression489=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression489.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1575:1: conditionalOrExpression : conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* ;
    public final DRLParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        DRLParser.conditionalOrExpression_return retval = new DRLParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE491=null;
        DRLParser.conditionalAndExpression_return conditionalAndExpression490 = null;

        DRLParser.conditionalAndExpression_return conditionalAndExpression492 = null;


        Object DOUBLE_PIPE491_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1576:5: ( conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1576:9: conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6982);
            conditionalAndExpression490=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression490.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1576:34: ( DOUBLE_PIPE conditionalAndExpression )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==DOUBLE_PIPE) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1576:36: DOUBLE_PIPE conditionalAndExpression
            	    {
            	    DOUBLE_PIPE491=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6986); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE491_tree = (Object)adaptor.create(DOUBLE_PIPE491);
            	    adaptor.addChild(root_0, DOUBLE_PIPE491_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6988);
            	    conditionalAndExpression492=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression492.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // src/main/resources/org/drools/lang/DRL.g:1579:1: conditionalAndExpression : inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* ;
    public final DRLParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        DRLParser.conditionalAndExpression_return retval = new DRLParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER494=null;
        DRLParser.inclusiveOrExpression_return inclusiveOrExpression493 = null;

        DRLParser.inclusiveOrExpression_return inclusiveOrExpression495 = null;


        Object DOUBLE_AMPER494_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1580:5: ( inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1580:9: inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7007);
            inclusiveOrExpression493=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression493.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1580:31: ( DOUBLE_AMPER inclusiveOrExpression )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==DOUBLE_AMPER) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1580:33: DOUBLE_AMPER inclusiveOrExpression
            	    {
            	    DOUBLE_AMPER494=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression7011); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER494_tree = (Object)adaptor.create(DOUBLE_AMPER494);
            	    adaptor.addChild(root_0, DOUBLE_AMPER494_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7013);
            	    inclusiveOrExpression495=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression495.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1583:1: inclusiveOrExpression : exclusiveOrExpression ( PIPE exclusiveOrExpression )* ;
    public final DRLParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        DRLParser.inclusiveOrExpression_return retval = new DRLParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PIPE497=null;
        DRLParser.exclusiveOrExpression_return exclusiveOrExpression496 = null;

        DRLParser.exclusiveOrExpression_return exclusiveOrExpression498 = null;


        Object PIPE497_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1584:5: ( exclusiveOrExpression ( PIPE exclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1584:9: exclusiveOrExpression ( PIPE exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7032);
            exclusiveOrExpression496=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression496.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1584:31: ( PIPE exclusiveOrExpression )*
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==PIPE) ) {
                    alt156=1;
                }


                switch (alt156) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1584:33: PIPE exclusiveOrExpression
            	    {
            	    PIPE497=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression7036); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE497_tree = (Object)adaptor.create(PIPE497);
            	    adaptor.addChild(root_0, PIPE497_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7038);
            	    exclusiveOrExpression498=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression498.getTree());

            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1587:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final DRLParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        DRLParser.exclusiveOrExpression_return retval = new DRLParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token XOR500=null;
        DRLParser.andExpression_return andExpression499 = null;

        DRLParser.andExpression_return andExpression501 = null;


        Object XOR500_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1588:5: ( andExpression ( XOR andExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1588:9: andExpression ( XOR andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7057);
            andExpression499=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression499.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1588:23: ( XOR andExpression )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==XOR) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1588:25: XOR andExpression
            	    {
            	    XOR500=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression7061); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR500_tree = (Object)adaptor.create(XOR500);
            	    adaptor.addChild(root_0, XOR500_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7063);
            	    andExpression501=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression501.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // src/main/resources/org/drools/lang/DRL.g:1591:1: andExpression : equalityExpression ( AMPER equalityExpression )* ;
    public final DRLParser.andExpression_return andExpression() throws RecognitionException {
        DRLParser.andExpression_return retval = new DRLParser.andExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPER503=null;
        DRLParser.equalityExpression_return equalityExpression502 = null;

        DRLParser.equalityExpression_return equalityExpression504 = null;


        Object AMPER503_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1592:5: ( equalityExpression ( AMPER equalityExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1592:9: equalityExpression ( AMPER equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression7082);
            equalityExpression502=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression502.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1592:28: ( AMPER equalityExpression )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==AMPER) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1592:30: AMPER equalityExpression
            	    {
            	    AMPER503=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression7086); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPER503_tree = (Object)adaptor.create(AMPER503);
            	    adaptor.addChild(root_0, AMPER503_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression7088);
            	    equalityExpression504=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression504.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // src/main/resources/org/drools/lang/DRL.g:1595:1: equalityExpression : instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* ;
    public final DRLParser.equalityExpression_return equalityExpression() throws RecognitionException {
        DRLParser.equalityExpression_return retval = new DRLParser.equalityExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set506=null;
        DRLParser.instanceOfExpression_return instanceOfExpression505 = null;

        DRLParser.instanceOfExpression_return instanceOfExpression507 = null;


        Object set506_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1596:5: ( instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1596:9: instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7107);
            instanceOfExpression505=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression505.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1596:30: ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==EQUALS||LA159_0==NOT_EQUALS) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1596:32: ( EQUALS | NOT_EQUALS ) instanceOfExpression
            	    {
            	    set506=(Token)input.LT(1);
            	    if ( input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set506));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7121);
            	    instanceOfExpression507=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression507.getTree());

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // src/main/resources/org/drools/lang/DRL.g:1599:1: instanceOfExpression : relationalExpression ( instanceof_key type )? ;
    public final DRLParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        DRLParser.instanceOfExpression_return retval = new DRLParser.instanceOfExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.relationalExpression_return relationalExpression508 = null;

        DRLParser.instanceof_key_return instanceof_key509 = null;

        DRLParser.type_return type510 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1600:5: ( relationalExpression ( instanceof_key type )? )
            // src/main/resources/org/drools/lang/DRL.g:1600:9: relationalExpression ( instanceof_key type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression7140);
            relationalExpression508=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression508.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1600:30: ( instanceof_key type )?
            int alt160=2;
            alt160 = dfa160.predict(input);
            switch (alt160) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1600:31: instanceof_key type
                    {
                    pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression7143);
                    instanceof_key509=instanceof_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceof_key509.getTree());
                    pushFollow(FOLLOW_type_in_instanceOfExpression7145);
                    type510=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type510.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1603:1: relationalExpression : shiftExpression ( ( LESS )=> relationalOp shiftExpression )* ;
    public final DRLParser.relationalExpression_return relationalExpression() throws RecognitionException {
        DRLParser.relationalExpression_return retval = new DRLParser.relationalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.shiftExpression_return shiftExpression511 = null;

        DRLParser.relationalOp_return relationalOp512 = null;

        DRLParser.shiftExpression_return shiftExpression513 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1604:5: ( shiftExpression ( ( LESS )=> relationalOp shiftExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1604:9: shiftExpression ( ( LESS )=> relationalOp shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression7163);
            shiftExpression511=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression511.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1604:25: ( ( LESS )=> relationalOp shiftExpression )*
            loop161:
            do {
                int alt161=2;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1604:27: ( LESS )=> relationalOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression7172);
            	    relationalOp512=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalOp512.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression7174);
            	    shiftExpression513=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression513.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // src/main/resources/org/drools/lang/DRL.g:1610:1: relationalOp : ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) ;
    public final DRLParser.relationalOp_return relationalOp() throws RecognitionException {
        DRLParser.relationalOp_return retval = new DRLParser.relationalOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set514=null;

        Object set514_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1611:2: ( ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) )
            // src/main/resources/org/drools/lang/DRL.g:1611:4: ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER )
            {
            root_0 = (Object)adaptor.nil();

            set514=(Token)input.LT(1);
            if ( (input.LA(1)>=GREATER && input.LA(1)<=LESS_EQUALS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set514));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // src/main/resources/org/drools/lang/DRL.g:1614:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
    public final DRLParser.shiftExpression_return shiftExpression() throws RecognitionException {
        DRLParser.shiftExpression_return retval = new DRLParser.shiftExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.additiveExpression_return additiveExpression515 = null;

        DRLParser.shiftOp_return shiftOp516 = null;

        DRLParser.additiveExpression_return additiveExpression517 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1615:5: ( additiveExpression ( shiftOp additiveExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1615:9: additiveExpression ( shiftOp additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression7236);
            additiveExpression515=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression515.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1615:28: ( shiftOp additiveExpression )*
            loop162:
            do {
                int alt162=2;
                switch ( input.LA(1) ) {
                case SHIFT_LEFT:
                    {
                    int LA162_2 = input.LA(2);

                    if ( (LA162_2==ID||LA162_2==STRING||(LA162_2>=BOOL && LA162_2<=LEFT_PAREN)||LA162_2==DECIMAL||LA162_2==LESS||LA162_2==LEFT_SQUARE||(LA162_2>=NULL && LA162_2<=FLOAT)||(LA162_2>=INCR && LA162_2<=NEGATION)) ) {
                        alt162=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT:
                    {
                    int LA162_3 = input.LA(2);

                    if ( (LA162_3==ID||LA162_3==STRING||(LA162_3>=BOOL && LA162_3<=LEFT_PAREN)||LA162_3==DECIMAL||LA162_3==LESS||LA162_3==LEFT_SQUARE||(LA162_3>=NULL && LA162_3<=FLOAT)||(LA162_3>=INCR && LA162_3<=NEGATION)) ) {
                        alt162=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT_UNSIG:
                    {
                    int LA162_4 = input.LA(2);

                    if ( (LA162_4==ID||LA162_4==STRING||(LA162_4>=BOOL && LA162_4<=LEFT_PAREN)||LA162_4==DECIMAL||LA162_4==LESS||LA162_4==LEFT_SQUARE||(LA162_4>=NULL && LA162_4<=FLOAT)||(LA162_4>=INCR && LA162_4<=NEGATION)) ) {
                        alt162=1;
                    }


                    }
                    break;

                }

                switch (alt162) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1615:30: shiftOp additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression7240);
            	    shiftOp516=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftOp516.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression7242);
            	    additiveExpression517=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression517.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // src/main/resources/org/drools/lang/DRL.g:1618:1: shiftOp : ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) ;
    public final DRLParser.shiftOp_return shiftOp() throws RecognitionException {
        DRLParser.shiftOp_return retval = new DRLParser.shiftOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set518=null;

        Object set518_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1619:2: ( ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) )
            // src/main/resources/org/drools/lang/DRL.g:1619:4: ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT )
            {
            root_0 = (Object)adaptor.nil();

            set518=(Token)input.LT(1);
            if ( (input.LA(1)>=SHIFT_LEFT && input.LA(1)<=SHIFT_RIGHT) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set518));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // src/main/resources/org/drools/lang/DRL.g:1622:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final DRLParser.additiveExpression_return additiveExpression() throws RecognitionException {
        DRLParser.additiveExpression_return retval = new DRLParser.additiveExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set520=null;
        DRLParser.multiplicativeExpression_return multiplicativeExpression519 = null;

        DRLParser.multiplicativeExpression_return multiplicativeExpression521 = null;


        Object set520_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1623:5: ( multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1623:9: multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression7283);
            multiplicativeExpression519=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression519.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1623:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            loop163:
            do {
                int alt163=2;
                alt163 = dfa163.predict(input);
                switch (alt163) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1623:36: ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    set520=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set520));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression7302);
            	    multiplicativeExpression521=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression521.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // src/main/resources/org/drools/lang/DRL.g:1626:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final DRLParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        DRLParser.multiplicativeExpression_return retval = new DRLParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set523=null;
        DRLParser.unaryExpression_return unaryExpression522 = null;

        DRLParser.unaryExpression_return unaryExpression524 = null;


        Object set523_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1627:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1627:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression7321);
            unaryExpression522=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression522.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1627:25: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( ((LA164_0>=STAR && LA164_0<=MOD)) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1627:27: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    set523=(Token)input.LT(1);
            	    if ( (input.LA(1)>=STAR && input.LA(1)<=MOD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set523));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression7339);
            	    unaryExpression524=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression524.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // src/main/resources/org/drools/lang/DRL.g:1630:1: unaryExpression : ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus );
    public final DRLParser.unaryExpression_return unaryExpression() throws RecognitionException {
        DRLParser.unaryExpression_return retval = new DRLParser.unaryExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS525=null;
        Token MINUS527=null;
        Token INCR529=null;
        Token DECR531=null;
        DRLParser.unaryExpression_return unaryExpression526 = null;

        DRLParser.unaryExpression_return unaryExpression528 = null;

        DRLParser.primary_return primary530 = null;

        DRLParser.primary_return primary532 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus533 = null;


        Object PLUS525_tree=null;
        Object MINUS527_tree=null;
        Object INCR529_tree=null;
        Object DECR531_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1631:5: ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus )
            int alt165=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt165=1;
                }
                break;
            case MINUS:
                {
                alt165=2;
                }
                break;
            case INCR:
                {
                alt165=3;
                }
                break;
            case DECR:
                {
                alt165=4;
                }
                break;
            case ID:
            case STRING:
            case BOOL:
            case LEFT_PAREN:
            case DECIMAL:
            case LESS:
            case LEFT_SQUARE:
            case NULL:
            case HEX:
            case FLOAT:
            case TILDE:
            case NEGATION:
                {
                alt165=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }

            switch (alt165) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1631:9: PLUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS525=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression7359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS525_tree = (Object)adaptor.create(PLUS525);
                    adaptor.addChild(root_0, PLUS525_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression7361);
                    unaryExpression526=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression526.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1632:7: MINUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS527=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS527_tree = (Object)adaptor.create(MINUS527);
                    adaptor.addChild(root_0, MINUS527_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression7371);
                    unaryExpression528=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression528.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1633:9: INCR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    INCR529=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression7381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INCR529_tree = (Object)adaptor.create(INCR529);
                    adaptor.addChild(root_0, INCR529_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression7383);
                    primary530=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary530.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1634:9: DECR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    DECR531=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression7393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECR531_tree = (Object)adaptor.create(DECR531);
                    adaptor.addChild(root_0, DECR531_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression7395);
                    primary532=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary532.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1635:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression7405);
                    unaryExpressionNotPlusMinus533=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus533.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // src/main/resources/org/drools/lang/DRL.g:1638:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );
    public final DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        DRLParser.unaryExpressionNotPlusMinus_return retval = new DRLParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token TILDE534=null;
        Token NEGATION536=null;
        Token set541=null;
        DRLParser.unaryExpression_return unaryExpression535 = null;

        DRLParser.unaryExpression_return unaryExpression537 = null;

        DRLParser.castExpression_return castExpression538 = null;

        DRLParser.primary_return primary539 = null;

        DRLParser.selector_return selector540 = null;


        Object TILDE534_tree=null;
        Object NEGATION536_tree=null;
        Object set541_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1640:5: ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? )
            int alt168=4;
            alt168 = dfa168.predict(input);
            switch (alt168) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1640:9: TILDE unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    TILDE534=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus7438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE534_tree = (Object)adaptor.create(TILDE534);
                    adaptor.addChild(root_0, TILDE534_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7440);
                    unaryExpression535=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression535.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1641:8: NEGATION unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    NEGATION536=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus7449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEGATION536_tree = (Object)adaptor.create(NEGATION536);
                    adaptor.addChild(root_0, NEGATION536_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7451);
                    unaryExpression537=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression537.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1642:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus7461);
                    castExpression538=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression538.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1643:9: primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus7471);
                    primary539=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary539.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1643:17: ( ( selector )=> selector )*
                    loop166:
                    do {
                        int alt166=2;
                        alt166 = dfa166.predict(input);
                        switch (alt166) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1643:18: ( selector )=> selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus7478);
                    	    selector540=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector540.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1643:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    int alt167=2;
                    alt167 = dfa167.predict(input);
                    switch (alt167) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1643:42: ( INCR | DECR )=> ( INCR | DECR )
                            {
                            set541=(Token)input.LT(1);
                            if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set541));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // src/main/resources/org/drools/lang/DRL.g:1646:1: castExpression options {backtrack=true; memoize=true; } : ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus );
    public final DRLParser.castExpression_return castExpression() throws RecognitionException {
        DRLParser.castExpression_return retval = new DRLParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN542=null;
        Token RIGHT_PAREN544=null;
        Token LEFT_PAREN546=null;
        Token RIGHT_PAREN548=null;
        Token LEFT_PAREN550=null;
        Token RIGHT_PAREN552=null;
        DRLParser.primitiveType_return primitiveType543 = null;

        DRLParser.unaryExpression_return unaryExpression545 = null;

        DRLParser.type_return type547 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus549 = null;

        DRLParser.expression_return expression551 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus553 = null;


        Object LEFT_PAREN542_tree=null;
        Object RIGHT_PAREN544_tree=null;
        Object LEFT_PAREN546_tree=null;
        Object RIGHT_PAREN548_tree=null;
        Object LEFT_PAREN550_tree=null;
        Object RIGHT_PAREN552_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1648:5: ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus )
            int alt169=3;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==LEFT_PAREN) ) {
                int LA169_1 = input.LA(2);

                if ( (synpred43_DRL()) ) {
                    alt169=1;
                }
                else if ( (synpred44_DRL()) ) {
                    alt169=2;
                }
                else if ( (true) ) {
                    alt169=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1648:8: ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN542=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN542_tree = (Object)adaptor.create(LEFT_PAREN542);
                    adaptor.addChild(root_0, LEFT_PAREN542_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression7542);
                    primitiveType543=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType543.getTree());
                    RIGHT_PAREN544=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN544_tree = (Object)adaptor.create(RIGHT_PAREN544);
                    adaptor.addChild(root_0, RIGHT_PAREN544_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression7546);
                    unaryExpression545=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression545.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1649:8: ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN546=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN546_tree = (Object)adaptor.create(LEFT_PAREN546);
                    adaptor.addChild(root_0, LEFT_PAREN546_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression7565);
                    type547=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type547.getTree());
                    RIGHT_PAREN548=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN548_tree = (Object)adaptor.create(RIGHT_PAREN548);
                    adaptor.addChild(root_0, RIGHT_PAREN548_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7569);
                    unaryExpressionNotPlusMinus549=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus549.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1650:8: LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN550=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN550_tree = (Object)adaptor.create(LEFT_PAREN550);
                    adaptor.addChild(root_0, LEFT_PAREN550_tree);
                    }
                    pushFollow(FOLLOW_expression_in_castExpression7580);
                    expression551=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression551.getTree());
                    RIGHT_PAREN552=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN552_tree = (Object)adaptor.create(RIGHT_PAREN552);
                    adaptor.addChild(root_0, RIGHT_PAREN552_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7584);
                    unaryExpressionNotPlusMinus553=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus553.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // src/main/resources/org/drools/lang/DRL.g:1653:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );
    public final DRLParser.primitiveType_return primitiveType() throws RecognitionException {
        DRLParser.primitiveType_return retval = new DRLParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.boolean_key_return boolean_key554 = null;

        DRLParser.char_key_return char_key555 = null;

        DRLParser.byte_key_return byte_key556 = null;

        DRLParser.short_key_return short_key557 = null;

        DRLParser.int_key_return int_key558 = null;

        DRLParser.long_key_return long_key559 = null;

        DRLParser.float_key_return float_key560 = null;

        DRLParser.double_key_return double_key561 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1655:5: ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key )
            int alt170=8;
            alt170 = dfa170.predict(input);
            switch (alt170) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1655:9: boolean_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolean_key_in_primitiveType7621);
                    boolean_key554=boolean_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_key554.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1656:7: char_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_char_key_in_primitiveType7629);
                    char_key555=char_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_key555.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1657:7: byte_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_byte_key_in_primitiveType7637);
                    byte_key556=byte_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, byte_key556.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1658:7: short_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_short_key_in_primitiveType7645);
                    short_key557=short_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, short_key557.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1659:7: int_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_int_key_in_primitiveType7653);
                    int_key558=int_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, int_key558.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1660:7: long_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_long_key_in_primitiveType7661);
                    long_key559=long_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, long_key559.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1661:7: float_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_float_key_in_primitiveType7669);
                    float_key560=float_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, float_key560.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1662:7: double_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_double_key_in_primitiveType7677);
                    double_key561=double_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_key561.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // src/main/resources/org/drools/lang/DRL.g:1665:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );
    public final DRLParser.primary_return primary() throws RecognitionException {
        DRLParser.primary_return retval = new DRLParser.primary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE573=null;
        Token RIGHT_SQUARE574=null;
        Token DOT575=null;
        Token ID579=null;
        Token DOT580=null;
        Token ID581=null;
        DRLParser.parExpression_return parExpression562 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments563 = null;

        DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix564 = null;

        DRLParser.this_key_return this_key565 = null;

        DRLParser.arguments_return arguments566 = null;

        DRLParser.literal_return literal567 = null;

        DRLParser.super_key_return super_key568 = null;

        DRLParser.superSuffix_return superSuffix569 = null;

        DRLParser.new_key_return new_key570 = null;

        DRLParser.creator_return creator571 = null;

        DRLParser.primitiveType_return primitiveType572 = null;

        DRLParser.class_key_return class_key576 = null;

        DRLParser.inlineMapExpression_return inlineMapExpression577 = null;

        DRLParser.inlineListExpression_return inlineListExpression578 = null;

        DRLParser.identifierSuffix_return identifierSuffix582 = null;


        Object LEFT_SQUARE573_tree=null;
        Object RIGHT_SQUARE574_tree=null;
        Object DOT575_tree=null;
        Object ID579_tree=null;
        Object DOT580_tree=null;
        Object ID581_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1667:5: ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? )
            int alt175=9;
            alt175 = dfa175.predict(input);
            switch (alt175) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1667:7: ( parExpression )=> parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary7700);
                    parExpression562=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression562.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1668:9: ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary7715);
                    nonWildcardTypeArguments563=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments563.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1668:63: ( explicitGenericInvocationSuffix | this_key arguments )
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==ID) ) {
                        int LA171_1 = input.LA(2);

                        if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))))) ) {
                            alt171=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                            alt171=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 171, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }
                    switch (alt171) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1668:64: explicitGenericInvocationSuffix
                            {
                            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary7718);
                            explicitGenericInvocationSuffix564=explicitGenericInvocationSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix564.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1668:98: this_key arguments
                            {
                            pushFollow(FOLLOW_this_key_in_primary7722);
                            this_key565=this_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, this_key565.getTree());
                            pushFollow(FOLLOW_arguments_in_primary7724);
                            arguments566=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments566.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1669:9: ( literal )=> literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary7740);
                    literal567=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal567.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1671:9: ( super_key )=> super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_primary7760);
                    super_key568=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key568.getTree());
                    pushFollow(FOLLOW_superSuffix_in_primary7762);
                    superSuffix569=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix569.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1672:9: ( new_key )=> new_key creator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_new_key_in_primary7777);
                    new_key570=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key570.getTree());
                    pushFollow(FOLLOW_creator_in_primary7779);
                    creator571=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, creator571.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1673:9: ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_primary7794);
                    primitiveType572=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType572.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1673:41: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==LEFT_SQUARE) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1673:42: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE573=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary7797); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE573_tree = (Object)adaptor.create(LEFT_SQUARE573);
                    	    adaptor.addChild(root_0, LEFT_SQUARE573_tree);
                    	    }
                    	    RIGHT_SQUARE574=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary7799); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE574_tree = (Object)adaptor.create(RIGHT_SQUARE574);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE574_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop172;
                        }
                    } while (true);

                    DOT575=(Token)match(input,DOT,FOLLOW_DOT_in_primary7803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT575_tree = (Object)adaptor.create(DOT575);
                    adaptor.addChild(root_0, DOT575_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_primary7805);
                    class_key576=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key576.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1675:9: ( inlineMapExpression )=> inlineMapExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineMapExpression_in_primary7825);
                    inlineMapExpression577=inlineMapExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineMapExpression577.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1676:9: ( inlineListExpression )=> inlineListExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineListExpression_in_primary7840);
                    inlineListExpression578=inlineListExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineListExpression578.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1677:9: ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ID579=(Token)match(input,ID,FOLLOW_ID_in_primary7854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID579_tree = (Object)adaptor.create(ID579);
                    adaptor.addChild(root_0, ID579_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1677:18: ( ( DOT ID )=> DOT ID )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==DOT) ) {
                            int LA173_2 = input.LA(2);

                            if ( (LA173_2==ID) ) {
                                int LA173_3 = input.LA(3);

                                if ( (synpred61_DRL()) ) {
                                    alt173=1;
                                }


                            }


                        }


                        switch (alt173) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1677:19: ( DOT ID )=> DOT ID
                    	    {
                    	    DOT580=(Token)match(input,DOT,FOLLOW_DOT_in_primary7863); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT580_tree = (Object)adaptor.create(DOT580);
                    	    adaptor.addChild(root_0, DOT580_tree);
                    	    }
                    	    ID581=(Token)match(input,ID,FOLLOW_ID_in_primary7865); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID581_tree = (Object)adaptor.create(ID581);
                    	    adaptor.addChild(root_0, ID581_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1677:38: ( ( identifierSuffix )=> identifierSuffix )?
                    int alt174=2;
                    alt174 = dfa174.predict(input);
                    switch (alt174) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1677:39: ( identifierSuffix )=> identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary7874);
                            identifierSuffix582=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierSuffix582.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class inlineListExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineListExpression"
    // src/main/resources/org/drools/lang/DRL.g:1680:1: inlineListExpression : LEFT_SQUARE ( expressionList )? RIGHT_SQUARE ;
    public final DRLParser.inlineListExpression_return inlineListExpression() throws RecognitionException {
        DRLParser.inlineListExpression_return retval = new DRLParser.inlineListExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE583=null;
        Token RIGHT_SQUARE585=null;
        DRLParser.expressionList_return expressionList584 = null;


        Object LEFT_SQUARE583_tree=null;
        Object RIGHT_SQUARE585_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1681:5: ( LEFT_SQUARE ( expressionList )? RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1681:9: LEFT_SQUARE ( expressionList )? RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE583=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression7895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE583_tree = (Object)adaptor.create(LEFT_SQUARE583);
            adaptor.addChild(root_0, LEFT_SQUARE583_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1681:21: ( expressionList )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ID||LA176_0==STRING||(LA176_0>=BOOL && LA176_0<=LEFT_PAREN)||LA176_0==DECIMAL||LA176_0==LESS||LA176_0==LEFT_SQUARE||(LA176_0>=NULL && LA176_0<=FLOAT)||(LA176_0>=INCR && LA176_0<=NEGATION)) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1681:21: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_inlineListExpression7897);
                    expressionList584=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList584.getTree());

                    }
                    break;

            }

            RIGHT_SQUARE585=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression7900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE585_tree = (Object)adaptor.create(RIGHT_SQUARE585);
            adaptor.addChild(root_0, RIGHT_SQUARE585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineListExpression"

    public static class inlineMapExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineMapExpression"
    // src/main/resources/org/drools/lang/DRL.g:1684:1: inlineMapExpression : LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE ;
    public final DRLParser.inlineMapExpression_return inlineMapExpression() throws RecognitionException {
        DRLParser.inlineMapExpression_return retval = new DRLParser.inlineMapExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE586=null;
        Token RIGHT_SQUARE588=null;
        DRLParser.mapExpressionList_return mapExpressionList587 = null;


        Object LEFT_SQUARE586_tree=null;
        Object RIGHT_SQUARE588_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1685:5: ( LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1685:7: LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE586=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression7922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE586_tree = (Object)adaptor.create(LEFT_SQUARE586);
            adaptor.addChild(root_0, LEFT_SQUARE586_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1685:19: ( mapExpressionList )+
            int cnt177=0;
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==ID||LA177_0==STRING||(LA177_0>=BOOL && LA177_0<=LEFT_PAREN)||LA177_0==DECIMAL||LA177_0==LESS||LA177_0==LEFT_SQUARE||(LA177_0>=NULL && LA177_0<=FLOAT)||(LA177_0>=INCR && LA177_0<=NEGATION)) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1685:19: mapExpressionList
            	    {
            	    pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression7924);
            	    mapExpressionList587=mapExpressionList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapExpressionList587.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt177 >= 1 ) break loop177;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(177, input);
                        throw eee;
                }
                cnt177++;
            } while (true);

            RIGHT_SQUARE588=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE588_tree = (Object)adaptor.create(RIGHT_SQUARE588);
            adaptor.addChild(root_0, RIGHT_SQUARE588_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineMapExpression"

    public static class mapExpressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapExpressionList"
    // src/main/resources/org/drools/lang/DRL.g:1688:1: mapExpressionList : mapEntry ( COMMA mapEntry )* ;
    public final DRLParser.mapExpressionList_return mapExpressionList() throws RecognitionException {
        DRLParser.mapExpressionList_return retval = new DRLParser.mapExpressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA590=null;
        DRLParser.mapEntry_return mapEntry589 = null;

        DRLParser.mapEntry_return mapEntry591 = null;


        Object COMMA590_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1689:5: ( mapEntry ( COMMA mapEntry )* )
            // src/main/resources/org/drools/lang/DRL.g:1689:7: mapEntry ( COMMA mapEntry )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mapEntry_in_mapExpressionList7944);
            mapEntry589=mapEntry();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry589.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1689:16: ( COMMA mapEntry )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==COMMA) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1689:17: COMMA mapEntry
            	    {
            	    COMMA590=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapExpressionList7947); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA590_tree = (Object)adaptor.create(COMMA590);
            	    adaptor.addChild(root_0, COMMA590_tree);
            	    }
            	    pushFollow(FOLLOW_mapEntry_in_mapExpressionList7949);
            	    mapEntry591=mapEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry591.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapExpressionList"

    public static class mapEntry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapEntry"
    // src/main/resources/org/drools/lang/DRL.g:1692:1: mapEntry : expression COLON expression ;
    public final DRLParser.mapEntry_return mapEntry() throws RecognitionException {
        DRLParser.mapEntry_return retval = new DRLParser.mapEntry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON593=null;
        DRLParser.expression_return expression592 = null;

        DRLParser.expression_return expression594 = null;


        Object COLON593_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1693:5: ( expression COLON expression )
            // src/main/resources/org/drools/lang/DRL.g:1693:7: expression COLON expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_mapEntry7972);
            expression592=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression592.getTree());
            COLON593=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry7974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON593_tree = (Object)adaptor.create(COLON593);
            adaptor.addChild(root_0, COLON593_tree);
            }
            pushFollow(FOLLOW_expression_in_mapEntry7976);
            expression594=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression594.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapEntry"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // src/main/resources/org/drools/lang/DRL.g:1696:1: parExpression : LEFT_PAREN expression RIGHT_PAREN ;
    public final DRLParser.parExpression_return parExpression() throws RecognitionException {
        DRLParser.parExpression_return retval = new DRLParser.parExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN595=null;
        Token RIGHT_PAREN597=null;
        DRLParser.expression_return expression596 = null;


        Object LEFT_PAREN595_tree=null;
        Object RIGHT_PAREN597_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1697:2: ( LEFT_PAREN expression RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1697:4: LEFT_PAREN expression RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN595=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression7990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN595_tree = (Object)adaptor.create(LEFT_PAREN595);
            adaptor.addChild(root_0, LEFT_PAREN595_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression7992);
            expression596=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression596.getTree());
            RIGHT_PAREN597=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression7994); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN597_tree = (Object)adaptor.create(RIGHT_PAREN597);
            adaptor.addChild(root_0, RIGHT_PAREN597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1700:1: identifierSuffix options {backtrack=true; memoize=true; } : ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments );
    public final DRLParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        DRLParser.identifierSuffix_return retval = new DRLParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE598=null;
        Token RIGHT_SQUARE599=null;
        Token DOT600=null;
        Token LEFT_SQUARE602=null;
        Token RIGHT_SQUARE604=null;
        DRLParser.class_key_return class_key601 = null;

        DRLParser.expression_return expression603 = null;

        DRLParser.arguments_return arguments605 = null;


        Object LEFT_SQUARE598_tree=null;
        Object RIGHT_SQUARE599_tree=null;
        Object DOT600_tree=null;
        Object LEFT_SQUARE602_tree=null;
        Object RIGHT_SQUARE604_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1702:5: ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments )
            int alt181=3;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LEFT_SQUARE) ) {
                int LA181_1 = input.LA(2);

                if ( (LA181_1==RIGHT_SQUARE) ) {
                    alt181=1;
                }
                else if ( (LA181_1==ID||LA181_1==STRING||(LA181_1>=BOOL && LA181_1<=LEFT_PAREN)||LA181_1==DECIMAL||LA181_1==LESS||LA181_1==LEFT_SQUARE||(LA181_1>=NULL && LA181_1<=FLOAT)||(LA181_1>=INCR && LA181_1<=NEGATION)) ) {
                    alt181=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA181_0==LEFT_PAREN) ) {
                alt181=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }
            switch (alt181) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1702:7: ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1702:7: ( LEFT_SQUARE RIGHT_SQUARE )+
                    int cnt179=0;
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==LEFT_SQUARE) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1702:8: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE598=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix8024); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE598_tree = (Object)adaptor.create(LEFT_SQUARE598);
                    	    adaptor.addChild(root_0, LEFT_SQUARE598_tree);
                    	    }
                    	    RIGHT_SQUARE599=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix8026); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE599_tree = (Object)adaptor.create(RIGHT_SQUARE599);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE599_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt179 >= 1 ) break loop179;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(179, input);
                                throw eee;
                        }
                        cnt179++;
                    } while (true);

                    DOT600=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix8030); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT600_tree = (Object)adaptor.create(DOT600);
                    adaptor.addChild(root_0, DOT600_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_identifierSuffix8032);
                    class_key601=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key601.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1703:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1703:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    int cnt180=0;
                    loop180:
                    do {
                        int alt180=2;
                        alt180 = dfa180.predict(input);
                        switch (alt180) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1703:8: ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE602=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix8047); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE602_tree = (Object)adaptor.create(LEFT_SQUARE602);
                    	    adaptor.addChild(root_0, LEFT_SQUARE602_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix8049);
                    	    expression603=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression603.getTree());
                    	    RIGHT_SQUARE604=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix8051); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE604_tree = (Object)adaptor.create(RIGHT_SQUARE604);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE604_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt180 >= 1 ) break loop180;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(180, input);
                                throw eee;
                        }
                        cnt180++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1704:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_identifierSuffix8064);
                    arguments605=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments605.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // src/main/resources/org/drools/lang/DRL.g:1712:1: creator : ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) ;
    public final DRLParser.creator_return creator() throws RecognitionException {
        DRLParser.creator_return retval = new DRLParser.creator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments606 = null;

        DRLParser.createdName_return createdName607 = null;

        DRLParser.arrayCreatorRest_return arrayCreatorRest608 = null;

        DRLParser.classCreatorRest_return classCreatorRest609 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1713:2: ( ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) )
            // src/main/resources/org/drools/lang/DRL.g:1713:4: ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1713:4: ( nonWildcardTypeArguments )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==LESS) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1713:4: nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator8082);
                    nonWildcardTypeArguments606=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments606.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_createdName_in_creator8085);
            createdName607=createdName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName607.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1714:9: ( arrayCreatorRest | classCreatorRest )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==LEFT_SQUARE) ) {
                alt183=1;
            }
            else if ( (LA183_0==LEFT_PAREN) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1714:10: arrayCreatorRest
                    {
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator8096);
                    arrayCreatorRest608=arrayCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayCreatorRest608.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1714:29: classCreatorRest
                    {
                    pushFollow(FOLLOW_classCreatorRest_in_creator8100);
                    classCreatorRest609=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest609.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // src/main/resources/org/drools/lang/DRL.g:1717:1: createdName : ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType );
    public final DRLParser.createdName_return createdName() throws RecognitionException {
        DRLParser.createdName_return retval = new DRLParser.createdName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID610=null;
        Token DOT612=null;
        Token ID613=null;
        DRLParser.typeArguments_return typeArguments611 = null;

        DRLParser.typeArguments_return typeArguments614 = null;

        DRLParser.primitiveType_return primitiveType615 = null;


        Object ID610_tree=null;
        Object DOT612_tree=null;
        Object ID613_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1718:2: ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))))) {
                int LA187_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))) ) {
                    alt187=1;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1718:4: ID ( typeArguments )? ( DOT ID ( typeArguments )? )*
                    {
                    root_0 = (Object)adaptor.nil();

                    ID610=(Token)match(input,ID,FOLLOW_ID_in_createdName8112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID610_tree = (Object)adaptor.create(ID610);
                    adaptor.addChild(root_0, ID610_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1718:7: ( typeArguments )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==LESS) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1718:7: typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_createdName8114);
                            typeArguments611=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments611.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1719:9: ( DOT ID ( typeArguments )? )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==DOT) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1719:11: DOT ID ( typeArguments )?
                    	    {
                    	    DOT612=(Token)match(input,DOT,FOLLOW_DOT_in_createdName8127); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT612_tree = (Object)adaptor.create(DOT612);
                    	    adaptor.addChild(root_0, DOT612_tree);
                    	    }
                    	    ID613=(Token)match(input,ID,FOLLOW_ID_in_createdName8129); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID613_tree = (Object)adaptor.create(ID613);
                    	    adaptor.addChild(root_0, ID613_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1719:18: ( typeArguments )?
                    	    int alt185=2;
                    	    int LA185_0 = input.LA(1);

                    	    if ( (LA185_0==LESS) ) {
                    	        alt185=1;
                    	    }
                    	    switch (alt185) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1719:18: typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_createdName8131);
                    	            typeArguments614=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments614.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1720:11: primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName8146);
                    primitiveType615=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType615.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // src/main/resources/org/drools/lang/DRL.g:1723:1: innerCreator : {...}? => ID classCreatorRest ;
    public final DRLParser.innerCreator_return innerCreator() throws RecognitionException {
        DRLParser.innerCreator_return retval = new DRLParser.innerCreator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID616=null;
        DRLParser.classCreatorRest_return classCreatorRest617 = null;


        Object ID616_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1724:2: ({...}? => ID classCreatorRest )
            // src/main/resources/org/drools/lang/DRL.g:1724:4: {...}? => ID classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "innerCreator", "!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            ID616=(Token)match(input,ID,FOLLOW_ID_in_innerCreator8161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID616_tree = (Object)adaptor.create(ID616);
            adaptor.addChild(root_0, ID616_tree);
            }
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator8163);
            classCreatorRest617=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest617.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1727:1: arrayCreatorRest : LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) ;
    public final DRLParser.arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        DRLParser.arrayCreatorRest_return retval = new DRLParser.arrayCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE618=null;
        Token RIGHT_SQUARE619=null;
        Token LEFT_SQUARE620=null;
        Token RIGHT_SQUARE621=null;
        Token RIGHT_SQUARE624=null;
        Token LEFT_SQUARE625=null;
        Token RIGHT_SQUARE627=null;
        Token LEFT_SQUARE628=null;
        Token RIGHT_SQUARE629=null;
        DRLParser.arrayInitializer_return arrayInitializer622 = null;

        DRLParser.expression_return expression623 = null;

        DRLParser.expression_return expression626 = null;


        Object LEFT_SQUARE618_tree=null;
        Object RIGHT_SQUARE619_tree=null;
        Object LEFT_SQUARE620_tree=null;
        Object RIGHT_SQUARE621_tree=null;
        Object RIGHT_SQUARE624_tree=null;
        Object LEFT_SQUARE625_tree=null;
        Object RIGHT_SQUARE627_tree=null;
        Object LEFT_SQUARE628_tree=null;
        Object RIGHT_SQUARE629_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1728:2: ( LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1728:6: LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE618=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE618_tree = (Object)adaptor.create(LEFT_SQUARE618);
            adaptor.addChild(root_0, LEFT_SQUARE618_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1729:2: ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==RIGHT_SQUARE) ) {
                alt191=1;
            }
            else if ( (LA191_0==ID||LA191_0==STRING||(LA191_0>=BOOL && LA191_0<=LEFT_PAREN)||LA191_0==DECIMAL||LA191_0==LESS||LA191_0==LEFT_SQUARE||(LA191_0>=NULL && LA191_0<=FLOAT)||(LA191_0>=INCR && LA191_0<=NEGATION)) ) {
                alt191=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }
            switch (alt191) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1729:6: RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer
                    {
                    RIGHT_SQUARE619=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE619_tree = (Object)adaptor.create(RIGHT_SQUARE619);
                    adaptor.addChild(root_0, RIGHT_SQUARE619_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1729:19: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop188:
                    do {
                        int alt188=2;
                        int LA188_0 = input.LA(1);

                        if ( (LA188_0==LEFT_SQUARE) ) {
                            alt188=1;
                        }


                        switch (alt188) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1729:20: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE620=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8187); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE620_tree = (Object)adaptor.create(LEFT_SQUARE620);
                    	    adaptor.addChild(root_0, LEFT_SQUARE620_tree);
                    	    }
                    	    RIGHT_SQUARE621=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8189); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE621_tree = (Object)adaptor.create(RIGHT_SQUARE621);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE621_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop188;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest8193);
                    arrayInitializer622=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer622.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1730:13: expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest8207);
                    expression623=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression623.getTree());
                    RIGHT_SQUARE624=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE624_tree = (Object)adaptor.create(RIGHT_SQUARE624);
                    adaptor.addChild(root_0, RIGHT_SQUARE624_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1730:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*
                    loop189:
                    do {
                        int alt189=2;
                        alt189 = dfa189.predict(input);
                        switch (alt189) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1730:38: {...}? => LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    if ( !((!helper.validateLT(2,"]"))) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "arrayCreatorRest", "!helper.validateLT(2,\"]\")");
                    	    }
                    	    LEFT_SQUARE625=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8214); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE625_tree = (Object)adaptor.create(LEFT_SQUARE625);
                    	    adaptor.addChild(root_0, LEFT_SQUARE625_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest8216);
                    	    expression626=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression626.getTree());
                    	    RIGHT_SQUARE627=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8218); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE627_tree = (Object)adaptor.create(RIGHT_SQUARE627);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE627_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop189;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1730:106: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop190:
                    do {
                        int alt190=2;
                        int LA190_0 = input.LA(1);

                        if ( (LA190_0==LEFT_SQUARE) ) {
                            int LA190_2 = input.LA(2);

                            if ( (LA190_2==RIGHT_SQUARE) ) {
                                int LA190_3 = input.LA(3);

                                if ( (synpred66_DRL()) ) {
                                    alt190=1;
                                }


                            }


                        }


                        switch (alt190) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1730:107: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE628=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8230); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE628_tree = (Object)adaptor.create(LEFT_SQUARE628);
                    	    adaptor.addChild(root_0, LEFT_SQUARE628_tree);
                    	    }
                    	    RIGHT_SQUARE629=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8232); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE629_tree = (Object)adaptor.create(RIGHT_SQUARE629);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE629_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop190;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayCreatorRest"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1734:1: variableInitializer : ( arrayInitializer | expression );
    public final DRLParser.variableInitializer_return variableInitializer() throws RecognitionException {
        DRLParser.variableInitializer_return retval = new DRLParser.variableInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arrayInitializer_return arrayInitializer630 = null;

        DRLParser.expression_return expression631 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1735:2: ( arrayInitializer | expression )
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==LEFT_CURLY) ) {
                alt192=1;
            }
            else if ( (LA192_0==ID||LA192_0==STRING||(LA192_0>=BOOL && LA192_0<=LEFT_PAREN)||LA192_0==DECIMAL||LA192_0==LESS||LA192_0==LEFT_SQUARE||(LA192_0>=NULL && LA192_0<=FLOAT)||(LA192_0>=INCR && LA192_0<=NEGATION)) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1735:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer8255);
                    arrayInitializer630=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer630.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1736:10: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer8266);
                    expression631=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression631.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1739:1: arrayInitializer : LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY ;
    public final DRLParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        DRLParser.arrayInitializer_return retval = new DRLParser.arrayInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY632=null;
        Token COMMA634=null;
        Token COMMA636=null;
        Token RIGHT_CURLY637=null;
        DRLParser.variableInitializer_return variableInitializer633 = null;

        DRLParser.variableInitializer_return variableInitializer635 = null;


        Object LEFT_CURLY632_tree=null;
        Object COMMA634_tree=null;
        Object COMMA636_tree=null;
        Object RIGHT_CURLY637_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1740:2: ( LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1740:4: LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY632=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer8278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY632_tree = (Object)adaptor.create(LEFT_CURLY632);
            adaptor.addChild(root_0, LEFT_CURLY632_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1740:15: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID||LA195_0==STRING||(LA195_0>=BOOL && LA195_0<=LEFT_PAREN)||LA195_0==DECIMAL||LA195_0==LESS||LA195_0==LEFT_SQUARE||(LA195_0>=NULL && LA195_0<=FLOAT)||LA195_0==LEFT_CURLY||(LA195_0>=INCR && LA195_0<=NEGATION)) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1740:16: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer8281);
                    variableInitializer633=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer633.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1740:36: ( COMMA variableInitializer )*
                    loop193:
                    do {
                        int alt193=2;
                        int LA193_0 = input.LA(1);

                        if ( (LA193_0==COMMA) ) {
                            int LA193_1 = input.LA(2);

                            if ( (LA193_1==ID||LA193_1==STRING||(LA193_1>=BOOL && LA193_1<=LEFT_PAREN)||LA193_1==DECIMAL||LA193_1==LESS||LA193_1==LEFT_SQUARE||(LA193_1>=NULL && LA193_1<=FLOAT)||LA193_1==LEFT_CURLY||(LA193_1>=INCR && LA193_1<=NEGATION)) ) {
                                alt193=1;
                            }


                        }


                        switch (alt193) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1740:37: COMMA variableInitializer
                    	    {
                    	    COMMA634=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer8284); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA634_tree = (Object)adaptor.create(COMMA634);
                    	    adaptor.addChild(root_0, COMMA634_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer8286);
                    	    variableInitializer635=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer635.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop193;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1740:65: ( COMMA )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==COMMA) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1740:66: COMMA
                            {
                            COMMA636=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer8291); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA636_tree = (Object)adaptor.create(COMMA636);
                            adaptor.addChild(root_0, COMMA636_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RIGHT_CURLY637=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer8298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY637_tree = (Object)adaptor.create(RIGHT_CURLY637);
            adaptor.addChild(root_0, RIGHT_CURLY637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1743:1: classCreatorRest : arguments ( classBody )? ;
    public final DRLParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        DRLParser.classCreatorRest_return retval = new DRLParser.classCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arguments_return arguments638 = null;

        DRLParser.classBody_return classBody639 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1744:2: ( arguments ( classBody )? )
            // src/main/resources/org/drools/lang/DRL.g:1744:4: arguments ( classBody )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest8309);
            arguments638=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments638.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1744:14: ( classBody )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==LEFT_CURLY) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1744:14: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest8311);
                    classBody639=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody639.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // src/main/resources/org/drools/lang/DRL.g:1747:1: explicitGenericInvocation : nonWildcardTypeArguments arguments ;
    public final DRLParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        DRLParser.explicitGenericInvocation_return retval = new DRLParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments640 = null;

        DRLParser.arguments_return arguments641 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1748:2: ( nonWildcardTypeArguments arguments )
            // src/main/resources/org/drools/lang/DRL.g:1748:4: nonWildcardTypeArguments arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation8326);
            nonWildcardTypeArguments640=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments640.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation8328);
            arguments641=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments641.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1751:1: nonWildcardTypeArguments : LESS typeList GREATER ;
    public final DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        DRLParser.nonWildcardTypeArguments_return retval = new DRLParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS642=null;
        Token GREATER644=null;
        DRLParser.typeList_return typeList643 = null;


        Object LESS642_tree=null;
        Object GREATER644_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1752:2: ( LESS typeList GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1752:4: LESS typeList GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS642=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments8340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS642_tree = (Object)adaptor.create(LESS642);
            adaptor.addChild(root_0, LESS642_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments8342);
            typeList643=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList643.getTree());
            GREATER644=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments8344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER644_tree = (Object)adaptor.create(GREATER644);
            adaptor.addChild(root_0, GREATER644_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1755:1: explicitGenericInvocationSuffix : ( super_key superSuffix | ID arguments );
    public final DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        DRLParser.explicitGenericInvocationSuffix_return retval = new DRLParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID647=null;
        DRLParser.super_key_return super_key645 = null;

        DRLParser.superSuffix_return superSuffix646 = null;

        DRLParser.arguments_return arguments648 = null;


        Object ID647_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1756:2: ( super_key superSuffix | ID arguments )
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==ID) ) {
                int LA197_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                    alt197=1;
                }
                else if ( (true) ) {
                    alt197=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 197, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }
            switch (alt197) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1756:4: super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_explicitGenericInvocationSuffix8356);
                    super_key645=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key645.getTree());
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix8358);
                    superSuffix646=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix646.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1757:7: ID arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    ID647=(Token)match(input,ID,FOLLOW_ID_in_explicitGenericInvocationSuffix8366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID647_tree = (Object)adaptor.create(ID647);
                    adaptor.addChild(root_0, ID647_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix8368);
                    arguments648=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments648.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // src/main/resources/org/drools/lang/DRL.g:1760:1: selector options {backtrack=true; memoize=true; } : ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE );
    public final DRLParser.selector_return selector() throws RecognitionException {
        DRLParser.selector_return retval = new DRLParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token DOT649=null;
        Token ID650=null;
        Token DOT652=null;
        Token DOT655=null;
        Token LEFT_SQUARE659=null;
        Token RIGHT_SQUARE661=null;
        DRLParser.arguments_return arguments651 = null;

        DRLParser.super_key_return super_key653 = null;

        DRLParser.superSuffix_return superSuffix654 = null;

        DRLParser.new_key_return new_key656 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments657 = null;

        DRLParser.innerCreator_return innerCreator658 = null;

        DRLParser.expression_return expression660 = null;


        Object DOT649_tree=null;
        Object ID650_tree=null;
        Object DOT652_tree=null;
        Object DOT655_tree=null;
        Object LEFT_SQUARE659_tree=null;
        Object RIGHT_SQUARE661_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1762:2: ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE )
            int alt200=4;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==DOT) ) {
                int LA200_1 = input.LA(2);

                if ( (synpred68_DRL()) ) {
                    alt200=1;
                }
                else if ( (synpred69_DRL()) ) {
                    alt200=2;
                }
                else if ( (synpred70_DRL()) ) {
                    alt200=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA200_0==LEFT_SQUARE) ) {
                alt200=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1762:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT649=(Token)match(input,DOT,FOLLOW_DOT_in_selector8395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT649_tree = (Object)adaptor.create(DOT649);
                    adaptor.addChild(root_0, DOT649_tree);
                    }
                    ID650=(Token)match(input,ID,FOLLOW_ID_in_selector8397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID650_tree = (Object)adaptor.create(ID650);
                    adaptor.addChild(root_0, ID650_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1762:13: ( ( LEFT_PAREN )=> arguments )?
                    int alt198=2;
                    alt198 = dfa198.predict(input);
                    switch (alt198) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1762:14: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector8406);
                            arguments651=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments651.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1764:6: DOT super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT652=(Token)match(input,DOT,FOLLOW_DOT_in_selector8417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT652_tree = (Object)adaptor.create(DOT652);
                    adaptor.addChild(root_0, DOT652_tree);
                    }
                    pushFollow(FOLLOW_super_key_in_selector8419);
                    super_key653=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key653.getTree());
                    pushFollow(FOLLOW_superSuffix_in_selector8421);
                    superSuffix654=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix654.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1765:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT655=(Token)match(input,DOT,FOLLOW_DOT_in_selector8428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT655_tree = (Object)adaptor.create(DOT655);
                    adaptor.addChild(root_0, DOT655_tree);
                    }
                    pushFollow(FOLLOW_new_key_in_selector8430);
                    new_key656=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key656.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1765:18: ( nonWildcardTypeArguments )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==LESS) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1765:19: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector8433);
                            nonWildcardTypeArguments657=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments657.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector8437);
                    innerCreator658=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator658.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1766:6: LEFT_SQUARE expression RIGHT_SQUARE
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_SQUARE659=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector8444); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_SQUARE659_tree = (Object)adaptor.create(LEFT_SQUARE659);
                    adaptor.addChild(root_0, LEFT_SQUARE659_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector8446);
                    expression660=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression660.getTree());
                    RIGHT_SQUARE661=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector8448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE661_tree = (Object)adaptor.create(RIGHT_SQUARE661);
                    adaptor.addChild(root_0, RIGHT_SQUARE661_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1769:1: superSuffix : ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? );
    public final DRLParser.superSuffix_return superSuffix() throws RecognitionException {
        DRLParser.superSuffix_return retval = new DRLParser.superSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT663=null;
        Token ID664=null;
        DRLParser.arguments_return arguments662 = null;

        DRLParser.arguments_return arguments665 = null;


        Object DOT663_tree=null;
        Object ID664_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1770:2: ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==LEFT_PAREN) ) {
                alt202=1;
            }
            else if ( (LA202_0==DOT) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1770:4: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_superSuffix8460);
                    arguments662=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments662.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1771:7: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT663=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix8468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT663_tree = (Object)adaptor.create(DOT663);
                    adaptor.addChild(root_0, DOT663_tree);
                    }
                    ID664=(Token)match(input,ID,FOLLOW_ID_in_superSuffix8470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID664_tree = (Object)adaptor.create(ID664);
                    adaptor.addChild(root_0, ID664_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1771:14: ( ( LEFT_PAREN )=> arguments )?
                    int alt201=2;
                    alt201 = dfa201.predict(input);
                    switch (alt201) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1771:15: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix8479);
                            arguments665=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments665.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // src/main/resources/org/drools/lang/DRL.g:1774:1: arguments options {backtrack=true; memoize=true; } : LEFT_PAREN ( expressionList )? RIGHT_PAREN ;
    public final DRLParser.arguments_return arguments() throws RecognitionException {
        DRLParser.arguments_return retval = new DRLParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN666=null;
        Token RIGHT_PAREN668=null;
        DRLParser.expressionList_return expressionList667 = null;


        Object LEFT_PAREN666_tree=null;
        Object RIGHT_PAREN668_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1776:2: ( LEFT_PAREN ( expressionList )? RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1776:4: LEFT_PAREN ( expressionList )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN666=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments8513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN666_tree = (Object)adaptor.create(LEFT_PAREN666);
            adaptor.addChild(root_0, LEFT_PAREN666_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1776:15: ( expressionList )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==ID||LA203_0==STRING||(LA203_0>=BOOL && LA203_0<=LEFT_PAREN)||LA203_0==DECIMAL||LA203_0==LESS||LA203_0==LEFT_SQUARE||(LA203_0>=NULL && LA203_0<=FLOAT)||(LA203_0>=INCR && LA203_0<=NEGATION)) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1776:15: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments8515);
                    expressionList667=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList667.getTree());

                    }
                    break;

            }

            RIGHT_PAREN668=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments8518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN668_tree = (Object)adaptor.create(RIGHT_PAREN668);
            adaptor.addChild(root_0, RIGHT_PAREN668_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // src/main/resources/org/drools/lang/DRL.g:1779:1: expressionList : expression ( COMMA expression )* ;
    public final DRLParser.expressionList_return expressionList() throws RecognitionException {
        DRLParser.expressionList_return retval = new DRLParser.expressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA670=null;
        DRLParser.expression_return expression669 = null;

        DRLParser.expression_return expression671 = null;


        Object COMMA670_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1781:5: ( expression ( COMMA expression )* )
            // src/main/resources/org/drools/lang/DRL.g:1781:9: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList8535);
            expression669=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression669.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1781:20: ( COMMA expression )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==COMMA) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1781:21: COMMA expression
            	    {
            	    COMMA670=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList8538); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA670_tree = (Object)adaptor.create(COMMA670);
            	    adaptor.addChild(root_0, COMMA670_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList8540);
            	    expression671=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression671.getTree());

            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // src/main/resources/org/drools/lang/DRL.g:1784:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );
    public final DRLParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        DRLParser.assignmentOperator_return retval = new DRLParser.assignmentOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN672=null;
        Token PLUS_ASSIGN673=null;
        Token MINUS_ASSIGN674=null;
        Token MULT_ASSIGN675=null;
        Token DIV_ASSIGN676=null;
        Token AND_ASSIGN677=null;
        Token OR_ASSIGN678=null;
        Token XOR_ASSIGN679=null;
        Token MOD_ASSIGN680=null;
        Token SHIFT_LEFT681=null;
        Token EQUALS_ASSIGN682=null;
        Token SHIFT_RIGHT683=null;
        Token EQUALS_ASSIGN684=null;
        Token SHIFT_RIGHT_UNSIG685=null;
        Token EQUALS_ASSIGN686=null;

        Object EQUALS_ASSIGN672_tree=null;
        Object PLUS_ASSIGN673_tree=null;
        Object MINUS_ASSIGN674_tree=null;
        Object MULT_ASSIGN675_tree=null;
        Object DIV_ASSIGN676_tree=null;
        Object AND_ASSIGN677_tree=null;
        Object OR_ASSIGN678_tree=null;
        Object XOR_ASSIGN679_tree=null;
        Object MOD_ASSIGN680_tree=null;
        Object SHIFT_LEFT681_tree=null;
        Object EQUALS_ASSIGN682_tree=null;
        Object SHIFT_RIGHT683_tree=null;
        Object EQUALS_ASSIGN684_tree=null;
        Object SHIFT_RIGHT_UNSIG685_tree=null;
        Object EQUALS_ASSIGN686_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1786:2: ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN )
            int alt205=12;
            alt205 = dfa205.predict(input);
            switch (alt205) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1786:6: EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_ASSIGN672=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN672_tree = (Object)adaptor.create(EQUALS_ASSIGN672);
                    adaptor.addChild(root_0, EQUALS_ASSIGN672_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1787:13: PLUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS_ASSIGN673=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator8581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS_ASSIGN673_tree = (Object)adaptor.create(PLUS_ASSIGN673);
                    adaptor.addChild(root_0, PLUS_ASSIGN673_tree);
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1788:13: MINUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS_ASSIGN674=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator8595); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS_ASSIGN674_tree = (Object)adaptor.create(MINUS_ASSIGN674);
                    adaptor.addChild(root_0, MINUS_ASSIGN674_tree);
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1789:13: MULT_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MULT_ASSIGN675=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator8609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MULT_ASSIGN675_tree = (Object)adaptor.create(MULT_ASSIGN675);
                    adaptor.addChild(root_0, MULT_ASSIGN675_tree);
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1790:13: DIV_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DIV_ASSIGN676=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator8623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV_ASSIGN676_tree = (Object)adaptor.create(DIV_ASSIGN676);
                    adaptor.addChild(root_0, DIV_ASSIGN676_tree);
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1791:13: AND_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_ASSIGN677=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator8637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_ASSIGN677_tree = (Object)adaptor.create(AND_ASSIGN677);
                    adaptor.addChild(root_0, AND_ASSIGN677_tree);
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1792:13: OR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_ASSIGN678=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator8651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_ASSIGN678_tree = (Object)adaptor.create(OR_ASSIGN678);
                    adaptor.addChild(root_0, OR_ASSIGN678_tree);
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1793:13: XOR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    XOR_ASSIGN679=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator8665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    XOR_ASSIGN679_tree = (Object)adaptor.create(XOR_ASSIGN679);
                    adaptor.addChild(root_0, XOR_ASSIGN679_tree);
                    }

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1794:13: MOD_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MOD_ASSIGN680=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator8679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOD_ASSIGN680_tree = (Object)adaptor.create(MOD_ASSIGN680);
                    adaptor.addChild(root_0, MOD_ASSIGN680_tree);
                    }

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:1795:13: SHIFT_LEFT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_LEFT681=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator8693); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_LEFT681_tree = (Object)adaptor.create(SHIFT_LEFT681);
                    adaptor.addChild(root_0, SHIFT_LEFT681_tree);
                    }
                    EQUALS_ASSIGN682=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN682_tree = (Object)adaptor.create(EQUALS_ASSIGN682);
                    adaptor.addChild(root_0, EQUALS_ASSIGN682_tree);
                    }

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:1796:13: SHIFT_RIGHT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT683=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator8709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT683_tree = (Object)adaptor.create(SHIFT_RIGHT683);
                    adaptor.addChild(root_0, SHIFT_RIGHT683_tree);
                    }
                    EQUALS_ASSIGN684=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN684_tree = (Object)adaptor.create(EQUALS_ASSIGN684);
                    adaptor.addChild(root_0, EQUALS_ASSIGN684_tree);
                    }

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:1797:13: SHIFT_RIGHT_UNSIG EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT_UNSIG685=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator8725); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT_UNSIG685_tree = (Object)adaptor.create(SHIFT_RIGHT_UNSIG685);
                    adaptor.addChild(root_0, SHIFT_RIGHT_UNSIG685_tree);
                    }
                    EQUALS_ASSIGN686=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN686_tree = (Object)adaptor.create(EQUALS_ASSIGN686);
                    adaptor.addChild(root_0, EQUALS_ASSIGN686_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1811:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
    public final DRLParser.classDeclaration_return classDeclaration() throws RecognitionException {
        DRLParser.classDeclaration_return retval = new DRLParser.classDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.normalClassDeclaration_return normalClassDeclaration687 = null;

        DRLParser.enumDeclaration_return enumDeclaration688 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1812:2: ( normalClassDeclaration | enumDeclaration )
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {
                int LA206_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))) ) {
                    alt206=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))) ) {
                    alt206=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }
            switch (alt206) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1812:4: normalClassDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration8750);
                    normalClassDeclaration687=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalClassDeclaration687.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1813:9: enumDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration8760);
                    enumDeclaration688=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration688.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalClassDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1816:1: normalClassDeclaration : class_key ID ( typeParameters )? ( extends_key type )? ( implements_key typeList )? classBody ;
    public final DRLParser.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        DRLParser.normalClassDeclaration_return retval = new DRLParser.normalClassDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID690=null;
        DRLParser.class_key_return class_key689 = null;

        DRLParser.typeParameters_return typeParameters691 = null;

        DRLParser.extends_key_return extends_key692 = null;

        DRLParser.type_return type693 = null;

        DRLParser.implements_key_return implements_key694 = null;

        DRLParser.typeList_return typeList695 = null;

        DRLParser.classBody_return classBody696 = null;


        Object ID690_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1817:2: ( class_key ID ( typeParameters )? ( extends_key type )? ( implements_key typeList )? classBody )
            // src/main/resources/org/drools/lang/DRL.g:1817:4: class_key ID ( typeParameters )? ( extends_key type )? ( implements_key typeList )? classBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_class_key_in_normalClassDeclaration8772);
            class_key689=class_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key689.getTree());
            ID690=(Token)match(input,ID,FOLLOW_ID_in_normalClassDeclaration8774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID690_tree = (Object)adaptor.create(ID690);
            adaptor.addChild(root_0, ID690_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1817:17: ( typeParameters )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==LESS) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1817:18: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration8777);
                    typeParameters691=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters691.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:1818:9: ( extends_key type )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                int LA208_1 = input.LA(2);

                if ( (LA208_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                    int LA208_3 = input.LA(3);

                    if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                        alt208=1;
                    }
                }
            }
            switch (alt208) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1818:10: extends_key type
                    {
                    pushFollow(FOLLOW_extends_key_in_normalClassDeclaration8790);
                    extends_key692=extends_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key692.getTree());
                    pushFollow(FOLLOW_type_in_normalClassDeclaration8792);
                    type693=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type693.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:1819:9: ( implements_key typeList )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1819:10: implements_key typeList
                    {
                    pushFollow(FOLLOW_implements_key_in_normalClassDeclaration8805);
                    implements_key694=implements_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_key694.getTree());
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration8807);
                    typeList695=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList695.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration8819);
            classBody696=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody696.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // src/main/resources/org/drools/lang/DRL.g:1823:1: classBody : LEFT_CURLY ( classBodyDeclaration )* RIGHT_CURLY ;
    public final DRLParser.classBody_return classBody() throws RecognitionException {
        DRLParser.classBody_return retval = new DRLParser.classBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY697=null;
        Token RIGHT_CURLY699=null;
        DRLParser.classBodyDeclaration_return classBodyDeclaration698 = null;


        Object LEFT_CURLY697_tree=null;
        Object RIGHT_CURLY699_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1824:2: ( LEFT_CURLY ( classBodyDeclaration )* RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1824:4: LEFT_CURLY ( classBodyDeclaration )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY697=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_classBody8830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY697_tree = (Object)adaptor.create(LEFT_CURLY697);
            adaptor.addChild(root_0, LEFT_CURLY697_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1824:15: ( classBodyDeclaration )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( ((LA210_0>=SEMICOLON && LA210_0<=ID)||LA210_0==LESS||LA210_0==LEFT_CURLY||LA210_0==AT) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1824:15: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody8832);
            	    classBodyDeclaration698=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration698.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);

            RIGHT_CURLY699=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_classBody8835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY699_tree = (Object)adaptor.create(RIGHT_CURLY699);
            adaptor.addChild(root_0, RIGHT_CURLY699_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1827:1: classBodyDeclaration : ( SEMICOLON | block | modifiedClassMember );
    public final DRLParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        DRLParser.classBodyDeclaration_return retval = new DRLParser.classBodyDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON700=null;
        DRLParser.block_return block701 = null;

        DRLParser.modifiedClassMember_return modifiedClassMember702 = null;


        Object SEMICOLON700_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1828:2: ( SEMICOLON | block | modifiedClassMember )
            int alt211=3;
            switch ( input.LA(1) ) {
            case SEMICOLON:
                {
                alt211=1;
                }
                break;
            case LEFT_CURLY:
                {
                alt211=2;
                }
                break;
            case ID:
            case LESS:
            case AT:
                {
                alt211=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }

            switch (alt211) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1828:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON700=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_classBodyDeclaration8849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON700_tree = (Object)adaptor.create(SEMICOLON700);
                    adaptor.addChild(root_0, SEMICOLON700_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1830:3: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_classBodyDeclaration8857);
                    block701=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block701.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1831:4: modifiedClassMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiedClassMember_in_classBodyDeclaration8864);
                    modifiedClassMember702=modifiedClassMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedClassMember702.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class modifiedClassMember_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiedClassMember"
    // src/main/resources/org/drools/lang/DRL.g:1835:1: modifiedClassMember options {backtrack=true; } : ( modifier modifiedClassMember | memberDecl );
    public final DRLParser.modifiedClassMember_return modifiedClassMember() throws RecognitionException {
        DRLParser.modifiedClassMember_return retval = new DRLParser.modifiedClassMember_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.modifier_return modifier703 = null;

        DRLParser.modifiedClassMember_return modifiedClassMember704 = null;

        DRLParser.memberDecl_return memberDecl705 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1837:2: ( modifier modifiedClassMember | memberDecl )
            int alt212=2;
            switch ( input.LA(1) ) {
            case AT:
                {
                int LA212_1 = input.LA(2);

                if ( (synpred72_DRL()) ) {
                    alt212=1;
                }
                else if ( (true) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA212_2 = input.LA(2);

                if ( (((synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))))) ) {
                    alt212=1;
                }
                else if ( (true) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 2, input);

                    throw nvae;
                }
                }
                break;
            case LESS:
                {
                alt212=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }

            switch (alt212) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1837:4: modifier modifiedClassMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifier_in_modifiedClassMember8885);
                    modifier703=modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier703.getTree());
                    pushFollow(FOLLOW_modifiedClassMember_in_modifiedClassMember8887);
                    modifiedClassMember704=modifiedClassMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedClassMember704.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1838:4: memberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_memberDecl_in_modifiedClassMember8892);
                    memberDecl705=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberDecl705.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifiedClassMember"

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // src/main/resources/org/drools/lang/DRL.g:1842:1: modifier : ( annotation | public_key | protected_key | private_key | static_key | abstract_key | final_key | native_key | synchronized_key | transient_key | volatile_key | strictfp_key );
    public final DRLParser.modifier_return modifier() throws RecognitionException {
        DRLParser.modifier_return retval = new DRLParser.modifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotation_return annotation706 = null;

        DRLParser.public_key_return public_key707 = null;

        DRLParser.protected_key_return protected_key708 = null;

        DRLParser.private_key_return private_key709 = null;

        DRLParser.static_key_return static_key710 = null;

        DRLParser.abstract_key_return abstract_key711 = null;

        DRLParser.final_key_return final_key712 = null;

        DRLParser.native_key_return native_key713 = null;

        DRLParser.synchronized_key_return synchronized_key714 = null;

        DRLParser.transient_key_return transient_key715 = null;

        DRLParser.volatile_key_return volatile_key716 = null;

        DRLParser.strictfp_key_return strictfp_key717 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1843:5: ( annotation | public_key | protected_key | private_key | static_key | abstract_key | final_key | native_key | synchronized_key | transient_key | volatile_key | strictfp_key )
            int alt213=12;
            alt213 = dfa213.predict(input);
            switch (alt213) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1843:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_modifier8910);
                    annotation706=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation706.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1844:9: public_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_public_key_in_modifier8920);
                    public_key707=public_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, public_key707.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1845:9: protected_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_protected_key_in_modifier8930);
                    protected_key708=protected_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_key708.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1846:9: private_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_private_key_in_modifier8940);
                    private_key709=private_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, private_key709.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1847:9: static_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_static_key_in_modifier8950);
                    static_key710=static_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_key710.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1848:9: abstract_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_abstract_key_in_modifier8960);
                    abstract_key711=abstract_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_key711.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1849:9: final_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_final_key_in_modifier8970);
                    final_key712=final_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, final_key712.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1850:9: native_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_native_key_in_modifier8980);
                    native_key713=native_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, native_key713.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1851:9: synchronized_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_synchronized_key_in_modifier8990);
                    synchronized_key714=synchronized_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_key714.getTree());

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:1852:9: transient_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_transient_key_in_modifier9000);
                    transient_key715=transient_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, transient_key715.getTree());

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:1853:9: volatile_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volatile_key_in_modifier9010);
                    volatile_key716=volatile_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volatile_key716.getTree());

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:1854:9: strictfp_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_strictfp_key_in_modifier9020);
                    strictfp_key717=strictfp_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, strictfp_key717.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class memberDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDecl"
    // src/main/resources/org/drools/lang/DRL.g:1857:1: memberDecl options {backtrack=true; } : ( genericMethodOrConstructorDecl | methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest | fieldDeclaration | interfaceDeclaration | classDeclaration );
    public final DRLParser.memberDecl_return memberDecl() throws RecognitionException {
        DRLParser.memberDecl_return retval = new DRLParser.memberDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID721=null;
        Token ID723=null;
        DRLParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl718 = null;

        DRLParser.methodDeclaration_return methodDeclaration719 = null;

        DRLParser.void_key_return void_key720 = null;

        DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest722 = null;

        DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest724 = null;

        DRLParser.fieldDeclaration_return fieldDeclaration725 = null;

        DRLParser.interfaceDeclaration_return interfaceDeclaration726 = null;

        DRLParser.classDeclaration_return classDeclaration727 = null;


        Object ID721_tree=null;
        Object ID723_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1859:2: ( genericMethodOrConstructorDecl | methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest | fieldDeclaration | interfaceDeclaration | classDeclaration )
            int alt214=7;
            switch ( input.LA(1) ) {
            case LESS:
                {
                alt214=1;
                }
                break;
            case ID:
                {
                int LA214_2 = input.LA(2);

                if ( (((synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||synpred74_DRL())) ) {
                    alt214=2;
                }
                else if ( ((synpred75_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))) ) {
                    alt214=3;
                }
                else if ( (synpred76_DRL()) ) {
                    alt214=4;
                }
                else if ( (((synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||synpred77_DRL()||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))))) ) {
                    alt214=5;
                }
                else if ( ((synpred78_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))) ) {
                    alt214=6;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))) ) {
                    alt214=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 2, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                alt214=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }

            switch (alt214) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1859:4: genericMethodOrConstructorDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl9043);
                    genericMethodOrConstructorDecl718=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorDecl718.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1861:4: methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_memberDecl9053);
                    methodDeclaration719=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaration719.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1862:4: void_key ID voidMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_void_key_in_memberDecl9058);
                    void_key720=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key720.getTree());
                    ID721=(Token)match(input,ID,FOLLOW_ID_in_memberDecl9060); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID721_tree = (Object)adaptor.create(ID721);
                    adaptor.addChild(root_0, ID721_tree);
                    }
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl9062);
                    voidMethodDeclaratorRest722=voidMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, voidMethodDeclaratorRest722.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1863:4: ID constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    ID723=(Token)match(input,ID,FOLLOW_ID_in_memberDecl9067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID723_tree = (Object)adaptor.create(ID723);
                    adaptor.addChild(root_0, ID723_tree);
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl9069);
                    constructorDeclaratorRest724=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest724.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1865:4: fieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fieldDeclaration_in_memberDecl9076);
                    fieldDeclaration725=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldDeclaration725.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1867:4: interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl9084);
                    interfaceDeclaration726=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration726.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1868:4: classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_memberDecl9089);
                    classDeclaration727=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration727.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // src/main/resources/org/drools/lang/DRL.g:1872:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest ;
    public final DRLParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        DRLParser.genericMethodOrConstructorDecl_return retval = new DRLParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.typeParameters_return typeParameters728 = null;

        DRLParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest729 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1873:2: ( typeParameters genericMethodOrConstructorRest )
            // src/main/resources/org/drools/lang/DRL.g:1873:4: typeParameters genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl9103);
            typeParameters728=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters728.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl9105);
            genericMethodOrConstructorRest729=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorRest729.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // src/main/resources/org/drools/lang/DRL.g:1876:1: genericMethodOrConstructorRest : ( ( type | void_key ) ID methodDeclaratorRest | ID constructorDeclaratorRest );
    public final DRLParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        DRLParser.genericMethodOrConstructorRest_return retval = new DRLParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID732=null;
        Token ID734=null;
        DRLParser.type_return type730 = null;

        DRLParser.void_key_return void_key731 = null;

        DRLParser.methodDeclaratorRest_return methodDeclaratorRest733 = null;

        DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest735 = null;


        Object ID732_tree=null;
        Object ID734_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1877:2: ( ( type | void_key ) ID methodDeclaratorRest | ID constructorDeclaratorRest )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==ID) ) {
                int LA216_1 = input.LA(2);

                if ( ((LA216_1>=ID && LA216_1<=DOT)||LA216_1==LESS||LA216_1==LEFT_SQUARE) ) {
                    alt216=1;
                }
                else if ( (LA216_1==LEFT_PAREN) ) {
                    alt216=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 216, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1877:4: ( type | void_key ) ID methodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1877:4: ( type | void_key )
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==ID) ) {
                        int LA215_1 = input.LA(2);

                        if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))))) ) {
                            alt215=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                            alt215=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 215, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 215, 0, input);

                        throw nvae;
                    }
                    switch (alt215) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1877:5: type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest9118);
                            type730=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type730.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1877:12: void_key
                            {
                            pushFollow(FOLLOW_void_key_in_genericMethodOrConstructorRest9122);
                            void_key731=void_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key731.getTree());

                            }
                            break;

                    }

                    ID732=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID732_tree = (Object)adaptor.create(ID732);
                    adaptor.addChild(root_0, ID732_tree);
                    }
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest9127);
                    methodDeclaratorRest733=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest733.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1878:4: ID constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    ID734=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID734_tree = (Object)adaptor.create(ID734);
                    adaptor.addChild(root_0, ID734_tree);
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest9134);
                    constructorDeclaratorRest735=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest735.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1882:1: methodDeclaration : type ID methodDeclaratorRest ;
    public final DRLParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        DRLParser.methodDeclaration_return retval = new DRLParser.methodDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID737=null;
        DRLParser.type_return type736 = null;

        DRLParser.methodDeclaratorRest_return methodDeclaratorRest738 = null;


        Object ID737_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1883:2: ( type ID methodDeclaratorRest )
            // src/main/resources/org/drools/lang/DRL.g:1883:4: type ID methodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_methodDeclaration9149);
            type736=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type736.getTree());
            ID737=(Token)match(input,ID,FOLLOW_ID_in_methodDeclaration9151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID737_tree = (Object)adaptor.create(ID737);
            adaptor.addChild(root_0, ID737_tree);
            }
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration9153);
            methodDeclaratorRest738=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest738.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // src/main/resources/org/drools/lang/DRL.g:1886:1: methodDeclaratorRest : formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? ( block | SEMICOLON ) ;
    public final DRLParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        DRLParser.methodDeclaratorRest_return retval = new DRLParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE740=null;
        Token RIGHT_SQUARE741=null;
        Token SEMICOLON745=null;
        DRLParser.formalParameters_return formalParameters739 = null;

        DRLParser.throws_key_return throws_key742 = null;

        DRLParser.typeNameList_return typeNameList743 = null;

        DRLParser.block_return block744 = null;


        Object LEFT_SQUARE740_tree=null;
        Object RIGHT_SQUARE741_tree=null;
        Object SEMICOLON745_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1887:2: ( formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? ( block | SEMICOLON ) )
            // src/main/resources/org/drools/lang/DRL.g:1887:4: formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? ( block | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest9165);
            formalParameters739=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters739.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1887:21: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( (LA217_0==LEFT_SQUARE) ) {
                    alt217=1;
                }


                switch (alt217) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1887:22: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE740=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_methodDeclaratorRest9168); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE740_tree = (Object)adaptor.create(LEFT_SQUARE740);
            	    adaptor.addChild(root_0, LEFT_SQUARE740_tree);
            	    }
            	    RIGHT_SQUARE741=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_methodDeclaratorRest9170); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE741_tree = (Object)adaptor.create(RIGHT_SQUARE741);
            	    adaptor.addChild(root_0, RIGHT_SQUARE741_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:1888:9: ( throws_key typeNameList )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1888:10: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_methodDeclaratorRest9183);
                    throws_key742=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key742.getTree());
                    pushFollow(FOLLOW_typeNameList_in_methodDeclaratorRest9185);
                    typeNameList743=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList743.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:1889:9: ( block | SEMICOLON )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==LEFT_CURLY) ) {
                alt219=1;
            }
            else if ( (LA219_0==SEMICOLON) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1889:13: block
                    {
                    pushFollow(FOLLOW_block_in_methodDeclaratorRest9201);
                    block744=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block744.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1890:13: SEMICOLON
                    {
                    SEMICOLON745=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_methodDeclaratorRest9216); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON745_tree = (Object)adaptor.create(SEMICOLON745);
                    adaptor.addChild(root_0, SEMICOLON745_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // src/main/resources/org/drools/lang/DRL.g:1894:1: voidMethodDeclaratorRest : formalParameters ( throws_key typeNameList )? ( block | SEMICOLON ) ;
    public final DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        DRLParser.voidMethodDeclaratorRest_return retval = new DRLParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON750=null;
        DRLParser.formalParameters_return formalParameters746 = null;

        DRLParser.throws_key_return throws_key747 = null;

        DRLParser.typeNameList_return typeNameList748 = null;

        DRLParser.block_return block749 = null;


        Object SEMICOLON750_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1895:2: ( formalParameters ( throws_key typeNameList )? ( block | SEMICOLON ) )
            // src/main/resources/org/drools/lang/DRL.g:1895:4: formalParameters ( throws_key typeNameList )? ( block | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest9238);
            formalParameters746=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters746.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1895:21: ( throws_key typeNameList )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1895:22: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_voidMethodDeclaratorRest9241);
                    throws_key747=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key747.getTree());
                    pushFollow(FOLLOW_typeNameList_in_voidMethodDeclaratorRest9243);
                    typeNameList748=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList748.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:1896:9: ( block | SEMICOLON )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==LEFT_CURLY) ) {
                alt221=1;
            }
            else if ( (LA221_0==SEMICOLON) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1896:13: block
                    {
                    pushFollow(FOLLOW_block_in_voidMethodDeclaratorRest9259);
                    block749=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block749.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1897:13: SEMICOLON
                    {
                    SEMICOLON750=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidMethodDeclaratorRest9273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON750_tree = (Object)adaptor.create(SEMICOLON750);
                    adaptor.addChild(root_0, SEMICOLON750_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // src/main/resources/org/drools/lang/DRL.g:1901:1: constructorDeclaratorRest : formalParameters ( throws_key typeNameList )? block ;
    public final DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        DRLParser.constructorDeclaratorRest_return retval = new DRLParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.formalParameters_return formalParameters751 = null;

        DRLParser.throws_key_return throws_key752 = null;

        DRLParser.typeNameList_return typeNameList753 = null;

        DRLParser.block_return block754 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1902:2: ( formalParameters ( throws_key typeNameList )? block )
            // src/main/resources/org/drools/lang/DRL.g:1902:4: formalParameters ( throws_key typeNameList )? block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest9294);
            formalParameters751=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters751.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1902:21: ( throws_key typeNameList )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1902:22: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_constructorDeclaratorRest9297);
                    throws_key752=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key752.getTree());
                    pushFollow(FOLLOW_typeNameList_in_constructorDeclaratorRest9299);
                    typeNameList753=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList753.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_constructorDeclaratorRest9303);
            block754=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block754.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1906:1: fieldDeclaration : type variableDeclarators SEMICOLON ;
    public final DRLParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        DRLParser.fieldDeclaration_return retval = new DRLParser.fieldDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON757=null;
        DRLParser.type_return type755 = null;

        DRLParser.variableDeclarators_return variableDeclarators756 = null;


        Object SEMICOLON757_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1907:2: ( type variableDeclarators SEMICOLON )
            // src/main/resources/org/drools/lang/DRL.g:1907:4: type variableDeclarators SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_fieldDeclaration9315);
            type755=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type755.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration9317);
            variableDeclarators756=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators756.getTree());
            SEMICOLON757=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_fieldDeclaration9319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON757_tree = (Object)adaptor.create(SEMICOLON757);
            adaptor.addChild(root_0, SEMICOLON757_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // src/main/resources/org/drools/lang/DRL.g:1910:1: formalParameters : LEFT_PAREN ( formalParameterDecls )? RIGHT_PAREN ;
    public final DRLParser.formalParameters_return formalParameters() throws RecognitionException {
        DRLParser.formalParameters_return retval = new DRLParser.formalParameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN758=null;
        Token RIGHT_PAREN760=null;
        DRLParser.formalParameterDecls_return formalParameterDecls759 = null;


        Object LEFT_PAREN758_tree=null;
        Object RIGHT_PAREN760_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1911:2: ( LEFT_PAREN ( formalParameterDecls )? RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1911:4: LEFT_PAREN ( formalParameterDecls )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN758=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_formalParameters9331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN758_tree = (Object)adaptor.create(LEFT_PAREN758);
            adaptor.addChild(root_0, LEFT_PAREN758_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1911:15: ( formalParameterDecls )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==ID) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1911:15: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters9333);
                    formalParameterDecls759=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterDecls759.getTree());

                    }
                    break;

            }

            RIGHT_PAREN760=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_formalParameters9336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN760_tree = (Object)adaptor.create(RIGHT_PAREN760);
            adaptor.addChild(root_0, RIGHT_PAREN760_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // src/main/resources/org/drools/lang/DRL.g:1914:1: formalParameterDecls : ( variableModifier )* type ( formalParameterDeclsRest )? ;
    public final DRLParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        DRLParser.formalParameterDecls_return retval = new DRLParser.formalParameterDecls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.variableModifier_return variableModifier761 = null;

        DRLParser.type_return type762 = null;

        DRLParser.formalParameterDeclsRest_return formalParameterDeclsRest763 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1915:2: ( ( variableModifier )* type ( formalParameterDeclsRest )? )
            // src/main/resources/org/drools/lang/DRL.g:1915:4: ( variableModifier )* type ( formalParameterDeclsRest )?
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1915:4: ( variableModifier )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==ID) ) {
                    int LA224_1 = input.LA(2);

                    if ( (LA224_1==ID) ) {
                        int LA224_3 = input.LA(3);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {
                            alt224=1;
                        }


                    }


                }


                switch (alt224) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1915:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls9348);
            	    variableModifier761=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier761.getTree());

            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls9351);
            type762=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type762.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1915:27: ( formalParameterDeclsRest )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( ((LA225_0>=ID && LA225_0<=DOT)) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1915:27: formalParameterDeclsRest
                    {
                    pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls9353);
                    formalParameterDeclsRest763=formalParameterDeclsRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterDeclsRest763.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class formalParameterDeclsRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDeclsRest"
    // src/main/resources/org/drools/lang/DRL.g:1918:1: formalParameterDeclsRest : ( variableDeclaratorId ( COMMA formalParameterDecls )? | DOT DOT DOT variableDeclaratorId );
    public final DRLParser.formalParameterDeclsRest_return formalParameterDeclsRest() throws RecognitionException {
        DRLParser.formalParameterDeclsRest_return retval = new DRLParser.formalParameterDeclsRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA765=null;
        Token DOT767=null;
        Token DOT768=null;
        Token DOT769=null;
        DRLParser.variableDeclaratorId_return variableDeclaratorId764 = null;

        DRLParser.formalParameterDecls_return formalParameterDecls766 = null;

        DRLParser.variableDeclaratorId_return variableDeclaratorId770 = null;


        Object COMMA765_tree=null;
        Object DOT767_tree=null;
        Object DOT768_tree=null;
        Object DOT769_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1919:2: ( variableDeclaratorId ( COMMA formalParameterDecls )? | DOT DOT DOT variableDeclaratorId )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==ID) ) {
                alt227=1;
            }
            else if ( (LA227_0==DOT) ) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1919:4: variableDeclaratorId ( COMMA formalParameterDecls )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9366);
                    variableDeclaratorId764=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId764.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1919:25: ( COMMA formalParameterDecls )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==COMMA) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1919:26: COMMA formalParameterDecls
                            {
                            COMMA765=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterDeclsRest9369); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA765_tree = (Object)adaptor.create(COMMA765);
                            adaptor.addChild(root_0, COMMA765_tree);
                            }
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDeclsRest9371);
                            formalParameterDecls766=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterDecls766.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1920:6: DOT DOT DOT variableDeclaratorId
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT767=(Token)match(input,DOT,FOLLOW_DOT_in_formalParameterDeclsRest9380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT767_tree = (Object)adaptor.create(DOT767);
                    adaptor.addChild(root_0, DOT767_tree);
                    }
                    DOT768=(Token)match(input,DOT,FOLLOW_DOT_in_formalParameterDeclsRest9382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT768_tree = (Object)adaptor.create(DOT768);
                    adaptor.addChild(root_0, DOT768_tree);
                    }
                    DOT769=(Token)match(input,DOT,FOLLOW_DOT_in_formalParameterDeclsRest9384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT769_tree = (Object)adaptor.create(DOT769);
                    adaptor.addChild(root_0, DOT769_tree);
                    }
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9386);
                    variableDeclaratorId770=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId770.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameterDeclsRest"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // src/main/resources/org/drools/lang/DRL.g:1923:1: typeParameters : LESS typeParameter ( COMMA typeParameter )* GREATER ;
    public final DRLParser.typeParameters_return typeParameters() throws RecognitionException {
        DRLParser.typeParameters_return retval = new DRLParser.typeParameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS771=null;
        Token COMMA773=null;
        Token GREATER775=null;
        DRLParser.typeParameter_return typeParameter772 = null;

        DRLParser.typeParameter_return typeParameter774 = null;


        Object LESS771_tree=null;
        Object COMMA773_tree=null;
        Object GREATER775_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1924:2: ( LESS typeParameter ( COMMA typeParameter )* GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1924:4: LESS typeParameter ( COMMA typeParameter )* GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS771=(Token)match(input,LESS,FOLLOW_LESS_in_typeParameters9397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS771_tree = (Object)adaptor.create(LESS771);
            adaptor.addChild(root_0, LESS771_tree);
            }
            pushFollow(FOLLOW_typeParameter_in_typeParameters9399);
            typeParameter772=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameter772.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1924:23: ( COMMA typeParameter )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==COMMA) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1924:24: COMMA typeParameter
            	    {
            	    COMMA773=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters9402); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA773_tree = (Object)adaptor.create(COMMA773);
            	    adaptor.addChild(root_0, COMMA773_tree);
            	    }
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters9404);
            	    typeParameter774=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameter774.getTree());

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);

            GREATER775=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeParameters9408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER775_tree = (Object)adaptor.create(GREATER775);
            adaptor.addChild(root_0, GREATER775_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // src/main/resources/org/drools/lang/DRL.g:1927:1: typeParameter : ID ( extends_key bound )? ;
    public final DRLParser.typeParameter_return typeParameter() throws RecognitionException {
        DRLParser.typeParameter_return retval = new DRLParser.typeParameter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID776=null;
        DRLParser.extends_key_return extends_key777 = null;

        DRLParser.bound_return bound778 = null;


        Object ID776_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1928:2: ( ID ( extends_key bound )? )
            // src/main/resources/org/drools/lang/DRL.g:1928:4: ID ( extends_key bound )?
            {
            root_0 = (Object)adaptor.nil();

            ID776=(Token)match(input,ID,FOLLOW_ID_in_typeParameter9419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID776_tree = (Object)adaptor.create(ID776);
            adaptor.addChild(root_0, ID776_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1928:7: ( extends_key bound )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))))) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1928:8: extends_key bound
                    {
                    pushFollow(FOLLOW_extends_key_in_typeParameter9422);
                    extends_key777=extends_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key777.getTree());
                    pushFollow(FOLLOW_bound_in_typeParameter9424);
                    bound778=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bound778.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // src/main/resources/org/drools/lang/DRL.g:1931:1: bound : type ( AMPER type )* ;
    public final DRLParser.bound_return bound() throws RecognitionException {
        DRLParser.bound_return retval = new DRLParser.bound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPER780=null;
        DRLParser.type_return type779 = null;

        DRLParser.type_return type781 = null;


        Object AMPER780_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1932:2: ( type ( AMPER type )* )
            // src/main/resources/org/drools/lang/DRL.g:1932:4: type ( AMPER type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_bound9438);
            type779=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type779.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1932:9: ( AMPER type )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==AMPER) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1932:10: AMPER type
            	    {
            	    AMPER780=(Token)match(input,AMPER,FOLLOW_AMPER_in_bound9441); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPER780_tree = (Object)adaptor.create(AMPER780);
            	    adaptor.addChild(root_0, AMPER780_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_bound9443);
            	    type781=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type781.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1941:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final DRLParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        DRLParser.interfaceDeclaration_return retval = new DRLParser.interfaceDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.normalInterfaceDeclaration_return normalInterfaceDeclaration782 = null;

        DRLParser.annotationTypeDeclaration_return annotationTypeDeclaration783 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1942:2: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))) {
                alt231=1;
            }
            else if ( (LA231_0==AT) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1942:4: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration9463);
                    normalInterfaceDeclaration782=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration782.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1943:5: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration9469);
                    annotationTypeDeclaration783=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration783.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1946:1: normalInterfaceDeclaration : interface_key ID ( typeParameters )? ( extends_key typeList )? interfaceBody ;
    public final DRLParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        DRLParser.normalInterfaceDeclaration_return retval = new DRLParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID785=null;
        DRLParser.interface_key_return interface_key784 = null;

        DRLParser.typeParameters_return typeParameters786 = null;

        DRLParser.extends_key_return extends_key787 = null;

        DRLParser.typeList_return typeList788 = null;

        DRLParser.interfaceBody_return interfaceBody789 = null;


        Object ID785_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1947:2: ( interface_key ID ( typeParameters )? ( extends_key typeList )? interfaceBody )
            // src/main/resources/org/drools/lang/DRL.g:1947:4: interface_key ID ( typeParameters )? ( extends_key typeList )? interfaceBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_interface_key_in_normalInterfaceDeclaration9483);
            interface_key784=interface_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_key784.getTree());
            ID785=(Token)match(input,ID,FOLLOW_ID_in_normalInterfaceDeclaration9485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID785_tree = (Object)adaptor.create(ID785);
            adaptor.addChild(root_0, ID785_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1947:21: ( typeParameters )?
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==LESS) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1947:21: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration9487);
                    typeParameters786=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters786.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:1947:37: ( extends_key typeList )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))))) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1947:38: extends_key typeList
                    {
                    pushFollow(FOLLOW_extends_key_in_normalInterfaceDeclaration9491);
                    extends_key787=extends_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key787.getTree());
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration9493);
                    typeList788=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList788.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration9497);
            interfaceBody789=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBody789.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // src/main/resources/org/drools/lang/DRL.g:1950:1: interfaceBody : LEFT_CURLY ( interfaceBodyDeclaration )* RIGHT_CURLY ;
    public final DRLParser.interfaceBody_return interfaceBody() throws RecognitionException {
        DRLParser.interfaceBody_return retval = new DRLParser.interfaceBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY790=null;
        Token RIGHT_CURLY792=null;
        DRLParser.interfaceBodyDeclaration_return interfaceBodyDeclaration791 = null;


        Object LEFT_CURLY790_tree=null;
        Object RIGHT_CURLY792_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1951:2: ( LEFT_CURLY ( interfaceBodyDeclaration )* RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1951:4: LEFT_CURLY ( interfaceBodyDeclaration )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY790=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_interfaceBody9508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY790_tree = (Object)adaptor.create(LEFT_CURLY790);
            adaptor.addChild(root_0, LEFT_CURLY790_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1951:15: ( interfaceBodyDeclaration )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( ((LA234_0>=SEMICOLON && LA234_0<=ID)||LA234_0==LESS||LA234_0==AT) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1951:15: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody9510);
            	    interfaceBodyDeclaration791=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration791.getTree());

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);

            RIGHT_CURLY792=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_interfaceBody9513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY792_tree = (Object)adaptor.create(RIGHT_CURLY792);
            adaptor.addChild(root_0, RIGHT_CURLY792_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:1955:1: interfaceBodyDeclaration : ( modifiedInterfaceMember | SEMICOLON );
    public final DRLParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        DRLParser.interfaceBodyDeclaration_return retval = new DRLParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON794=null;
        DRLParser.modifiedInterfaceMember_return modifiedInterfaceMember793 = null;


        Object SEMICOLON794_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1956:2: ( modifiedInterfaceMember | SEMICOLON )
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==ID||LA235_0==LESS||LA235_0==AT) ) {
                alt235=1;
            }
            else if ( (LA235_0==SEMICOLON) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }
            switch (alt235) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1956:4: modifiedInterfaceMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiedInterfaceMember_in_interfaceBodyDeclaration9525);
                    modifiedInterfaceMember793=modifiedInterfaceMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedInterfaceMember793.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1957:6: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON794=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceBodyDeclaration9532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON794_tree = (Object)adaptor.create(SEMICOLON794);
                    adaptor.addChild(root_0, SEMICOLON794_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class modifiedInterfaceMember_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiedInterfaceMember"
    // src/main/resources/org/drools/lang/DRL.g:1960:1: modifiedInterfaceMember options {backtrack=true; } : ( modifier modifiedInterfaceMember | interfaceMemberDecl );
    public final DRLParser.modifiedInterfaceMember_return modifiedInterfaceMember() throws RecognitionException {
        DRLParser.modifiedInterfaceMember_return retval = new DRLParser.modifiedInterfaceMember_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.modifier_return modifier795 = null;

        DRLParser.modifiedInterfaceMember_return modifiedInterfaceMember796 = null;

        DRLParser.interfaceMemberDecl_return interfaceMemberDecl797 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1962:2: ( modifier modifiedInterfaceMember | interfaceMemberDecl )
            int alt236=2;
            switch ( input.LA(1) ) {
            case AT:
                {
                int LA236_1 = input.LA(2);

                if ( (synpred79_DRL()) ) {
                    alt236=1;
                }
                else if ( (true) ) {
                    alt236=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 1, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA236_2 = input.LA(2);

                if ( (((synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))))) ) {
                    alt236=1;
                }
                else if ( (true) ) {
                    alt236=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 2, input);

                    throw nvae;
                }
                }
                break;
            case LESS:
                {
                alt236=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1962:4: modifier modifiedInterfaceMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifier_in_modifiedInterfaceMember9553);
                    modifier795=modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier795.getTree());
                    pushFollow(FOLLOW_modifiedInterfaceMember_in_modifiedInterfaceMember9555);
                    modifiedInterfaceMember796=modifiedInterfaceMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedInterfaceMember796.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1963:4: interfaceMemberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMemberDecl_in_modifiedInterfaceMember9560);
                    interfaceMemberDecl797=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMemberDecl797.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifiedInterfaceMember"

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMemberDecl"
    // src/main/resources/org/drools/lang/DRL.g:1966:1: interfaceMemberDecl : ( interfaceMethodOrFieldDecl | interfaceGenericMethodDecl | void_key ID voidInterfaceMethodDeclaratorRest | interfaceDeclaration | classDeclaration );
    public final DRLParser.interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        DRLParser.interfaceMemberDecl_return retval = new DRLParser.interfaceMemberDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID801=null;
        DRLParser.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl798 = null;

        DRLParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl799 = null;

        DRLParser.void_key_return void_key800 = null;

        DRLParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest802 = null;

        DRLParser.interfaceDeclaration_return interfaceDeclaration803 = null;

        DRLParser.classDeclaration_return classDeclaration804 = null;


        Object ID801_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1967:2: ( interfaceMethodOrFieldDecl | interfaceGenericMethodDecl | void_key ID voidInterfaceMethodDeclaratorRest | interfaceDeclaration | classDeclaration )
            int alt237=5;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))))) {
                int LA237_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))) ) {
                    alt237=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                    alt237=3;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                    alt237=4;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))) ) {
                    alt237=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA237_0==LESS) ) {
                alt237=2;
            }
            else if ( (LA237_0==AT) ) {
                alt237=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1967:4: interfaceMethodOrFieldDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl9572);
                    interfaceMethodOrFieldDecl798=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodOrFieldDecl798.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1968:6: interfaceGenericMethodDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl9579);
                    interfaceGenericMethodDecl799=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceGenericMethodDecl799.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1969:9: void_key ID voidInterfaceMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_void_key_in_interfaceMemberDecl9589);
                    void_key800=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key800.getTree());
                    ID801=(Token)match(input,ID,FOLLOW_ID_in_interfaceMemberDecl9591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID801_tree = (Object)adaptor.create(ID801);
                    adaptor.addChild(root_0, ID801_tree);
                    }
                    pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl9593);
                    voidInterfaceMethodDeclaratorRest802=voidInterfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, voidInterfaceMethodDeclaratorRest802.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1970:9: interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl9603);
                    interfaceDeclaration803=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration803.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1971:9: classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl9613);
                    classDeclaration804=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration804.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMemberDecl"

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodOrFieldDecl"
    // src/main/resources/org/drools/lang/DRL.g:1974:1: interfaceMethodOrFieldDecl : type ID interfaceMethodOrFieldRest ;
    public final DRLParser.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        DRLParser.interfaceMethodOrFieldDecl_return retval = new DRLParser.interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID806=null;
        DRLParser.type_return type805 = null;

        DRLParser.interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest807 = null;


        Object ID806_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1975:2: ( type ID interfaceMethodOrFieldRest )
            // src/main/resources/org/drools/lang/DRL.g:1975:4: type ID interfaceMethodOrFieldRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceMethodOrFieldDecl9625);
            type805=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type805.getTree());
            ID806=(Token)match(input,ID,FOLLOW_ID_in_interfaceMethodOrFieldDecl9627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID806_tree = (Object)adaptor.create(ID806);
            adaptor.addChild(root_0, ID806_tree);
            }
            pushFollow(FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl9629);
            interfaceMethodOrFieldRest807=interfaceMethodOrFieldRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodOrFieldRest807.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"

    public static class interfaceMethodOrFieldRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodOrFieldRest"
    // src/main/resources/org/drools/lang/DRL.g:1978:1: interfaceMethodOrFieldRest : ( constantDeclaratorsRest SEMICOLON | interfaceMethodDeclaratorRest );
    public final DRLParser.interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest() throws RecognitionException {
        DRLParser.interfaceMethodOrFieldRest_return retval = new DRLParser.interfaceMethodOrFieldRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON809=null;
        DRLParser.constantDeclaratorsRest_return constantDeclaratorsRest808 = null;

        DRLParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest810 = null;


        Object SEMICOLON809_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1979:2: ( constantDeclaratorsRest SEMICOLON | interfaceMethodDeclaratorRest )
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==EQUALS||LA238_0==LEFT_SQUARE) ) {
                alt238=1;
            }
            else if ( (LA238_0==LEFT_PAREN) ) {
                alt238=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;
            }
            switch (alt238) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1979:4: constantDeclaratorsRest SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest9641);
                    constantDeclaratorsRest808=constantDeclaratorsRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclaratorsRest808.getTree());
                    SEMICOLON809=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceMethodOrFieldRest9643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON809_tree = (Object)adaptor.create(SEMICOLON809);
                    adaptor.addChild(root_0, SEMICOLON809_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1980:4: interfaceMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest9648);
                    interfaceMethodDeclaratorRest810=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest810.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // src/main/resources/org/drools/lang/DRL.g:1984:1: interfaceMethodDeclaratorRest : formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? SEMICOLON ;
    public final DRLParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        DRLParser.interfaceMethodDeclaratorRest_return retval = new DRLParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE812=null;
        Token RIGHT_SQUARE813=null;
        Token SEMICOLON816=null;
        DRLParser.formalParameters_return formalParameters811 = null;

        DRLParser.throws_key_return throws_key814 = null;

        DRLParser.typeNameList_return typeNameList815 = null;


        Object LEFT_SQUARE812_tree=null;
        Object RIGHT_SQUARE813_tree=null;
        Object SEMICOLON816_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1985:2: ( formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? SEMICOLON )
            // src/main/resources/org/drools/lang/DRL.g:1985:4: formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest9660);
            formalParameters811=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters811.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1985:21: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==LEFT_SQUARE) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1985:22: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE812=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_interfaceMethodDeclaratorRest9663); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE812_tree = (Object)adaptor.create(LEFT_SQUARE812);
            	    adaptor.addChild(root_0, LEFT_SQUARE812_tree);
            	    }
            	    RIGHT_SQUARE813=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_interfaceMethodDeclaratorRest9665); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE813_tree = (Object)adaptor.create(RIGHT_SQUARE813);
            	    adaptor.addChild(root_0, RIGHT_SQUARE813_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:1985:49: ( throws_key typeNameList )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1985:50: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_interfaceMethodDeclaratorRest9670);
                    throws_key814=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key814.getTree());
                    pushFollow(FOLLOW_typeNameList_in_interfaceMethodDeclaratorRest9672);
                    typeNameList815=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList815.getTree());

                    }
                    break;

            }

            SEMICOLON816=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceMethodDeclaratorRest9676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON816_tree = (Object)adaptor.create(SEMICOLON816);
            adaptor.addChild(root_0, SEMICOLON816_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // src/main/resources/org/drools/lang/DRL.g:1988:1: interfaceGenericMethodDecl : typeParameters ( type | void_key ) ID interfaceMethodDeclaratorRest ;
    public final DRLParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        DRLParser.interfaceGenericMethodDecl_return retval = new DRLParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID820=null;
        DRLParser.typeParameters_return typeParameters817 = null;

        DRLParser.type_return type818 = null;

        DRLParser.void_key_return void_key819 = null;

        DRLParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest821 = null;


        Object ID820_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1989:2: ( typeParameters ( type | void_key ) ID interfaceMethodDeclaratorRest )
            // src/main/resources/org/drools/lang/DRL.g:1989:4: typeParameters ( type | void_key ) ID interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl9688);
            typeParameters817=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters817.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1989:19: ( type | void_key )
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==ID) ) {
                int LA241_1 = input.LA(2);

                if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))))) ) {
                    alt241=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                    alt241=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;
            }
            switch (alt241) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1989:20: type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl9691);
                    type818=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type818.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1989:27: void_key
                    {
                    pushFollow(FOLLOW_void_key_in_interfaceGenericMethodDecl9695);
                    void_key819=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key819.getTree());

                    }
                    break;

            }

            ID820=(Token)match(input,ID,FOLLOW_ID_in_interfaceGenericMethodDecl9698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID820_tree = (Object)adaptor.create(ID820);
            adaptor.addChild(root_0, ID820_tree);
            }
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl9708);
            interfaceMethodDeclaratorRest821=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest821.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // src/main/resources/org/drools/lang/DRL.g:1993:1: voidInterfaceMethodDeclaratorRest : formalParameters ( throws_key typeNameList )? SEMICOLON ;
    public final DRLParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        DRLParser.voidInterfaceMethodDeclaratorRest_return retval = new DRLParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON825=null;
        DRLParser.formalParameters_return formalParameters822 = null;

        DRLParser.throws_key_return throws_key823 = null;

        DRLParser.typeNameList_return typeNameList824 = null;


        Object SEMICOLON825_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1994:2: ( formalParameters ( throws_key typeNameList )? SEMICOLON )
            // src/main/resources/org/drools/lang/DRL.g:1994:4: formalParameters ( throws_key typeNameList )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest9720);
            formalParameters822=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters822.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1994:21: ( throws_key typeNameList )?
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1994:22: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_voidInterfaceMethodDeclaratorRest9723);
                    throws_key823=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key823.getTree());
                    pushFollow(FOLLOW_typeNameList_in_voidInterfaceMethodDeclaratorRest9725);
                    typeNameList824=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList824.getTree());

                    }
                    break;

            }

            SEMICOLON825=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidInterfaceMethodDeclaratorRest9729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON825_tree = (Object)adaptor.create(SEMICOLON825);
            adaptor.addChild(root_0, SEMICOLON825_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // src/main/resources/org/drools/lang/DRL.g:1999:1: constantDeclarator : ID constantDeclaratorRest ;
    public final DRLParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        DRLParser.constantDeclarator_return retval = new DRLParser.constantDeclarator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID826=null;
        DRLParser.constantDeclaratorRest_return constantDeclaratorRest827 = null;


        Object ID826_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2000:2: ( ID constantDeclaratorRest )
            // src/main/resources/org/drools/lang/DRL.g:2000:4: ID constantDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            ID826=(Token)match(input,ID,FOLLOW_ID_in_constantDeclarator9742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID826_tree = (Object)adaptor.create(ID826);
            adaptor.addChild(root_0, ID826_tree);
            }
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator9744);
            constantDeclaratorRest827=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclaratorRest827.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class constantDeclaratorsRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorsRest"
    // src/main/resources/org/drools/lang/DRL.g:2003:1: constantDeclaratorsRest : constantDeclaratorRest ( COMMA constantDeclarator )* ;
    public final DRLParser.constantDeclaratorsRest_return constantDeclaratorsRest() throws RecognitionException {
        DRLParser.constantDeclaratorsRest_return retval = new DRLParser.constantDeclaratorsRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA829=null;
        DRLParser.constantDeclaratorRest_return constantDeclaratorRest828 = null;

        DRLParser.constantDeclarator_return constantDeclarator830 = null;


        Object COMMA829_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2004:5: ( constantDeclaratorRest ( COMMA constantDeclarator )* )
            // src/main/resources/org/drools/lang/DRL.g:2004:9: constantDeclaratorRest ( COMMA constantDeclarator )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest9760);
            constantDeclaratorRest828=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclaratorRest828.getTree());
            // src/main/resources/org/drools/lang/DRL.g:2004:32: ( COMMA constantDeclarator )*
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==COMMA) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2004:33: COMMA constantDeclarator
            	    {
            	    COMMA829=(Token)match(input,COMMA,FOLLOW_COMMA_in_constantDeclaratorsRest9763); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA829_tree = (Object)adaptor.create(COMMA829);
            	    adaptor.addChild(root_0, COMMA829_tree);
            	    }
            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest9765);
            	    constantDeclarator830=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclarator830.getTree());

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorsRest"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorRest"
    // src/main/resources/org/drools/lang/DRL.g:2007:1: constantDeclaratorRest : ( LEFT_SQUARE RIGHT_SQUARE )* EQUALS variableInitializer ;
    public final DRLParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        DRLParser.constantDeclaratorRest_return retval = new DRLParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE831=null;
        Token RIGHT_SQUARE832=null;
        Token EQUALS833=null;
        DRLParser.variableInitializer_return variableInitializer834 = null;


        Object LEFT_SQUARE831_tree=null;
        Object RIGHT_SQUARE832_tree=null;
        Object EQUALS833_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2008:2: ( ( LEFT_SQUARE RIGHT_SQUARE )* EQUALS variableInitializer )
            // src/main/resources/org/drools/lang/DRL.g:2008:4: ( LEFT_SQUARE RIGHT_SQUARE )* EQUALS variableInitializer
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:2008:4: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==LEFT_SQUARE) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2008:5: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE831=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_constantDeclaratorRest9782); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE831_tree = (Object)adaptor.create(LEFT_SQUARE831);
            	    adaptor.addChild(root_0, LEFT_SQUARE831_tree);
            	    }
            	    RIGHT_SQUARE832=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_constantDeclaratorRest9784); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE832_tree = (Object)adaptor.create(RIGHT_SQUARE832);
            	    adaptor.addChild(root_0, RIGHT_SQUARE832_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);

            EQUALS833=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_constantDeclaratorRest9788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQUALS833_tree = (Object)adaptor.create(EQUALS833);
            adaptor.addChild(root_0, EQUALS833_tree);
            }
            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest9790);
            variableInitializer834=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer834.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:2018:1: enumDeclaration : enum_key ID ( implements_key typeList )? enumBody ;
    public final DRLParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        DRLParser.enumDeclaration_return retval = new DRLParser.enumDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID836=null;
        DRLParser.enum_key_return enum_key835 = null;

        DRLParser.implements_key_return implements_key837 = null;

        DRLParser.typeList_return typeList838 = null;

        DRLParser.enumBody_return enumBody839 = null;


        Object ID836_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2019:2: ( enum_key ID ( implements_key typeList )? enumBody )
            // src/main/resources/org/drools/lang/DRL.g:2019:4: enum_key ID ( implements_key typeList )? enumBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enum_key_in_enumDeclaration9808);
            enum_key835=enum_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_key835.getTree());
            ID836=(Token)match(input,ID,FOLLOW_ID_in_enumDeclaration9810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID836_tree = (Object)adaptor.create(ID836);
            adaptor.addChild(root_0, ID836_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:2019:16: ( implements_key typeList )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2019:17: implements_key typeList
                    {
                    pushFollow(FOLLOW_implements_key_in_enumDeclaration9813);
                    implements_key837=implements_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_key837.getTree());
                    pushFollow(FOLLOW_typeList_in_enumDeclaration9815);
                    typeList838=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList838.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration9819);
            enumBody839=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBody839.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // src/main/resources/org/drools/lang/DRL.g:2022:1: enumBody : LEFT_CURLY ( enumConstants )? ( COMMA )? ( enumBodyDeclarations )? RIGHT_CURLY ;
    public final DRLParser.enumBody_return enumBody() throws RecognitionException {
        DRLParser.enumBody_return retval = new DRLParser.enumBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY840=null;
        Token COMMA842=null;
        Token RIGHT_CURLY844=null;
        DRLParser.enumConstants_return enumConstants841 = null;

        DRLParser.enumBodyDeclarations_return enumBodyDeclarations843 = null;


        Object LEFT_CURLY840_tree=null;
        Object COMMA842_tree=null;
        Object RIGHT_CURLY844_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2023:2: ( LEFT_CURLY ( enumConstants )? ( COMMA )? ( enumBodyDeclarations )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:2023:4: LEFT_CURLY ( enumConstants )? ( COMMA )? ( enumBodyDeclarations )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY840=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_enumBody9831); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY840_tree = (Object)adaptor.create(LEFT_CURLY840);
            adaptor.addChild(root_0, LEFT_CURLY840_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:2023:15: ( enumConstants )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==ID||LA246_0==AT) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2023:15: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody9833);
                    enumConstants841=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants841.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:2023:30: ( COMMA )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==COMMA) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2023:30: COMMA
                    {
                    COMMA842=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumBody9836); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA842_tree = (Object)adaptor.create(COMMA842);
                    adaptor.addChild(root_0, COMMA842_tree);
                    }

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:2023:37: ( enumBodyDeclarations )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==SEMICOLON) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2023:37: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody9839);
                    enumBodyDeclarations843=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBodyDeclarations843.getTree());

                    }
                    break;

            }

            RIGHT_CURLY844=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_enumBody9842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY844_tree = (Object)adaptor.create(RIGHT_CURLY844);
            adaptor.addChild(root_0, RIGHT_CURLY844_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // src/main/resources/org/drools/lang/DRL.g:2026:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final DRLParser.enumConstants_return enumConstants() throws RecognitionException {
        DRLParser.enumConstants_return retval = new DRLParser.enumConstants_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA846=null;
        DRLParser.enumConstant_return enumConstant845 = null;

        DRLParser.enumConstant_return enumConstant847 = null;


        Object COMMA846_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2027:2: ( enumConstant ( COMMA enumConstant )* )
            // src/main/resources/org/drools/lang/DRL.g:2027:4: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants9853);
            enumConstant845=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant845.getTree());
            // src/main/resources/org/drools/lang/DRL.g:2027:17: ( COMMA enumConstant )*
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==COMMA) ) {
                    int LA249_1 = input.LA(2);

                    if ( (LA249_1==ID||LA249_1==AT) ) {
                        alt249=1;
                    }


                }


                switch (alt249) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2027:18: COMMA enumConstant
            	    {
            	    COMMA846=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants9856); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA846_tree = (Object)adaptor.create(COMMA846);
            	    adaptor.addChild(root_0, COMMA846_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants9858);
            	    enumConstant847=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant847.getTree());

            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // src/main/resources/org/drools/lang/DRL.g:2030:1: enumConstant : ( annotations )? ID ( arguments )? ( classBody )? ;
    public final DRLParser.enumConstant_return enumConstant() throws RecognitionException {
        DRLParser.enumConstant_return retval = new DRLParser.enumConstant_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID849=null;
        DRLParser.annotations_return annotations848 = null;

        DRLParser.arguments_return arguments850 = null;

        DRLParser.classBody_return classBody851 = null;


        Object ID849_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2031:2: ( ( annotations )? ID ( arguments )? ( classBody )? )
            // src/main/resources/org/drools/lang/DRL.g:2031:4: ( annotations )? ID ( arguments )? ( classBody )?
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:2031:4: ( annotations )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==AT) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2031:4: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant9872);
                    annotations848=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations848.getTree());

                    }
                    break;

            }

            ID849=(Token)match(input,ID,FOLLOW_ID_in_enumConstant9875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID849_tree = (Object)adaptor.create(ID849);
            adaptor.addChild(root_0, ID849_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:2031:20: ( arguments )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==LEFT_PAREN) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2031:21: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant9878);
                    arguments850=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments850.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:2031:33: ( classBody )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==LEFT_CURLY) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2031:34: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant9883);
                    classBody851=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody851.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // src/main/resources/org/drools/lang/DRL.g:2034:1: enumBodyDeclarations : SEMICOLON ( classBodyDeclaration )* ;
    public final DRLParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        DRLParser.enumBodyDeclarations_return retval = new DRLParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON852=null;
        DRLParser.classBodyDeclaration_return classBodyDeclaration853 = null;


        Object SEMICOLON852_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2035:2: ( SEMICOLON ( classBodyDeclaration )* )
            // src/main/resources/org/drools/lang/DRL.g:2035:4: SEMICOLON ( classBodyDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            SEMICOLON852=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enumBodyDeclarations9897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON852_tree = (Object)adaptor.create(SEMICOLON852);
            adaptor.addChild(root_0, SEMICOLON852_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:2035:14: ( classBodyDeclaration )*
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);

                if ( ((LA253_0>=SEMICOLON && LA253_0<=ID)||LA253_0==LESS||LA253_0==LEFT_CURLY||LA253_0==AT) ) {
                    alt253=1;
                }


                switch (alt253) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2035:15: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations9900);
            	    classBodyDeclaration853=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration853.getTree());

            	    }
            	    break;

            	default :
            	    break loop253;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // src/main/resources/org/drools/lang/DRL.g:2045:1: annotations : ( annotation )+ ;
    public final DRLParser.annotations_return annotations() throws RecognitionException {
        DRLParser.annotations_return retval = new DRLParser.annotations_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotation_return annotation854 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:2046:2: ( ( annotation )+ )
            // src/main/resources/org/drools/lang/DRL.g:2046:4: ( annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:2046:4: ( annotation )+
            int cnt254=0;
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==AT) ) {
                    alt254=1;
                }


                switch (alt254) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2046:4: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations9920);
            	    annotation854=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation854.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt254 >= 1 ) break loop254;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(254, input);
                        throw eee;
                }
                cnt254++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // src/main/resources/org/drools/lang/DRL.g:2049:1: annotation : AT ann= annotationName ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | ) -> ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? ) ;
    public final DRLParser.annotation_return annotation() throws RecognitionException {
        DRLParser.annotation_return retval = new DRLParser.annotation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT855=null;
        Token LEFT_PAREN856=null;
        Token RIGHT_PAREN857=null;
        Token LEFT_PAREN858=null;
        Token RIGHT_PAREN860=null;
        DRLParser.annotationName_return ann = null;

        DRLParser.elementValuePairs_return elementValuePairs859 = null;


        Object AT855_tree=null;
        Object LEFT_PAREN856_tree=null;
        Object RIGHT_PAREN857_tree=null;
        Object LEFT_PAREN858_tree=null;
        Object RIGHT_PAREN860_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            // src/main/resources/org/drools/lang/DRL.g:2050:2: ( AT ann= annotationName ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | ) -> ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? ) )
            // src/main/resources/org/drools/lang/DRL.g:2050:4: AT ann= annotationName ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | )
            {
            AT855=(Token)match(input,AT,FOLLOW_AT_in_annotation9932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT855);

            if ( state.backtracking==0 ) {
              	helper.emit(AT855, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_annotationName_in_annotation9940);
            ann=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationName.add(ann.getTree());
            // src/main/resources/org/drools/lang/DRL.g:2052:4: ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | )
            int alt255=3;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==LEFT_PAREN) ) {
                int LA255_1 = input.LA(2);

                if ( (LA255_1==RIGHT_PAREN) ) {
                    alt255=1;
                }
                else if ( (LA255_1==ID||LA255_1==STRING||(LA255_1>=BOOL && LA255_1<=LEFT_PAREN)||(LA255_1>=TimePeriod && LA255_1<=DECIMAL)||LA255_1==LESS||LA255_1==LEFT_SQUARE||(LA255_1>=NULL && LA255_1<=FLOAT)||LA255_1==LEFT_CURLY||(LA255_1>=INCR && LA255_1<=NEGATION)||LA255_1==AT) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA255_0>=SEMICOLON && LA255_0<=ID)||(LA255_0>=WHEN && LA255_0<=COMMA)||LA255_0==RIGHT_PAREN||LA255_0==LESS||LA255_0==THEN||LA255_0==RIGHT_CURLY||LA255_0==AT) ) {
                alt255=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;
            }
            switch (alt255) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2053:5: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN856=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN856);

                    RIGHT_PAREN857=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN857);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:2054:7: LEFT_PAREN elementValuePairs RIGHT_PAREN
                    {
                    LEFT_PAREN858=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN858);

                    pushFollow(FOLLOW_elementValuePairs_in_annotation9964);
                    elementValuePairs859=elementValuePairs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs859.getTree());
                    RIGHT_PAREN860=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN860);


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:2056:4: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: AT, elementValuePairs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2057:3: -> ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:2057:6: ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(VT_TYPE_NAME, (ann!=null?ann.name:null)));
                // src/main/resources/org/drools/lang/DRL.g:2057:35: ( elementValuePairs )?
                if ( stream_elementValuePairs.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairs.nextTree());

                }
                stream_elementValuePairs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        public String name;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // src/main/resources/org/drools/lang/DRL.g:2061:1: annotationName returns [String name] : id= ID ( DOT mid= ID )* ;
    public final DRLParser.annotationName_return annotationName() throws RecognitionException {
        DRLParser.annotationName_return retval = new DRLParser.annotationName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        Token mid=null;
        Token DOT861=null;

        Object id_tree=null;
        Object mid_tree=null;
        Object DOT861_tree=null;

         retval.name =""; 
        try {
            // src/main/resources/org/drools/lang/DRL.g:2063:2: (id= ID ( DOT mid= ID )* )
            // src/main/resources/org/drools/lang/DRL.g:2063:4: id= ID ( DOT mid= ID )*
            {
            root_0 = (Object)adaptor.nil();

            id=(Token)match(input,ID,FOLLOW_ID_in_annotationName10015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (Object)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            if ( state.backtracking==0 ) {
              	retval.name += (id!=null?id.getText():null); helper.emit(id, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:2064:3: ( DOT mid= ID )*
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);

                if ( (LA256_0==DOT) ) {
                    alt256=1;
                }


                switch (alt256) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2064:4: DOT mid= ID
            	    {
            	    DOT861=(Token)match(input,DOT,FOLLOW_DOT_in_annotationName10023); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT861_tree = (Object)adaptor.create(DOT861);
            	    adaptor.addChild(root_0, DOT861_tree);
            	    }
            	    mid=(Token)match(input,ID,FOLLOW_ID_in_annotationName10027); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    mid_tree = (Object)adaptor.create(mid);
            	    adaptor.addChild(root_0, mid_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       retval.name += (mid!=null?mid.getText():null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop256;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // src/main/resources/org/drools/lang/DRL.g:2067:1: elementValuePairs : elementValuePair ( COMMA elementValuePair )* ;
    public final DRLParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        DRLParser.elementValuePairs_return retval = new DRLParser.elementValuePairs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA863=null;
        DRLParser.elementValuePair_return elementValuePair862 = null;

        DRLParser.elementValuePair_return elementValuePair864 = null;


        Object COMMA863_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2068:2: ( elementValuePair ( COMMA elementValuePair )* )
            // src/main/resources/org/drools/lang/DRL.g:2068:4: elementValuePair ( COMMA elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs10044);
            elementValuePair862=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair862.getTree());
            // src/main/resources/org/drools/lang/DRL.g:2068:21: ( COMMA elementValuePair )*
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==COMMA) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2068:22: COMMA elementValuePair
            	    {
            	    COMMA863=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairs10047); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs10050);
            	    elementValuePair864=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair864.getTree());

            	    }
            	    break;

            	default :
            	    break loop257;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // src/main/resources/org/drools/lang/DRL.g:2071:1: elementValuePair : ( ( ID EQUALS_ASSIGN )=>key= ID EQUALS_ASSIGN val= elementValue -> ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] ) | value= elementValue -> ^( VT_PROP_KEY[$value.text] ) );
    public final DRLParser.elementValuePair_return elementValuePair() throws RecognitionException {
        DRLParser.elementValuePair_return retval = new DRLParser.elementValuePair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token key=null;
        Token EQUALS_ASSIGN865=null;
        DRLParser.elementValue_return val = null;

        DRLParser.elementValue_return value = null;


        Object key_tree=null;
        Object EQUALS_ASSIGN865_tree=null;
        RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            // src/main/resources/org/drools/lang/DRL.g:2072:2: ( ( ID EQUALS_ASSIGN )=>key= ID EQUALS_ASSIGN val= elementValue -> ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] ) | value= elementValue -> ^( VT_PROP_KEY[$value.text] ) )
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==ID) ) {
                int LA258_1 = input.LA(2);

                if ( (LA258_1==EQUALS_ASSIGN) && (synpred80_DRL())) {
                    alt258=1;
                }
                else if ( ((LA258_1>=ID && LA258_1<=DOT)||LA258_1==COMMA||(LA258_1>=LEFT_PAREN && LA258_1<=RIGHT_PAREN)||(LA258_1>=DOUBLE_PIPE && LA258_1<=DOUBLE_AMPER)||(LA258_1>=EQUALS && LA258_1<=LEFT_SQUARE)||(LA258_1>=PLUS && LA258_1<=MINUS)||(LA258_1>=QUESTION && LA258_1<=DECR)) ) {
                    alt258=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 258, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA258_0==STRING||(LA258_0>=BOOL && LA258_0<=LEFT_PAREN)||(LA258_0>=TimePeriod && LA258_0<=DECIMAL)||LA258_0==LESS||LA258_0==LEFT_SQUARE||(LA258_0>=NULL && LA258_0<=FLOAT)||LA258_0==LEFT_CURLY||(LA258_0>=INCR && LA258_0<=NEGATION)||LA258_0==AT) ) {
                alt258=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2072:4: ( ID EQUALS_ASSIGN )=>key= ID EQUALS_ASSIGN val= elementValue
                    {
                    key=(Token)match(input,ID,FOLLOW_ID_in_elementValuePair10073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(key);

                    EQUALS_ASSIGN865=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_elementValuePair10075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN865);

                    pushFollow(FOLLOW_elementValue_in_elementValuePair10079);
                    val=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(val.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 2072:63: -> ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:2072:66: ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PROP_KEY, key), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VT_PROP_VALUE, (val!=null?input.toString(val.start,val.stop):null)));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:2073:4: value= elementValue
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValuePair10096);
                    value=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(value.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 2073:23: -> ^( VT_PROP_KEY[$value.text] )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:2073:26: ^( VT_PROP_KEY[$value.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PROP_KEY, (value!=null?input.toString(value.start,value.stop):null)), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // src/main/resources/org/drools/lang/DRL.g:2076:1: elementValue : ( TimePeriod | conditionalExpression | annotation | elementValueArrayInitializer );
    public final DRLParser.elementValue_return elementValue() throws RecognitionException {
        DRLParser.elementValue_return retval = new DRLParser.elementValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TimePeriod866=null;
        DRLParser.conditionalExpression_return conditionalExpression867 = null;

        DRLParser.annotation_return annotation868 = null;

        DRLParser.elementValueArrayInitializer_return elementValueArrayInitializer869 = null;


        Object TimePeriod866_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2077:2: ( TimePeriod | conditionalExpression | annotation | elementValueArrayInitializer )
            int alt259=4;
            switch ( input.LA(1) ) {
            case TimePeriod:
                {
                alt259=1;
                }
                break;
            case ID:
            case STRING:
            case BOOL:
            case LEFT_PAREN:
            case DECIMAL:
            case LESS:
            case LEFT_SQUARE:
            case NULL:
            case PLUS:
            case MINUS:
            case HEX:
            case FLOAT:
            case INCR:
            case DECR:
            case TILDE:
            case NEGATION:
                {
                alt259=2;
                }
                break;
            case AT:
                {
                alt259=3;
                }
                break;
            case LEFT_CURLY:
                {
                alt259=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }

            switch (alt259) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2077:4: TimePeriod
                    {
                    root_0 = (Object)adaptor.nil();

                    TimePeriod866=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_elementValue10115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TimePeriod866_tree = (Object)adaptor.create(TimePeriod866);
                    adaptor.addChild(root_0, TimePeriod866_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:2078:4: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue10120);
                    conditionalExpression867=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression867.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:2079:6: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue10127);
                    annotation868=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation868.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:2080:6: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue10134);
                    elementValueArrayInitializer869=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer869.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // src/main/resources/org/drools/lang/DRL.g:2083:1: elementValueArrayInitializer : LEFT_CURLY ( elementValue ( COMMA elementValue )* )? RIGHT_CURLY ;
    public final DRLParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        DRLParser.elementValueArrayInitializer_return retval = new DRLParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY870=null;
        Token COMMA872=null;
        Token RIGHT_CURLY874=null;
        DRLParser.elementValue_return elementValue871 = null;

        DRLParser.elementValue_return elementValue873 = null;


        Object LEFT_CURLY870_tree=null;
        Object COMMA872_tree=null;
        Object RIGHT_CURLY874_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2084:2: ( LEFT_CURLY ( elementValue ( COMMA elementValue )* )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:2084:4: LEFT_CURLY ( elementValue ( COMMA elementValue )* )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY870=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_elementValueArrayInitializer10145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY870_tree = (Object)adaptor.create(LEFT_CURLY870);
            adaptor.addChild(root_0, LEFT_CURLY870_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:2084:15: ( elementValue ( COMMA elementValue )* )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==ID||LA261_0==STRING||(LA261_0>=BOOL && LA261_0<=LEFT_PAREN)||(LA261_0>=TimePeriod && LA261_0<=DECIMAL)||LA261_0==LESS||LA261_0==LEFT_SQUARE||(LA261_0>=NULL && LA261_0<=FLOAT)||LA261_0==LEFT_CURLY||(LA261_0>=INCR && LA261_0<=NEGATION)||LA261_0==AT) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2084:16: elementValue ( COMMA elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer10148);
                    elementValue871=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue871.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:2084:29: ( COMMA elementValue )*
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);

                        if ( (LA260_0==COMMA) ) {
                            alt260=1;
                        }


                        switch (alt260) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:2084:30: COMMA elementValue
                    	    {
                    	    COMMA872=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer10151); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA872_tree = (Object)adaptor.create(COMMA872);
                    	    adaptor.addChild(root_0, COMMA872_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer10153);
                    	    elementValue873=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue873.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop260;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_CURLY874=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_elementValueArrayInitializer10160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY874_tree = (Object)adaptor.create(RIGHT_CURLY874);
            adaptor.addChild(root_0, RIGHT_CURLY874_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:2088:1: annotationTypeDeclaration : AT interface_key ID annotationTypeBody ;
    public final DRLParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        DRLParser.annotationTypeDeclaration_return retval = new DRLParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT875=null;
        Token ID877=null;
        DRLParser.interface_key_return interface_key876 = null;

        DRLParser.annotationTypeBody_return annotationTypeBody878 = null;


        Object AT875_tree=null;
        Object ID877_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2089:2: ( AT interface_key ID annotationTypeBody )
            // src/main/resources/org/drools/lang/DRL.g:2089:4: AT interface_key ID annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            AT875=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration10173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT875_tree = (Object)adaptor.create(AT875);
            adaptor.addChild(root_0, AT875_tree);
            }
            pushFollow(FOLLOW_interface_key_in_annotationTypeDeclaration10175);
            interface_key876=interface_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_key876.getTree());
            ID877=(Token)match(input,ID,FOLLOW_ID_in_annotationTypeDeclaration10177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID877_tree = (Object)adaptor.create(ID877);
            adaptor.addChild(root_0, ID877_tree);
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration10179);
            annotationTypeBody878=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeBody878.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // src/main/resources/org/drools/lang/DRL.g:2092:1: annotationTypeBody : LEFT_CURLY ( annotationTypeElementDeclarations )? RIGHT_CURLY ;
    public final DRLParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        DRLParser.annotationTypeBody_return retval = new DRLParser.annotationTypeBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY879=null;
        Token RIGHT_CURLY881=null;
        DRLParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations880 = null;


        Object LEFT_CURLY879_tree=null;
        Object RIGHT_CURLY881_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2093:2: ( LEFT_CURLY ( annotationTypeElementDeclarations )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:2093:4: LEFT_CURLY ( annotationTypeElementDeclarations )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY879=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_annotationTypeBody10191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY879_tree = (Object)adaptor.create(LEFT_CURLY879);
            adaptor.addChild(root_0, LEFT_CURLY879_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:2093:15: ( annotationTypeElementDeclarations )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==ID||LA262_0==AT) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2093:16: annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody10194);
                    annotationTypeElementDeclarations880=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclarations880.getTree());

                    }
                    break;

            }

            RIGHT_CURLY881=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_annotationTypeBody10198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY881_tree = (Object)adaptor.create(RIGHT_CURLY881);
            adaptor.addChild(root_0, RIGHT_CURLY881_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // src/main/resources/org/drools/lang/DRL.g:2096:1: annotationTypeElementDeclarations : ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* ;
    public final DRLParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        DRLParser.annotationTypeElementDeclarations_return retval = new DRLParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration882 = null;

        DRLParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration883 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:2097:2: ( ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* )
            // src/main/resources/org/drools/lang/DRL.g:2097:4: ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:2097:4: ( annotationTypeElementDeclaration )
            // src/main/resources/org/drools/lang/DRL.g:2097:5: annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10211);
            annotationTypeElementDeclaration882=annotationTypeElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration882.getTree());

            }

            // src/main/resources/org/drools/lang/DRL.g:2097:39: ( annotationTypeElementDeclaration )*
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( (LA263_0==ID||LA263_0==AT) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2097:40: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10215);
            	    annotationTypeElementDeclaration883=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration883.getTree());

            	    }
            	    break;

            	default :
            	    break loop263;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // src/main/resources/org/drools/lang/DRL.g:2100:1: annotationTypeElementDeclaration : ( modifier )* annotationTypeElementRest ;
    public final DRLParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        DRLParser.annotationTypeElementDeclaration_return retval = new DRLParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.modifier_return modifier884 = null;

        DRLParser.annotationTypeElementRest_return annotationTypeElementRest885 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:2101:2: ( ( modifier )* annotationTypeElementRest )
            // src/main/resources/org/drools/lang/DRL.g:2101:4: ( modifier )* annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:2101:4: ( modifier )*
            loop264:
            do {
                int alt264=2;
                alt264 = dfa264.predict(input);
                switch (alt264) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:2101:5: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration10230);
            	    modifier884=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier884.getTree());

            	    }
            	    break;

            	default :
            	    break loop264;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration10234);
            annotationTypeElementRest885=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementRest885.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // src/main/resources/org/drools/lang/DRL.g:2104:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest SEMICOLON | classDeclaration ( SEMICOLON )? | interfaceDeclaration ( SEMICOLON )? );
    public final DRLParser.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        DRLParser.annotationTypeElementRest_return retval = new DRLParser.annotationTypeElementRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON888=null;
        Token SEMICOLON890=null;
        Token SEMICOLON892=null;
        DRLParser.type_return type886 = null;

        DRLParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest887 = null;

        DRLParser.classDeclaration_return classDeclaration889 = null;

        DRLParser.interfaceDeclaration_return interfaceDeclaration891 = null;


        Object SEMICOLON888_tree=null;
        Object SEMICOLON890_tree=null;
        Object SEMICOLON892_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2105:2: ( type annotationMethodOrConstantRest SEMICOLON | classDeclaration ( SEMICOLON )? | interfaceDeclaration ( SEMICOLON )? )
            int alt267=3;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))))) {
                int LA267_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))))) ) {
                    alt267=1;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))) ) {
                    alt267=2;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA267_0==AT) ) {
                alt267=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2105:4: type annotationMethodOrConstantRest SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest10246);
                    type886=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type886.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest10248);
                    annotationMethodOrConstantRest887=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodOrConstantRest887.getTree());
                    SEMICOLON888=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_annotationTypeElementRest10250); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON888_tree = (Object)adaptor.create(SEMICOLON888);
                    adaptor.addChild(root_0, SEMICOLON888_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:2106:6: classDeclaration ( SEMICOLON )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest10257);
                    classDeclaration889=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration889.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:2106:23: ( SEMICOLON )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==SEMICOLON) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:2106:23: SEMICOLON
                            {
                            SEMICOLON890=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_annotationTypeElementRest10259); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON890_tree = (Object)adaptor.create(SEMICOLON890);
                            adaptor.addChild(root_0, SEMICOLON890_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:2107:6: interfaceDeclaration ( SEMICOLON )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest10267);
                    interfaceDeclaration891=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration891.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:2107:27: ( SEMICOLON )?
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==SEMICOLON) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:2107:27: SEMICOLON
                            {
                            SEMICOLON892=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_annotationTypeElementRest10269); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON892_tree = (Object)adaptor.create(SEMICOLON892);
                            adaptor.addChild(root_0, SEMICOLON892_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // src/main/resources/org/drools/lang/DRL.g:2112:1: annotationMethodOrConstantRest : ( annotationMethodRest | annotationConstantRest );
    public final DRLParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        DRLParser.annotationMethodOrConstantRest_return retval = new DRLParser.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotationMethodRest_return annotationMethodRest893 = null;

        DRLParser.annotationConstantRest_return annotationConstantRest894 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:2113:2: ( annotationMethodRest | annotationConstantRest )
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==ID) ) {
                int LA268_1 = input.LA(2);

                if ( (LA268_1==LEFT_PAREN) ) {
                    alt268=1;
                }
                else if ( (LA268_1==SEMICOLON||LA268_1==EQUALS_ASSIGN||LA268_1==COMMA||LA268_1==LEFT_SQUARE) ) {
                    alt268=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 268, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                throw nvae;
            }
            switch (alt268) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2113:4: annotationMethodRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest10284);
                    annotationMethodRest893=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodRest893.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:2114:6: annotationConstantRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest10291);
                    annotationConstantRest894=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationConstantRest894.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // src/main/resources/org/drools/lang/DRL.g:2117:1: annotationMethodRest : ID LEFT_PAREN RIGHT_PAREN ( defaultValue )? ;
    public final DRLParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        DRLParser.annotationMethodRest_return retval = new DRLParser.annotationMethodRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID895=null;
        Token LEFT_PAREN896=null;
        Token RIGHT_PAREN897=null;
        DRLParser.defaultValue_return defaultValue898 = null;


        Object ID895_tree=null;
        Object LEFT_PAREN896_tree=null;
        Object RIGHT_PAREN897_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2118:3: ( ID LEFT_PAREN RIGHT_PAREN ( defaultValue )? )
            // src/main/resources/org/drools/lang/DRL.g:2118:5: ID LEFT_PAREN RIGHT_PAREN ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            ID895=(Token)match(input,ID,FOLLOW_ID_in_annotationMethodRest10304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID895_tree = (Object)adaptor.create(ID895);
            adaptor.addChild(root_0, ID895_tree);
            }
            LEFT_PAREN896=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotationMethodRest10306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN896_tree = (Object)adaptor.create(LEFT_PAREN896);
            adaptor.addChild(root_0, LEFT_PAREN896_tree);
            }
            RIGHT_PAREN897=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotationMethodRest10308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN897_tree = (Object)adaptor.create(RIGHT_PAREN897);
            adaptor.addChild(root_0, RIGHT_PAREN897_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:2118:31: ( defaultValue )?
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:2118:32: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest10311);
                    defaultValue898=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue898.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // src/main/resources/org/drools/lang/DRL.g:2121:1: annotationConstantRest : variableDeclarators ;
    public final DRLParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        DRLParser.annotationConstantRest_return retval = new DRLParser.annotationConstantRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.variableDeclarators_return variableDeclarators899 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:2122:3: ( variableDeclarators )
            // src/main/resources/org/drools/lang/DRL.g:2122:5: variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest10328);
            variableDeclarators899=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators899.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // src/main/resources/org/drools/lang/DRL.g:2125:1: defaultValue : default_key elementValue ;
    public final DRLParser.defaultValue_return defaultValue() throws RecognitionException {
        DRLParser.defaultValue_return retval = new DRLParser.defaultValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.default_key_return default_key900 = null;

        DRLParser.elementValue_return elementValue901 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:2126:3: ( default_key elementValue )
            // src/main/resources/org/drools/lang/DRL.g:2126:5: default_key elementValue
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_default_key_in_defaultValue10343);
            default_key900=default_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key900.getTree());
            pushFollow(FOLLOW_elementValue_in_defaultValue10345);
            elementValue901=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue901.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_key"
    // src/main/resources/org/drools/lang/DRL.g:2140:1: operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.operator_key_return operator_key() throws RecognitionException {
        DRLParser.operator_key_return retval = new DRLParser.operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2141:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2141:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(false)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "operator_key", "(helper.isPluggableEvaluator(false))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_operator_key10378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2143:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_key"

    public static class neg_operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg_operator_key"
    // src/main/resources/org/drools/lang/DRL.g:2146:1: neg_operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.neg_operator_key_return neg_operator_key() throws RecognitionException {
        DRLParser.neg_operator_key_return retval = new DRLParser.neg_operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2147:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2147:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(true)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "neg_operator_key", "(helper.isPluggableEvaluator(true))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_neg_operator_key10422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2149:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg_operator_key"

    public static class lock_on_active_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active_key"
    // src/main/resources/org/drools/lang/DRL.g:2152:1: lock_on_active_key : {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] ;
    public final DRLParser.lock_on_active_key_return lock_on_active_key() throws RecognitionException {
        DRLParser.lock_on_active_key_return retval = new DRLParser.lock_on_active_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;
        Token mis2=null;
        Token id3=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        Object mis2_tree=null;
        Object id3_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2155:3: ({...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2155:5: {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lock_on_active_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, \"-\") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key10467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key10471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key10475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            mis2=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key10479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis2);

            id3=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key10483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id3);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);
              		helper.emit(mis2, DroolsEditorType.KEYWORD);
              		helper.emit(id3, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2161:3: -> VK_LOCK_ON_ACTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_LOCK_ON_ACTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active_key"

    public static class date_effective_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective_key"
    // src/main/resources/org/drools/lang/DRL.g:2164:1: date_effective_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] ;
    public final DRLParser.date_effective_key_return date_effective_key() throws RecognitionException {
        DRLParser.date_effective_key_return retval = new DRLParser.date_effective_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2167:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2167:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_effective_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key10515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_effective_key10519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key10523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2171:3: -> VK_DATE_EFFECTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EFFECTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective_key"

    public static class date_expires_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires_key"
    // src/main/resources/org/drools/lang/DRL.g:2174:1: date_expires_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] ;
    public final DRLParser.date_expires_key_return date_expires_key() throws RecognitionException {
        DRLParser.date_expires_key_return retval = new DRLParser.date_expires_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2177:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2177:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_expires_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key10555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_expires_key10559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key10563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2181:3: -> VK_DATE_EXPIRES[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EXPIRES, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires_key"

    public static class no_loop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop_key"
    // src/main/resources/org/drools/lang/DRL.g:2184:1: no_loop_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] ;
    public final DRLParser.no_loop_key_return no_loop_key() throws RecognitionException {
        DRLParser.no_loop_key_return retval = new DRLParser.no_loop_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2187:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2187:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "no_loop_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.LOOP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key10595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_no_loop_key10599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key10603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2191:3: -> VK_NO_LOOP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NO_LOOP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop_key"

    public static class auto_focus_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus_key"
    // src/main/resources/org/drools/lang/DRL.g:2194:1: auto_focus_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] ;
    public final DRLParser.auto_focus_key_return auto_focus_key() throws RecognitionException {
        DRLParser.auto_focus_key_return retval = new DRLParser.auto_focus_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2197:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2197:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "auto_focus_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.FOCUS))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key10635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_auto_focus_key10639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key10643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2201:3: -> VK_AUTO_FOCUS[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AUTO_FOCUS, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus_key"

    public static class activation_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2204:1: activation_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] ;
    public final DRLParser.activation_group_key_return activation_group_key() throws RecognitionException {
        DRLParser.activation_group_key_return retval = new DRLParser.activation_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2207:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2207:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "activation_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key10675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_activation_group_key10679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key10683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2211:3: -> VK_ACTIVATION_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTIVATION_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group_key"

    public static class agenda_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2214:1: agenda_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] ;
    public final DRLParser.agenda_group_key_return agenda_group_key() throws RecognitionException {
        DRLParser.agenda_group_key_return retval = new DRLParser.agenda_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2217:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2217:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "agenda_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key10715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_agenda_group_key10719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key10723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2221:3: -> VK_AGENDA_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AGENDA_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group_key"

    public static class ruleflow_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2224:1: ruleflow_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] ;
    public final DRLParser.ruleflow_group_key_return ruleflow_group_key() throws RecognitionException {
        DRLParser.ruleflow_group_key_return retval = new DRLParser.ruleflow_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2227:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2227:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ruleflow_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key10755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_ruleflow_group_key10759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key10763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2231:3: -> VK_RULEFLOW_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULEFLOW_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group_key"

    public static class entry_point_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entry_point_key"
    // src/main/resources/org/drools/lang/DRL.g:2234:1: entry_point_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] ;
    public final DRLParser.entry_point_key_return entry_point_key() throws RecognitionException {
        DRLParser.entry_point_key_return retval = new DRLParser.entry_point_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2237:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2237:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "entry_point_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.POINT))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key10795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_entry_point_key10799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key10803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2241:3: -> VK_ENTRY_POINT[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENTRY_POINT, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entry_point_key"

    public static class timer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer_key"
    // src/main/resources/org/drools/lang/DRL.g:2244:1: timer_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.timer_key_return timer_key() throws RecognitionException {
        DRLParser.timer_key_return retval = new DRLParser.timer_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2245:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2245:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timer_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_timer_key10832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2247:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer_key"

    public static class duration_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "duration_key"
    // src/main/resources/org/drools/lang/DRL.g:2250:1: duration_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.duration_key_return duration_key() throws RecognitionException {
        DRLParser.duration_key_return retval = new DRLParser.duration_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2251:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2251:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "duration_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_duration_key10859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2253:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_key"

    public static class calendars_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars_key"
    // src/main/resources/org/drools/lang/DRL.g:2256:1: calendars_key : {...}? =>id= ID -> VK_CALENDARS[$id] ;
    public final DRLParser.calendars_key_return calendars_key() throws RecognitionException {
        DRLParser.calendars_key_return retval = new DRLParser.calendars_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2257:2: ({...}? =>id= ID -> VK_CALENDARS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2257:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "calendars_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_calendars_key10886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2259:3: -> VK_CALENDARS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CALENDARS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars_key"

    public static class package_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_key"
    // src/main/resources/org/drools/lang/DRL.g:2262:1: package_key : {...}? =>id= ID -> VK_PACKAGE[$id] ;
    public final DRLParser.package_key_return package_key() throws RecognitionException {
        DRLParser.package_key_return retval = new DRLParser.package_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2263:2: ({...}? =>id= ID -> VK_PACKAGE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2263:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "package_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_package_key10913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2265:3: -> VK_PACKAGE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PACKAGE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_key"

    public static class import_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_key"
    // src/main/resources/org/drools/lang/DRL.g:2268:1: import_key : {...}? =>id= ID -> VK_IMPORT[$id] ;
    public final DRLParser.import_key_return import_key() throws RecognitionException {
        DRLParser.import_key_return retval = new DRLParser.import_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2269:2: ({...}? =>id= ID -> VK_IMPORT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2269:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "import_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_import_key10940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2271:3: -> VK_IMPORT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPORT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_key"

    public static class dialect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect_key"
    // src/main/resources/org/drools/lang/DRL.g:2274:1: dialect_key : {...}? =>id= ID -> VK_DIALECT[$id] ;
    public final DRLParser.dialect_key_return dialect_key() throws RecognitionException {
        DRLParser.dialect_key_return retval = new DRLParser.dialect_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2275:2: ({...}? =>id= ID -> VK_DIALECT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2275:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dialect_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_dialect_key10967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2277:3: -> VK_DIALECT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DIALECT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect_key"

    public static class salience_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience_key"
    // src/main/resources/org/drools/lang/DRL.g:2280:1: salience_key : {...}? =>id= ID -> VK_SALIENCE[$id] ;
    public final DRLParser.salience_key_return salience_key() throws RecognitionException {
        DRLParser.salience_key_return retval = new DRLParser.salience_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2281:2: ({...}? =>id= ID -> VK_SALIENCE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2281:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "salience_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_salience_key10994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2283:3: -> VK_SALIENCE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SALIENCE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience_key"

    public static class enabled_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled_key"
    // src/main/resources/org/drools/lang/DRL.g:2286:1: enabled_key : {...}? =>id= ID -> VK_ENABLED[$id] ;
    public final DRLParser.enabled_key_return enabled_key() throws RecognitionException {
        DRLParser.enabled_key_return retval = new DRLParser.enabled_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2287:2: ({...}? =>id= ID -> VK_ENABLED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2287:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enabled_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enabled_key11021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2289:3: -> VK_ENABLED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENABLED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled_key"

    public static class attributes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributes_key"
    // src/main/resources/org/drools/lang/DRL.g:2292:1: attributes_key : {...}? =>id= ID -> VK_ATTRIBUTES[$id] ;
    public final DRLParser.attributes_key_return attributes_key() throws RecognitionException {
        DRLParser.attributes_key_return retval = new DRLParser.attributes_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2293:2: ({...}? =>id= ID -> VK_ATTRIBUTES[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2293:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "attributes_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_attributes_key11048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2295:3: -> VK_ATTRIBUTES[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ATTRIBUTES, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributes_key"

    public static class rule_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_key"
    // src/main/resources/org/drools/lang/DRL.g:2298:1: rule_key : {...}? =>id= ID -> VK_RULE[$id] ;
    public final DRLParser.rule_key_return rule_key() throws RecognitionException {
        DRLParser.rule_key_return retval = new DRLParser.rule_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2299:2: ({...}? =>id= ID -> VK_RULE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2299:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rule_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_rule_key11075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2301:3: -> VK_RULE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_key"

    public static class extend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extend_key"
    // src/main/resources/org/drools/lang/DRL.g:2304:1: extend_key : {...}? =>id= ID -> VK_EXTEND[$id] ;
    public final DRLParser.extend_key_return extend_key() throws RecognitionException {
        DRLParser.extend_key_return retval = new DRLParser.extend_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2305:2: ({...}? =>id= ID -> VK_EXTEND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2305:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extend_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extend_key11102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2307:3: -> VK_EXTEND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTEND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extend_key"

    public static class query_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_key"
    // src/main/resources/org/drools/lang/DRL.g:2310:1: query_key : {...}? =>id= ID -> VK_QUERY[$id] ;
    public final DRLParser.query_key_return query_key() throws RecognitionException {
        DRLParser.query_key_return retval = new DRLParser.query_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2311:2: ({...}? =>id= ID -> VK_QUERY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2311:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "query_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_query_key11129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2313:3: -> VK_QUERY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_QUERY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_key"

    public static class declare_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_key"
    // src/main/resources/org/drools/lang/DRL.g:2316:1: declare_key : {...}? =>id= ID -> VK_DECLARE[$id] ;
    public final DRLParser.declare_key_return declare_key() throws RecognitionException {
        DRLParser.declare_key_return retval = new DRLParser.declare_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2317:2: ({...}? =>id= ID -> VK_DECLARE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2317:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "declare_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_declare_key11156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2319:3: -> VK_DECLARE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DECLARE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "declare_key"

    public static class function_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_key"
    // src/main/resources/org/drools/lang/DRL.g:2322:1: function_key : {...}? =>id= ID -> VK_FUNCTION[$id] ;
    public final DRLParser.function_key_return function_key() throws RecognitionException {
        DRLParser.function_key_return retval = new DRLParser.function_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2323:2: ({...}? =>id= ID -> VK_FUNCTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2323:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_function_key11183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2325:3: -> VK_FUNCTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FUNCTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_key"

    public static class global_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_key"
    // src/main/resources/org/drools/lang/DRL.g:2328:1: global_key : {...}? =>id= ID -> VK_GLOBAL[$id] ;
    public final DRLParser.global_key_return global_key() throws RecognitionException {
        DRLParser.global_key_return retval = new DRLParser.global_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2329:2: ({...}? =>id= ID -> VK_GLOBAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2329:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "global_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_global_key11210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2331:3: -> VK_GLOBAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_GLOBAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_key"

    public static class eval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eval_key"
    // src/main/resources/org/drools/lang/DRL.g:2334:1: eval_key : {...}? =>id= ID -> VK_EVAL[$id] ;
    public final DRLParser.eval_key_return eval_key() throws RecognitionException {
        DRLParser.eval_key_return retval = new DRLParser.eval_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2335:2: ({...}? =>id= ID -> VK_EVAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2335:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "eval_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_eval_key11237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2337:3: -> VK_EVAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EVAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eval_key"

    public static class not_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_key"
    // src/main/resources/org/drools/lang/DRL.g:2340:1: not_key : {...}? =>id= ID -> VK_NOT[$id] ;
    public final DRLParser.not_key_return not_key() throws RecognitionException {
        DRLParser.not_key_return retval = new DRLParser.not_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2341:2: ({...}? =>id= ID -> VK_NOT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2341:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NOT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_not_key11264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2343:3: -> VK_NOT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NOT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_key"

    public static class in_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_key"
    // src/main/resources/org/drools/lang/DRL.g:2346:1: in_key : {...}? =>id= ID -> VK_IN[$id] ;
    public final DRLParser.in_key_return in_key() throws RecognitionException {
        DRLParser.in_key_return retval = new DRLParser.in_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2347:2: ({...}? =>id= ID -> VK_IN[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2347:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "in_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_in_key11291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2349:3: -> VK_IN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_key"

    public static class or_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_key"
    // src/main/resources/org/drools/lang/DRL.g:2352:1: or_key : {...}? =>id= ID -> VK_OR[$id] ;
    public final DRLParser.or_key_return or_key() throws RecognitionException {
        DRLParser.or_key_return retval = new DRLParser.or_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2353:2: ({...}? =>id= ID -> VK_OR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2353:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "or_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.OR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_or_key11318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2355:3: -> VK_OR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_key"

    public static class and_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_key"
    // src/main/resources/org/drools/lang/DRL.g:2358:1: and_key : {...}? =>id= ID -> VK_AND[$id] ;
    public final DRLParser.and_key_return and_key() throws RecognitionException {
        DRLParser.and_key_return retval = new DRLParser.and_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2359:2: ({...}? =>id= ID -> VK_AND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2359:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "and_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_and_key11345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2361:3: -> VK_AND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_key"

    public static class exists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exists_key"
    // src/main/resources/org/drools/lang/DRL.g:2364:1: exists_key : {...}? =>id= ID -> VK_EXISTS[$id] ;
    public final DRLParser.exists_key_return exists_key() throws RecognitionException {
        DRLParser.exists_key_return retval = new DRLParser.exists_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2365:2: ({...}? =>id= ID -> VK_EXISTS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2365:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exists_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_exists_key11372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2367:3: -> VK_EXISTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXISTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exists_key"

    public static class forall_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_key"
    // src/main/resources/org/drools/lang/DRL.g:2370:1: forall_key : {...}? =>id= ID -> VK_FORALL[$id] ;
    public final DRLParser.forall_key_return forall_key() throws RecognitionException {
        DRLParser.forall_key_return retval = new DRLParser.forall_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2371:2: ({...}? =>id= ID -> VK_FORALL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2371:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "forall_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_forall_key11399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2373:3: -> VK_FORALL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FORALL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forall_key"

    public static class action_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "action_key"
    // src/main/resources/org/drools/lang/DRL.g:2376:1: action_key : {...}? =>id= ID -> VK_ACTION[$id] ;
    public final DRLParser.action_key_return action_key() throws RecognitionException {
        DRLParser.action_key_return retval = new DRLParser.action_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2377:2: ({...}? =>id= ID -> VK_ACTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2377:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "action_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_action_key11426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2379:3: -> VK_ACTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "action_key"

    public static class reverse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverse_key"
    // src/main/resources/org/drools/lang/DRL.g:2382:1: reverse_key : {...}? =>id= ID -> VK_REVERSE[$id] ;
    public final DRLParser.reverse_key_return reverse_key() throws RecognitionException {
        DRLParser.reverse_key_return retval = new DRLParser.reverse_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2383:2: ({...}? =>id= ID -> VK_REVERSE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2383:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reverse_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_reverse_key11453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2385:3: -> VK_REVERSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_REVERSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reverse_key"

    public static class result_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "result_key"
    // src/main/resources/org/drools/lang/DRL.g:2388:1: result_key : {...}? =>id= ID -> VK_RESULT[$id] ;
    public final DRLParser.result_key_return result_key() throws RecognitionException {
        DRLParser.result_key_return retval = new DRLParser.result_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2389:2: ({...}? =>id= ID -> VK_RESULT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2389:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RESULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RESULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_result_key11480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2391:3: -> VK_RESULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RESULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "result_key"

    public static class end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "end_key"
    // src/main/resources/org/drools/lang/DRL.g:2394:1: end_key : {...}? =>id= ID -> VK_END[$id] ;
    public final DRLParser.end_key_return end_key() throws RecognitionException {
        DRLParser.end_key_return retval = new DRLParser.end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2395:2: ({...}? =>id= ID -> VK_END[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2395:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "end_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_end_key11507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2397:3: -> VK_END[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_END, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "end_key"

    public static class not_end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_end_key"
    // src/main/resources/org/drools/lang/DRL.g:2400:1: not_end_key : {...}? =>any= . ;
    public final DRLParser.not_end_key_return not_end_key() throws RecognitionException {
        DRLParser.not_end_key_return retval = new DRLParser.not_end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token any=null;

        Object any_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2401:2: ({...}? =>any= . )
            // src/main/resources/org/drools/lang/DRL.g:2401:4: {...}? =>any= .
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_end_key", "!(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            any=(Token)input.LT(1);
            matchAny(input); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            any_tree = (Object)adaptor.create(any);
            adaptor.addChild(root_0, any_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(any, DroolsEditorType.CODE_CHUNK);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_end_key"

    public static class init_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_key"
    // src/main/resources/org/drools/lang/DRL.g:2405:1: init_key : {...}? =>id= ID -> VK_INIT[$id] ;
    public final DRLParser.init_key_return init_key() throws RecognitionException {
        DRLParser.init_key_return retval = new DRLParser.init_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2406:2: ({...}? =>id= ID -> VK_INIT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2406:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "init_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INIT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_init_key11554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2408:3: -> VK_INIT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INIT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "init_key"

    public static class instanceof_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceof_key"
    // src/main/resources/org/drools/lang/DRL.g:2411:1: instanceof_key : {...}? =>id= ID -> VK_INSTANCEOF[$id] ;
    public final DRLParser.instanceof_key_return instanceof_key() throws RecognitionException {
        DRLParser.instanceof_key_return retval = new DRLParser.instanceof_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2412:2: ({...}? =>id= ID -> VK_INSTANCEOF[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2412:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instanceof_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_instanceof_key11581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2414:3: -> VK_INSTANCEOF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INSTANCEOF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceof_key"

    public static class extends_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extends_key"
    // src/main/resources/org/drools/lang/DRL.g:2417:1: extends_key : {...}? =>id= ID -> VK_EXTENDS[$id] ;
    public final DRLParser.extends_key_return extends_key() throws RecognitionException {
        DRLParser.extends_key_return retval = new DRLParser.extends_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2418:2: ({...}? =>id= ID -> VK_EXTENDS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2418:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extends_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extends_key11608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2420:3: -> VK_EXTENDS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTENDS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extends_key"

    public static class implements_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implements_key"
    // src/main/resources/org/drools/lang/DRL.g:2423:1: implements_key : {...}? =>id= ID -> VK_IMPLEMENTS[$id] ;
    public final DRLParser.implements_key_return implements_key() throws RecognitionException {
        DRLParser.implements_key_return retval = new DRLParser.implements_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2424:2: ({...}? =>id= ID -> VK_IMPLEMENTS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2424:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "implements_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_implements_key11635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2426:3: -> VK_IMPLEMENTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPLEMENTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implements_key"

    public static class super_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "super_key"
    // src/main/resources/org/drools/lang/DRL.g:2429:1: super_key : {...}? =>id= ID -> VK_SUPER[$id] ;
    public final DRLParser.super_key_return super_key() throws RecognitionException {
        DRLParser.super_key_return retval = new DRLParser.super_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2430:2: ({...}? =>id= ID -> VK_SUPER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2430:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "super_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_super_key11662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2432:3: -> VK_SUPER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SUPER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "super_key"

    public static class boolean_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_key"
    // src/main/resources/org/drools/lang/DRL.g:2435:1: boolean_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.boolean_key_return boolean_key() throws RecognitionException {
        DRLParser.boolean_key_return retval = new DRLParser.boolean_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2436:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2436:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "boolean_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_boolean_key11690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2438:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "boolean_key"

    public static class char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_key"
    // src/main/resources/org/drools/lang/DRL.g:2441:1: char_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.char_key_return char_key() throws RecognitionException {
        DRLParser.char_key_return retval = new DRLParser.char_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2442:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2442:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_char_key11718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2444:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "char_key"

    public static class byte_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "byte_key"
    // src/main/resources/org/drools/lang/DRL.g:2447:1: byte_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.byte_key_return byte_key() throws RecognitionException {
        DRLParser.byte_key_return retval = new DRLParser.byte_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2448:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2448:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "byte_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_byte_key11746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2450:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "byte_key"

    public static class short_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "short_key"
    // src/main/resources/org/drools/lang/DRL.g:2453:1: short_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.short_key_return short_key() throws RecognitionException {
        DRLParser.short_key_return retval = new DRLParser.short_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2454:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2454:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "short_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_short_key11774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2456:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_key"

    public static class int_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "int_key"
    // src/main/resources/org/drools/lang/DRL.g:2459:1: int_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.int_key_return int_key() throws RecognitionException {
        DRLParser.int_key_return retval = new DRLParser.int_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2460:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2460:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "int_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_int_key11802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2462:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "int_key"

    public static class long_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "long_key"
    // src/main/resources/org/drools/lang/DRL.g:2465:1: long_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.long_key_return long_key() throws RecognitionException {
        DRLParser.long_key_return retval = new DRLParser.long_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2466:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2466:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "long_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LONG))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_long_key11830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2468:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "long_key"

    public static class float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "float_key"
    // src/main/resources/org/drools/lang/DRL.g:2471:1: float_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.float_key_return float_key() throws RecognitionException {
        DRLParser.float_key_return retval = new DRLParser.float_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2472:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2472:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "float_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_float_key11858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2474:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "float_key"

    public static class double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_key"
    // src/main/resources/org/drools/lang/DRL.g:2477:1: double_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.double_key_return double_key() throws RecognitionException {
        DRLParser.double_key_return retval = new DRLParser.double_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2478:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2478:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "double_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_double_key11886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2480:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_key"

    public static class this_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "this_key"
    // src/main/resources/org/drools/lang/DRL.g:2483:1: this_key : {...}? =>id= ID -> VK_THIS[$id] ;
    public final DRLParser.this_key_return this_key() throws RecognitionException {
        DRLParser.this_key_return retval = new DRLParser.this_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2484:2: ({...}? =>id= ID -> VK_THIS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2484:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "this_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THIS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_this_key11914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2486:3: -> VK_THIS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THIS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "this_key"

    public static class void_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "void_key"
    // src/main/resources/org/drools/lang/DRL.g:2489:1: void_key : {...}? =>id= ID -> VK_VOID[$id] ;
    public final DRLParser.void_key_return void_key() throws RecognitionException {
        DRLParser.void_key_return retval = new DRLParser.void_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2490:2: ({...}? =>id= ID -> VK_VOID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2490:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "void_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOID))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_void_key11942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2492:3: -> VK_VOID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "void_key"

    public static class class_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_key"
    // src/main/resources/org/drools/lang/DRL.g:2495:1: class_key : {...}? =>id= ID -> VK_CLASS[$id] ;
    public final DRLParser.class_key_return class_key() throws RecognitionException {
        DRLParser.class_key_return retval = new DRLParser.class_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2496:2: ({...}? =>id= ID -> VK_CLASS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2496:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "class_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_class_key11970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2498:3: -> VK_CLASS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CLASS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "class_key"

    public static class new_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "new_key"
    // src/main/resources/org/drools/lang/DRL.g:2501:1: new_key : {...}? =>id= ID -> VK_NEW[$id] ;
    public final DRLParser.new_key_return new_key() throws RecognitionException {
        DRLParser.new_key_return retval = new DRLParser.new_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2502:2: ({...}? =>id= ID -> VK_NEW[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2502:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "new_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NEW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_new_key11998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2504:3: -> VK_NEW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NEW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "new_key"

    public static class final_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "final_key"
    // src/main/resources/org/drools/lang/DRL.g:2508:1: final_key : {...}? =>id= ID -> VK_FINAL[$id] ;
    public final DRLParser.final_key_return final_key() throws RecognitionException {
        DRLParser.final_key_return retval = new DRLParser.final_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2509:2: ({...}? =>id= ID -> VK_FINAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2509:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "final_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_final_key12027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2511:2: -> VK_FINAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "final_key"

    public static class if_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_key"
    // src/main/resources/org/drools/lang/DRL.g:2515:1: if_key : {...}? =>id= ID -> VK_IF[$id] ;
    public final DRLParser.if_key_return if_key() throws RecognitionException {
        DRLParser.if_key_return retval = new DRLParser.if_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2516:2: ({...}? =>id= ID -> VK_IF[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2516:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "if_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_if_key12053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2518:2: -> VK_IF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_key"

    public static class else_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_key"
    // src/main/resources/org/drools/lang/DRL.g:2522:1: else_key : {...}? =>id= ID -> VK_ELSE[$id] ;
    public final DRLParser.else_key_return else_key() throws RecognitionException {
        DRLParser.else_key_return retval = new DRLParser.else_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2523:2: ({...}? =>id= ID -> VK_ELSE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2523:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "else_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ELSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_else_key12079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2525:2: -> VK_ELSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ELSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_key"

    public static class for_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_key"
    // src/main/resources/org/drools/lang/DRL.g:2529:1: for_key : {...}? =>id= ID -> VK_FOR[$id] ;
    public final DRLParser.for_key_return for_key() throws RecognitionException {
        DRLParser.for_key_return retval = new DRLParser.for_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2530:2: ({...}? =>id= ID -> VK_FOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2530:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "for_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FOR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_for_key12105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2532:2: -> VK_FOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_key"

    public static class while_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_key"
    // src/main/resources/org/drools/lang/DRL.g:2536:1: while_key : {...}? =>id= ID -> VK_WHILE[$id] ;
    public final DRLParser.while_key_return while_key() throws RecognitionException {
        DRLParser.while_key_return retval = new DRLParser.while_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2537:2: ({...}? =>id= ID -> VK_WHILE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2537:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.WHILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "while_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.WHILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_while_key12131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2539:2: -> VK_WHILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_WHILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_key"

    public static class do_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "do_key"
    // src/main/resources/org/drools/lang/DRL.g:2543:1: do_key : {...}? =>id= ID -> VK_DO[$id] ;
    public final DRLParser.do_key_return do_key() throws RecognitionException {
        DRLParser.do_key_return retval = new DRLParser.do_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2544:2: ({...}? =>id= ID -> VK_DO[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2544:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DO)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "do_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DO))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_do_key12157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2546:2: -> VK_DO[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DO, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "do_key"

    public static class case_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_key"
    // src/main/resources/org/drools/lang/DRL.g:2550:1: case_key : {...}? =>id= ID -> VK_CASE[$id] ;
    public final DRLParser.case_key_return case_key() throws RecognitionException {
        DRLParser.case_key_return retval = new DRLParser.case_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2551:2: ({...}? =>id= ID -> VK_CASE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2551:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "case_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CASE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_case_key12183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2553:2: -> VK_CASE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CASE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_key"

    public static class default_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_key"
    // src/main/resources/org/drools/lang/DRL.g:2557:1: default_key : {...}? =>id= ID -> VK_DEFAULT[$id] ;
    public final DRLParser.default_key_return default_key() throws RecognitionException {
        DRLParser.default_key_return retval = new DRLParser.default_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2558:2: ({...}? =>id= ID -> VK_DEFAULT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2558:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "default_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_default_key12209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2560:2: -> VK_DEFAULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DEFAULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "default_key"

    public static class try_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_key"
    // src/main/resources/org/drools/lang/DRL.g:2564:1: try_key : {...}? =>id= ID -> VK_TRY[$id] ;
    public final DRLParser.try_key_return try_key() throws RecognitionException {
        DRLParser.try_key_return retval = new DRLParser.try_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2565:2: ({...}? =>id= ID -> VK_TRY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2565:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "try_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_try_key12235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2567:2: -> VK_TRY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_key"

    public static class catch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catch_key"
    // src/main/resources/org/drools/lang/DRL.g:2571:1: catch_key : {...}? =>id= ID -> VK_CATCH[$id] ;
    public final DRLParser.catch_key_return catch_key() throws RecognitionException {
        DRLParser.catch_key_return retval = new DRLParser.catch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2572:2: ({...}? =>id= ID -> VK_CATCH[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2572:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "catch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CATCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_catch_key12261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2574:2: -> VK_CATCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CATCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catch_key"

    public static class finally_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finally_key"
    // src/main/resources/org/drools/lang/DRL.g:2578:1: finally_key : {...}? =>id= ID -> VK_FINALLY[$id] ;
    public final DRLParser.finally_key_return finally_key() throws RecognitionException {
        DRLParser.finally_key_return retval = new DRLParser.finally_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2579:2: ({...}? =>id= ID -> VK_FINALLY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2579:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "finally_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_finally_key12287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2581:2: -> VK_FINALLY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINALLY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "finally_key"

    public static class switch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_key"
    // src/main/resources/org/drools/lang/DRL.g:2585:1: switch_key : {...}? =>id= ID -> VK_SWITCH[$id] ;
    public final DRLParser.switch_key_return switch_key() throws RecognitionException {
        DRLParser.switch_key_return retval = new DRLParser.switch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2586:2: ({...}? =>id= ID -> VK_SWITCH[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2586:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "switch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_switch_key12313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2588:2: -> VK_SWITCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SWITCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switch_key"

    public static class synchronized_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "synchronized_key"
    // src/main/resources/org/drools/lang/DRL.g:2592:1: synchronized_key : {...}? =>id= ID -> VK_SYNCHRONIZED[$id] ;
    public final DRLParser.synchronized_key_return synchronized_key() throws RecognitionException {
        DRLParser.synchronized_key_return retval = new DRLParser.synchronized_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2593:2: ({...}? =>id= ID -> VK_SYNCHRONIZED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2593:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "synchronized_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_synchronized_key12339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2595:2: -> VK_SYNCHRONIZED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SYNCHRONIZED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "synchronized_key"

    public static class return_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_key"
    // src/main/resources/org/drools/lang/DRL.g:2599:1: return_key : {...}? =>id= ID -> VK_RETURN[$id] ;
    public final DRLParser.return_key_return return_key() throws RecognitionException {
        DRLParser.return_key_return retval = new DRLParser.return_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2600:2: ({...}? =>id= ID -> VK_RETURN[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2600:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RETURN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "return_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RETURN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_return_key12365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2602:2: -> VK_RETURN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RETURN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "return_key"

    public static class throw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throw_key"
    // src/main/resources/org/drools/lang/DRL.g:2606:1: throw_key : {...}? =>id= ID -> VK_THROW[$id] ;
    public final DRLParser.throw_key_return throw_key() throws RecognitionException {
        DRLParser.throw_key_return retval = new DRLParser.throw_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2607:2: ({...}? =>id= ID -> VK_THROW[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2607:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throw_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throw_key12391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2609:2: -> VK_THROW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throw_key"

    public static class break_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "break_key"
    // src/main/resources/org/drools/lang/DRL.g:2613:1: break_key : {...}? =>id= ID -> VK_BREAK[$id] ;
    public final DRLParser.break_key_return break_key() throws RecognitionException {
        DRLParser.break_key_return retval = new DRLParser.break_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2614:2: ({...}? =>id= ID -> VK_BREAK[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2614:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BREAK)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "break_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BREAK))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_break_key12417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2616:2: -> VK_BREAK[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_BREAK, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "break_key"

    public static class continue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_key"
    // src/main/resources/org/drools/lang/DRL.g:2620:1: continue_key : {...}? =>id= ID -> VK_CONTINUE[$id] ;
    public final DRLParser.continue_key_return continue_key() throws RecognitionException {
        DRLParser.continue_key_return retval = new DRLParser.continue_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2621:2: ({...}? =>id= ID -> VK_CONTINUE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2621:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "continue_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_continue_key12443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2623:2: -> VK_CONTINUE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CONTINUE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "continue_key"

    public static class assert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assert_key"
    // src/main/resources/org/drools/lang/DRL.g:2626:1: assert_key : {...}? =>id= ID -> VK_ASSERT[$id] ;
    public final DRLParser.assert_key_return assert_key() throws RecognitionException {
        DRLParser.assert_key_return retval = new DRLParser.assert_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2627:2: ({...}? =>id= ID -> VK_ASSERT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2627:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "assert_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_assert_key12468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2629:2: -> VK_ASSERT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ASSERT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assert_key"

    public static class static_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "static_key"
    // src/main/resources/org/drools/lang/DRL.g:2632:1: static_key : {...}? =>id= ID -> VK_STATIC[$id] ;
    public final DRLParser.static_key_return static_key() throws RecognitionException {
        DRLParser.static_key_return retval = new DRLParser.static_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2633:2: ({...}? =>id= ID -> VK_STATIC[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2633:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "static_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_static_key12493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2635:2: -> VK_STATIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STATIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "static_key"

    public static class modify_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify_key"
    // src/main/resources/org/drools/lang/DRL.g:2638:1: modify_key : {...}? =>id= ID -> VK_MODIFY[$id] ;
    public final DRLParser.modify_key_return modify_key() throws RecognitionException {
        DRLParser.modify_key_return retval = new DRLParser.modify_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2639:2: ({...}? =>id= ID -> VK_MODIFY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2639:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "modify_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_modify_key12518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2641:2: -> VK_MODIFY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_MODIFY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modify_key"

    public static class public_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "public_key"
    // src/main/resources/org/drools/lang/DRL.g:2644:1: public_key : {...}? =>id= ID -> VK_PUBLIC[$id] ;
    public final DRLParser.public_key_return public_key() throws RecognitionException {
        DRLParser.public_key_return retval = new DRLParser.public_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2645:2: ({...}? =>id= ID -> VK_PUBLIC[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2645:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "public_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_public_key12544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2647:2: -> VK_PUBLIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PUBLIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "public_key"

    public static class protected_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_key"
    // src/main/resources/org/drools/lang/DRL.g:2651:1: protected_key : {...}? =>id= ID -> VK_PROTECTED[$id] ;
    public final DRLParser.protected_key_return protected_key() throws RecognitionException {
        DRLParser.protected_key_return retval = new DRLParser.protected_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2652:2: ({...}? =>id= ID -> VK_PROTECTED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2652:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "protected_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_protected_key12570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2654:2: -> VK_PROTECTED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PROTECTED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_key"

    public static class private_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_key"
    // src/main/resources/org/drools/lang/DRL.g:2658:1: private_key : {...}? =>id= ID -> VK_PRIVATE[$id] ;
    public final DRLParser.private_key_return private_key() throws RecognitionException {
        DRLParser.private_key_return retval = new DRLParser.private_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2659:2: ({...}? =>id= ID -> VK_PRIVATE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2659:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "private_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_private_key12596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2661:2: -> VK_PRIVATE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIVATE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_key"

    public static class abstract_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_key"
    // src/main/resources/org/drools/lang/DRL.g:2665:1: abstract_key : {...}? =>id= ID -> VK_ABSTRACT[$id] ;
    public final DRLParser.abstract_key_return abstract_key() throws RecognitionException {
        DRLParser.abstract_key_return retval = new DRLParser.abstract_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2666:2: ({...}? =>id= ID -> VK_ABSTRACT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2666:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "abstract_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_abstract_key12622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2668:2: -> VK_ABSTRACT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ABSTRACT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstract_key"

    public static class native_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "native_key"
    // src/main/resources/org/drools/lang/DRL.g:2672:1: native_key : {...}? =>id= ID -> VK_NATIVE[$id] ;
    public final DRLParser.native_key_return native_key() throws RecognitionException {
        DRLParser.native_key_return retval = new DRLParser.native_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2673:2: ({...}? =>id= ID -> VK_NATIVE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2673:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "native_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_native_key12648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2675:2: -> VK_NATIVE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NATIVE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "native_key"

    public static class transient_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "transient_key"
    // src/main/resources/org/drools/lang/DRL.g:2679:1: transient_key : {...}? =>id= ID -> VK_TRANSIENT[$id] ;
    public final DRLParser.transient_key_return transient_key() throws RecognitionException {
        DRLParser.transient_key_return retval = new DRLParser.transient_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2680:2: ({...}? =>id= ID -> VK_TRANSIENT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2680:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "transient_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_transient_key12674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2682:2: -> VK_TRANSIENT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRANSIENT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "transient_key"

    public static class volatile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volatile_key"
    // src/main/resources/org/drools/lang/DRL.g:2686:1: volatile_key : {...}? =>id= ID -> VK_VOLATILE[$id] ;
    public final DRLParser.volatile_key_return volatile_key() throws RecognitionException {
        DRLParser.volatile_key_return retval = new DRLParser.volatile_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2687:2: ({...}? =>id= ID -> VK_VOLATILE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2687:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "volatile_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_volatile_key12700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2689:2: -> VK_VOLATILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOLATILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volatile_key"

    public static class strictfp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "strictfp_key"
    // src/main/resources/org/drools/lang/DRL.g:2693:1: strictfp_key : {...}? =>id= ID -> VK_STRICTFP[$id] ;
    public final DRLParser.strictfp_key_return strictfp_key() throws RecognitionException {
        DRLParser.strictfp_key_return retval = new DRLParser.strictfp_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2694:2: ({...}? =>id= ID -> VK_STRICTFP[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2694:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "strictfp_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_strictfp_key12726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2696:2: -> VK_STRICTFP[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STRICTFP, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "strictfp_key"

    public static class throws_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throws_key"
    // src/main/resources/org/drools/lang/DRL.g:2700:1: throws_key : {...}? =>id= ID -> VK_THROWS[$id] ;
    public final DRLParser.throws_key_return throws_key() throws RecognitionException {
        DRLParser.throws_key_return retval = new DRLParser.throws_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2701:2: ({...}? =>id= ID -> VK_THROWS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2701:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throws_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throws_key12752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2703:2: -> VK_THROWS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROWS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throws_key"

    public static class interface_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_key"
    // src/main/resources/org/drools/lang/DRL.g:2707:1: interface_key : {...}? =>id= ID -> VK_INTERFACE[$id] ;
    public final DRLParser.interface_key_return interface_key() throws RecognitionException {
        DRLParser.interface_key_return retval = new DRLParser.interface_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2708:2: ({...}? =>id= ID -> VK_INTERFACE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2708:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "interface_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_interface_key12778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2710:2: -> VK_INTERFACE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INTERFACE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interface_key"

    public static class enum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_key"
    // src/main/resources/org/drools/lang/DRL.g:2714:1: enum_key : {...}? =>id= ID -> VK_ENUM[$id] ;
    public final DRLParser.enum_key_return enum_key() throws RecognitionException {
        DRLParser.enum_key_return retval = new DRLParser.enum_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2715:2: ({...}? =>id= ID -> VK_ENUM[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2715:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enum_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enum_key12804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2717:2: -> VK_ENUM[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENUM, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enum_key"

    // $ANTLR start synpred1_DRL
    public final void synpred1_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:460:4: ( methodDeclaration )
        // src/main/resources/org/drools/lang/DRL.g:460:4: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred1_DRL1519);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_DRL

    // $ANTLR start synpred2_DRL
    public final void synpred2_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:461:4: ( void_key ID voidMethodDeclaratorRest )
        // src/main/resources/org/drools/lang/DRL.g:461:4: void_key ID voidMethodDeclaratorRest
        {
        pushFollow(FOLLOW_void_key_in_synpred2_DRL1524);
        void_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred2_DRL1526); if (state.failed) return ;
        pushFollow(FOLLOW_voidMethodDeclaratorRest_in_synpred2_DRL1528);
        voidMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_DRL

    // $ANTLR start synpred3_DRL
    public final void synpred3_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:654:5: ( LEFT_PAREN or_key )
        // src/main/resources/org/drools/lang/DRL.g:654:6: LEFT_PAREN or_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred3_DRL2230); if (state.failed) return ;
        pushFollow(FOLLOW_or_key_in_synpred3_DRL2232);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_DRL

    // $ANTLR start synpred4_DRL
    public final void synpred4_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:662:5: ( or_key )
        // src/main/resources/org/drools/lang/DRL.g:662:6: or_key
        {
        pushFollow(FOLLOW_or_key_in_synpred4_DRL2299);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_DRL

    // $ANTLR start synpred5_DRL
    public final void synpred5_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:671:5: ( LEFT_PAREN and_key )
        // src/main/resources/org/drools/lang/DRL.g:671:6: LEFT_PAREN and_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred5_DRL2350); if (state.failed) return ;
        pushFollow(FOLLOW_and_key_in_synpred5_DRL2352);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_DRL

    // $ANTLR start synpred6_DRL
    public final void synpred6_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:679:5: ( and_key )
        // src/main/resources/org/drools/lang/DRL.g:679:6: and_key
        {
        pushFollow(FOLLOW_and_key_in_synpred6_DRL2420);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_DRL

    // $ANTLR start synpred7_DRL
    public final void synpred7_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:697:4: ( SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:697:5: SEMICOLON
        {
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred7_DRL2544); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_DRL

    // $ANTLR start synpred8_DRL
    public final void synpred8_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:703:12: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:703:13: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred8_DRL2581); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:703:24: ( or_key | and_key )
        int alt270=2;
        int LA270_0 = input.LA(1);

        if ( (LA270_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))))) {
            int LA270_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt270=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 270, 0, input);

            throw nvae;
        }
        switch (alt270) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:703:25: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred8_DRL2584);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:703:32: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred8_DRL2586);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred8_DRL

    // $ANTLR start synpred9_DRL
    public final void synpred9_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:719:5: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:719:6: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred9_DRL2709); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:719:17: ( or_key | and_key )
        int alt271=2;
        int LA271_0 = input.LA(1);

        if ( (LA271_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))))) {
            int LA271_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt271=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 271, 0, input);

            throw nvae;
        }
        switch (alt271) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:719:18: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred9_DRL2712);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:719:25: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred9_DRL2714);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred9_DRL

    // $ANTLR start synpred10_DRL
    public final void synpred10_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1122:4: ( operator_args )
        // src/main/resources/org/drools/lang/DRL.g:1122:5: operator_args
        {
        pushFollow(FOLLOW_operator_args_in_synpred10_DRL4437);
        operator_args();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_DRL

    // $ANTLR start synpred11_DRL
    public final void synpred11_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1354:5: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1354:6: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred11_DRL5755);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_DRL

    // $ANTLR start synpred12_DRL
    public final void synpred12_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1354:41: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1354:42: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred12_DRL5766); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5768); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_DRL

    // $ANTLR start synpred13_DRL
    public final void synpred13_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1355:10: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1355:11: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred13_DRL5789);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_DRL

    // $ANTLR start synpred14_DRL
    public final void synpred14_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1355:52: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1355:53: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred14_DRL5803);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_DRL

    // $ANTLR start synpred15_DRL
    public final void synpred15_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1355:89: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1355:90: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred15_DRL5815); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred15_DRL5817); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_DRL

    // $ANTLR start synpred16_DRL
    public final void synpred16_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1424:4: ( final_key )
        // src/main/resources/org/drools/lang/DRL.g:1424:5: final_key
        {
        pushFollow(FOLLOW_final_key_in_synpred16_DRL6124);
        final_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_DRL

    // $ANTLR start synpred18_DRL
    public final void synpred18_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1468:7: ( if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? )
        // src/main/resources/org/drools/lang/DRL.g:1468:7: if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )?
        {
        pushFollow(FOLLOW_if_key_in_synpred18_DRL6318);
        if_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred18_DRL6320);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred18_DRL6322);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1468:42: ( options {k=1; } : else_key rhs_statement )?
        int alt272=2;
        int LA272_0 = input.LA(1);

        if ( (LA272_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE))))) {
            alt272=1;
        }
        switch (alt272) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1468:59: else_key rhs_statement
                {
                pushFollow(FOLLOW_else_key_in_synpred18_DRL6333);
                else_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_rhs_statement_in_synpred18_DRL6335);
                rhs_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred18_DRL

    // $ANTLR start synpred19_DRL
    public final void synpred19_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1469:7: ( for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement )
        // src/main/resources/org/drools/lang/DRL.g:1469:7: for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement
        {
        pushFollow(FOLLOW_for_key_in_synpred19_DRL6345);
        for_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred19_DRL6347); if (state.failed) return ;
        pushFollow(FOLLOW_forControl_in_synpred19_DRL6349);
        forControl();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred19_DRL6351); if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred19_DRL6353);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_DRL

    // $ANTLR start synpred20_DRL
    public final void synpred20_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1470:7: ( while_key parExpression rhs_statement )
        // src/main/resources/org/drools/lang/DRL.g:1470:7: while_key parExpression rhs_statement
        {
        pushFollow(FOLLOW_while_key_in_synpred20_DRL6361);
        while_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred20_DRL6363);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred20_DRL6365);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_DRL

    // $ANTLR start synpred21_DRL
    public final void synpred21_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1471:7: ( do_key rhs_statement while_key parExpression SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:1471:7: do_key rhs_statement while_key parExpression SEMICOLON
        {
        pushFollow(FOLLOW_do_key_in_synpred21_DRL6373);
        do_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred21_DRL6375);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_while_key_in_synpred21_DRL6377);
        while_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred21_DRL6379);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred21_DRL6381); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_DRL

    // $ANTLR start synpred22_DRL
    public final void synpred22_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1472:7: ( try_key block ( catches finally_key block | catches | finally_key block ) )
        // src/main/resources/org/drools/lang/DRL.g:1472:7: try_key block ( catches finally_key block | catches | finally_key block )
        {
        pushFollow(FOLLOW_try_key_in_synpred22_DRL6389);
        try_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred22_DRL6391);
        block();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1473:7: ( catches finally_key block | catches | finally_key block )
        int alt273=3;
        int LA273_0 = input.LA(1);

        if ( (LA273_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))))) {
            int LA273_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                alt273=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                alt273=2;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                alt273=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 273, 0, input);

            throw nvae;
        }
        switch (alt273) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1473:9: catches finally_key block
                {
                pushFollow(FOLLOW_catches_in_synpred22_DRL6401);
                catches();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_finally_key_in_synpred22_DRL6403);
                finally_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_block_in_synpred22_DRL6405);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:1474:9: catches
                {
                pushFollow(FOLLOW_catches_in_synpred22_DRL6415);
                catches();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // src/main/resources/org/drools/lang/DRL.g:1475:9: finally_key block
                {
                pushFollow(FOLLOW_finally_key_in_synpred22_DRL6425);
                finally_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_block_in_synpred22_DRL6427);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred22_DRL

    // $ANTLR start synpred23_DRL
    public final void synpred23_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1477:7: ( switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY )
        // src/main/resources/org/drools/lang/DRL.g:1477:7: switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY
        {
        pushFollow(FOLLOW_switch_key_in_synpred23_DRL6443);
        switch_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred23_DRL6445);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_synpred23_DRL6447); if (state.failed) return ;
        pushFollow(FOLLOW_switchBlockStatementGroups_in_synpred23_DRL6449);
        switchBlockStatementGroups();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_synpred23_DRL6451); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_DRL

    // $ANTLR start synpred24_DRL
    public final void synpred24_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1478:7: ( synchronized_key parExpression block )
        // src/main/resources/org/drools/lang/DRL.g:1478:7: synchronized_key parExpression block
        {
        pushFollow(FOLLOW_synchronized_key_in_synpred24_DRL6459);
        synchronized_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred24_DRL6461);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred24_DRL6463);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_DRL

    // $ANTLR start synpred25_DRL
    public final void synpred25_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1479:7: ( return_key ( expression )? SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:1479:7: return_key ( expression )? SEMICOLON
        {
        pushFollow(FOLLOW_return_key_in_synpred25_DRL6471);
        return_key();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1479:18: ( expression )?
        int alt274=2;
        int LA274_0 = input.LA(1);

        if ( (LA274_0==ID||LA274_0==STRING||(LA274_0>=BOOL && LA274_0<=LEFT_PAREN)||LA274_0==DECIMAL||LA274_0==LESS||LA274_0==LEFT_SQUARE||(LA274_0>=NULL && LA274_0<=FLOAT)||(LA274_0>=INCR && LA274_0<=NEGATION)) ) {
            alt274=1;
        }
        switch (alt274) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1479:18: expression
                {
                pushFollow(FOLLOW_expression_in_synpred25_DRL6473);
                expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred25_DRL6476); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_DRL

    // $ANTLR start synpred26_DRL
    public final void synpred26_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1480:7: ( throw_key expression SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:1480:7: throw_key expression SEMICOLON
        {
        pushFollow(FOLLOW_throw_key_in_synpred26_DRL6484);
        throw_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred26_DRL6486);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred26_DRL6488); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_DRL

    // $ANTLR start synpred27_DRL
    public final void synpred27_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1481:7: ( break_key ( ID )? SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:1481:7: break_key ( ID )? SEMICOLON
        {
        pushFollow(FOLLOW_break_key_in_synpred27_DRL6496);
        break_key();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1481:17: ( ID )?
        int alt275=2;
        int LA275_0 = input.LA(1);

        if ( (LA275_0==ID) ) {
            alt275=1;
        }
        switch (alt275) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1481:17: ID
                {
                match(input,ID,FOLLOW_ID_in_synpred27_DRL6498); if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred27_DRL6501); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_DRL

    // $ANTLR start synpred28_DRL
    public final void synpred28_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1482:7: ( continue_key ( ID )? SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:1482:7: continue_key ( ID )? SEMICOLON
        {
        pushFollow(FOLLOW_continue_key_in_synpred28_DRL6509);
        continue_key();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1482:20: ( ID )?
        int alt276=2;
        int LA276_0 = input.LA(1);

        if ( (LA276_0==ID) ) {
            alt276=1;
        }
        switch (alt276) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1482:20: ID
                {
                match(input,ID,FOLLOW_ID_in_synpred28_DRL6511); if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred28_DRL6514); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_DRL

    // $ANTLR start synpred30_DRL
    public final void synpred30_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1485:5: ( expression SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:1485:5: expression SEMICOLON
        {
        pushFollow(FOLLOW_expression_in_synpred30_DRL6529);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred30_DRL6531); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_DRL

    // $ANTLR start synpred31_DRL
    public final void synpred31_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1486:7: ( ID COLON rhs_statement )
        // src/main/resources/org/drools/lang/DRL.g:1486:7: ID COLON rhs_statement
        {
        match(input,ID,FOLLOW_ID_in_synpred31_DRL6543); if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred31_DRL6545); if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred31_DRL6547);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_DRL

    // $ANTLR start synpred32_DRL
    public final void synpred32_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1489:7: ( modifyStatement )
        // src/main/resources/org/drools/lang/DRL.g:1489:7: modifyStatement
        {
        pushFollow(FOLLOW_modifyStatement_in_synpred32_DRL6565);
        modifyStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_DRL

    // $ANTLR start synpred33_DRL
    public final void synpred33_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1497:4: ( forVarControl )
        // src/main/resources/org/drools/lang/DRL.g:1497:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred33_DRL6623);
        forVarControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_DRL

    // $ANTLR start synpred34_DRL
    public final void synpred34_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1503:4: ( ( variableModifier )* type variableDeclarators )
        // src/main/resources/org/drools/lang/DRL.g:1503:4: ( variableModifier )* type variableDeclarators
        {
        // src/main/resources/org/drools/lang/DRL.g:1503:4: ( variableModifier )*
        loop277:
        do {
            int alt277=2;
            alt277 = dfa277.predict(input);
            switch (alt277) {
        	case 1 :
        	    // src/main/resources/org/drools/lang/DRL.g:1503:4: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred34_DRL6668);
        	    variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop277;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred34_DRL6671);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred34_DRL6673);
        variableDeclarators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_DRL

    // $ANTLR start synpred35_DRL
    public final void synpred35_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1569:27: ( assignmentOperator )
        // src/main/resources/org/drools/lang/DRL.g:1569:28: assignmentOperator
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred35_DRL6921);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_DRL

    // $ANTLR start synpred36_DRL
    public final void synpred36_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1604:27: ( LESS )
        // src/main/resources/org/drools/lang/DRL.g:1604:28: LESS
        {
        match(input,LESS,FOLLOW_LESS_in_synpred36_DRL7168); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_DRL

    // $ANTLR start synpred37_DRL
    public final void synpred37_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1623:36: ( PLUS | MINUS )
        // src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred37_DRL

    // $ANTLR start synpred40_DRL
    public final void synpred40_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1642:9: ( castExpression )
        // src/main/resources/org/drools/lang/DRL.g:1642:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred40_DRL7461);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_DRL

    // $ANTLR start synpred41_DRL
    public final void synpred41_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1643:18: ( selector )
        // src/main/resources/org/drools/lang/DRL.g:1643:19: selector
        {
        pushFollow(FOLLOW_selector_in_synpred41_DRL7475);
        selector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_DRL

    // $ANTLR start synpred42_DRL
    public final void synpred42_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1643:42: ( INCR | DECR )
        // src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred42_DRL

    // $ANTLR start synpred43_DRL
    public final void synpred43_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1648:8: ( LEFT_PAREN primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1648:9: LEFT_PAREN primitiveType
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred43_DRL7533); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred43_DRL7535);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_DRL

    // $ANTLR start synpred44_DRL
    public final void synpred44_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1649:8: ( LEFT_PAREN type )
        // src/main/resources/org/drools/lang/DRL.g:1649:9: LEFT_PAREN type
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred44_DRL7556); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred44_DRL7558);
        type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_DRL

    // $ANTLR start synpred45_DRL
    public final void synpred45_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1655:9: ( boolean_key )
        // src/main/resources/org/drools/lang/DRL.g:1655:9: boolean_key
        {
        pushFollow(FOLLOW_boolean_key_in_synpred45_DRL7621);
        boolean_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_DRL

    // $ANTLR start synpred46_DRL
    public final void synpred46_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1656:7: ( char_key )
        // src/main/resources/org/drools/lang/DRL.g:1656:7: char_key
        {
        pushFollow(FOLLOW_char_key_in_synpred46_DRL7629);
        char_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_DRL

    // $ANTLR start synpred47_DRL
    public final void synpred47_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1657:7: ( byte_key )
        // src/main/resources/org/drools/lang/DRL.g:1657:7: byte_key
        {
        pushFollow(FOLLOW_byte_key_in_synpred47_DRL7637);
        byte_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_DRL

    // $ANTLR start synpred48_DRL
    public final void synpred48_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1658:7: ( short_key )
        // src/main/resources/org/drools/lang/DRL.g:1658:7: short_key
        {
        pushFollow(FOLLOW_short_key_in_synpred48_DRL7645);
        short_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_DRL

    // $ANTLR start synpred49_DRL
    public final void synpred49_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1659:7: ( int_key )
        // src/main/resources/org/drools/lang/DRL.g:1659:7: int_key
        {
        pushFollow(FOLLOW_int_key_in_synpred49_DRL7653);
        int_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_DRL

    // $ANTLR start synpred50_DRL
    public final void synpred50_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1660:7: ( long_key )
        // src/main/resources/org/drools/lang/DRL.g:1660:7: long_key
        {
        pushFollow(FOLLOW_long_key_in_synpred50_DRL7661);
        long_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_DRL

    // $ANTLR start synpred51_DRL
    public final void synpred51_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1661:7: ( float_key )
        // src/main/resources/org/drools/lang/DRL.g:1661:7: float_key
        {
        pushFollow(FOLLOW_float_key_in_synpred51_DRL7669);
        float_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_DRL

    // $ANTLR start synpred52_DRL
    public final void synpred52_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1667:7: ( parExpression )
        // src/main/resources/org/drools/lang/DRL.g:1667:8: parExpression
        {
        pushFollow(FOLLOW_parExpression_in_synpred52_DRL7696);
        parExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_DRL

    // $ANTLR start synpred53_DRL
    public final void synpred53_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1668:9: ( nonWildcardTypeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1668:10: nonWildcardTypeArguments
        {
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred53_DRL7711);
        nonWildcardTypeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_DRL

    // $ANTLR start synpred54_DRL
    public final void synpred54_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1669:9: ( literal )
        // src/main/resources/org/drools/lang/DRL.g:1669:10: literal
        {
        pushFollow(FOLLOW_literal_in_synpred54_DRL7736);
        literal();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_DRL

    // $ANTLR start synpred55_DRL
    public final void synpred55_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1671:9: ( super_key )
        // src/main/resources/org/drools/lang/DRL.g:1671:10: super_key
        {
        pushFollow(FOLLOW_super_key_in_synpred55_DRL7756);
        super_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_DRL

    // $ANTLR start synpred56_DRL
    public final void synpred56_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1672:9: ( new_key )
        // src/main/resources/org/drools/lang/DRL.g:1672:10: new_key
        {
        pushFollow(FOLLOW_new_key_in_synpred56_DRL7773);
        new_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_DRL

    // $ANTLR start synpred57_DRL
    public final void synpred57_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1673:9: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1673:10: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred57_DRL7790);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_DRL

    // $ANTLR start synpred58_DRL
    public final void synpred58_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1675:9: ( inlineMapExpression )
        // src/main/resources/org/drools/lang/DRL.g:1675:10: inlineMapExpression
        {
        pushFollow(FOLLOW_inlineMapExpression_in_synpred58_DRL7821);
        inlineMapExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_DRL

    // $ANTLR start synpred59_DRL
    public final void synpred59_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1676:9: ( inlineListExpression )
        // src/main/resources/org/drools/lang/DRL.g:1676:10: inlineListExpression
        {
        pushFollow(FOLLOW_inlineListExpression_in_synpred59_DRL7836);
        inlineListExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_DRL

    // $ANTLR start synpred60_DRL
    public final void synpred60_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1677:9: ( ID )
        // src/main/resources/org/drools/lang/DRL.g:1677:10: ID
        {
        match(input,ID,FOLLOW_ID_in_synpred60_DRL7851); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_DRL

    // $ANTLR start synpred61_DRL
    public final void synpred61_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1677:19: ( DOT ID )
        // src/main/resources/org/drools/lang/DRL.g:1677:20: DOT ID
        {
        match(input,DOT,FOLLOW_DOT_in_synpred61_DRL7858); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred61_DRL7860); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_DRL

    // $ANTLR start synpred62_DRL
    public final void synpred62_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1677:39: ( identifierSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1677:40: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred62_DRL7871);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_DRL

    // $ANTLR start synpred64_DRL
    public final void synpred64_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1703:8: ( LEFT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1703:9: LEFT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred64_DRL8042); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_DRL

    // $ANTLR start synpred66_DRL
    public final void synpred66_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1730:107: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1730:108: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred66_DRL8224); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred66_DRL8226); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_DRL

    // $ANTLR start synpred67_DRL
    public final void synpred67_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1762:14: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1762:15: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred67_DRL8401); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred67_DRL

    // $ANTLR start synpred68_DRL
    public final void synpred68_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1762:6: ( DOT ID ( ( LEFT_PAREN )=> arguments )? )
        // src/main/resources/org/drools/lang/DRL.g:1762:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
        {
        match(input,DOT,FOLLOW_DOT_in_synpred68_DRL8395); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred68_DRL8397); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1762:13: ( ( LEFT_PAREN )=> arguments )?
        int alt280=2;
        int LA280_0 = input.LA(1);

        if ( (LA280_0==LEFT_PAREN) && (synpred67_DRL())) {
            alt280=1;
        }
        switch (alt280) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1762:14: ( LEFT_PAREN )=> arguments
                {
                pushFollow(FOLLOW_arguments_in_synpred68_DRL8406);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred68_DRL

    // $ANTLR start synpred69_DRL
    public final void synpred69_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1764:6: ( DOT super_key superSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1764:6: DOT super_key superSuffix
        {
        match(input,DOT,FOLLOW_DOT_in_synpred69_DRL8417); if (state.failed) return ;
        pushFollow(FOLLOW_super_key_in_synpred69_DRL8419);
        super_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred69_DRL8421);
        superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_DRL

    // $ANTLR start synpred70_DRL
    public final void synpred70_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1765:6: ( DOT new_key ( nonWildcardTypeArguments )? innerCreator )
        // src/main/resources/org/drools/lang/DRL.g:1765:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
        {
        match(input,DOT,FOLLOW_DOT_in_synpred70_DRL8428); if (state.failed) return ;
        pushFollow(FOLLOW_new_key_in_synpred70_DRL8430);
        new_key();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1765:18: ( nonWildcardTypeArguments )?
        int alt281=2;
        int LA281_0 = input.LA(1);

        if ( (LA281_0==LESS) ) {
            alt281=1;
        }
        switch (alt281) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1765:19: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred70_DRL8433);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_innerCreator_in_synpred70_DRL8437);
        innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_DRL

    // $ANTLR start synpred71_DRL
    public final void synpred71_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1771:15: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1771:16: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred71_DRL8474); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_DRL

    // $ANTLR start synpred72_DRL
    public final void synpred72_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1837:4: ( modifier modifiedClassMember )
        // src/main/resources/org/drools/lang/DRL.g:1837:4: modifier modifiedClassMember
        {
        pushFollow(FOLLOW_modifier_in_synpred72_DRL8885);
        modifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_modifiedClassMember_in_synpred72_DRL8887);
        modifiedClassMember();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_DRL

    // $ANTLR start synpred74_DRL
    public final void synpred74_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1861:4: ( methodDeclaration )
        // src/main/resources/org/drools/lang/DRL.g:1861:4: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred74_DRL9053);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_DRL

    // $ANTLR start synpred75_DRL
    public final void synpred75_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1862:4: ( void_key ID voidMethodDeclaratorRest )
        // src/main/resources/org/drools/lang/DRL.g:1862:4: void_key ID voidMethodDeclaratorRest
        {
        pushFollow(FOLLOW_void_key_in_synpred75_DRL9058);
        void_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred75_DRL9060); if (state.failed) return ;
        pushFollow(FOLLOW_voidMethodDeclaratorRest_in_synpred75_DRL9062);
        voidMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_DRL

    // $ANTLR start synpred76_DRL
    public final void synpred76_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1863:4: ( ID constructorDeclaratorRest )
        // src/main/resources/org/drools/lang/DRL.g:1863:4: ID constructorDeclaratorRest
        {
        match(input,ID,FOLLOW_ID_in_synpred76_DRL9067); if (state.failed) return ;
        pushFollow(FOLLOW_constructorDeclaratorRest_in_synpred76_DRL9069);
        constructorDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_DRL

    // $ANTLR start synpred77_DRL
    public final void synpred77_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1865:4: ( fieldDeclaration )
        // src/main/resources/org/drools/lang/DRL.g:1865:4: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred77_DRL9076);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_DRL

    // $ANTLR start synpred78_DRL
    public final void synpred78_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1867:4: ( interfaceDeclaration )
        // src/main/resources/org/drools/lang/DRL.g:1867:4: interfaceDeclaration
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred78_DRL9084);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred78_DRL

    // $ANTLR start synpred79_DRL
    public final void synpred79_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1962:4: ( modifier modifiedInterfaceMember )
        // src/main/resources/org/drools/lang/DRL.g:1962:4: modifier modifiedInterfaceMember
        {
        pushFollow(FOLLOW_modifier_in_synpred79_DRL9553);
        modifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_modifiedInterfaceMember_in_synpred79_DRL9555);
        modifiedInterfaceMember();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred79_DRL

    // $ANTLR start synpred80_DRL
    public final void synpred80_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:2072:4: ( ID EQUALS_ASSIGN )
        // src/main/resources/org/drools/lang/DRL.g:2072:5: ID EQUALS_ASSIGN
        {
        match(input,ID,FOLLOW_ID_in_synpred80_DRL10065); if (state.failed) return ;
        match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_synpred80_DRL10067); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_DRL

    // Delegated rules

    public final boolean synpred19_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA277 dfa277 = new DFA277(this);
    static final String DFA1_eotS =
        "\13\uffff";
    static final String DFA1_eofS =
        "\1\2\12\uffff";
    static final String DFA1_minS =
        "\2\176\2\uffff\1\0\6\uffff";
    static final String DFA1_maxS =
        "\1\176\1\u009c\2\uffff\1\0\6\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\2\2\1\uffff\5\2\1\1";
    static final String DFA1_specialS =
        "\1\1\1\0\2\uffff\1\2\6\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1",
            "\1\4\2\uffff\1\10\4\uffff\1\11\1\7\4\uffff\1\6\16\uffff\1"+
            "\5\1\3",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "217:4: ( package_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_1 = input.LA(1);

                         
                        int index1_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 3;}

                        else if ( (LA1_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))))) {s = 4;}

                        else if ( (LA1_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 5;}

                        else if ( (LA1_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 6;}

                        else if ( (LA1_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 7;}

                        else if ( (LA1_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 8;}

                        else if ( (LA1_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 9;}

                         
                        input.seek(index1_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_0 = input.LA(1);

                         
                        int index1_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_0==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                        else if ( (LA1_0==EOF) ) {s = 2;}

                         
                        input.seek(index1_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA1_4 = input.LA(1);

                         
                        int index1_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {s = 10;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))))) ) {s = 9;}

                         
                        input.seek(index1_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\20\uffff";
    static final String DFA4_eofS =
        "\20\uffff";
    static final String DFA4_minS =
        "\2\176\4\uffff\2\0\10\uffff";
    static final String DFA4_maxS =
        "\1\176\1\u009c\4\uffff\2\0\10\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\4\1\2\uffff\1\1\1\7\1\10\1\2\1\3\1\4\1\5\1\6";
    static final String DFA4_specialS =
        "\1\0\1\1\4\uffff\1\2\1\3\10\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1",
            "\1\7\2\uffff\1\6\4\uffff\1\10\1\5\4\uffff\1\4\16\uffff\1\3"+
            "\1\2",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "296:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_0 = input.LA(1);

                         
                        int index4_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_0==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                         
                        input.seek(index4_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 2;}

                        else if ( (LA4_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 3;}

                        else if ( (LA4_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 4;}

                        else if ( (LA4_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 5;}

                        else if ( (LA4_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 6;}

                        else if ( (LA4_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))))) {s = 7;}

                        else if ( (LA4_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 8;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 10;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {s = 14;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {s = 15;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 10;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\16\uffff";
    static final String DFA11_eofS =
        "\16\uffff";
    static final String DFA11_minS =
        "\2\176\1\uffff\1\176\1\uffff\1\176\1\u0099\3\176\2\u0099\1\u0085"+
        "\1\176";
    static final String DFA11_maxS =
        "\1\u0087\1\u0088\1\uffff\1\u0098\1\uffff\1\176\1\u0099\3\u0098"+
        "\2\u0099\2\u0098";
    static final String DFA11_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\11\uffff";
    static final String DFA11_specialS =
        "\16\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\2\10\uffff\1\1",
            "\1\3\10\uffff\1\2\1\4",
            "",
            "\1\7\1\5\2\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff"+
            "\1\6",
            "",
            "\1\10",
            "\1\11",
            "\2\2\2\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\12",
            "\1\4\1\5\7\uffff\1\2\20\uffff\1\13",
            "\1\4\6\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\6",
            "\1\14",
            "\1\15",
            "\1\4\1\uffff\1\2\1\4\17\uffff\1\12",
            "\1\4\10\uffff\1\2\20\uffff\1\13"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "379:3: ( parameters )?";
        }
    }
    static final String DFA22_eotS =
        "\13\uffff";
    static final String DFA22_eofS =
        "\13\uffff";
    static final String DFA22_minS =
        "\2\176\3\uffff\1\0\5\uffff";
    static final String DFA22_maxS =
        "\1\u00b8\1\u009c\3\uffff\1\0\5\uffff";
    static final String DFA22_acceptS =
        "\2\uffff\2\2\1\1\1\uffff\5\2";
    static final String DFA22_specialS =
        "\1\0\1\1\3\uffff\1\2\5\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\1\5\uffff\1\2\32\uffff\1\2\30\uffff\1\2",
            "\1\4\2\uffff\1\5\1\12\3\uffff\1\11\1\10\4\uffff\1\7\16\uffff"+
            "\1\6\1\3",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "475:3: ( extend_key rule_id )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA22_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                        else if ( (LA22_0==WHEN||LA22_0==THEN||LA22_0==AT) ) {s = 2;}

                         
                        input.seek(index22_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA22_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 3;}

                        else if ( (LA22_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {s = 4;}

                        else if ( (LA22_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 5;}

                        else if ( (LA22_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 6;}

                        else if ( (LA22_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 7;}

                        else if ( (LA22_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 8;}

                        else if ( (LA22_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 9;}

                        else if ( (LA22_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {s = 10;}

                         
                        input.seek(index22_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_5 = input.LA(1);

                         
                        int index22_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 10;}

                         
                        input.seek(index22_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\17\uffff";
    static final String DFA31_eofS =
        "\17\uffff";
    static final String DFA31_minS =
        "\1\176\1\0\15\uffff";
    static final String DFA31_maxS =
        "\1\176\1\0\15\uffff";
    static final String DFA31_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA31_specialS =
        "\1\0\1\1\15\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "545:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_0 = input.LA(1);

                         
                        int index31_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA31_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                         
                        input.seek(index31_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {s = 2;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {s = 3;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {s = 14;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\12\uffff";
    static final String DFA46_eofS =
        "\12\uffff";
    static final String DFA46_minS =
        "\1\176\1\0\10\uffff";
    static final String DFA46_maxS =
        "\1\u0087\1\0\10\uffff";
    static final String DFA46_acceptS =
        "\2\uffff\1\7\1\1\1\2\1\3\1\4\1\5\1\6\1\10";
    static final String DFA46_specialS =
        "\1\uffff\1\0\10\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "686:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {s = 3;}

                        else if ( (((helper.validateNotWithBinding())&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) ) {s = 4;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\24\uffff";
    static final String DFA54_eofS =
        "\24\uffff";
    static final String DFA54_minS =
        "\1\176\2\uffff\1\0\20\uffff";
    static final String DFA54_maxS =
        "\1\u00af\2\uffff\1\0\20\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\16\uffff\1\3";
    static final String DFA54_specialS =
        "\3\uffff\1\0\20\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\3\2\uffff\1\4\4\uffff\2\4\4\uffff\1\4\1\1\1\2\6\uffff\1"+
            "\4\2\uffff\1\4\1\uffff\5\4\15\uffff\4\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "775:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA74_eotS =
        "\17\uffff";
    static final String DFA74_eofS =
        "\17\uffff";
    static final String DFA74_minS =
        "\2\176\12\uffff\1\0\2\uffff";
    static final String DFA74_maxS =
        "\1\u0087\1\u0098\12\uffff\1\0\2\uffff";
    static final String DFA74_acceptS =
        "\2\uffff\1\3\1\2\12\uffff\1\1";
    static final String DFA74_specialS =
        "\14\uffff\1\0\2\uffff}>";
    static final String[] DFA74_transitionS = {
            "\1\1\10\uffff\1\2",
            "\2\3\2\uffff\1\3\4\uffff\1\14\12\uffff\7\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "990:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_12 = input.LA(1);

                         
                        int index74_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 14;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index74_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA79_eotS =
        "\61\uffff";
    static final String DFA79_eofS =
        "\61\uffff";
    static final String DFA79_minS =
        "\2\176\10\uffff\1\176\10\uffff\1\4\12\uffff\1\0\5\uffff\12\0\3"+
        "\uffff";
    static final String DFA79_maxS =
        "\1\u0097\1\u009e\10\uffff\1\u009e\10\uffff\1\u00c7\12\uffff\1\0"+
        "\5\uffff\12\0\3\uffff";
    static final String DFA79_acceptS =
        "\2\uffff\1\2\5\uffff\1\3\1\2\12\uffff\2\2\11\uffff\1\2\20\uffff"+
        "\1\1";
    static final String DFA79_specialS =
        "\1\0\1\1\10\uffff\1\2\10\uffff\1\3\12\uffff\1\4\5\uffff\1\5\1\6"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1\10\uffff\1\10\12\uffff\6\2",
            "\1\12\2\uffff\1\11\4\uffff\1\11\1\23\4\uffff\1\11\13\uffff"+
            "\1\11\1\uffff\5\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\25\1\37\1\uffff\1\25\3\uffff\1\37\1\25\1\36\1\37\3\uffff"+
            "\1\25\2\uffff\2\37\7\uffff\1\24\1\uffff\5\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\172\37\1\44\2\37\1\45\4\37\1\53\1\55\4\37\1\50\15\37\1\54"+
            "\1\46\1\47\1\51\1\52\51\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "1054:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_0 = input.LA(1);

                         
                        int index79_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {s = 1;}

                        else if ( ((LA79_0>=EQUALS && LA79_0<=NOT_EQUALS)) ) {s = 2;}

                        else if ( (LA79_0==LEFT_PAREN) ) {s = 8;}

                         
                        input.seek(index79_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA79_1 = input.LA(1);

                         
                        int index79_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_1==STRING||LA79_1==BOOL||LA79_1==DECIMAL||LA79_1==LEFT_SQUARE||(LA79_1>=NULL && LA79_1<=FLOAT)) && (((helper.isPluggableEvaluator(false))))) {s = 9;}

                        else if ( (LA79_1==ID) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {s = 10;}

                        else if ( (LA79_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 19;}

                         
                        input.seek(index79_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA79_10 = input.LA(1);

                         
                        int index79_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_10==LEFT_SQUARE) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {s = 20;}

                        else if ( (LA79_10==ID||LA79_10==STRING||LA79_10==BOOL||LA79_10==DECIMAL||(LA79_10>=NULL && LA79_10<=FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 21;}

                        else if ( (LA79_10==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 30;}

                        else if ( (LA79_10==DOT||LA79_10==COMMA||LA79_10==RIGHT_PAREN||(LA79_10>=DOUBLE_PIPE && LA79_10<=DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {s = 31;}

                         
                        input.seek(index79_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA79_19 = input.LA(1);

                         
                        int index79_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_19==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 36;}

                        else if ( (LA79_19==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 37;}

                        else if ( (LA79_19==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 38;}

                        else if ( (LA79_19==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 39;}

                        else if ( (LA79_19==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 40;}

                        else if ( (LA79_19==HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 41;}

                        else if ( (LA79_19==FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 42;}

                        else if ( (LA79_19==BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 43;}

                        else if ( (LA79_19==NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 44;}

                        else if ( (LA79_19==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 45;}

                        else if ( ((LA79_19>=VT_COMPILATION_UNIT && LA79_19<=SEMICOLON)||(LA79_19>=DOT && LA79_19<=DOT_STAR)||(LA79_19>=COLON && LA79_19<=COMMA)||(LA79_19>=RIGHT_PAREN && LA79_19<=TimePeriod)||(LA79_19>=ACCUMULATE && LA79_19<=RIGHT_SQUARE)||(LA79_19>=THEN && LA79_19<=MISC)) && (((helper.isPluggableEvaluator(false))))) {s = 31;}

                         
                        input.seek(index79_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA79_30 = input.LA(1);

                         
                        int index79_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 48;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 31;}

                         
                        input.seek(index79_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA79_36 = input.LA(1);

                         
                        int index79_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_36);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA79_37 = input.LA(1);

                         
                        int index79_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_37);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA79_38 = input.LA(1);

                         
                        int index79_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_38);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA79_39 = input.LA(1);

                         
                        int index79_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_39);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA79_40 = input.LA(1);

                         
                        int index79_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_40);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA79_41 = input.LA(1);

                         
                        int index79_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_41);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA79_42 = input.LA(1);

                         
                        int index79_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_42);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA79_43 = input.LA(1);

                         
                        int index79_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_43);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA79_44 = input.LA(1);

                         
                        int index79_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA79_45 = input.LA(1);

                         
                        int index79_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index79_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\10\uffff";
    static final String DFA83_eofS =
        "\10\uffff";
    static final String DFA83_minS =
        "\1\u0098\2\4\1\uffff\1\0\1\4\1\uffff\1\4";
    static final String DFA83_maxS =
        "\1\u0098\2\u00c7\1\uffff\1\0\1\u00c7\1\uffff\1\u00c7";
    static final String DFA83_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA83_specialS =
        "\4\uffff\1\0\3\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\1",
            "\u0087\3\1\2\74\3",
            "\u0081\3\1\5\23\3\1\4\56\3",
            "",
            "\1\uffff",
            "\u0087\3\1\7\74\3",
            "",
            "\u0081\3\1\5\23\3\1\4\56\3"
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "1121:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_4 = input.LA(1);

                         
                        int index83_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_DRL()) ) {s = 6;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index83_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\60\uffff";
    static final String DFA107_eofS =
        "\1\2\57\uffff";
    static final String DFA107_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA107_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA107_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA107_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA107_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\1\1\1\uffff\22\2\3\uffff\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "1355:9: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\60\uffff";
    static final String DFA108_eofS =
        "\1\2\57\uffff";
    static final String DFA108_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA108_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA108_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA108_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA108_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\1\1\1\uffff\22\2\3\uffff\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "1355:51: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_1 = input.LA(1);

                         
                        int index108_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\6\uffff";
    static final String DFA120_eofS =
        "\6\uffff";
    static final String DFA120_minS =
        "\2\176\1\uffff\1\u0099\1\uffff\1\176";
    static final String DFA120_maxS =
        "\1\176\1\u0098\1\uffff\1\u0099\1\uffff\1\u0098";
    static final String DFA120_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA120_specialS =
        "\6\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\1",
            "\2\2\5\uffff\1\4\2\uffff\1\4\17\uffff\1\3",
            "",
            "\1\5",
            "",
            "\1\2\6\uffff\1\4\2\uffff\1\4\17\uffff\1\3"
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "1388:4: ( data_type )?";
        }
    }
    static final String DFA124_eotS =
        "\24\uffff";
    static final String DFA124_eofS =
        "\24\uffff";
    static final String DFA124_minS =
        "\1\175\1\0\22\uffff";
    static final String DFA124_maxS =
        "\1\u00af\1\0\22\uffff";
    static final String DFA124_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA124_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\1\uffff\1\2\13\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "1423:1: blockStatement : ( ( final_key )=> localVariableDeclaration | rhs_statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_1 = input.LA(1);

                         
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||synpred16_DRL()||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))))) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\7\uffff";
    static final String DFA125_eofS =
        "\7\uffff";
    static final String DFA125_minS =
        "\2\176\1\uffff\1\175\1\uffff\1\u0099\1\175";
    static final String DFA125_maxS =
        "\1\176\1\u0098\1\uffff\1\u0098\1\uffff\1\u0099\1\u0098";
    static final String DFA125_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\2\uffff";
    static final String DFA125_specialS =
        "\3\uffff\1\0\2\uffff\1\1}>";
    static final String[] DFA125_transitionS = {
            "\1\1",
            "\1\3\1\2\25\uffff\1\2\2\uffff\1\2",
            "",
            "\1\2\2\4\3\uffff\1\2\1\uffff\1\2\17\uffff\1\4\2\uffff\1\5",
            "",
            "\1\6",
            "\1\2\1\4\4\uffff\1\2\1\uffff\1\2\22\uffff\1\5"
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "()* loopback of 1434:2: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA125_3>=ID && LA125_3<=DOT)||LA125_3==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                        else if ( (LA125_3==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA125_3==SEMICOLON||LA125_3==EQUALS_ASSIGN||LA125_3==COMMA) ) {s = 2;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                        else if ( (LA125_6==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA125_6==SEMICOLON||LA125_6==EQUALS_ASSIGN||LA125_6==COMMA) ) {s = 2;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\41\uffff";
    static final String DFA137_eofS =
        "\41\uffff";
    static final String DFA137_minS =
        "\1\175\1\uffff\1\0\36\uffff";
    static final String DFA137_maxS =
        "\1\u00af\1\uffff\1\0\36\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\1\1\uffff\1\15\1\16\16\uffff\1\2\1\3\1\4\1\5\1\6\1\7"+
        "\1\10\1\11\1\12\1\13\1\14\1\17\1\20\1\21";
    static final String DFA137_specialS =
        "\2\uffff\1\0\36\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\3\1\2\2\uffff\1\4\4\uffff\2\4\4\uffff\1\4\10\uffff\1\4\2"+
            "\uffff\1\4\1\uffff\5\4\1\uffff\1\1\13\uffff\4\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "1465:1: rhs_statement options {backtrack=true; memoize=true; } : ( block | if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? | for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement | while_key parExpression rhs_statement | do_key rhs_statement while_key parExpression SEMICOLON | try_key block ( catches finally_key block | catches | finally_key block ) | switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY | synchronized_key parExpression block | return_key ( expression )? SEMICOLON | throw_key expression SEMICOLON | break_key ( ID )? SEMICOLON | continue_key ( ID )? SEMICOLON | SEMICOLON | expression SEMICOLON | ID COLON rhs_statement | modifyStatement | assert_key expression ( COLON expression )? SEMICOLON );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_2 = input.LA(1);

                         
                        int index137_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred18_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.IF))))) ) {s = 19;}

                        else if ( ((synpred19_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FOR))))) ) {s = 20;}

                        else if ( ((synpred20_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.WHILE))))) ) {s = 21;}

                        else if ( ((synpred21_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DO))))) ) {s = 22;}

                        else if ( ((synpred22_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.TRY))))) ) {s = 23;}

                        else if ( ((synpred23_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH))))) ) {s = 24;}

                        else if ( ((synpred24_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))))) ) {s = 25;}

                        else if ( ((synpred25_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.RETURN))))) ) {s = 26;}

                        else if ( ((synpred26_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.THROW))))) ) {s = 27;}

                        else if ( ((synpred27_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BREAK))))) ) {s = 28;}

                        else if ( ((synpred28_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE))))) ) {s = 29;}

                        else if ( (((synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||synpred30_DRL()||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NEW))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))))) ) {s = 4;}

                        else if ( (synpred31_DRL()) ) {s = 30;}

                        else if ( ((synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY))))) ) {s = 31;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT)))) ) {s = 32;}

                         
                        input.seek(index137_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\26\uffff";
    static final String DFA131_eofS =
        "\1\2\25\uffff";
    static final String DFA131_minS =
        "\1\175\1\0\24\uffff";
    static final String DFA131_maxS =
        "\1\u00af\1\0\24\uffff";
    static final String DFA131_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA131_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\1\uffff\2\2\12\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "1468:42: ( options {k=1; } : else_key rhs_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_1 = input.LA(1);

                         
                        int index131_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE)))) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\23\uffff";
    static final String DFA141_eofS =
        "\23\uffff";
    static final String DFA141_minS =
        "\1\175\1\0\21\uffff";
    static final String DFA141_maxS =
        "\1\u00af\1\0\21\uffff";
    static final String DFA141_acceptS =
        "\2\uffff\1\2\17\uffff\1\1";
    static final String DFA141_specialS =
        "\1\uffff\1\0\21\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\15\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "1495:1: forControl options {backtrack=true; memoize=true; } : ( forVarControl | ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||synpred33_DRL()||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))))) ) {s = 18;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\22\uffff";
    static final String DFA143_eofS =
        "\22\uffff";
    static final String DFA143_minS =
        "\1\176\1\0\20\uffff";
    static final String DFA143_maxS =
        "\1\u00af\1\0\20\uffff";
    static final String DFA143_acceptS =
        "\2\uffff\1\2\16\uffff\1\1";
    static final String DFA143_specialS =
        "\1\uffff\1\0\20\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\5\2\15\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "1501:1: forInit options {backtrack=true; memoize=true; } : ( ( variableModifier )* type variableDeclarators | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||synpred34_DRL()||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))))) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA142_eotS =
        "\7\uffff";
    static final String DFA142_eofS =
        "\7\uffff";
    static final String DFA142_minS =
        "\2\176\1\175\1\uffff\1\u0099\1\uffff\1\175";
    static final String DFA142_maxS =
        "\1\176\2\u0098\1\uffff\1\u0099\1\uffff\1\u0098";
    static final String DFA142_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\1\uffff";
    static final String DFA142_specialS =
        "\2\uffff\1\0\3\uffff\1\1}>";
    static final String[] DFA142_transitionS = {
            "\1\1",
            "\1\2\1\3\25\uffff\1\3\2\uffff\1\3",
            "\1\3\2\5\3\uffff\1\3\1\uffff\1\3\17\uffff\1\5\2\uffff\1\4",
            "",
            "\1\6",
            "",
            "\1\3\1\5\4\uffff\1\3\1\uffff\1\3\22\uffff\1\4"
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "()* loopback of 1503:4: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_2 = input.LA(1);

                         
                        int index142_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_2==LEFT_SQUARE) ) {s = 4;}

                        else if ( ((LA142_2>=ID && LA142_2<=DOT)||LA142_2==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                        else if ( (LA142_2==SEMICOLON||LA142_2==EQUALS_ASSIGN||LA142_2==COMMA) ) {s = 3;}

                         
                        input.seek(index142_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA142_6 = input.LA(1);

                         
                        int index142_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_6==SEMICOLON||LA142_6==EQUALS_ASSIGN||LA142_6==COMMA) ) {s = 3;}

                        else if ( (LA142_6==LEFT_SQUARE) ) {s = 4;}

                        else if ( (LA142_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                         
                        input.seek(index142_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA145_eotS =
        "\26\uffff";
    static final String DFA145_eofS =
        "\1\2\25\uffff";
    static final String DFA145_minS =
        "\1\175\1\0\24\uffff";
    static final String DFA145_maxS =
        "\1\u00af\1\0\24\uffff";
    static final String DFA145_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA145_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\1\uffff\2\2\12\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()* loopback of 1518:16: ( catchClause )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\7\uffff";
    static final String DFA146_eofS =
        "\7\uffff";
    static final String DFA146_minS =
        "\2\176\1\uffff\1\176\1\uffff\1\u0099\1\176";
    static final String DFA146_maxS =
        "\1\176\1\u0098\1\uffff\1\u0098\1\uffff\1\u0099\1\u0098";
    static final String DFA146_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\2\uffff";
    static final String DFA146_specialS =
        "\3\uffff\1\1\2\uffff\1\0}>";
    static final String[] DFA146_transitionS = {
            "\1\1",
            "\1\3\1\2\25\uffff\1\2\2\uffff\1\2",
            "",
            "\2\4\10\uffff\1\2\14\uffff\1\4\2\uffff\1\5",
            "",
            "\1\6",
            "\1\4\11\uffff\1\2\17\uffff\1\5"
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "()* loopback of 1526:4: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                        else if ( (LA146_6==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA146_6==RIGHT_PAREN) ) {s = 2;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA146_3>=ID && LA146_3<=DOT)||LA146_3==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                        else if ( (LA146_3==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA146_3==RIGHT_PAREN) ) {s = 2;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\24\uffff";
    static final String DFA148_eofS =
        "\24\uffff";
    static final String DFA148_minS =
        "\1\175\1\uffff\1\0\21\uffff";
    static final String DFA148_maxS =
        "\1\u00af\1\uffff\1\0\21\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\20\uffff";
    static final String DFA148_specialS =
        "\1\0\1\uffff\1\1\21\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\3\1\2\2\uffff\1\3\4\uffff\2\3\4\uffff\1\3\10\uffff\1\3\2"+
            "\uffff\1\3\1\uffff\5\3\1\uffff\1\3\1\1\12\uffff\4\3",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "()* loopback of 1536:16: ( blockStatement )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_0 = input.LA(1);

                         
                        int index148_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA148_0==RIGHT_CURLY) ) {s = 1;}

                        else if ( (LA148_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))))) {s = 2;}

                        else if ( (LA148_0==SEMICOLON||LA148_0==STRING||(LA148_0>=BOOL && LA148_0<=LEFT_PAREN)||LA148_0==DECIMAL||LA148_0==LESS||LA148_0==LEFT_SQUARE||(LA148_0>=NULL && LA148_0<=FLOAT)||LA148_0==LEFT_CURLY||(LA148_0>=INCR && LA148_0<=NEGATION)) ) {s = 3;}

                         
                        input.seek(index148_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_2 = input.LA(1);

                         
                        int index148_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))))) ) {s = 3;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) ) {s = 1;}

                         
                        input.seek(index148_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\17\uffff";
    static final String DFA152_eofS =
        "\1\15\16\uffff";
    static final String DFA152_minS =
        "\1\175\14\0\2\uffff";
    static final String DFA152_maxS =
        "\1\u00b7\14\0\2\uffff";
    static final String DFA152_acceptS =
        "\15\uffff\1\2\1\1";
    static final String DFA152_specialS =
        "\1\uffff\1\3\1\12\1\11\1\10\1\5\1\7\1\1\1\13\1\4\1\2\1\0\1\6\2"+
        "\uffff}>";
    static final String[] DFA152_transitionS = {
            "\2\15\2\uffff\2\15\1\1\1\uffff\4\15\3\uffff\1\15\10\uffff\1"+
            "\15\2\uffff\10\15\1\uffff\1\15\4\uffff\1\12\1\14\1\13\3\uffff"+
            "\4\15\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "1569:26: ( ( assignmentOperator )=> assignmentOperator expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_11 = input.LA(1);

                         
                        int index152_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA152_7 = input.LA(1);

                         
                        int index152_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA152_10 = input.LA(1);

                         
                        int index152_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA152_1 = input.LA(1);

                         
                        int index152_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA152_9 = input.LA(1);

                         
                        int index152_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA152_5 = input.LA(1);

                         
                        int index152_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA152_12 = input.LA(1);

                         
                        int index152_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA152_6 = input.LA(1);

                         
                        int index152_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA152_4 = input.LA(1);

                         
                        int index152_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA152_8 = input.LA(1);

                         
                        int index152_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index152_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA160_eotS =
        "\55\uffff";
    static final String DFA160_eofS =
        "\1\2\54\uffff";
    static final String DFA160_minS =
        "\1\175\1\0\53\uffff";
    static final String DFA160_maxS =
        "\1\u00b7\1\0\53\uffff";
    static final String DFA160_acceptS =
        "\2\uffff\1\2\51\uffff\1\1";
    static final String DFA160_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\2\1\1\2\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\11\2\1\uffff\10\2\3\uffff\14"+
            "\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "1600:30: ( instanceof_key type )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {s = 44;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\55\uffff";
    static final String DFA161_eofS =
        "\1\1\54\uffff";
    static final String DFA161_minS =
        "\1\175\43\uffff\1\0\10\uffff";
    static final String DFA161_maxS =
        "\1\u00b7\43\uffff\1\0\10\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA161_specialS =
        "\1\0\43\uffff\1\1\10\uffff}>";
    static final String[] DFA161_transitionS = {
            "\2\1\2\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1\uffff"+
            "\1\1\2\54\1\44\1\54\11\1\1\uffff\10\1\3\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "()* loopback of 1604:25: ( ( LESS )=> relationalOp shiftExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_0 = input.LA(1);

                         
                        int index161_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA161_0==EOF||(LA161_0>=SEMICOLON && LA161_0<=ID)||(LA161_0>=STRING && LA161_0<=EQUALS_ASSIGN)||(LA161_0>=COMMA && LA161_0<=RIGHT_PAREN)||LA161_0==DECIMAL||(LA161_0>=DOUBLE_PIPE && LA161_0<=DOUBLE_AMPER)||LA161_0==EQUALS||(LA161_0>=NOT_EQUALS && LA161_0<=THEN)||(LA161_0>=RIGHT_CURLY && LA161_0<=SHIFT_RIGHT)||(LA161_0>=INCR && LA161_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA161_0==LESS) ) {s = 36;}

                        else if ( ((LA161_0>=GREATER && LA161_0<=GREATER_EQUALS)||LA161_0==LESS_EQUALS) && (synpred36_DRL())) {s = 44;}

                         
                        input.seek(index161_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_36 = input.LA(1);

                         
                        int index161_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_DRL()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index161_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\56\uffff";
    static final String DFA163_eofS =
        "\1\1\55\uffff";
    static final String DFA163_minS =
        "\1\175\36\uffff\2\0\15\uffff";
    static final String DFA163_maxS =
        "\1\u00b7\36\uffff\2\0\15\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\2\53\uffff\1\1";
    static final String DFA163_specialS =
        "\37\uffff\1\0\1\1\15\uffff}>";
    static final String[] DFA163_transitionS = {
            "\2\1\2\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1\uffff"+
            "\11\1\1\37\1\40\3\1\1\uffff\10\1\3\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "()* loopback of 1623:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_31 = input.LA(1);

                         
                        int index163_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_DRL()) ) {s = 45;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_31);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA163_32 = input.LA(1);

                         
                        int index163_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_DRL()) ) {s = 45;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\16\uffff";
    static final String DFA168_eofS =
        "\16\uffff";
    static final String DFA168_minS =
        "\1\176\2\uffff\1\0\12\uffff";
    static final String DFA168_maxS =
        "\1\u00af\2\uffff\1\0\12\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\10\uffff\1\3";
    static final String DFA168_specialS =
        "\3\uffff\1\0\12\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\4\2\uffff\1\4\4\uffff\1\4\1\3\4\uffff\1\4\10\uffff\1\4\2"+
            "\uffff\1\4\1\uffff\1\4\2\uffff\2\4\17\uffff\1\1\1\2",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "1638:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_3 = input.LA(1);

                         
                        int index168_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_DRL()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index168_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\57\uffff";
    static final String DFA166_eofS =
        "\1\1\56\uffff";
    static final String DFA166_minS =
        "\1\175\54\uffff\1\0\1\uffff";
    static final String DFA166_maxS =
        "\1\u00b7\54\uffff\1\0\1\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA166_specialS =
        "\1\0\54\uffff\1\1\1\uffff}>";
    static final String[] DFA166_transitionS = {
            "\2\1\1\56\1\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\6\1\1\55\7\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "()* loopback of 1643:17: ( ( selector )=> selector )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_0 = input.LA(1);

                         
                        int index166_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA166_0==EOF||(LA166_0>=SEMICOLON && LA166_0<=ID)||(LA166_0>=STRING && LA166_0<=EQUALS_ASSIGN)||(LA166_0>=COMMA && LA166_0<=RIGHT_PAREN)||LA166_0==DECIMAL||(LA166_0>=DOUBLE_PIPE && LA166_0<=DOUBLE_AMPER)||(LA166_0>=EQUALS && LA166_0<=NOT_EQUALS)||(LA166_0>=RIGHT_SQUARE && LA166_0<=THEN)||(LA166_0>=RIGHT_CURLY && LA166_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA166_0==LEFT_SQUARE) ) {s = 45;}

                        else if ( (LA166_0==DOT) && (synpred41_DRL())) {s = 46;}

                         
                        input.seek(index166_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA166_45 = input.LA(1);

                         
                        int index166_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index166_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA167_eotS =
        "\57\uffff";
    static final String DFA167_eofS =
        "\1\2\56\uffff";
    static final String DFA167_minS =
        "\1\175\1\0\41\uffff\1\0\13\uffff";
    static final String DFA167_maxS =
        "\1\u00b7\1\0\41\uffff\1\0\13\uffff";
    static final String DFA167_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA167_specialS =
        "\1\uffff\1\0\41\uffff\1\1\13\uffff}>";
    static final String[] DFA167_transitionS = {
            "\2\2\2\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\16\2\1\uffff\13\2\1\1\1\43\12\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "1643:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_1 = input.LA(1);

                         
                        int index167_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index167_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA167_35 = input.LA(1);

                         
                        int index167_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index167_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA170_eotS =
        "\12\uffff";
    static final String DFA170_eofS =
        "\12\uffff";
    static final String DFA170_minS =
        "\1\176\1\0\10\uffff";
    static final String DFA170_maxS =
        "\1\176\1\0\10\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA170_specialS =
        "\1\1\1\0\10\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "1653:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_1 = input.LA(1);

                         
                        int index170_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred45_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) ) {s = 2;}

                        else if ( ((synpred46_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {s = 3;}

                        else if ( ((synpred47_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))) ) {s = 4;}

                        else if ( ((synpred48_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))) ) {s = 5;}

                        else if ( ((synpred49_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) ) {s = 6;}

                        else if ( ((synpred50_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))) ) {s = 7;}

                        else if ( ((synpred51_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {s = 9;}

                         
                        input.seek(index170_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_0 = input.LA(1);

                         
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {s = 1;}

                         
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA175_eotS =
        "\21\uffff";
    static final String DFA175_eofS =
        "\21\uffff";
    static final String DFA175_minS =
        "\1\176\10\uffff\2\0\6\uffff";
    static final String DFA175_maxS =
        "\1\u009e\10\uffff\2\0\6\uffff";
    static final String DFA175_acceptS =
        "\1\uffff\1\1\1\2\6\3\2\uffff\1\4\1\5\1\6\1\11\1\7\1\10";
    static final String DFA175_specialS =
        "\1\0\10\uffff\1\1\1\2\6\uffff}>";
    static final String[] DFA175_transitionS = {
            "\1\11\2\uffff\1\3\4\uffff\1\7\1\1\4\uffff\1\4\10\uffff\1\2"+
            "\2\uffff\1\12\1\uffff\1\10\2\uffff\1\5\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "1665:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_0 = input.LA(1);

                         
                        int index175_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA175_0==LEFT_PAREN) && (synpred52_DRL())) {s = 1;}

                        else if ( (LA175_0==LESS) && (synpred53_DRL())) {s = 2;}

                        else if ( (LA175_0==STRING) && (synpred54_DRL())) {s = 3;}

                        else if ( (LA175_0==DECIMAL) && (synpred54_DRL())) {s = 4;}

                        else if ( (LA175_0==HEX) && (synpred54_DRL())) {s = 5;}

                        else if ( (LA175_0==FLOAT) && (synpred54_DRL())) {s = 6;}

                        else if ( (LA175_0==BOOL) && (synpred54_DRL())) {s = 7;}

                        else if ( (LA175_0==NULL) && (synpred54_DRL())) {s = 8;}

                        else if ( (LA175_0==ID) ) {s = 9;}

                        else if ( (LA175_0==LEFT_SQUARE) ) {s = 10;}

                         
                        input.seek(index175_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA175_9 = input.LA(1);

                         
                        int index175_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred55_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) ) {s = 11;}

                        else if ( ((synpred56_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NEW))))) ) {s = 12;}

                        else if ( (((synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))))) ) {s = 13;}

                        else if ( (synpred60_DRL()) ) {s = 14;}

                         
                        input.seek(index175_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA175_10 = input.LA(1);

                         
                        int index175_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_DRL()) ) {s = 15;}

                        else if ( (synpred59_DRL()) ) {s = 16;}

                         
                        input.seek(index175_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA174_eotS =
        "\60\uffff";
    static final String DFA174_eofS =
        "\1\3\57\uffff";
    static final String DFA174_minS =
        "\1\175\2\0\55\uffff";
    static final String DFA174_maxS =
        "\1\u00b7\2\0\55\uffff";
    static final String DFA174_acceptS =
        "\3\uffff\1\2\53\uffff\1\1";
    static final String DFA174_specialS =
        "\1\uffff\1\0\1\1\55\uffff}>";
    static final String[] DFA174_transitionS = {
            "\3\3\1\uffff\3\3\1\uffff\2\3\1\2\1\3\3\uffff\1\3\2\uffff\2"+
            "\3\1\uffff\6\3\1\1\7\3\1\uffff\27\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "1677:38: ( ( identifierSuffix )=> identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA174_1 = input.LA(1);

                         
                        int index174_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index174_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA174_2 = input.LA(1);

                         
                        int index174_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index174_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA180_eotS =
        "\60\uffff";
    static final String DFA180_eofS =
        "\1\1\57\uffff";
    static final String DFA180_minS =
        "\1\175\54\uffff\1\0\2\uffff";
    static final String DFA180_maxS =
        "\1\u00b7\54\uffff\1\0\2\uffff";
    static final String DFA180_acceptS =
        "\1\uffff\1\2\55\uffff\1\1";
    static final String DFA180_specialS =
        "\55\uffff\1\0\2\uffff}>";
    static final String[] DFA180_transitionS = {
            "\3\1\1\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1\uffff"+
            "\6\1\1\55\7\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1703:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA180_45 = input.LA(1);

                         
                        int index180_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index180_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA189_eotS =
        "\60\uffff";
    static final String DFA189_eofS =
        "\1\2\57\uffff";
    static final String DFA189_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA189_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA189_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA189_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA189_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\6\2\1\1\7\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA189_eot = DFA.unpackEncodedString(DFA189_eotS);
    static final short[] DFA189_eof = DFA.unpackEncodedString(DFA189_eofS);
    static final char[] DFA189_min = DFA.unpackEncodedStringToUnsignedChars(DFA189_minS);
    static final char[] DFA189_max = DFA.unpackEncodedStringToUnsignedChars(DFA189_maxS);
    static final short[] DFA189_accept = DFA.unpackEncodedString(DFA189_acceptS);
    static final short[] DFA189_special = DFA.unpackEncodedString(DFA189_specialS);
    static final short[][] DFA189_transition;

    static {
        int numStates = DFA189_transitionS.length;
        DFA189_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA189_transition[i] = DFA.unpackEncodedString(DFA189_transitionS[i]);
        }
    }

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = DFA189_eot;
            this.eof = DFA189_eof;
            this.min = DFA189_min;
            this.max = DFA189_max;
            this.accept = DFA189_accept;
            this.special = DFA189_special;
            this.transition = DFA189_transition;
        }
        public String getDescription() {
            return "()* loopback of 1730:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_1 = input.LA(1);

                         
                        int index189_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!helper.validateLT(2,"]"))) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index189_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA198_eotS =
        "\60\uffff";
    static final String DFA198_eofS =
        "\1\2\57\uffff";
    static final String DFA198_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA198_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA198_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA198_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA198_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2\2\uffff\2"+
            "\2\1\uffff\16\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "1762:13: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA201_eotS =
        "\60\uffff";
    static final String DFA201_eofS =
        "\1\2\57\uffff";
    static final String DFA201_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA201_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA201_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA201_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA201_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2\2\uffff\2"+
            "\2\1\uffff\16\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
    static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
    static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
    static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
    static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
    static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
    static final short[][] DFA201_transition;

    static {
        int numStates = DFA201_transitionS.length;
        DFA201_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
        }
    }

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = DFA201_eot;
            this.eof = DFA201_eof;
            this.min = DFA201_min;
            this.max = DFA201_max;
            this.accept = DFA201_accept;
            this.special = DFA201_special;
            this.transition = DFA201_transition;
        }
        public String getDescription() {
            return "1771:14: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA201_1 = input.LA(1);

                         
                        int index201_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index201_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 201, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA205_eotS =
        "\15\uffff";
    static final String DFA205_eofS =
        "\15\uffff";
    static final String DFA205_minS =
        "\1\u0083\14\uffff";
    static final String DFA205_maxS =
        "\1\u00b7\14\uffff";
    static final String DFA205_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA205_specialS =
        "\15\uffff}>";
    static final String[] DFA205_transitionS = {
            "\1\1\42\uffff\1\12\1\14\1\13\7\uffff\1\2\1\3\1\4\1\5\1\6\1"+
            "\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
    static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
    static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
    static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
    static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
    static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
    static final short[][] DFA205_transition;

    static {
        int numStates = DFA205_transitionS.length;
        DFA205_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
        }
    }

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = DFA205_eot;
            this.eof = DFA205_eof;
            this.min = DFA205_min;
            this.max = DFA205_max;
            this.accept = DFA205_accept;
            this.special = DFA205_special;
            this.transition = DFA205_transition;
        }
        public String getDescription() {
            return "1784:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );";
        }
    }
    static final String DFA213_eotS =
        "\16\uffff";
    static final String DFA213_eofS =
        "\16\uffff";
    static final String DFA213_minS =
        "\1\176\1\uffff\1\0\13\uffff";
    static final String DFA213_maxS =
        "\1\u00b8\1\uffff\1\0\13\uffff";
    static final String DFA213_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14";
    static final String DFA213_specialS =
        "\1\1\1\uffff\1\0\13\uffff}>";
    static final String[] DFA213_transitionS = {
            "\1\2\71\uffff\1\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_eotS);
    static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_eofS);
    static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_minS);
    static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_maxS);
    static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_acceptS);
    static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_specialS);
    static final short[][] DFA213_transition;

    static {
        int numStates = DFA213_transitionS.length;
        DFA213_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
        }
    }

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = DFA213_eot;
            this.eof = DFA213_eof;
            this.min = DFA213_min;
            this.max = DFA213_max;
            this.accept = DFA213_accept;
            this.special = DFA213_special;
            this.transition = DFA213_transition;
        }
        public String getDescription() {
            return "1842:1: modifier : ( annotation | public_key | protected_key | private_key | static_key | abstract_key | final_key | native_key | synchronized_key | transient_key | volatile_key | strictfp_key );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA213_2 = input.LA(1);

                         
                        int index213_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))) ) {s = 3;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))) ) {s = 4;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))) ) {s = 13;}

                         
                        input.seek(index213_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA213_0 = input.LA(1);

                         
                        int index213_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_0==AT) ) {s = 1;}

                        else if ( (LA213_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 2;}

                         
                        input.seek(index213_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA264_eotS =
        "\56\uffff";
    static final String DFA264_eofS =
        "\56\uffff";
    static final String DFA264_minS =
        "\3\176\1\175\2\uffff\1\176\1\175\1\176\2\uffff\1\u0099\1\uffff"+
        "\1\176\3\uffff\1\0\5\uffff\1\176\1\uffff\1\175\2\uffff\2\176\5\uffff"+
        "\1\176\2\uffff\1\175\7\uffff";
    static final String DFA264_maxS =
        "\2\u00b8\1\176\1\u00b8\2\uffff\2\u00b8\1\u00a2\2\uffff\1\u0099"+
        "\1\uffff\1\u00b8\3\uffff\1\0\5\uffff\1\u0098\1\uffff\1\u0098\2\uffff"+
        "\1\u00a2\1\u00a0\5\uffff\1\u0098\2\uffff\1\u0098\7\uffff";
    static final String DFA264_acceptS =
        "\4\uffff\1\1\1\2\3\uffff\1\2\1\1\1\uffff\1\2\1\uffff\3\1\1\uffff"+
        "\5\1\1\uffff\1\1\1\uffff\1\1\1\2\2\uffff\3\1\1\2\1\1\1\uffff\2\1"+
        "\1\uffff\1\2\1\1\1\2\3\1\1\2";
    static final String DFA264_specialS =
        "\1\uffff\1\11\1\uffff\1\7\3\uffff\1\3\1\0\10\uffff\1\12\5\uffff"+
        "\1\10\1\uffff\1\6\2\uffff\1\1\1\4\5\uffff\1\5\2\uffff\1\2\7\uffff}>";
    static final String[] DFA264_transitionS = {
            "\1\1\71\uffff\1\2",
            "\1\3\1\5\25\uffff\1\5\2\uffff\1\5\37\uffff\1\4",
            "\1\6",
            "\1\14\1\7\1\12\3\uffff\1\14\1\uffff\1\14\1\uffff\1\5\15\uffff"+
            "\1\10\2\uffff\1\13\7\uffff\1\11\27\uffff\1\4",
            "",
            "",
            "\1\15\1\16\7\uffff\1\16\60\uffff\1\16",
            "\1\26\1\21\1\12\3\uffff\1\24\1\uffff\1\25\1\uffff\1\17\15"+
            "\uffff\1\20\2\uffff\1\23\7\uffff\1\22\27\uffff\1\4",
            "\1\27\43\uffff\1\30",
            "",
            "",
            "\1\31",
            "",
            "\2\32\25\uffff\1\32\2\uffff\1\32\7\uffff\1\14\27\uffff\1\32",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\33\1\40\5\uffff\1\34\15\uffff\1\35\1\uffff\1\37\2\uffff"+
            "\1\36",
            "",
            "\1\41\1\42\4\uffff\1\41\1\uffff\1\41\22\uffff\1\13",
            "",
            "",
            "\1\43\43\uffff\1\44",
            "\1\46\1\12\30\uffff\1\45\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "\1\51\1\53\5\uffff\1\34\15\uffff\1\35\1\uffff\1\52\2\uffff"+
            "\1\50",
            "",
            "",
            "\1\26\1\55\4\uffff\1\24\1\uffff\1\25\1\uffff\1\17\20\uffff"+
            "\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA264_eot = DFA.unpackEncodedString(DFA264_eotS);
    static final short[] DFA264_eof = DFA.unpackEncodedString(DFA264_eofS);
    static final char[] DFA264_min = DFA.unpackEncodedStringToUnsignedChars(DFA264_minS);
    static final char[] DFA264_max = DFA.unpackEncodedStringToUnsignedChars(DFA264_maxS);
    static final short[] DFA264_accept = DFA.unpackEncodedString(DFA264_acceptS);
    static final short[] DFA264_special = DFA.unpackEncodedString(DFA264_specialS);
    static final short[][] DFA264_transition;

    static {
        int numStates = DFA264_transitionS.length;
        DFA264_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA264_transition[i] = DFA.unpackEncodedString(DFA264_transitionS[i]);
        }
    }

    class DFA264 extends DFA {

        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = DFA264_eot;
            this.eof = DFA264_eof;
            this.min = DFA264_min;
            this.max = DFA264_max;
            this.accept = DFA264_accept;
            this.special = DFA264_special;
            this.transition = DFA264_transition;
        }
        public String getDescription() {
            return "()* loopback of 2101:4: ( modifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA264_8 = input.LA(1);

                         
                        int index264_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_8==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 23;}

                        else if ( (LA264_8==QUESTION) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 24;}

                         
                        input.seek(index264_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA264_28 = input.LA(1);

                         
                        int index264_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_28==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 35;}

                        else if ( (LA264_28==QUESTION) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 36;}

                         
                        input.seek(index264_28);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA264_38 = input.LA(1);

                         
                        int index264_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_38==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 15;}

                        else if ( (LA264_38==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 44;}

                        else if ( (LA264_38==EQUALS_ASSIGN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 20;}

                        else if ( (LA264_38==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 21;}

                        else if ( (LA264_38==SEMICOLON) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 22;}

                        else if ( (LA264_38==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 45;}

                         
                        input.seek(index264_38);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA264_7 = input.LA(1);

                         
                        int index264_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_7==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 15;}

                        else if ( (LA264_7==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 16;}

                        else if ( (LA264_7==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 17;}

                        else if ( (LA264_7==LEFT_CURLY) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 18;}

                        else if ( (LA264_7==AT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 4;}

                        else if ( (LA264_7==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 10;}

                        else if ( (LA264_7==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 19;}

                        else if ( (LA264_7==EQUALS_ASSIGN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 20;}

                        else if ( (LA264_7==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 21;}

                        else if ( (LA264_7==SEMICOLON) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 22;}

                         
                        input.seek(index264_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA264_29 = input.LA(1);

                         
                        int index264_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_29==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 10;}

                        else if ( (LA264_29==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 37;}

                        else if ( (LA264_29==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 38;}

                        else if ( (LA264_29==LEFT_CURLY) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 39;}

                         
                        input.seek(index264_29);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA264_35 = input.LA(1);

                         
                        int index264_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_35==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 40;}

                        else if ( (LA264_35==GREATER) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 29;}

                        else if ( (LA264_35==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 28;}

                        else if ( (LA264_35==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 41;}

                        else if ( (LA264_35==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 42;}

                        else if ( (LA264_35==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 43;}

                         
                        input.seek(index264_35);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA264_25 = input.LA(1);

                         
                        int index264_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_25==SEMICOLON||LA264_25==EQUALS_ASSIGN||LA264_25==COMMA) ) {s = 33;}

                        else if ( (LA264_25==LEFT_SQUARE) ) {s = 11;}

                        else if ( (LA264_25==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 34;}

                         
                        input.seek(index264_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA264_3 = input.LA(1);

                         
                        int index264_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_3==LEFT_PAREN) ) {s = 5;}

                        else if ( (LA264_3==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 7;}

                        else if ( (LA264_3==AT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 4;}

                        else if ( (LA264_3==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 8;}

                        else if ( (LA264_3==LEFT_CURLY) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 9;}

                        else if ( (LA264_3==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 10;}

                        else if ( (LA264_3==LEFT_SQUARE) ) {s = 11;}

                        else if ( (LA264_3==SEMICOLON||LA264_3==EQUALS_ASSIGN||LA264_3==COMMA) ) {s = 12;}

                         
                        input.seek(index264_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA264_23 = input.LA(1);

                         
                        int index264_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_23==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 27;}

                        else if ( (LA264_23==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 28;}

                        else if ( (LA264_23==GREATER) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))))) {s = 29;}

                        else if ( (LA264_23==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 30;}

                        else if ( (LA264_23==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 31;}

                        else if ( (LA264_23==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 32;}

                         
                        input.seek(index264_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA264_1 = input.LA(1);

                         
                        int index264_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA264_1==ID) ) {s = 3;}

                        else if ( (LA264_1==AT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 4;}

                        else if ( (LA264_1==DOT||LA264_1==LESS||LA264_1==LEFT_SQUARE) ) {s = 5;}

                         
                        input.seek(index264_1);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA264_17 = input.LA(1);

                         
                        int index264_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))))) ) {s = 26;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))))) ) {s = 12;}

                         
                        input.seek(index264_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 264, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA277_eotS =
        "\7\uffff";
    static final String DFA277_eofS =
        "\3\uffff\1\2\2\uffff\1\2";
    static final String DFA277_minS =
        "\2\176\1\uffff\1\176\1\u0099\1\uffff\1\176";
    static final String DFA277_maxS =
        "\1\176\1\u0098\1\uffff\1\u0098\1\u0099\1\uffff\1\u0098";
    static final String DFA277_acceptS =
        "\2\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA277_specialS =
        "\3\uffff\1\0\2\uffff\1\1}>";
    static final String[] DFA277_transitionS = {
            "\1\1",
            "\1\3\1\2\25\uffff\1\2\2\uffff\1\2",
            "",
            "\2\5\3\uffff\1\2\1\uffff\1\2\17\uffff\1\5\2\uffff\1\4",
            "\1\6",
            "",
            "\1\5\4\uffff\1\2\1\uffff\1\2\22\uffff\1\4"
    };

    static final short[] DFA277_eot = DFA.unpackEncodedString(DFA277_eotS);
    static final short[] DFA277_eof = DFA.unpackEncodedString(DFA277_eofS);
    static final char[] DFA277_min = DFA.unpackEncodedStringToUnsignedChars(DFA277_minS);
    static final char[] DFA277_max = DFA.unpackEncodedStringToUnsignedChars(DFA277_maxS);
    static final short[] DFA277_accept = DFA.unpackEncodedString(DFA277_acceptS);
    static final short[] DFA277_special = DFA.unpackEncodedString(DFA277_specialS);
    static final short[][] DFA277_transition;

    static {
        int numStates = DFA277_transitionS.length;
        DFA277_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA277_transition[i] = DFA.unpackEncodedString(DFA277_transitionS[i]);
        }
    }

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = DFA277_eot;
            this.eof = DFA277_eof;
            this.min = DFA277_min;
            this.max = DFA277_max;
            this.accept = DFA277_accept;
            this.special = DFA277_special;
            this.transition = DFA277_transition;
        }
        public String getDescription() {
            return "()* loopback of 1503:4: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA277_3 = input.LA(1);

                         
                        int index277_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA277_3==LEFT_SQUARE) ) {s = 4;}

                        else if ( ((LA277_3>=ID && LA277_3<=DOT)||LA277_3==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                        else if ( (LA277_3==EOF||LA277_3==EQUALS_ASSIGN||LA277_3==COMMA) ) {s = 2;}

                         
                        input.seek(index277_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA277_6 = input.LA(1);

                         
                        int index277_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA277_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                        else if ( (LA277_6==LEFT_SQUARE) ) {s = 4;}

                        else if ( (LA277_6==EOF||LA277_6==EQUALS_ASSIGN||LA277_6==COMMA) ) {s = 2;}

                         
                        input.seek(index277_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 277, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_package_statement_in_compilation_unit629 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_resync_in_compilation_unit648 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_statement_in_compilation_unit655 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_resync_in_compilation_unit657 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_key_in_package_statement758 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_packageOrTypeName_in_package_statement762 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_statement764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_attribute_in_statement804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_import_statement_in_statement809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_in_statement828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_statement834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_statement839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_statement844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_in_statement849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_import_statement875 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_import_name_in_import_statement877 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_import_statement880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_function_import_statement920 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_function_key_in_function_import_statement922 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_import_name_in_function_import_statement934 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_import_statement937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_name971 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DOT_in_import_name977 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_import_name981 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DOT_STAR_in_import_name988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_key_in_global1031 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_data_type_in_global1033 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_global_id_in_global1035 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_global1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_id1066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_function1101 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_data_type_in_function1103 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_function_id_in_function1106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parameters_in_function1108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_curly_chunk_in_function1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_id1140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_key_in_query1175 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_query_id_in_query1177 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parameters_in_query1185 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_normal_lhs_block_in_query1194 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_end_key_in_query1201 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_query1203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_id1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_query_id1254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_type_declaration1287 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_declare_id_in_type_declaration1290 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_type_decl_extends_in_type_declaration1292 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_type_decl_implements_in_type_declaration1295 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_decl_metadata_in_type_declaration1300 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_decl_field_in_type_declaration1305 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_decl_method_in_type_declaration1310 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_end_key_in_type_declaration1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_declare_id1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extends_key_in_type_decl_extends1376 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeName_in_type_decl_extends1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_key_in_type_decl_implements1391 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_type_decl_implements1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_decl_metadata1409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_decl_field1429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_decl_field_initialization_in_decl_field1435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_decl_field1441 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_data_type_in_decl_field1447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_decl_metadata_in_decl_field1451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_field_initialization1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_decl_method1519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_decl_method1524 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_decl_method1526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_decl_method1528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_decl_method1533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_decl_method1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_key_in_rule1562 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_rule_id_in_rule1580 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_extend_key_in_rule1589 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_rule_id_in_rule1591 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_decl_metadata_in_rule1595 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_rule_attributes_in_rule1598 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_when_part_in_rule1601 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_rhs_chunk_in_rule1604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_when_part1648 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_COLON_in_when_part1654 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_normal_lhs_block_in_when_part1664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_id1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_rule_id1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_key_in_rule_attributes1722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_rule_attributes1724 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1734 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_rule_attributes1738 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1745 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_salience_in_rule_attribute1784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_in_rule_attribute1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_in_rule_attribute1795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timer_in_rule_attribute1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_in_rule_attribute1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_in_rule_attribute1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_in_rule_attribute1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_in_rule_attribute1827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_in_rule_attribute1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_in_rule_attribute1839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_in_rule_attribute1845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_in_rule_attribute1850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_in_rule_attribute1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_key_in_date_effective1872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_date_effective1877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_key_in_date_expires1891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_date_expires1896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_key_in_enabled1911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_BOOL_in_enabled1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_enabled1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_salience_key_in_salience1955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018001080L});
    public static final BitSet FOLLOW_signed_decimal_in_salience1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_salience1971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_key_in_no_loop1986 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BOOL_in_no_loop1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_key_in_auto_focus2006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BOOL_in_auto_focus2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_key_in_activation_group2028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_activation_group2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_key_in_ruleflow_group2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_ruleflow_group2052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_key_in_agenda_group2066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_agenda_group2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_key_in_timer2086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018001080L});
    public static final BitSet FOLLOW_timer_key_in_timer2089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018001080L});
    public static final BitSet FOLLOW_signed_decimal_in_timer2100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_timer2111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_key_in_calendars2132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_string_list_in_calendars2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_key_in_dialect2148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_dialect2153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_key_in_lock_on_active2171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BOOL_in_lock_on_active2176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_in_normal_lhs_block2194 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_or2239 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2249 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2257 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_or2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2286 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2306 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2318 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_and2359 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2369 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2377 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_and2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2407 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2427 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2439 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_lhs_exist_in_lhs_unary2470 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_not_binding_in_lhs_unary2478 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_not_in_lhs_unary2484 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_eval_in_lhs_unary2490 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_forall_in_lhs_unary2496 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_for_in_lhs_unary2503 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_unary2509 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_unary2520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_unary2526 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_unary2534 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_unary2548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exists_key_in_lhs_exist2564 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_exist2598 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_exist2613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_exist2628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not_binding2674 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_not_binding2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not2699 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_not2728 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_not2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_not2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eval_key_in_lhs_eval2792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_lhs_eval2801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_key_in_lhs_forall2828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_forall2833 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_forall2841 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_forall2847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_lhs_for2873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_for2878 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_for2886 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_for2888 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_for_functions_in_lhs_for2893 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_for2899 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constraints_in_lhs_for2901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_for2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_function_in_for_functions2936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_for_functions2939 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_for_function_in_for_functions2941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_label_in_for_function2957 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_for_function2959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_for_function2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_pattern_source2983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_over_clause_in_pattern_source2987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_FROM_in_pattern_source2997 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_accumulate_statement_in_pattern_source3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_statement_in_pattern_source3033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entrypoint_statement_in_pattern_source3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_source_in_pattern_source3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVER_in_over_clause3098 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_over_elements_in_over_clause3103 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_over_clause3110 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_over_elements_in_over_clause3115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ID_in_over_elements3130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_over_elements3137 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_over_elements3146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_over_elements3153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_TimePeriod_in_over_elements3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DECIMAL_in_over_elements3174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_over_elements3184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ACCUMULATE_in_accumulate_statement3211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_statement3220 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_accumulate_statement3228 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_statement3233 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_accumulate_init_clause_in_accumulate_statement3243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_accumulate_id_clause_in_accumulate_statement3249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_statement3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_key_in_accumulate_init_clause3303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3313 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3318 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_action_key_in_accumulate_init_clause3329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3333 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3338 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_reverse_key_in_accumulate_init_clause3350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3354 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3359 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_result_key_in_accumulate_init_clause3375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3463 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_accumulate_paren_chunk_data3475 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3491 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_accumulate_id_clause3518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_accumulate_id_clause3524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_in_collect_statement3546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_collect_statement3555 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_pattern_source_in_collect_statement3562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_collect_statement3567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entry_point_key_in_entrypoint_statement3594 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_entrypoint_id_in_entrypoint_statement3602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entrypoint_id3628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_entrypoint_id3645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_source3682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_pattern3713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_lhs_pattern3726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_fact_binding3746 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fact_in_fact_binding3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact_binding3759 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fact_binding_expression_in_fact_binding3767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact_binding3775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3816 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_or_key_in_fact_binding_expression3828 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3834 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3839 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_pattern_type_in_fact3879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact3884 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_constraints_in_fact3895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_constraints3933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_constraints3937 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constraint_in_constraints3944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_or_constr_in_constraint3958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_constr3973 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3980 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr3995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_constr3999 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr4006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_eval_key_in_unary_constr4039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_unary_constr4042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_constraint_in_unary_constr4047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_constr4053 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_or_constr_in_unary_constr4063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_constr4068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_field_constraint4088 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint4090 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000FE0080L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROW_in_field_constraint4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_field_constraint4107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint4161 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint4163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_label4188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_label4195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4216 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_restr_connective4222 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_restr_connective4257 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_compound_operator_in_constraint_expression4294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_operator_in_constraint_expression4299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_constraint_expression4304 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_or_restr_connective_in_constraint_expression4313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_constraint_expression4318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_simple_operator4353 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_GREATER_in_simple_operator4361 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_GREATER_EQUALS_in_simple_operator4369 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_LESS_in_simple_operator4377 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_LESS_EQUALS_in_simple_operator4385 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_NOT_EQUALS_in_simple_operator4393 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_not_key_in_simple_operator4401 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0000L});
    public static final BitSet FOLLOW_operator_key_in_simple_operator4408 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007D0010C2L});
    public static final BitSet FOLLOW_operator_params_in_simple_operator4412 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_expression_value_in_simple_operator4425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_operator_params4444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_in_operator_params4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_operator_args4467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_COMMA_in_operator_args4473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_operator_args4480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TimePeriod_in_operator_arg4493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_not_key_in_compound_operator4521 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_compound_operator4534 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_COMMA_in_compound_operator4546 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_compound_operator4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_expression_value4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_literal_in_expression_value4585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_expression_value4591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_signed_literal4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_in_signed_literal4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_in_signed_literal4678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_in_signed_literal4696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_signed_literal4714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_signed_literal4753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_match_in_signed_decimal4807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_decimal_match4844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_MINUS_in_signed_decimal_match4850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DECIMAL_in_signed_decimal_match4872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_match_in_signed_hex4907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_hex_match4944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_hex_match4950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_HEX_in_signed_hex_match4972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_match_in_signed_float5007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_float_match5044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_float_match5050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_FLOAT_in_signed_float_match5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_pattern_type5093 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_pattern_type5099 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_pattern_type5103 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_dimension_definition_in_pattern_type5118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ID_in_data_type5146 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_data_type5152 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_data_type5156 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_dimension_definition_in_data_type5161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_dimension_definition5190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_dimension_definition5197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5211 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_accessor_path5215 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5219 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_ID_in_accessor_element5243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_square_chunk_in_accessor_element5249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_rhs_chunk_data_in_rhs_chunk5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_rhs_chunk_data5300 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_not_end_key_in_rhs_chunk_data5309 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_end_key_in_rhs_chunk_data5315 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_chunk_data5320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_chunk_data5362 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_curly_chunk_data5374 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk_data5390 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_chunk_data5401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk5422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_chunk_data5446 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_paren_chunk_data5458 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk_data5474 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_paren_chunk_data5485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk5506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_square_chunk_data5529 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_square_chunk_data5541 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk_data5556 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_square_chunk_data5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_literal5585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_literal5608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_in_literal5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_literal5630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_literal5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal5666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_typeList5700 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_typeList5702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_typeNameList5719 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_primitiveType_in_type5762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ID_in_type5785 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001200000L});
    public static final BitSet FOLLOW_typeArguments_in_type5792 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_type5797 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_type5799 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001200000L});
    public static final BitSet FOLLOW_typeArguments_in_type5806 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ID_in_typeName5840 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_typeName5843 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_typeName5845 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5873 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_packageOrTypeName5879 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5883 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_LESS_in_typeArguments5911 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments5916 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_GREATER_in_typeArguments5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument5934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_typeArgument5939 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_extends_key_in_typeArgument5943 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_super_key_in_typeArgument5947 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_typeArgument5950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parameters5963 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_param_definition_in_parameters5972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_COMMA_in_parameters5975 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_param_definition_in_parameters5979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parameters5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_data_type_in_param_definition6014 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_argument_in_param_definition6017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_argument6028 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_dimension_definition_in_argument6034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STRING_in_string_list6053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_string_list6062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_list6066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_block6106 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0037D2070C2L});
    public static final BitSet FOLLOW_blockStatement_in_block6108 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0037D2070C2L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_block6111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement6128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rhs_statement_in_blockStatement6138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration6157 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration6162 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration6164 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_localVariableDeclaration6166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_variableModifier6178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_variableDeclaratorId6190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_variableDeclaratorId6193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_variableDeclaratorId6195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators6208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclarators6211 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators6213 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ID_in_variableDeclarator6228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000008L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator6232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_variableDeclaratorRest6246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_variableDeclaratorRest6248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6253 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest6255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6262 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest6264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_rhs_statement6306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_key_in_rhs_statement6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6320 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6322 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_else_key_in_rhs_statement6333 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_rhs_statement6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_rhs_statement6347 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_forControl_in_rhs_statement6349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_rhs_statement6351 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_key_in_rhs_statement6361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6363 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_key_in_rhs_statement6373 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6375 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_while_key_in_rhs_statement6377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6379 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_key_in_rhs_statement6389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6391 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_catches_in_rhs_statement6401 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_finally_key_in_rhs_statement6403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_rhs_statement6415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finally_key_in_rhs_statement6425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_key_in_rhs_statement6443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_rhs_statement6447 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_rhs_statement6449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_rhs_statement6451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_key_in_rhs_statement6459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_key_in_rhs_statement6471 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6473 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_key_in_rhs_statement6484 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6486 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_key_in_rhs_statement6496 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_rhs_statement6498 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_key_in_rhs_statement6509 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_rhs_statement6511 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6529 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rhs_statement6543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_rhs_statement6545 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifyStatement_in_rhs_statement6565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_key_in_rhs_statement6581 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6583 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_rhs_statement6586 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6588 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_forControl6623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl6628 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_forControl6631 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_forControl6633 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_forControl6636 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_forUpdate_in_forControl6638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit6668 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_forInit6671 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit6673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit6678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl6689 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_forVarControl6692 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_forVarControl6694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_forVarControl6696 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_forVarControl6698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate6709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches6722 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches6725 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_catch_key_in_catchClause6739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_catchClause6741 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause6743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_catchClause6745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_catchClause6747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter6758 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_formalParameter6761 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter6763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6777 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup6791 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup6793 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_case_key_in_switchLabel6807 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_switchLabel6809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_key_in_switchLabel6817 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_switchLabel6819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_switchLabel6826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_key_in_modifyStatement6850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_modifyStatement6852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_modifyStatement6856 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0027D2070C2L});
    public static final BitSet FOLLOW_expression_in_modifyStatement6864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_modifyStatement6867 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_modifyStatement6871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_modifyStatement6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression6917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00FF01C000000008L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression6926 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_expression6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression6954 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression6958 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression6962 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6986 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression7011 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_PIPE_in_inclusiveOrExpression7036 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression7061 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_AMPER_in_andExpression7086 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000840000L});
    public static final BitSet FOLLOW_set_in_equalityExpression7111 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000840000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression7140 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_instanceof_key_in_instanceOfExpression7143 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression7145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000780000L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression7172 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000780000L});
    public static final BitSet FOLLOW_set_in_relationalOp7207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000001C000000000L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression7240 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7242 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000001C000000000L});
    public static final BitSet FOLLOW_set_in_shiftOp7256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression7283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_set_in_additiveExpression7294 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression7302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression7321 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression7325 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression7339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression7359 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression7361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7369 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression7371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCR_in_unaryExpression7381 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_primary_in_unaryExpression7383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECR_in_unaryExpression7393 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_primary_in_unaryExpression7395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression7405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unaryExpressionNotPlusMinus7438 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus7449 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus7461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus7471 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000300001000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus7478 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000300001000000L});
    public static final BitSet FOLLOW_set_in_unaryExpressionNotPlusMinus7490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression7540 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression7542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression7544 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression7546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression7563 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_castExpression7565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression7567 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression7578 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_castExpression7580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression7582 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_primitiveType7621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_primitiveType7629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_primitiveType7637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_primitiveType7645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_primitiveType7653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_primitiveType7661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_primitiveType7669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_double_key_in_primitiveType7677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary7700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary7715 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary7718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_key_in_primary7722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_primary7724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary7740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_primary7760 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_primary7762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_primary7777 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_creator_in_primary7779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary7794 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_primary7797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_primary7799 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_primary7803 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_class_key_in_primary7805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_primary7825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_primary7840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_primary7854 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_DOT_in_primary7863 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_primary7865 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary7874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineListExpression7895 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007F2070C2L});
    public static final BitSet FOLLOW_expressionList_in_inlineListExpression7897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineListExpression7900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineMapExpression7922 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_mapExpressionList_in_inlineMapExpression7924 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007F2070C2L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_mapExpressionList7947 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_expression_in_mapEntry7972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_mapEntry7974 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_mapEntry7976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parExpression7990 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_parExpression7992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parExpression7994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix8024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix8026 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix8030 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_class_key_in_identifierSuffix8032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix8047 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix8049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix8051 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix8064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator8082 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createdName_in_creator8085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator8096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator8100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_createdName8112 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typeArguments_in_createdName8114 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_createdName8127 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_createdName8129 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typeArguments_in_createdName8131 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_createdName8146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_innerCreator8161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator8163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8176 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007F2070C2L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest8193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest8207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8214 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest8216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer8255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer8266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_arrayInitializer8278 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0037D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer8281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer8284 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer8286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer8291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_arrayInitializer8298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest8309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest8311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation8326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation8328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_nonWildcardTypeArguments8340 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments8342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_GREATER_in_nonWildcardTypeArguments8344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_explicitGenericInvocationSuffix8356 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix8358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_explicitGenericInvocationSuffix8366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix8368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector8395 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_selector8397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_selector8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector8417 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_super_key_in_selector8419 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_selector8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector8428 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_new_key_in_selector8430 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector8433 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_innerCreator_in_selector8437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_selector8444 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_selector8446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_selector8448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix8460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_superSuffix8468 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_superSuffix8470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_superSuffix8479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_arguments8513 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2071C2L});
    public static final BitSet FOLLOW_expressionList_in_arguments8515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_arguments8518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList8535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_expressionList8538 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_expressionList8540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentOperator8581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentOperator8595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULT_ASSIGN_in_assignmentOperator8609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentOperator8623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentOperator8637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentOperator8651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentOperator8665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentOperator8679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_assignmentOperator8693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_assignmentOperator8709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator8725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration8750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration8760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_key_in_normalClassDeclaration8772 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_normalClassDeclaration8774 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration8777 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_extends_key_in_normalClassDeclaration8790 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration8792 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_implements_key_in_normalClassDeclaration8805 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration8807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration8819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_classBody8830 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody8832 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_classBody8835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_classBodyDeclaration8849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration8857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiedClassMember_in_classBodyDeclaration8864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiedClassMember8885 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedClassMember_in_modifiedClassMember8887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDecl_in_modifiedClassMember8892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier8910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_key_in_modifier8920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_key_in_modifier8930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_private_key_in_modifier8940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_key_in_modifier8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_key_in_modifier8960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_modifier8970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_native_key_in_modifier8980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_key_in_modifier8990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_transient_key_in_modifier9000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volatile_key_in_modifier9010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strictfp_key_in_modifier9020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl9043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDecl9053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_memberDecl9058 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_memberDecl9060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_memberDecl9062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_memberDecl9067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_memberDecl9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDecl9076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl9084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl9089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl9103 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl9105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest9118 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_void_key_in_genericMethodOrConstructorRest9122 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_genericMethodOrConstructorRest9125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest9127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_genericMethodOrConstructorRest9132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest9134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration9149 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_methodDeclaration9151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration9153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest9165 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_methodDeclaratorRest9168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_methodDeclaratorRest9170 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_throws_key_in_methodDeclaratorRest9183 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_methodDeclaratorRest9185 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_methodDeclaratorRest9201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_methodDeclaratorRest9216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest9238 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_throws_key_in_voidMethodDeclaratorRest9241 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_voidMethodDeclaratorRest9243 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_voidMethodDeclaratorRest9259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidMethodDeclaratorRest9273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest9294 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_throws_key_in_constructorDeclaratorRest9297 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_constructorDeclaratorRest9299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_constructorDeclaratorRest9303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration9315 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration9317 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_fieldDeclaration9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_formalParameters9331 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters9333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_formalParameters9336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls9348 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls9351 = new BitSet(new long[]{0x0000000000000002L,0xC000000000000000L});
    public static final BitSet FOLLOW_formalParameterDeclsRest_in_formalParameterDecls9353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9366 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterDeclsRest9369 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDeclsRest9371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_formalParameterDeclsRest9380 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_formalParameterDeclsRest9382 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_formalParameterDeclsRest9384 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_typeParameters9397 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters9399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_COMMA_in_typeParameters9402 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters9404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_GREATER_in_typeParameters9408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typeParameter9419 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_extends_key_in_typeParameter9422 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_bound_in_typeParameter9424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound9438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_AMPER_in_bound9441 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_bound9443 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration9463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration9469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_key_in_normalInterfaceDeclaration9483 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_normalInterfaceDeclaration9485 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration9487 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_extends_key_in_normalInterfaceDeclaration9491 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration9493 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration9497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_interfaceBody9508 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody9510 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_interfaceBody9513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiedInterfaceMember_in_interfaceBodyDeclaration9525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceBodyDeclaration9532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiedInterfaceMember9553 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedInterfaceMember_in_modifiedInterfaceMember9555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_modifiedInterfaceMember9560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl9572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl9579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_interfaceMemberDecl9589 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_interfaceMemberDecl9591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl9593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl9603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethodOrFieldDecl9625 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_interfaceMethodOrFieldDecl9627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040080L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl9629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest9641 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceMethodOrFieldRest9643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest9648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest9660 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_interfaceMethodDeclaratorRest9663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_interfaceMethodDeclaratorRest9665 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_throws_key_in_interfaceMethodDeclaratorRest9670 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_interfaceMethodDeclaratorRest9672 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceMethodDeclaratorRest9676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl9688 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl9691 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_void_key_in_interfaceGenericMethodDecl9695 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_interfaceGenericMethodDecl9698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040080L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl9708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest9720 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_throws_key_in_voidInterfaceMethodDeclaratorRest9723 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_voidInterfaceMethodDeclaratorRest9725 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidInterfaceMethodDeclaratorRest9729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_constantDeclarator9742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040000L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator9744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest9760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_constantDeclaratorsRest9763 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclaratorsRest9765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_constantDeclaratorRest9782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_constantDeclaratorRest9784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040000L});
    public static final BitSet FOLLOW_EQUALS_in_constantDeclaratorRest9788 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_key_in_enumDeclaration9808 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_enumDeclaration9810 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_implements_key_in_enumDeclaration9813 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration9815 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration9819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_enumBody9831 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000200000020L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody9833 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_enumBody9836 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody9839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_enumBody9842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants9853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants9856 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants9858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotations_in_enumConstant9872 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_enumConstant9875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000080L});
    public static final BitSet FOLLOW_arguments_in_enumConstant9878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_classBody_in_enumConstant9883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_enumBodyDeclarations9897 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations9900 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_annotation_in_annotations9920 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_AT_in_annotation9932 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation9940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_annotation9952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_annotation9954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_annotation9962 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation9964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_annotation9966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_annotationName10015 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_annotationName10023 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_annotationName10027 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs10044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairs10047 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs10050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ID_in_elementValuePair10073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_elementValuePair10075 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair10079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair10096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TimePeriod_in_elementValue10115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue10120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue10127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue10134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_elementValueArrayInitializer10145 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0037D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer10148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer10151 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer10153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_elementValueArrayInitializer10160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration10173 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_interface_key_in_annotationTypeDeclaration10175 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_annotationTypeDeclaration10177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration10179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_annotationTypeBody10191 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody10194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_annotationTypeBody10198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10211 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10215 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration10230 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration10234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest10246 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest10248 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_annotationTypeElementRest10250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest10257 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_annotationTypeElementRest10259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest10267 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_annotationTypeElementRest10269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest10284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest10291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_annotationMethodRest10304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_annotationMethodRest10306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_annotationMethodRest10308 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest10311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest10328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_defaultValue10343 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue10345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_operator_key10378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_neg_operator_key10422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key10467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key10471 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key10475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key10479 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key10483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_effective_key10515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_date_effective_key10519 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_date_effective_key10523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_expires_key10555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_date_expires_key10559 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_date_expires_key10563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_no_loop_key10595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_no_loop_key10599 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_no_loop_key10603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key10635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_auto_focus_key10639 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key10643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_activation_group_key10675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_activation_group_key10679 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_activation_group_key10683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key10715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_agenda_group_key10719 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key10723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key10755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_ruleflow_group_key10759 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key10763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entry_point_key10795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_entry_point_key10799 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_entry_point_key10803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_timer_key10832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_duration_key10859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_calendars_key10886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_package_key10913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_key10940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_dialect_key10967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_salience_key10994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enabled_key11021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_attributes_key11048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_key11075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extend_key11102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_key11129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_declare_key11156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_key11183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_key11210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_eval_key11237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_not_key11264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_in_key11291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_or_key11318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_and_key11345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_exists_key11372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_forall_key11399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_action_key11426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_reverse_key11453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_result_key11480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_end_key11507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_init_key11554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_instanceof_key11581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extends_key11608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_implements_key11635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_super_key11662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_boolean_key11690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_char_key11718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_byte_key11746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_short_key11774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_int_key11802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_long_key11830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_float_key11858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_double_key11886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_this_key11914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_void_key11942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_key11970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_new_key11998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_final_key12027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_if_key12053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_else_key12079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_for_key12105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_while_key12131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_do_key12157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_key12183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_default_key12209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_try_key12235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_catch_key12261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_finally_key12287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_switch_key12313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synchronized_key12339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_return_key12365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throw_key12391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_break_key12417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_continue_key12443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_assert_key12468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_static_key12493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_modify_key12518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_public_key12544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protected_key12570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_private_key12596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_abstract_key12622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_native_key12648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_transient_key12674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_volatile_key12700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_strictfp_key12726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throws_key12752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_key12778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enum_key12804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred1_DRL1519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_synpred2_DRL1524 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred2_DRL1526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_synpred2_DRL1528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred3_DRL2230 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_synpred3_DRL2232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_key_in_synpred4_DRL2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred5_DRL2350 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_and_key_in_synpred5_DRL2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred6_DRL2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred7_DRL2544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred8_DRL2581 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_synpred8_DRL2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred8_DRL2586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred9_DRL2709 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_synpred9_DRL2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred9_DRL2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_synpred10_DRL4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred11_DRL5755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred12_DRL5766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred13_DRL5789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred14_DRL5803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred15_DRL5815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred15_DRL5817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_synpred16_DRL6124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_key_in_synpred18_DRL6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred18_DRL6320 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred18_DRL6322 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_else_key_in_synpred18_DRL6333 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred18_DRL6335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_synpred19_DRL6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred19_DRL6347 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_forControl_in_synpred19_DRL6349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred19_DRL6351 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred19_DRL6353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_key_in_synpred20_DRL6361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred20_DRL6363 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred20_DRL6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_key_in_synpred21_DRL6373 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred21_DRL6375 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_while_key_in_synpred21_DRL6377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred21_DRL6379 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred21_DRL6381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_key_in_synpred22_DRL6389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred22_DRL6391 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_catches_in_synpred22_DRL6401 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_finally_key_in_synpred22_DRL6403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred22_DRL6405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred22_DRL6415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finally_key_in_synpred22_DRL6425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred22_DRL6427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_key_in_synpred23_DRL6443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred23_DRL6445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_synpred23_DRL6447 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_synpred23_DRL6449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_synpred23_DRL6451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_key_in_synpred24_DRL6459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred24_DRL6461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred24_DRL6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_key_in_synpred25_DRL6471 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_synpred25_DRL6473 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred25_DRL6476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_key_in_synpred26_DRL6484 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_synpred26_DRL6486 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred26_DRL6488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_key_in_synpred27_DRL6496 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred27_DRL6498 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred27_DRL6501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_key_in_synpred28_DRL6509 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred28_DRL6511 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred28_DRL6514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred30_DRL6529 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred30_DRL6531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred31_DRL6543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_synpred31_DRL6545 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred31_DRL6547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifyStatement_in_synpred32_DRL6565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred33_DRL6623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred34_DRL6668 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_synpred34_DRL6671 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred34_DRL6673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred35_DRL6921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_synpred36_DRL7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred37_DRL7287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred40_DRL7461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_synpred41_DRL7475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred42_DRL7483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred43_DRL7533 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred43_DRL7535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred44_DRL7556 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_synpred44_DRL7558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_synpred45_DRL7621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_synpred46_DRL7629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_synpred47_DRL7637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_synpred48_DRL7645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_synpred49_DRL7653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_synpred50_DRL7661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_synpred51_DRL7669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred52_DRL7696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred53_DRL7711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred54_DRL7736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_synpred55_DRL7756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_synpred56_DRL7773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred57_DRL7790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_synpred58_DRL7821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_synpred59_DRL7836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred60_DRL7851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred61_DRL7858 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred61_DRL7860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred62_DRL7871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred64_DRL8042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred66_DRL8224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred66_DRL8226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred67_DRL8401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred68_DRL8395 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred68_DRL8397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_synpred68_DRL8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred69_DRL8417 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_super_key_in_synpred69_DRL8419 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_synpred69_DRL8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred70_DRL8428 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_new_key_in_synpred70_DRL8430 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred70_DRL8433 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred70_DRL8437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred71_DRL8474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_synpred72_DRL8885 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedClassMember_in_synpred72_DRL8887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred74_DRL9053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_synpred75_DRL9058 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred75_DRL9060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_synpred75_DRL9062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred76_DRL9067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_synpred76_DRL9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred77_DRL9076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred78_DRL9084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_synpred79_DRL9553 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedInterfaceMember_in_synpred79_DRL9555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred80_DRL10065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_synpred80_DRL10067 = new BitSet(new long[]{0x0000000000000002L});

}