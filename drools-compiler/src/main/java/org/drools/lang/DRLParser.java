// $ANTLR 3.3 Nov 30, 2010 12:46:29 src/main/resources/org/drools/lang/DRL.g 2011-01-11 15:22:10

	package org.drools.lang;
	
	import java.util.List;
	import java.util.LinkedList;
	import org.drools.compiler.DroolsParserException;
	import org.drools.lang.ParserHelper;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class DRLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "VT_COMPILATION_UNIT", "VT_FUNCTION_IMPORT", "VT_FACT", "VT_CONSTRAINTS", "VT_LABEL", "VT_QUERY_ID", "VT_TYPE_DECLARE_ID", "VT_TYPE_NAME", "VT_RULE_ID", "VT_ENTRYPOINT_ID", "VT_RULE_ATTRIBUTES", "VT_PKG_ATTRIBUTES", "VT_RHS_CHUNK", "VT_CURLY_CHUNK", "VT_SQUARE_CHUNK", "VT_PAREN_CHUNK", "VT_BEHAVIOR", "VT_AND_IMPLICIT", "VT_AND_PREFIX", "VT_OR_PREFIX", "VT_AND_INFIX", "VT_OR_INFIX", "VT_ACCUMULATE_INIT_CLAUSE", "VT_ACCUMULATE_ID_CLAUSE", "VT_FROM_SOURCE", "VT_EXPRESSION_CHAIN", "VT_FOR_CE", "VT_FOR_FUNCTIONS", "VT_PATTERN", "VT_FACT_BINDING", "VT_FACT_OR", "VT_BIND_FIELD", "VT_FIELD", "VT_ACCESSOR_PATH", "VT_ACCESSOR_ELEMENT", "VT_DATA_TYPE", "VT_PATTERN_TYPE", "VT_PACKAGE_ID", "VT_IMPORT_ID", "VT_GLOBAL_ID", "VT_FUNCTION_ID", "VT_PARAM_LIST", "VT_ARGUMENTS", "VT_EXPRESSION", "VK_DATE_EFFECTIVE", "VK_DATE_EXPIRES", "VK_LOCK_ON_ACTIVE", "VK_NO_LOOP", "VK_AUTO_FOCUS", "VK_ACTIVATION_GROUP", "VK_AGENDA_GROUP", "VK_RULEFLOW_GROUP", "VK_TIMER", "VK_CALENDARS", "VK_DIALECT", "VK_SALIENCE", "VK_ENABLED", "VK_ATTRIBUTES", "VK_RULE", "VK_EXTEND", "VK_IMPLEMENTS", "VK_IMPORT", "VK_PACKAGE", "VK_QUERY", "VK_DECLARE", "VK_FUNCTION", "VK_GLOBAL", "VK_EVAL", "VK_ENTRY_POINT", "VK_NOT", "VK_IN", "VK_OR", "VK_AND", "VK_EXISTS", "VK_FORALL", "VK_FOR", "VK_ACTION", "VK_REVERSE", "VK_RESULT", "VK_OPERATOR", "VK_END", "VK_INIT", "VK_INSTANCEOF", "VK_EXTENDS", "VK_SUPER", "VK_PRIMITIVE_TYPE", "VK_THIS", "VK_VOID", "VK_CLASS", "VK_NEW", "VK_FINAL", "VK_IF", "VK_ELSE", "VK_WHILE", "VK_DO", "VK_CASE", "VK_DEFAULT", "VK_TRY", "VK_CATCH", "VK_FINALLY", "VK_SWITCH", "VK_SYNCHRONIZED", "VK_RETURN", "VK_THROW", "VK_BREAK", "VK_CONTINUE", "VK_ASSERT", "VK_MODIFY", "VK_STATIC", "VK_PUBLIC", "VK_PROTECTED", "VK_PRIVATE", "VK_ABSTRACT", "VK_NATIVE", "VK_TRANSIENT", "VK_VOLATILE", "VK_STRICTFP", "VK_THROWS", "VK_INTERFACE", "VK_ENUM", "SIGNED_DECIMAL", "SIGNED_HEX", "SIGNED_FLOAT", "VT_PROP_KEY", "VT_PROP_VALUE", "SEMICOLON", "ID", "DOT", "DOT_STAR", "STRING", "AT", "COLON", "EQUALS_ASSIGN", "WHEN", "COMMA", "BOOL", "LEFT_PAREN", "RIGHT_PAREN", "FROM", "OVER", "TimePeriod", "DECIMAL", "ACCUMULATE", "COLLECT", "DOUBLE_PIPE", "DOUBLE_AMPER", "ARROW", "EQUALS", "GREATER", "GREATER_EQUALS", "LESS", "LESS_EQUALS", "NOT_EQUALS", "LEFT_SQUARE", "RIGHT_SQUARE", "NULL", "PLUS", "MINUS", "HEX", "FLOAT", "THEN", "LEFT_CURLY", "RIGHT_CURLY", "QUESTION", "PIPE", "XOR", "AMPER", "SHIFT_LEFT", "SHIFT_RIGHT_UNSIG", "SHIFT_RIGHT", "STAR", "DIV", "MOD", "INCR", "DECR", "TILDE", "NEGATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "EOL", "WS", "Exponent", "FloatTypeSuffix", "HexDigit", "IntegerTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "SH_STYLE_SINGLE_LINE_COMMENT", "C_STYLE_SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "IdentifierStart", "IdentifierPart", "MISC"
    };
    public static final int EOF=-1;
    public static final int VT_COMPILATION_UNIT=4;
    public static final int VT_FUNCTION_IMPORT=5;
    public static final int VT_FACT=6;
    public static final int VT_CONSTRAINTS=7;
    public static final int VT_LABEL=8;
    public static final int VT_QUERY_ID=9;
    public static final int VT_TYPE_DECLARE_ID=10;
    public static final int VT_TYPE_NAME=11;
    public static final int VT_RULE_ID=12;
    public static final int VT_ENTRYPOINT_ID=13;
    public static final int VT_RULE_ATTRIBUTES=14;
    public static final int VT_PKG_ATTRIBUTES=15;
    public static final int VT_RHS_CHUNK=16;
    public static final int VT_CURLY_CHUNK=17;
    public static final int VT_SQUARE_CHUNK=18;
    public static final int VT_PAREN_CHUNK=19;
    public static final int VT_BEHAVIOR=20;
    public static final int VT_AND_IMPLICIT=21;
    public static final int VT_AND_PREFIX=22;
    public static final int VT_OR_PREFIX=23;
    public static final int VT_AND_INFIX=24;
    public static final int VT_OR_INFIX=25;
    public static final int VT_ACCUMULATE_INIT_CLAUSE=26;
    public static final int VT_ACCUMULATE_ID_CLAUSE=27;
    public static final int VT_FROM_SOURCE=28;
    public static final int VT_EXPRESSION_CHAIN=29;
    public static final int VT_FOR_CE=30;
    public static final int VT_FOR_FUNCTIONS=31;
    public static final int VT_PATTERN=32;
    public static final int VT_FACT_BINDING=33;
    public static final int VT_FACT_OR=34;
    public static final int VT_BIND_FIELD=35;
    public static final int VT_FIELD=36;
    public static final int VT_ACCESSOR_PATH=37;
    public static final int VT_ACCESSOR_ELEMENT=38;
    public static final int VT_DATA_TYPE=39;
    public static final int VT_PATTERN_TYPE=40;
    public static final int VT_PACKAGE_ID=41;
    public static final int VT_IMPORT_ID=42;
    public static final int VT_GLOBAL_ID=43;
    public static final int VT_FUNCTION_ID=44;
    public static final int VT_PARAM_LIST=45;
    public static final int VT_ARGUMENTS=46;
    public static final int VT_EXPRESSION=47;
    public static final int VK_DATE_EFFECTIVE=48;
    public static final int VK_DATE_EXPIRES=49;
    public static final int VK_LOCK_ON_ACTIVE=50;
    public static final int VK_NO_LOOP=51;
    public static final int VK_AUTO_FOCUS=52;
    public static final int VK_ACTIVATION_GROUP=53;
    public static final int VK_AGENDA_GROUP=54;
    public static final int VK_RULEFLOW_GROUP=55;
    public static final int VK_TIMER=56;
    public static final int VK_CALENDARS=57;
    public static final int VK_DIALECT=58;
    public static final int VK_SALIENCE=59;
    public static final int VK_ENABLED=60;
    public static final int VK_ATTRIBUTES=61;
    public static final int VK_RULE=62;
    public static final int VK_EXTEND=63;
    public static final int VK_IMPLEMENTS=64;
    public static final int VK_IMPORT=65;
    public static final int VK_PACKAGE=66;
    public static final int VK_QUERY=67;
    public static final int VK_DECLARE=68;
    public static final int VK_FUNCTION=69;
    public static final int VK_GLOBAL=70;
    public static final int VK_EVAL=71;
    public static final int VK_ENTRY_POINT=72;
    public static final int VK_NOT=73;
    public static final int VK_IN=74;
    public static final int VK_OR=75;
    public static final int VK_AND=76;
    public static final int VK_EXISTS=77;
    public static final int VK_FORALL=78;
    public static final int VK_FOR=79;
    public static final int VK_ACTION=80;
    public static final int VK_REVERSE=81;
    public static final int VK_RESULT=82;
    public static final int VK_OPERATOR=83;
    public static final int VK_END=84;
    public static final int VK_INIT=85;
    public static final int VK_INSTANCEOF=86;
    public static final int VK_EXTENDS=87;
    public static final int VK_SUPER=88;
    public static final int VK_PRIMITIVE_TYPE=89;
    public static final int VK_THIS=90;
    public static final int VK_VOID=91;
    public static final int VK_CLASS=92;
    public static final int VK_NEW=93;
    public static final int VK_FINAL=94;
    public static final int VK_IF=95;
    public static final int VK_ELSE=96;
    public static final int VK_WHILE=97;
    public static final int VK_DO=98;
    public static final int VK_CASE=99;
    public static final int VK_DEFAULT=100;
    public static final int VK_TRY=101;
    public static final int VK_CATCH=102;
    public static final int VK_FINALLY=103;
    public static final int VK_SWITCH=104;
    public static final int VK_SYNCHRONIZED=105;
    public static final int VK_RETURN=106;
    public static final int VK_THROW=107;
    public static final int VK_BREAK=108;
    public static final int VK_CONTINUE=109;
    public static final int VK_ASSERT=110;
    public static final int VK_MODIFY=111;
    public static final int VK_STATIC=112;
    public static final int VK_PUBLIC=113;
    public static final int VK_PROTECTED=114;
    public static final int VK_PRIVATE=115;
    public static final int VK_ABSTRACT=116;
    public static final int VK_NATIVE=117;
    public static final int VK_TRANSIENT=118;
    public static final int VK_VOLATILE=119;
    public static final int VK_STRICTFP=120;
    public static final int VK_THROWS=121;
    public static final int VK_INTERFACE=122;
    public static final int VK_ENUM=123;
    public static final int SIGNED_DECIMAL=124;
    public static final int SIGNED_HEX=125;
    public static final int SIGNED_FLOAT=126;
    public static final int VT_PROP_KEY=127;
    public static final int VT_PROP_VALUE=128;
    public static final int SEMICOLON=129;
    public static final int ID=130;
    public static final int DOT=131;
    public static final int DOT_STAR=132;
    public static final int STRING=133;
    public static final int AT=134;
    public static final int COLON=135;
    public static final int EQUALS_ASSIGN=136;
    public static final int WHEN=137;
    public static final int COMMA=138;
    public static final int BOOL=139;
    public static final int LEFT_PAREN=140;
    public static final int RIGHT_PAREN=141;
    public static final int FROM=142;
    public static final int OVER=143;
    public static final int TimePeriod=144;
    public static final int DECIMAL=145;
    public static final int ACCUMULATE=146;
    public static final int COLLECT=147;
    public static final int DOUBLE_PIPE=148;
    public static final int DOUBLE_AMPER=149;
    public static final int ARROW=150;
    public static final int EQUALS=151;
    public static final int GREATER=152;
    public static final int GREATER_EQUALS=153;
    public static final int LESS=154;
    public static final int LESS_EQUALS=155;
    public static final int NOT_EQUALS=156;
    public static final int LEFT_SQUARE=157;
    public static final int RIGHT_SQUARE=158;
    public static final int NULL=159;
    public static final int PLUS=160;
    public static final int MINUS=161;
    public static final int HEX=162;
    public static final int FLOAT=163;
    public static final int THEN=164;
    public static final int LEFT_CURLY=165;
    public static final int RIGHT_CURLY=166;
    public static final int QUESTION=167;
    public static final int PIPE=168;
    public static final int XOR=169;
    public static final int AMPER=170;
    public static final int SHIFT_LEFT=171;
    public static final int SHIFT_RIGHT_UNSIG=172;
    public static final int SHIFT_RIGHT=173;
    public static final int STAR=174;
    public static final int DIV=175;
    public static final int MOD=176;
    public static final int INCR=177;
    public static final int DECR=178;
    public static final int TILDE=179;
    public static final int NEGATION=180;
    public static final int PLUS_ASSIGN=181;
    public static final int MINUS_ASSIGN=182;
    public static final int MULT_ASSIGN=183;
    public static final int DIV_ASSIGN=184;
    public static final int AND_ASSIGN=185;
    public static final int OR_ASSIGN=186;
    public static final int XOR_ASSIGN=187;
    public static final int MOD_ASSIGN=188;
    public static final int EOL=189;
    public static final int WS=190;
    public static final int Exponent=191;
    public static final int FloatTypeSuffix=192;
    public static final int HexDigit=193;
    public static final int IntegerTypeSuffix=194;
    public static final int EscapeSequence=195;
    public static final int UnicodeEscape=196;
    public static final int OctalEscape=197;
    public static final int SH_STYLE_SINGLE_LINE_COMMENT=198;
    public static final int C_STYLE_SINGLE_LINE_COMMENT=199;
    public static final int MULTI_LINE_COMMENT=200;
    public static final int IdentifierStart=201;
    public static final int IdentifierPart=202;
    public static final int MISC=203;

    // delegates
    // delegators


        public DRLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public DRLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[291+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return DRLParser.tokenNames; }
    public String getGrammarFileName() { return "src/main/resources/org/drools/lang/DRL.g"; }


        private ParserHelper helper = new ParserHelper( this,
                                                        tokenNames,
                                                        input,
                                                        state );
                                                        
        public ParserHelper getHelper()                           { return helper; }
        public boolean hasErrors()                                { return helper.hasErrors(); }
        public List<DroolsParserException> getErrors()            { return helper.getErrors(); }
        public List<String> getErrorMessages()                    { return helper.getErrorMessages(); }
        public void enableEditorInterface()                       {        helper.enableEditorInterface(); }
        public void disableEditorInterface()                      {        helper.disableEditorInterface(); }
        public LinkedList<DroolsSentence> getEditorInterface()    { return helper.getEditorInterface(); }
        public void reportError(RecognitionException ex)          {        helper.reportError( ex ); }
        /** Overrided this method to not output mesages */
        public void emitErrorMessage(String msg)                  {}



    public static class compilation_unit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilation_unit"
    // src/main/resources/org/drools/lang/DRL.g:222:1: compilation_unit : ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) ;
    public final DRLParser.compilation_unit_return compilation_unit() throws RecognitionException {
        DRLParser.compilation_unit_return retval = new DRLParser.compilation_unit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF5=null;
        DRLParser.package_statement_return package_statement1 = null;

        DRLParser.resync_return resync2 = null;

        DRLParser.statement_return statement3 = null;

        DRLParser.resync_return resync4 = null;


        Object EOF5_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_package_statement=new RewriteRuleSubtreeStream(adaptor,"rule package_statement");
        RewriteRuleSubtreeStream stream_resync=new RewriteRuleSubtreeStream(adaptor,"rule resync");
        try {
            // src/main/resources/org/drools/lang/DRL.g:223:2: ( ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) )
            // src/main/resources/org/drools/lang/DRL.g:223:4: ( package_statement )? resync ( statement resync )* EOF
            {
            // src/main/resources/org/drools/lang/DRL.g:223:4: ( package_statement )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:223:4: package_statement
                    {
                    pushFollow(FOLLOW_package_statement_in_compilation_unit619);
                    package_statement1=package_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_statement.add(package_statement1.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_resync_in_compilation_unit638);
            resync2=resync();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resync.add(resync2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:225:3: ( statement resync )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:225:5: statement resync
            	    {
            	    pushFollow(FOLLOW_statement_in_compilation_unit645);
            	    statement3=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement3.getTree());
            	    pushFollow(FOLLOW_resync_in_compilation_unit647);
            	    resync4=resync();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_resync.add(resync4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            EOF5=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF5);



            // AST REWRITE
            // elements: package_statement, statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:3: -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:227:6: ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:227:28: ( package_statement )?
                if ( stream_package_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_package_statement.nextTree());

                }
                stream_package_statement.reset();
                // src/main/resources/org/drools/lang/DRL.g:227:47: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException e ) {

            		helper.reportError( e );
            	
        }
        catch ( RewriteEmptyStreamException e ) {

            	
        }
        finally {

            	if (helper.isEditorInterfaceEnabled && retval.tree == null) {
            		retval.tree = root_0;
            		root_0 = (Object) adaptor.nil();
            		Object root_1 = (Object) adaptor.nil();
            		root_1 = (Object) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);
            		if (stream_package_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_package_statement.nextTree());
            		}
            		while (stream_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_statement.nextTree());
            		}
            		adaptor.addChild(root_0, root_1);
            		retval.stop = input.LT(-1);
            		retval.tree = (Object) adaptor.rulePostProcessing(root_0);
            		adaptor.setTokenBoundaries(retval.tree, retval.start,
            				retval.stop);
            	}
            	if (helper.isEditorInterfaceEnabled && helper.hasErrors()) {
            		Tree rootNode = (Tree) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), adaptor.nil());
            		for (int i = 0; i < ((Tree)retval.tree).getChildCount(); i++) {
            			Tree childNode = (Tree) ((Tree)retval.tree).getChild(i);
            			if (!(childNode instanceof CommonErrorNode)) {
            				rootNode.addChild(childNode);
            			}
            		}
            		retval.tree = rootNode; 
            	}

        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public static class resync_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resync"
    // src/main/resources/org/drools/lang/DRL.g:270:1: resync : ;
    public final DRLParser.resync_return resync() throws RecognitionException {
        DRLParser.resync_return retval = new DRLParser.resync_return();
        retval.start = input.LT(1);

        Object root_0 = null;


            // Consume any garbled tokens that come before the next statement
            // or the end of the block. The only slight risk here is that the
            // block becomes MORE inclusive than it should but as the script is
            // in error, this is a better course than throwing out the block
            // when the error occurs and screwing up the whole meaning of
            // the rest of the token stream.
            //
            helper.syncToSet();
        try {
            // src/main/resources/org/drools/lang/DRL.g:281:5: ()
            // src/main/resources/org/drools/lang/DRL.g:283:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "resync"

    public static class package_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_statement"
    // src/main/resources/org/drools/lang/DRL.g:288:1: package_statement : package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) ;
    public final DRLParser.package_statement_return package_statement() throws RecognitionException {
        DRLParser.package_statement_return retval = new DRLParser.package_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON8=null;
        DRLParser.package_key_return package_key6 = null;

        DRLParser.packageOrTypeName_return packageOrTypeName7 = null;


        Object SEMICOLON8_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_packageOrTypeName=new RewriteRuleSubtreeStream(adaptor,"rule packageOrTypeName");
         helper.pushParaphrases(DroolsParaphraseTypes.PACKAGE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.PACKAGE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:291:2: ( package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) )
            // src/main/resources/org/drools/lang/DRL.g:291:4: package_key packageOrTypeName ( SEMICOLON )?
            {
            pushFollow(FOLLOW_package_key_in_package_statement748);
            package_key6=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key6.getTree());
            pushFollow(FOLLOW_packageOrTypeName_in_package_statement752);
            packageOrTypeName7=packageOrTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_packageOrTypeName.add(packageOrTypeName7.getTree());
            // src/main/resources/org/drools/lang/DRL.g:292:21: ( SEMICOLON )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SEMICOLON) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:292:21: SEMICOLON
                    {
                    SEMICOLON8=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_statement754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON8);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON8, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: package_key, packageOrTypeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:3: -> ^( package_key packageOrTypeName )
            {
                // src/main/resources/org/drools/lang/DRL.g:294:6: ^( package_key packageOrTypeName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_package_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_packageOrTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_statement"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // src/main/resources/org/drools/lang/DRL.g:302:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );
    public final DRLParser.statement_return statement() throws RecognitionException {
        DRLParser.statement_return retval = new DRLParser.statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_attribute_return rule_attribute9 = null;

        DRLParser.function_import_statement_return function_import_statement10 = null;

        DRLParser.import_statement_return import_statement11 = null;

        DRLParser.global_return global12 = null;

        DRLParser.function_return function13 = null;

        DRLParser.type_declaration_return type_declaration14 = null;

        DRLParser.rule_return rule15 = null;

        DRLParser.query_return query16 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:305:3: ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query )
            int alt4=8;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:305:5: rule_attribute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_attribute_in_statement794);
                    rule_attribute9=rule_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule_attribute9.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:306:4: function_import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_import_statement_in_statement799);
                    function_import_statement10=function_import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_import_statement10.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:307:10: import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_import_statement_in_statement812);
                    import_statement11=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement11.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:308:4: global
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_global_in_statement818);
                    global12=global();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global12.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:309:4: function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_in_statement824);
                    function13=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function13.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:310:4: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_statement829);
                    type_declaration14=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration14.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:311:4: rule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_in_statement834);
                    rule15=rule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule15.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:312:4: query
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_query_in_statement839);
                    query16=query();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query16.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_statement"
    // src/main/resources/org/drools/lang/DRL.g:318:1: import_statement : import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) ;
    public final DRLParser.import_statement_return import_statement() throws RecognitionException {
        DRLParser.import_statement_return retval = new DRLParser.import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON19=null;
        DRLParser.import_key_return import_key17 = null;

        DRLParser.import_name_return import_name18 = null;


        Object SEMICOLON19_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.IMPORT_STATEMENT);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:321:2: ( import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:321:4: import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )?
            {
            pushFollow(FOLLOW_import_key_in_import_statement865);
            import_key17=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(import_key17.getTree());
            pushFollow(FOLLOW_import_name_in_import_statement867);
            import_name18=import_name(DroolsParaphraseTypes.IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name18.getTree());
            // src/main/resources/org/drools/lang/DRL.g:321:57: ( SEMICOLON )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==SEMICOLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:321:57: SEMICOLON
                    {
                    SEMICOLON19=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_import_statement870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON19);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON19, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_key, import_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:3: -> ^( import_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:323:6: ^( import_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_import_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_statement"

    public static class function_import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_import_statement"
    // src/main/resources/org/drools/lang/DRL.g:326:1: function_import_statement : {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) ;
    public final DRLParser.function_import_statement_return function_import_statement() throws RecognitionException {
        DRLParser.function_import_statement_return retval = new DRLParser.function_import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON22=null;
        DRLParser.import_key_return imp = null;

        DRLParser.function_key_return function_key20 = null;

        DRLParser.import_name_return import_name21 = null;


        Object SEMICOLON22_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION_IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION_IMPORT_STATEMENT); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:329:2: ({...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:329:4: {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )?
            {
            if ( !((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_import_statement", "helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION)");
            }
            pushFollow(FOLLOW_import_key_in_function_import_statement910);
            imp=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(imp.getTree());
            pushFollow(FOLLOW_function_key_in_function_import_statement912);
            function_key20=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key20.getTree());
            pushFollow(FOLLOW_import_name_in_function_import_statement924);
            import_name21=import_name(DroolsParaphraseTypes.FUNCTION_IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name21.getTree());
            // src/main/resources/org/drools/lang/DRL.g:330:61: ( SEMICOLON )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==SEMICOLON) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:330:61: SEMICOLON
                    {
                    SEMICOLON22=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_import_statement927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON22);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON22, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: function_key, import_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:3: -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:332:6: ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FUNCTION_IMPORT, (imp!=null?((Token)imp.start):null)), root_1);

                adaptor.addChild(root_1, stream_function_key.nextTree());
                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_import_statement"

    public static class import_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_name"
    // src/main/resources/org/drools/lang/DRL.g:335:1: import_name[DroolsParaphraseTypes importType] : id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) ;
    public final DRLParser.import_name_return import_name(DroolsParaphraseTypes importType) throws RecognitionException {
        DRLParser.import_name_return retval = new DRLParser.import_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_DOT_STAR=new RewriteRuleTokenStream(adaptor,"token DOT_STAR");

        try {
            // src/main/resources/org/drools/lang/DRL.g:336:2: (id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) )
            // src/main/resources/org/drools/lang/DRL.g:336:4: id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )?
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_import_name961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:336:11: (id+= DOT id+= ID )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DOT) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:336:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_import_name967); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_import_name971); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:336:33: (id+= DOT_STAR )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DOT_STAR) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:336:33: id+= DOT_STAR
                    {
                    id=(Token)match(input,DOT_STAR,FOLLOW_DOT_STAR_in_import_name978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT_STAR.add(id);

                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(importType, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: ID, DOT_STAR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:3: -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:339:6: ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_IMPORT_ID, "VT_IMPORT_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:339:25: ( DOT_STAR )?
                if ( stream_DOT_STAR.hasNext() ) {
                    adaptor.addChild(root_1, stream_DOT_STAR.nextNode());

                }
                stream_DOT_STAR.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_name"

    public static class global_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global"
    // src/main/resources/org/drools/lang/DRL.g:345:1: global : global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) ;
    public final DRLParser.global_return global() throws RecognitionException {
        DRLParser.global_return retval = new DRLParser.global_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON26=null;
        DRLParser.global_key_return global_key23 = null;

        DRLParser.data_type_return data_type24 = null;

        DRLParser.global_id_return global_id25 = null;


        Object SEMICOLON26_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_global_key=new RewriteRuleSubtreeStream(adaptor,"rule global_key");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_global_id=new RewriteRuleSubtreeStream(adaptor,"rule global_id");
         helper.pushParaphrases(DroolsParaphraseTypes.GLOBAL);  if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.GLOBAL); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:348:2: ( global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) )
            // src/main/resources/org/drools/lang/DRL.g:348:4: global_key data_type global_id ( SEMICOLON )?
            {
            pushFollow(FOLLOW_global_key_in_global1021);
            global_key23=global_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_key.add(global_key23.getTree());
            pushFollow(FOLLOW_data_type_in_global1023);
            data_type24=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type24.getTree());
            pushFollow(FOLLOW_global_id_in_global1025);
            global_id25=global_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_id.add(global_id25.getTree());
            // src/main/resources/org/drools/lang/DRL.g:348:35: ( SEMICOLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMICOLON) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:348:35: SEMICOLON
                    {
                    SEMICOLON26=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_global1027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON26, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: global_id, data_type, global_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:3: -> ^( global_key data_type global_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:350:6: ^( global_key data_type global_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_global_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_data_type.nextTree());
                adaptor.addChild(root_1, stream_global_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global"

    public static class global_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_id"
    // src/main/resources/org/drools/lang/DRL.g:353:1: global_id : id= ID -> VT_GLOBAL_ID[$id] ;
    public final DRLParser.global_id_return global_id() throws RecognitionException {
        DRLParser.global_id_return retval = new DRLParser.global_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:354:2: (id= ID -> VT_GLOBAL_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:354:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_global_id1056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.GLOBAL, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:3: -> VT_GLOBAL_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_GLOBAL_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_id"

    public static class function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function"
    // src/main/resources/org/drools/lang/DRL.g:363:1: function : function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) ;
    public final DRLParser.function_return function() throws RecognitionException {
        DRLParser.function_return retval = new DRLParser.function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.function_key_return function_key27 = null;

        DRLParser.data_type_return data_type28 = null;

        DRLParser.function_id_return function_id29 = null;

        DRLParser.parameters_return parameters30 = null;

        DRLParser.curly_chunk_return curly_chunk31 = null;


        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_curly_chunk=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:366:2: ( function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:366:4: function_key ( data_type )? function_id parameters curly_chunk
            {
            pushFollow(FOLLOW_function_key_in_function1091);
            function_key27=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key27.getTree());
            // src/main/resources/org/drools/lang/DRL.g:366:17: ( data_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID) ) {
                int LA10_1 = input.LA(2);

                if ( ((LA10_1>=ID && LA10_1<=DOT)||LA10_1==LEFT_SQUARE) ) {
                    alt10=1;
                }
            }
            switch (alt10) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:366:17: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_function1093);
                    data_type28=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_data_type.add(data_type28.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_id_in_function1096);
            function_id29=function_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_id.add(function_id29.getTree());
            pushFollow(FOLLOW_parameters_in_function1098);
            parameters30=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters.add(parameters30.getTree());
            pushFollow(FOLLOW_curly_chunk_in_function1100);
            curly_chunk31=curly_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk.add(curly_chunk31.getTree());


            // AST REWRITE
            // elements: parameters, function_id, data_type, function_key, curly_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:3: -> ^( function_key ( data_type )? function_id parameters curly_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:367:6: ^( function_key ( data_type )? function_id parameters curly_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_function_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:367:21: ( data_type )?
                if ( stream_data_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_data_type.nextTree());

                }
                stream_data_type.reset();
                adaptor.addChild(root_1, stream_function_id.nextTree());
                adaptor.addChild(root_1, stream_parameters.nextTree());
                adaptor.addChild(root_1, stream_curly_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function"

    public static class function_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_id"
    // src/main/resources/org/drools/lang/DRL.g:370:1: function_id : id= ID -> VT_FUNCTION_ID[$id] ;
    public final DRLParser.function_id_return function_id() throws RecognitionException {
        DRLParser.function_id_return retval = new DRLParser.function_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:371:2: (id= ID -> VT_FUNCTION_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:371:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_function_id1130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.FUNCTION, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:3: -> VT_FUNCTION_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FUNCTION_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_id"

    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // src/main/resources/org/drools/lang/DRL.g:380:1: query : query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) ;
    public final DRLParser.query_return query() throws RecognitionException {
        DRLParser.query_return retval = new DRLParser.query_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON36=null;
        DRLParser.end_key_return end = null;

        DRLParser.query_key_return query_key32 = null;

        DRLParser.query_id_return query_id33 = null;

        DRLParser.parameters_return parameters34 = null;

        DRLParser.normal_lhs_block_return normal_lhs_block35 = null;


        Object SEMICOLON36_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_query_key=new RewriteRuleSubtreeStream(adaptor,"rule query_key");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_query_id=new RewriteRuleSubtreeStream(adaptor,"rule query_id");
         helper.pushParaphrases(DroolsParaphraseTypes.QUERY); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.QUERY); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:383:2: ( query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:383:4: query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )?
            {
            pushFollow(FOLLOW_query_key_in_query1165);
            query_key32=query_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_key.add(query_key32.getTree());
            pushFollow(FOLLOW_query_id_in_query1167);
            query_id33=query_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_id.add(query_id33.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:385:3: ( parameters )?
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:385:3: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_query1175);
                    parameters34=parameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameters.add(parameters34.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_query1184);
            normal_lhs_block35=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block35.getTree());
            pushFollow(FOLLOW_end_key_in_query1191);
            end=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end.getTree());
            // src/main/resources/org/drools/lang/DRL.g:388:15: ( SEMICOLON )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==SEMICOLON) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:388:15: SEMICOLON
                    {
                    SEMICOLON36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_query1193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON36);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON36, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: query_id, normal_lhs_block, query_key, end_key, parameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:3: -> ^( query_key query_id ( parameters )? normal_lhs_block end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:390:6: ^( query_key query_id ( parameters )? normal_lhs_block end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_query_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_query_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:390:27: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();
                adaptor.addChild(root_1, stream_normal_lhs_block.nextTree());
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query"

    public static class query_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_id"
    // src/main/resources/org/drools/lang/DRL.g:393:1: query_id : (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] );
    public final DRLParser.query_id_return query_id() throws RecognitionException {
        DRLParser.query_id_return retval = new DRLParser.query_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // src/main/resources/org/drools/lang/DRL.g:394:2: (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ID) ) {
                alt13=1;
            }
            else if ( (LA13_0==STRING) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:394:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_query_id1228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 396:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:397:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_query_id1244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 399:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_id"

    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // src/main/resources/org/drools/lang/DRL.g:405:1: type_declaration : declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) ;
    public final DRLParser.type_declaration_return type_declaration() throws RecognitionException {
        DRLParser.type_declaration_return retval = new DRLParser.type_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.declare_key_return declare_key37 = null;

        DRLParser.type_declare_id_return type_declare_id38 = null;

        DRLParser.type_decl_extends_return type_decl_extends39 = null;

        DRLParser.type_decl_implements_return type_decl_implements40 = null;

        DRLParser.decl_metadata_return decl_metadata41 = null;

        DRLParser.decl_field_return decl_field42 = null;

        DRLParser.end_key_return end_key43 = null;


        RewriteRuleSubtreeStream stream_decl_field=new RewriteRuleSubtreeStream(adaptor,"rule decl_field");
        RewriteRuleSubtreeStream stream_type_declare_id=new RewriteRuleSubtreeStream(adaptor,"rule type_declare_id");
        RewriteRuleSubtreeStream stream_type_decl_extends=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_extends");
        RewriteRuleSubtreeStream stream_type_decl_implements=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_implements");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
         helper.pushParaphrases(DroolsParaphraseTypes.TYPE_DECLARE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.TYPE_DECLARATION); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:408:2: ( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:408:4: declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key
            {
            pushFollow(FOLLOW_declare_key_in_type_declaration1277);
            declare_key37=declare_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declare_key.add(declare_key37.getTree());
            pushFollow(FOLLOW_type_declare_id_in_type_declaration1280);
            type_declare_id38=type_declare_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declare_id.add(type_declare_id38.getTree());
            // src/main/resources/org/drools/lang/DRL.g:408:33: ( type_decl_extends )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==ID) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                    int LA14_3 = input.LA(3);

                    if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                        alt14=1;
                    }
                }
            }
            switch (alt14) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:408:33: type_decl_extends
                    {
                    pushFollow(FOLLOW_type_decl_extends_in_type_declaration1282);
                    type_decl_extends39=type_decl_extends();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_extends.add(type_decl_extends39.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:408:52: ( type_decl_implements )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==ID) ) {
                int LA15_1 = input.LA(2);

                if ( (LA15_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {
                    int LA15_3 = input.LA(3);

                    if ( (LA15_3==DOT||LA15_3==AT||LA15_3==COMMA) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
                        alt15=1;
                    }
                    else if ( (LA15_3==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {
                        int LA15_6 = input.LA(4);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {
                            alt15=1;
                        }
                    }
                }
            }
            switch (alt15) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:408:52: type_decl_implements
                    {
                    pushFollow(FOLLOW_type_decl_implements_in_type_declaration1285);
                    type_decl_implements40=type_decl_implements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_implements.add(type_decl_implements40.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:409:3: ( decl_metadata )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==AT) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:409:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_type_declaration1290);
            	    decl_metadata41=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata41.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:410:3: ( decl_field )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==ID) ) {
                    int LA17_1 = input.LA(2);

                    if ( ((LA17_1>=COLON && LA17_1<=EQUALS_ASSIGN)) ) {
                        alt17=1;
                    }


                }


                switch (alt17) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:410:3: decl_field
            	    {
            	    pushFollow(FOLLOW_decl_field_in_type_declaration1295);
            	    decl_field42=decl_field();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_field.add(decl_field42.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_type_declaration1301);
            end_key43=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key43.getTree());


            // AST REWRITE
            // elements: decl_metadata, decl_field, type_decl_implements, type_declare_id, end_key, declare_key, type_decl_extends
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:3: -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:413:6: ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_declare_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_type_declare_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:413:36: ( type_decl_extends )?
                if ( stream_type_decl_extends.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_extends.nextTree());

                }
                stream_type_decl_extends.reset();
                // src/main/resources/org/drools/lang/DRL.g:413:55: ( type_decl_implements )?
                if ( stream_type_decl_implements.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_implements.nextTree());

                }
                stream_type_decl_implements.reset();
                // src/main/resources/org/drools/lang/DRL.g:413:77: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:413:92: ( decl_field )*
                while ( stream_decl_field.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field.nextTree());

                }
                stream_decl_field.reset();
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_declare_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declare_id"
    // src/main/resources/org/drools/lang/DRL.g:416:1: type_declare_id : id= ID -> VT_TYPE_DECLARE_ID[$id] ;
    public final DRLParser.type_declare_id_return type_declare_id() throws RecognitionException {
        DRLParser.type_declare_id_return retval = new DRLParser.type_declare_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:417:2: (id= ID -> VT_TYPE_DECLARE_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:417:5: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_type_declare_id1339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.TYPE_DECLARE, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 419:79: -> VT_TYPE_DECLARE_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_DECLARE_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declare_id"

    public static class type_decl_extends_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_extends"
    // src/main/resources/org/drools/lang/DRL.g:424:1: type_decl_extends : extends_key typeName ;
    public final DRLParser.type_decl_extends_return type_decl_extends() throws RecognitionException {
        DRLParser.type_decl_extends_return retval = new DRLParser.type_decl_extends_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.extends_key_return extends_key44 = null;

        DRLParser.typeName_return typeName45 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:425:2: ( extends_key typeName )
            // src/main/resources/org/drools/lang/DRL.g:425:4: extends_key typeName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_extends_key_in_type_decl_extends1362);
            extends_key44=extends_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(extends_key44.getTree(), root_0);
            pushFollow(FOLLOW_typeName_in_type_decl_extends1365);
            typeName45=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName45.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_extends"

    public static class type_decl_implements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_implements"
    // src/main/resources/org/drools/lang/DRL.g:428:1: type_decl_implements : implements_key typeNameList ;
    public final DRLParser.type_decl_implements_return type_decl_implements() throws RecognitionException {
        DRLParser.type_decl_implements_return retval = new DRLParser.type_decl_implements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.implements_key_return implements_key46 = null;

        DRLParser.typeNameList_return typeNameList47 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:429:2: ( implements_key typeNameList )
            // src/main/resources/org/drools/lang/DRL.g:429:4: implements_key typeNameList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_implements_key_in_type_decl_implements1377);
            implements_key46=implements_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(implements_key46.getTree(), root_0);
            pushFollow(FOLLOW_typeNameList_in_type_decl_implements1380);
            typeNameList47=typeNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList47.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_implements"

    public static class decl_metadata_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_metadata"
    // src/main/resources/org/drools/lang/DRL.g:440:1: decl_metadata : AT ID ( paren_chunk )? -> ^( AT ID ( paren_chunk )? ) ;
    public final DRLParser.decl_metadata_return decl_metadata() throws RecognitionException {
        DRLParser.decl_metadata_return retval = new DRLParser.decl_metadata_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT48=null;
        Token ID49=null;
        DRLParser.paren_chunk_return paren_chunk50 = null;


        Object AT48_tree=null;
        Object ID49_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:441:2: ( AT ID ( paren_chunk )? -> ^( AT ID ( paren_chunk )? ) )
            // src/main/resources/org/drools/lang/DRL.g:441:4: AT ID ( paren_chunk )?
            {
            AT48=(Token)match(input,AT,FOLLOW_AT_in_decl_metadata1399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT48);

            if ( state.backtracking==0 ) {
              	helper.emit(AT48, DroolsEditorType.SYMBOL);	
            }
            ID49=(Token)match(input,ID,FOLLOW_ID_in_decl_metadata1407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID49);

            if ( state.backtracking==0 ) {
              	helper.emit(ID49, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:445:3: ( paren_chunk )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==LEFT_PAREN) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:445:3: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_decl_metadata1414);
                    paren_chunk50=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk50.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: ID, AT, paren_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:3: -> ^( AT ID ( paren_chunk )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:446:6: ^( AT ID ( paren_chunk )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // src/main/resources/org/drools/lang/DRL.g:446:14: ( paren_chunk )?
                if ( stream_paren_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                }
                stream_paren_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_metadata"

    public static class decl_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field"
    // src/main/resources/org/drools/lang/DRL.g:449:1: decl_field : ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) ;
    public final DRLParser.decl_field_return decl_field() throws RecognitionException {
        DRLParser.decl_field_return retval = new DRLParser.decl_field_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID51=null;
        Token COLON53=null;
        DRLParser.decl_field_initialization_return decl_field_initialization52 = null;

        DRLParser.data_type_return data_type54 = null;

        DRLParser.decl_metadata_return decl_metadata55 = null;


        Object ID51_tree=null;
        Object COLON53_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_decl_field_initialization=new RewriteRuleSubtreeStream(adaptor,"rule decl_field_initialization");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        try {
            // src/main/resources/org/drools/lang/DRL.g:450:2: ( ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) )
            // src/main/resources/org/drools/lang/DRL.g:450:4: ID ( decl_field_initialization )? COLON data_type ( decl_metadata )*
            {
            ID51=(Token)match(input,ID,FOLLOW_ID_in_decl_field1439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID51);

            if ( state.backtracking==0 ) {
              	helper.emit(ID51, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:451:3: ( decl_field_initialization )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==EQUALS_ASSIGN) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:451:3: decl_field_initialization
                    {
                    pushFollow(FOLLOW_decl_field_initialization_in_decl_field1445);
                    decl_field_initialization52=decl_field_initialization();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decl_field_initialization.add(decl_field_initialization52.getTree());

                    }
                    break;

            }

            COLON53=(Token)match(input,COLON,FOLLOW_COLON_in_decl_field1451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON53);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON53, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_data_type_in_decl_field1457);
            data_type54=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type54.getTree());
            // src/main/resources/org/drools/lang/DRL.g:454:3: ( decl_metadata )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==AT) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:454:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_decl_field1461);
            	    decl_metadata55=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata55.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);



            // AST REWRITE
            // elements: decl_metadata, decl_field_initialization, data_type, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:3: -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:455:6: ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ID.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:455:11: ( decl_field_initialization )?
                if ( stream_decl_field_initialization.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field_initialization.nextTree());

                }
                stream_decl_field_initialization.reset();
                adaptor.addChild(root_1, stream_data_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:455:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field"

    public static class decl_field_initialization_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field_initialization"
    // src/main/resources/org/drools/lang/DRL.g:458:1: decl_field_initialization : EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) ;
    public final DRLParser.decl_field_initialization_return decl_field_initialization() throws RecognitionException {
        DRLParser.decl_field_initialization_return retval = new DRLParser.decl_field_initialization_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN56=null;
        DRLParser.paren_chunk_return paren_chunk57 = null;


        Object EQUALS_ASSIGN56_tree=null;
        RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:459:2: ( EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:459:4: EQUALS_ASSIGN paren_chunk
            {
            EQUALS_ASSIGN56=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN56);

            if ( state.backtracking==0 ) {
              	helper.emit(EQUALS_ASSIGN56, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_decl_field_initialization1495);
            paren_chunk57=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk57.getTree());


            // AST REWRITE
            // elements: paren_chunk, EQUALS_ASSIGN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:2: -> ^( EQUALS_ASSIGN paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:461:5: ^( EQUALS_ASSIGN paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_EQUALS_ASSIGN.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field_initialization"

    public static class rule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // src/main/resources/org/drools/lang/DRL.g:474:1: rule : rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) ;
    public final DRLParser.rule_return rule() throws RecognitionException {
        DRLParser.rule_return retval = new DRLParser.rule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_key_return rule_key58 = null;

        DRLParser.rule_id_return rule_id59 = null;

        DRLParser.extend_key_return extend_key60 = null;

        DRLParser.rule_id_return rule_id61 = null;

        DRLParser.decl_metadata_return decl_metadata62 = null;

        DRLParser.rule_attributes_return rule_attributes63 = null;

        DRLParser.when_part_return when_part64 = null;

        DRLParser.rhs_chunk_return rhs_chunk65 = null;


        RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
        RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
        RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
        RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
        RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.RULE);
        try {
            // src/main/resources/org/drools/lang/DRL.g:477:2: ( rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:478:3: rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk
            {
            pushFollow(FOLLOW_rule_key_in_rule1533);
            rule_key58=rule_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_key.add(rule_key58.getTree());
            pushFollow(FOLLOW_rule_id_in_rule1551);
            rule_id59=rule_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_id.add(rule_id59.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:481:3: ( extend_key rule_id )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:481:4: extend_key rule_id
                    {
                    pushFollow(FOLLOW_extend_key_in_rule1560);
                    extend_key60=extend_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extend_key.add(extend_key60.getTree());
                    pushFollow(FOLLOW_rule_id_in_rule1562);
                    rule_id61=rule_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_id.add(rule_id61.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:481:25: ( decl_metadata )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==AT) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:481:25: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_rule1566);
            	    decl_metadata62=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata62.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:481:40: ( rule_attributes )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:481:40: rule_attributes
                    {
                    pushFollow(FOLLOW_rule_attributes_in_rule1569);
                    rule_attributes63=rule_attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_attributes.add(rule_attributes63.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:481:57: ( when_part )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==WHEN) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:481:57: when_part
                    {
                    pushFollow(FOLLOW_when_part_in_rule1572);
                    when_part64=when_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_when_part.add(when_part64.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rhs_chunk_in_rule1575);
            rhs_chunk65=rhs_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk.add(rhs_chunk65.getTree());


            // AST REWRITE
            // elements: when_part, extend_key, rule_id, rule_key, rule_id, decl_metadata, rule_attributes, rhs_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:3: -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:482:6: ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rule_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_rule_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:482:25: ( ^( extend_key rule_id ) )?
                if ( stream_extend_key.hasNext()||stream_rule_id.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:482:25: ^( extend_key rule_id )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_extend_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_rule_id.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_extend_key.reset();
                stream_rule_id.reset();
                // src/main/resources/org/drools/lang/DRL.g:482:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:482:63: ( rule_attributes )?
                if ( stream_rule_attributes.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attributes.nextTree());

                }
                stream_rule_attributes.reset();
                // src/main/resources/org/drools/lang/DRL.g:482:80: ( when_part )?
                if ( stream_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_when_part.nextTree());

                }
                stream_when_part.reset();
                adaptor.addChild(root_1, stream_rhs_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(6) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			input.LA(5) == MINUS && input.LA(6) == ID && 
            			helper.validateLT(1, DroolsSoftKeywords.LOCK) && helper.validateLT(3, DroolsSoftKeywords.ON) &&
            			helper.validateLT(5, DroolsSoftKeywords.ACTIVE)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(4), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(5), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(4) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			(	(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.NO) && helper.validateLT(3, DroolsSoftKeywords.LOOP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AUTO) && helper.validateLT(3, DroolsSoftKeywords.FOCUS)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.RULEFLOW) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AGENDA) && helper.validateLT(3, DroolsSoftKeywords.GROUP))	)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(2) == EOF && input.LA(1) == ID && 
            				(helper.validateLT(1, DroolsSoftKeywords.DIALECT) || helper.validateLT(1, DroolsSoftKeywords.ENABLED) ||
            				 helper.validateLT(1, DroolsSoftKeywords.SALIENCE) || helper.validateLT(1, DroolsSoftKeywords.DURATION) ||
            				 helper.validateLT(1, DroolsSoftKeywords.TIMER))){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "when_part"
    // src/main/resources/org/drools/lang/DRL.g:528:1: when_part : WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block ;
    public final DRLParser.when_part_return when_part() throws RecognitionException {
        DRLParser.when_part_return retval = new DRLParser.when_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHEN66=null;
        Token COLON67=null;
        DRLParser.normal_lhs_block_return normal_lhs_block68 = null;


        Object WHEN66_tree=null;
        Object COLON67_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        try {
            // src/main/resources/org/drools/lang/DRL.g:529:2: ( WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block )
            // src/main/resources/org/drools/lang/DRL.g:529:5: WHEN ( COLON )? normal_lhs_block
            {
            WHEN66=(Token)match(input,WHEN,FOLLOW_WHEN_in_when_part1619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN66);

            if ( state.backtracking==0 ) {
              	helper.emit(WHEN66, DroolsEditorType.KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:530:3: ( COLON )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==COLON) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:530:3: COLON
                    {
                    COLON67=(Token)match(input,COLON,FOLLOW_COLON_in_when_part1625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON67);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COLON67, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_when_part1635);
            normal_lhs_block68=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block68.getTree());


            // AST REWRITE
            // elements: WHEN, normal_lhs_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:2: -> WHEN normal_lhs_block
            {
                adaptor.addChild(root_0, stream_WHEN.nextNode());
                adaptor.addChild(root_0, stream_normal_lhs_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "when_part"

    public static class rule_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_id"
    // src/main/resources/org/drools/lang/DRL.g:536:1: rule_id : (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] );
    public final DRLParser.rule_id_return rule_id() throws RecognitionException {
        DRLParser.rule_id_return retval = new DRLParser.rule_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // src/main/resources/org/drools/lang/DRL.g:537:2: (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ID) ) {
                alt26=1;
            }
            else if ( (LA26_0==STRING) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:537:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_rule_id1656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 539:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:540:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_rule_id1672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 542:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_id"

    public static class rule_attributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attributes"
    // src/main/resources/org/drools/lang/DRL.g:545:1: rule_attributes : ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) ;
    public final DRLParser.rule_attributes_return rule_attributes() throws RecognitionException {
        DRLParser.rule_attributes_return retval = new DRLParser.rule_attributes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON70=null;
        Token COMMA72=null;
        DRLParser.rule_attribute_return attr = null;

        DRLParser.attributes_key_return attributes_key69 = null;

        DRLParser.rule_attribute_return rule_attribute71 = null;


        Object COLON70_tree=null;
        Object COMMA72_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
        RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:546:2: ( ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:546:4: ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )*
            {
            // src/main/resources/org/drools/lang/DRL.g:546:4: ( attributes_key COLON )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                int LA27_1 = input.LA(2);

                if ( (LA27_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
                    alt27=1;
                }
            }
            switch (alt27) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:546:6: attributes_key COLON
                    {
                    pushFollow(FOLLOW_attributes_key_in_rule_attributes1693);
                    attributes_key69=attributes_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attributes_key.add(attributes_key69.getTree());
                    COLON70=(Token)match(input,COLON,FOLLOW_COLON_in_rule_attributes1695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON70);

                    if ( state.backtracking==0 ) {
                      	helper.emit(COLON70, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_rule_attribute_in_rule_attributes1705);
            rule_attribute71=rule_attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_attribute.add(rule_attribute71.getTree());
            // src/main/resources/org/drools/lang/DRL.g:547:18: ( ( COMMA )? attr= rule_attribute )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==ID||LA29_0==COMMA) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:547:20: ( COMMA )? attr= rule_attribute
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:547:20: ( COMMA )?
            	    int alt28=2;
            	    int LA28_0 = input.LA(1);

            	    if ( (LA28_0==COMMA) ) {
            	        alt28=1;
            	    }
            	    switch (alt28) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:547:20: COMMA
            	            {
            	            COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1709); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA72);


            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA72, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1716);
            	    attr=rule_attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rule_attribute.add(attr.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);



            // AST REWRITE
            // elements: rule_attribute, attributes_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:3: -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:548:6: ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_RULE_ATTRIBUTES, "VT_RULE_ATTRIBUTES"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:548:27: ( attributes_key )?
                if ( stream_attributes_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_attributes_key.nextTree());

                }
                stream_attributes_key.reset();
                if ( !(stream_rule_attribute.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rule_attribute.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attribute.nextTree());

                }
                stream_rule_attribute.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_attributes"

    public static class rule_attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attribute"
    // src/main/resources/org/drools/lang/DRL.g:551:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );
    public final DRLParser.rule_attribute_return rule_attribute() throws RecognitionException {
        DRLParser.rule_attribute_return retval = new DRLParser.rule_attribute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_return salience73 = null;

        DRLParser.no_loop_return no_loop74 = null;

        DRLParser.agenda_group_return agenda_group75 = null;

        DRLParser.timer_return timer76 = null;

        DRLParser.activation_group_return activation_group77 = null;

        DRLParser.auto_focus_return auto_focus78 = null;

        DRLParser.date_effective_return date_effective79 = null;

        DRLParser.date_expires_return date_expires80 = null;

        DRLParser.enabled_return enabled81 = null;

        DRLParser.ruleflow_group_return ruleflow_group82 = null;

        DRLParser.lock_on_active_return lock_on_active83 = null;

        DRLParser.dialect_return dialect84 = null;

        DRLParser.calendars_return calendars85 = null;



         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE_ATTRIBUTE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:554:2: ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars )
            int alt30=13;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:554:4: salience
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_salience_in_rule_attribute1755);
                    salience73=salience();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, salience73.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:555:4: no_loop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_no_loop_in_rule_attribute1761);
                    no_loop74=no_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_loop74.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:556:4: agenda_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_agenda_group_in_rule_attribute1766);
                    agenda_group75=agenda_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, agenda_group75.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:557:4: timer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_timer_in_rule_attribute1773);
                    timer76=timer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timer76.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:558:4: activation_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_activation_group_in_rule_attribute1780);
                    activation_group77=activation_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, activation_group77.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:559:4: auto_focus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_auto_focus_in_rule_attribute1786);
                    auto_focus78=auto_focus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, auto_focus78.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:560:4: date_effective
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_effective_in_rule_attribute1792);
                    date_effective79=date_effective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_effective79.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:561:4: date_expires
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_expires_in_rule_attribute1798);
                    date_expires80=date_expires();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_expires80.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:562:4: enabled
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enabled_in_rule_attribute1804);
                    enabled81=enabled();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enabled81.getTree());

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:563:4: ruleflow_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1810);
                    ruleflow_group82=ruleflow_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ruleflow_group82.getTree());

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:564:4: lock_on_active
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_on_active_in_rule_attribute1816);
                    lock_on_active83=lock_on_active();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_on_active83.getTree());

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:565:4: dialect
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dialect_in_rule_attribute1821);
                    dialect84=dialect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dialect84.getTree());

                    }
                    break;
                case 13 :
                    // src/main/resources/org/drools/lang/DRL.g:566:6: calendars
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_calendars_in_rule_attribute1829);
                    calendars85=calendars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, calendars85.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; if (!(retval.tree instanceof CommonErrorNode)) helper.emit(Location.LOCATION_RULE_HEADER); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(2) == EOF && input.LA(1) == ID){
            			helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule_attribute"

    public static class date_effective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective"
    // src/main/resources/org/drools/lang/DRL.g:576:1: date_effective : date_effective_key STRING ;
    public final DRLParser.date_effective_return date_effective() throws RecognitionException {
        DRLParser.date_effective_return retval = new DRLParser.date_effective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING87=null;
        DRLParser.date_effective_key_return date_effective_key86 = null;


        Object STRING87_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:577:2: ( date_effective_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:577:4: date_effective_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_effective_key_in_date_effective1843);
            date_effective_key86=date_effective_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_effective_key86.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING87=(Token)match(input,STRING,FOLLOW_STRING_in_date_effective1848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING87_tree = (Object)adaptor.create(STRING87);
            adaptor.addChild(root_0, STRING87_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING87, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective"

    public static class date_expires_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires"
    // src/main/resources/org/drools/lang/DRL.g:581:1: date_expires : date_expires_key STRING ;
    public final DRLParser.date_expires_return date_expires() throws RecognitionException {
        DRLParser.date_expires_return retval = new DRLParser.date_expires_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING89=null;
        DRLParser.date_expires_key_return date_expires_key88 = null;


        Object STRING89_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:582:2: ( date_expires_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:582:4: date_expires_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_expires_key_in_date_expires1862);
            date_expires_key88=date_expires_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_expires_key88.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING89=(Token)match(input,STRING,FOLLOW_STRING_in_date_expires1867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING89_tree = (Object)adaptor.create(STRING89);
            adaptor.addChild(root_0, STRING89_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING89, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires"

    public static class enabled_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled"
    // src/main/resources/org/drools/lang/DRL.g:586:1: enabled : enabled_key ( BOOL | paren_chunk ) ;
    public final DRLParser.enabled_return enabled() throws RecognitionException {
        DRLParser.enabled_return retval = new DRLParser.enabled_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL91=null;
        DRLParser.enabled_key_return enabled_key90 = null;

        DRLParser.paren_chunk_return paren_chunk92 = null;


        Object BOOL91_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:587:2: ( enabled_key ( BOOL | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:587:4: enabled_key ( BOOL | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enabled_key_in_enabled1882);
            enabled_key90=enabled_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(enabled_key90.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:588:6: ( BOOL | paren_chunk )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==BOOL) ) {
                alt31=1;
            }
            else if ( (LA31_0==LEFT_PAREN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:588:8: BOOL
                    {
                    BOOL91=(Token)match(input,BOOL,FOLLOW_BOOL_in_enabled1895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL91_tree = (Object)adaptor.create(BOOL91);
                    adaptor.addChild(root_0, BOOL91_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL91, DroolsEditorType.BOOLEAN_CONST );	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:589:8: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_enabled1906);
                    paren_chunk92=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk92.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled"

    public static class salience_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience"
    // src/main/resources/org/drools/lang/DRL.g:593:1: salience : salience_key ( signed_decimal | paren_chunk ) ;
    public final DRLParser.salience_return salience() throws RecognitionException {
        DRLParser.salience_return retval = new DRLParser.salience_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_key_return salience_key93 = null;

        DRLParser.signed_decimal_return signed_decimal94 = null;

        DRLParser.paren_chunk_return paren_chunk95 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:594:2: ( salience_key ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:594:4: salience_key ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_salience_key_in_salience1926);
            salience_key93=salience_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(salience_key93.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:595:3: ( signed_decimal | paren_chunk )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==DECIMAL||(LA32_0>=PLUS && LA32_0<=MINUS)) ) {
                alt32=1;
            }
            else if ( (LA32_0==LEFT_PAREN) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:595:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_salience1935);
                    signed_decimal94=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal94.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:596:5: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_salience1942);
                    paren_chunk95=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk95.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience"

    public static class no_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop"
    // src/main/resources/org/drools/lang/DRL.g:600:1: no_loop : no_loop_key ( BOOL )? ;
    public final DRLParser.no_loop_return no_loop() throws RecognitionException {
        DRLParser.no_loop_return retval = new DRLParser.no_loop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL97=null;
        DRLParser.no_loop_key_return no_loop_key96 = null;


        Object BOOL97_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:601:2: ( no_loop_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:601:4: no_loop_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_no_loop_key_in_no_loop1957);
            no_loop_key96=no_loop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(no_loop_key96.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:601:73: ( BOOL )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BOOL) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:601:73: BOOL
                    {
                    BOOL97=(Token)match(input,BOOL,FOLLOW_BOOL_in_no_loop1962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL97_tree = (Object)adaptor.create(BOOL97);
                    adaptor.addChild(root_0, BOOL97_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL97, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop"

    public static class auto_focus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus"
    // src/main/resources/org/drools/lang/DRL.g:605:1: auto_focus : auto_focus_key ( BOOL )? ;
    public final DRLParser.auto_focus_return auto_focus() throws RecognitionException {
        DRLParser.auto_focus_return retval = new DRLParser.auto_focus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL99=null;
        DRLParser.auto_focus_key_return auto_focus_key98 = null;


        Object BOOL99_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:606:2: ( auto_focus_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:606:4: auto_focus_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_auto_focus_key_in_auto_focus1977);
            auto_focus_key98=auto_focus_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(auto_focus_key98.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:606:76: ( BOOL )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BOOL) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:606:76: BOOL
                    {
                    BOOL99=(Token)match(input,BOOL,FOLLOW_BOOL_in_auto_focus1982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL99_tree = (Object)adaptor.create(BOOL99);
                    adaptor.addChild(root_0, BOOL99_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL99, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus"

    public static class activation_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group"
    // src/main/resources/org/drools/lang/DRL.g:610:1: activation_group : activation_group_key STRING ;
    public final DRLParser.activation_group_return activation_group() throws RecognitionException {
        DRLParser.activation_group_return retval = new DRLParser.activation_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING101=null;
        DRLParser.activation_group_key_return activation_group_key100 = null;


        Object STRING101_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:611:2: ( activation_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:611:4: activation_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_activation_group_key_in_activation_group1999);
            activation_group_key100=activation_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(activation_group_key100.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING101=(Token)match(input,STRING,FOLLOW_STRING_in_activation_group2004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING101_tree = (Object)adaptor.create(STRING101);
            adaptor.addChild(root_0, STRING101_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING101, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group"

    public static class ruleflow_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group"
    // src/main/resources/org/drools/lang/DRL.g:615:1: ruleflow_group : ruleflow_group_key STRING ;
    public final DRLParser.ruleflow_group_return ruleflow_group() throws RecognitionException {
        DRLParser.ruleflow_group_return retval = new DRLParser.ruleflow_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING103=null;
        DRLParser.ruleflow_group_key_return ruleflow_group_key102 = null;


        Object STRING103_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:616:2: ( ruleflow_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:616:4: ruleflow_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ruleflow_group_key_in_ruleflow_group2018);
            ruleflow_group_key102=ruleflow_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(ruleflow_group_key102.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING103=(Token)match(input,STRING,FOLLOW_STRING_in_ruleflow_group2023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING103_tree = (Object)adaptor.create(STRING103);
            adaptor.addChild(root_0, STRING103_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING103, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group"

    public static class agenda_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group"
    // src/main/resources/org/drools/lang/DRL.g:620:1: agenda_group : agenda_group_key STRING ;
    public final DRLParser.agenda_group_return agenda_group() throws RecognitionException {
        DRLParser.agenda_group_return retval = new DRLParser.agenda_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING105=null;
        DRLParser.agenda_group_key_return agenda_group_key104 = null;


        Object STRING105_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:621:2: ( agenda_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:621:4: agenda_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_agenda_group_key_in_agenda_group2037);
            agenda_group_key104=agenda_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(agenda_group_key104.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING105=(Token)match(input,STRING,FOLLOW_STRING_in_agenda_group2042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING105_tree = (Object)adaptor.create(STRING105);
            adaptor.addChild(root_0, STRING105_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING105, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group"

    public static class timer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer"
    // src/main/resources/org/drools/lang/DRL.g:625:1: timer : ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) ;
    public final DRLParser.timer_return timer() throws RecognitionException {
        DRLParser.timer_return retval = new DRLParser.timer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.duration_key_return duration_key106 = null;

        DRLParser.timer_key_return timer_key107 = null;

        DRLParser.signed_decimal_return signed_decimal108 = null;

        DRLParser.paren_chunk_return paren_chunk109 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:626:2: ( ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:626:4: ( duration_key | timer_key ) ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:626:4: ( duration_key | timer_key )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
                int LA35_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                    alt35=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }
            switch (alt35) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:626:5: duration_key
                    {
                    pushFollow(FOLLOW_duration_key_in_timer2057);
                    duration_key106=duration_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(duration_key106.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:626:19: timer_key
                    {
                    pushFollow(FOLLOW_timer_key_in_timer2060);
                    timer_key107=timer_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(timer_key107.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:627:3: ( signed_decimal | paren_chunk )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DECIMAL||(LA36_0>=PLUS && LA36_0<=MINUS)) ) {
                alt36=1;
            }
            else if ( (LA36_0==LEFT_PAREN) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:627:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_timer2071);
                    signed_decimal108=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal108.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:628:9: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_timer2082);
                    paren_chunk109=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk109.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer"

    public static class calendars_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars"
    // src/main/resources/org/drools/lang/DRL.g:632:1: calendars : calendars_key string_list ;
    public final DRLParser.calendars_return calendars() throws RecognitionException {
        DRLParser.calendars_return retval = new DRLParser.calendars_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.calendars_key_return calendars_key110 = null;

        DRLParser.string_list_return string_list111 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:633:2: ( calendars_key string_list )
            // src/main/resources/org/drools/lang/DRL.g:633:4: calendars_key string_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_calendars_key_in_calendars2103);
            calendars_key110=calendars_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(calendars_key110.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            pushFollow(FOLLOW_string_list_in_calendars2108);
            string_list111=string_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_list111.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars"

    public static class dialect_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect"
    // src/main/resources/org/drools/lang/DRL.g:636:1: dialect : dialect_key STRING ;
    public final DRLParser.dialect_return dialect() throws RecognitionException {
        DRLParser.dialect_return retval = new DRLParser.dialect_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING113=null;
        DRLParser.dialect_key_return dialect_key112 = null;


        Object STRING113_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:637:2: ( dialect_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:637:4: dialect_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_dialect_key_in_dialect2119);
            dialect_key112=dialect_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(dialect_key112.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING113=(Token)match(input,STRING,FOLLOW_STRING_in_dialect2124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING113_tree = (Object)adaptor.create(STRING113);
            adaptor.addChild(root_0, STRING113_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING113, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect"

    public static class lock_on_active_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active"
    // src/main/resources/org/drools/lang/DRL.g:641:1: lock_on_active : lock_on_active_key ( BOOL )? ;
    public final DRLParser.lock_on_active_return lock_on_active() throws RecognitionException {
        DRLParser.lock_on_active_return retval = new DRLParser.lock_on_active_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL115=null;
        DRLParser.lock_on_active_key_return lock_on_active_key114 = null;


        Object BOOL115_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:642:2: ( lock_on_active_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:642:4: lock_on_active_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lock_on_active_key_in_lock_on_active2142);
            lock_on_active_key114=lock_on_active_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(lock_on_active_key114.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:642:80: ( BOOL )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==BOOL) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:642:80: BOOL
                    {
                    BOOL115=(Token)match(input,BOOL,FOLLOW_BOOL_in_lock_on_active2147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL115_tree = (Object)adaptor.create(BOOL115);
                    adaptor.addChild(root_0, BOOL115_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL115, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active"

    public static class normal_lhs_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normal_lhs_block"
    // src/main/resources/org/drools/lang/DRL.g:649:1: normal_lhs_block : ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) ;
    public final DRLParser.normal_lhs_block_return normal_lhs_block() throws RecognitionException {
        DRLParser.normal_lhs_block_return retval = new DRLParser.normal_lhs_block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_return lhs116 = null;


        RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs");
        try {
            // src/main/resources/org/drools/lang/DRL.g:650:2: ( ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) )
            // src/main/resources/org/drools/lang/DRL.g:650:4: ( lhs )*
            {
            // src/main/resources/org/drools/lang/DRL.g:650:4: ( lhs )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==ID) ) {
                    int LA38_1 = input.LA(2);

                    if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) ) {
                        alt38=1;
                    }


                }
                else if ( (LA38_0==LEFT_PAREN) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:650:4: lhs
            	    {
            	    pushFollow(FOLLOW_lhs_in_normal_lhs_block2165);
            	    lhs116=lhs();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_lhs.add(lhs116.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);



            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:2: -> ^( VT_AND_IMPLICIT ( lhs )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:651:5: ^( VT_AND_IMPLICIT ( lhs )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_IMPLICIT, "VT_AND_IMPLICIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:651:23: ( lhs )*
                while ( stream_lhs.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs.nextTree());

                }
                stream_lhs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normal_lhs_block"

    public static class lhs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs"
    // src/main/resources/org/drools/lang/DRL.g:654:1: lhs : lhs_or ;
    public final DRLParser.lhs_return lhs() throws RecognitionException {
        DRLParser.lhs_return retval = new DRLParser.lhs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_or_return lhs_or117 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:654:5: ( lhs_or )
            // src/main/resources/org/drools/lang/DRL.g:654:7: lhs_or
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_or_in_lhs2186);
            lhs_or117=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or117.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs"

    public static class lhs_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_or"
    // src/main/resources/org/drools/lang/DRL.g:657:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );
    public final DRLParser.lhs_or_return lhs_or() throws RecognitionException {
        DRLParser.lhs_or_return retval = new DRLParser.lhs_or_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN118=null;
        Token RIGHT_PAREN120=null;
        DRLParser.or_key_return or = null;

        DRLParser.or_key_return value = null;

        DRLParser.lhs_and_return lhs_and119 = null;

        DRLParser.lhs_and_return lhs_and121 = null;

        DRLParser.lhs_and_return lhs_and122 = null;


        Object LEFT_PAREN118_tree=null;
        Object RIGHT_PAREN120_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_lhs_and=new RewriteRuleSubtreeStream(adaptor,"rule lhs_and");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:660:3: ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==LEFT_PAREN) ) {
                int LA41_1 = input.LA(2);

                if ( (synpred1_DRL()) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA41_0==ID) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:660:5: ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN
                    {
                    LEFT_PAREN118=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or2210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN118);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN118, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_key_in_lhs_or2220);
                    or=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:664:4: ( lhs_and )+
                    int cnt39=0;
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==ID||LA39_0==LEFT_PAREN) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:664:4: lhs_and
                    	    {
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2228);
                    	    lhs_and119=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and119.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt39 >= 1 ) break loop39;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(39, input);
                                throw eee;
                        }
                        cnt39++;
                    } while (true);

                    RIGHT_PAREN120=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or2234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN120);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN120, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: lhs_and, RIGHT_PAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 666:3: -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:666:6: ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_PREFIX, (or!=null?((Token)or.start):null)), root_1);

                        if ( !(stream_lhs_and.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_and.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_and.nextTree());

                        }
                        stream_lhs_and.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:667:4: ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:667:4: ( lhs_and -> lhs_and )
                    // src/main/resources/org/drools/lang/DRL.g:667:5: lhs_and
                    {
                    pushFollow(FOLLOW_lhs_and_in_lhs_or2257);
                    lhs_and121=lhs_and();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and121.getTree());


                    // AST REWRITE
                    // elements: lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 667:13: -> lhs_and
                    {
                        adaptor.addChild(root_0, stream_lhs_and.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:668:3: ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ID) ) {
                            int LA40_1 = input.LA(2);

                            if ( ((synpred2_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) ) {
                                alt40=1;
                            }


                        }


                        switch (alt40) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:668:5: ( or_key )=> (value= or_key ) lhs_and
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:668:16: (value= or_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:668:17: value= or_key
                    	    {
                    	    pushFollow(FOLLOW_or_key_in_lhs_or2277);
                    	    value=or_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      orToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2289);
                    	    lhs_and122=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and122.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_and, lhs_or
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 671:3: -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:671:6: ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_INFIX, orToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_and.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_or"

    public static class lhs_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_and"
    // src/main/resources/org/drools/lang/DRL.g:674:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );
    public final DRLParser.lhs_and_return lhs_and() throws RecognitionException {
        DRLParser.lhs_and_return retval = new DRLParser.lhs_and_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN123=null;
        Token RIGHT_PAREN125=null;
        DRLParser.and_key_return and = null;

        DRLParser.and_key_return value = null;

        DRLParser.lhs_unary_return lhs_unary124 = null;

        DRLParser.lhs_unary_return lhs_unary126 = null;

        DRLParser.lhs_unary_return lhs_unary127 = null;


        Object LEFT_PAREN123_tree=null;
        Object RIGHT_PAREN125_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_unary=new RewriteRuleSubtreeStream(adaptor,"rule lhs_unary");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");

        	Token andToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:677:3: ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==LEFT_PAREN) ) {
                int LA44_1 = input.LA(2);

                if ( (synpred3_DRL()) ) {
                    alt44=1;
                }
                else if ( (true) ) {
                    alt44=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA44_0==ID) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:677:5: ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN
                    {
                    LEFT_PAREN123=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and2330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN123);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN123, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_and_key_in_lhs_and2340);
                    and=and_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_and_key.add(and.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:681:4: ( lhs_unary )+
                    int cnt42=0;
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==ID||LA42_0==LEFT_PAREN) ) {
                            alt42=1;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:681:4: lhs_unary
                    	    {
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2348);
                    	    lhs_unary124=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary124.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt42 >= 1 ) break loop42;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(42, input);
                                throw eee;
                        }
                        cnt42++;
                    } while (true);

                    RIGHT_PAREN125=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and2354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN125);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN125, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: lhs_unary, RIGHT_PAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 683:3: -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:683:6: ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_PREFIX, (and!=null?((Token)and.start):null)), root_1);

                        if ( !(stream_lhs_unary.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_unary.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                        }
                        stream_lhs_unary.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:684:4: ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:684:4: ( lhs_unary -> lhs_unary )
                    // src/main/resources/org/drools/lang/DRL.g:684:5: lhs_unary
                    {
                    pushFollow(FOLLOW_lhs_unary_in_lhs_and2378);
                    lhs_unary126=lhs_unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary126.getTree());


                    // AST REWRITE
                    // elements: lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 684:15: -> lhs_unary
                    {
                        adaptor.addChild(root_0, stream_lhs_unary.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:685:3: ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==ID) ) {
                            int LA43_2 = input.LA(2);

                            if ( ((synpred4_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.AND))))) ) {
                                alt43=1;
                            }


                        }


                        switch (alt43) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:685:5: ( and_key )=> (value= and_key ) lhs_unary
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:685:17: (value= and_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:685:18: value= and_key
                    	    {
                    	    pushFollow(FOLLOW_and_key_in_lhs_and2398);
                    	    value=and_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_and_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      andToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2410);
                    	    lhs_unary127=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary127.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_and, lhs_unary
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 688:3: -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:688:6: ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_INFIX, andToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_and"

    public static class lhs_unary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_unary"
    // src/main/resources/org/drools/lang/DRL.g:691:1: lhs_unary : ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ;
    public final DRLParser.lhs_unary_return lhs_unary() throws RecognitionException {
        DRLParser.lhs_unary_return retval = new DRLParser.lhs_unary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN134=null;
        Token RIGHT_PAREN136=null;
        DRLParser.lhs_exist_return lhs_exist128 = null;

        DRLParser.lhs_not_binding_return lhs_not_binding129 = null;

        DRLParser.lhs_not_return lhs_not130 = null;

        DRLParser.lhs_eval_return lhs_eval131 = null;

        DRLParser.lhs_forall_return lhs_forall132 = null;

        DRLParser.lhs_for_return lhs_for133 = null;

        DRLParser.lhs_or_return lhs_or135 = null;

        DRLParser.pattern_source_return pattern_source137 = null;


        Object LEFT_PAREN134_tree=null;
        Object RIGHT_PAREN136_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:692:2: ( ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) )
            // src/main/resources/org/drools/lang/DRL.g:692:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:692:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )
            int alt45=8;
            alt45 = dfa45.predict(input);
            switch (alt45) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:692:6: lhs_exist
                    {
                    pushFollow(FOLLOW_lhs_exist_in_lhs_unary2441);
                    lhs_exist128=lhs_exist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_exist128.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:693:4: {...}? => lhs_not_binding
                    {
                    if ( !((helper.validateNotWithBinding())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "lhs_unary", "helper.validateNotWithBinding()");
                    }
                    pushFollow(FOLLOW_lhs_not_binding_in_lhs_unary2449);
                    lhs_not_binding129=lhs_not_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not_binding129.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:694:5: lhs_not
                    {
                    pushFollow(FOLLOW_lhs_not_in_lhs_unary2455);
                    lhs_not130=lhs_not();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not130.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:695:5: lhs_eval
                    {
                    pushFollow(FOLLOW_lhs_eval_in_lhs_unary2461);
                    lhs_eval131=lhs_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_eval131.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:696:5: lhs_forall
                    {
                    pushFollow(FOLLOW_lhs_forall_in_lhs_unary2467);
                    lhs_forall132=lhs_forall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_forall132.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:697:6: lhs_for
                    {
                    pushFollow(FOLLOW_lhs_for_in_lhs_unary2474);
                    lhs_for133=lhs_for();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_for133.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:698:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN134=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary2480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN134, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_unary2491);
                    lhs_or135=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or135.getTree());
                    RIGHT_PAREN136=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary2497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN136_tree = (Object)adaptor.create(RIGHT_PAREN136);
                    adaptor.addChild(root_0, RIGHT_PAREN136_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN136, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:701:5: pattern_source
                    {
                    pushFollow(FOLLOW_pattern_source_in_lhs_unary2505);
                    pattern_source137=pattern_source();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_source137.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_unary"

    public static class lhs_exist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_exist"
    // src/main/resources/org/drools/lang/DRL.g:705:1: lhs_exist : exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_exist_return lhs_exist() throws RecognitionException {
        DRLParser.lhs_exist_return retval = new DRLParser.lhs_exist_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN140=null;
        Token RIGHT_PAREN142=null;
        DRLParser.exists_key_return exists_key138 = null;

        DRLParser.lhs_or_return lhs_or139 = null;

        DRLParser.lhs_or_return lhs_or141 = null;

        DRLParser.lhs_pattern_return lhs_pattern143 = null;


        Object LEFT_PAREN140_tree=null;
        Object RIGHT_PAREN142_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_exists_key=new RewriteRuleSubtreeStream(adaptor,"rule exists_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:706:2: ( exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:706:4: exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_exists_key_in_lhs_exist2520);
            exists_key138=exists_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exists_key.add(exists_key138.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS);	
            }
            // src/main/resources/org/drools/lang/DRL.g:708:10: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt46=3;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==LEFT_PAREN) ) {
                int LA46_1 = input.LA(2);

                if ( (synpred5_DRL()) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==ID) ) {
                int LA46_2 = input.LA(2);

                if ( ((synpred5_DRL()||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))||((synpred5_DRL()&&(helper.validateNotWithBinding()))&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FOR))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:708:12: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2547);
                    lhs_or139=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or139.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:709:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN140=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_exist2554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN140);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN140, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2562);
                    lhs_or141=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or141.getTree());
                    RIGHT_PAREN142=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_exist2569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN142);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN142, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:712:12: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_exist2584);
                    lhs_pattern143=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern143.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: RIGHT_PAREN, lhs_pattern, exists_key, lhs_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:10: -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:714:13: ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exists_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:714:26: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:714:34: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:714:47: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_exist"

    public static class lhs_not_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not_binding"
    // src/main/resources/org/drools/lang/DRL.g:717:1: lhs_not_binding : not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) ;
    public final DRLParser.lhs_not_binding_return lhs_not_binding() throws RecognitionException {
        DRLParser.lhs_not_binding_return retval = new DRLParser.lhs_not_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.not_key_return not_key144 = null;

        DRLParser.fact_binding_return fact_binding145 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:718:2: ( not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) )
            // src/main/resources/org/drools/lang/DRL.g:718:4: not_key fact_binding
            {
            pushFollow(FOLLOW_not_key_in_lhs_not_binding2630);
            not_key144=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key144.getTree());
            pushFollow(FOLLOW_fact_binding_in_lhs_not_binding2632);
            fact_binding145=fact_binding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding145.getTree());


            // AST REWRITE
            // elements: not_key, fact_binding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 719:2: -> ^( not_key ^( VT_PATTERN fact_binding ) )
            {
                // src/main/resources/org/drools/lang/DRL.g:719:5: ^( not_key ^( VT_PATTERN fact_binding ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:719:15: ^( VT_PATTERN fact_binding )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_2);

                adaptor.addChild(root_2, stream_fact_binding.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not_binding"

    public static class lhs_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not"
    // src/main/resources/org/drools/lang/DRL.g:722:1: lhs_not : not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_not_return lhs_not() throws RecognitionException {
        DRLParser.lhs_not_return retval = new DRLParser.lhs_not_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN148=null;
        Token RIGHT_PAREN150=null;
        DRLParser.not_key_return not_key146 = null;

        DRLParser.lhs_or_return lhs_or147 = null;

        DRLParser.lhs_or_return lhs_or149 = null;

        DRLParser.lhs_pattern_return lhs_pattern151 = null;


        Object LEFT_PAREN148_tree=null;
        Object RIGHT_PAREN150_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        try {
            // src/main/resources/org/drools/lang/DRL.g:722:9: ( not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:722:11: not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_not_key_in_lhs_not2655);
            not_key146=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key146.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_NOT);	
            }
            // src/main/resources/org/drools/lang/DRL.g:724:3: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt47=3;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==LEFT_PAREN) ) {
                int LA47_1 = input.LA(2);

                if ( (synpred6_DRL()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA47_0==ID) ) {
                int LA47_2 = input.LA(2);

                if ( (synpred6_DRL()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:724:5: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2677);
                    lhs_or147=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or147.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:725:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN148=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_not2684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN148);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN148, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2693);
                    lhs_or149=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or149.getTree());
                    RIGHT_PAREN150=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_not2699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN150);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN150, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:728:6: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_not2709);
                    lhs_pattern151=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern151.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: not_key, RIGHT_PAREN, lhs_or, lhs_pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 729:10: -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:729:13: ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:729:23: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:729:31: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:729:44: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not"

    public static class lhs_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_eval"
    // src/main/resources/org/drools/lang/DRL.g:732:1: lhs_eval : ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) ;
    public final DRLParser.lhs_eval_return lhs_eval() throws RecognitionException {
        DRLParser.lhs_eval_return retval = new DRLParser.lhs_eval_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.eval_key_return ev = null;

        DRLParser.paren_chunk_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_eval_key=new RewriteRuleSubtreeStream(adaptor,"rule eval_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:733:2: (ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:733:4: ev= eval_key pc= paren_chunk
            {
            pushFollow(FOLLOW_eval_key_in_lhs_eval2748);
            ev=eval_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eval_key.add(ev.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_EVAL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_lhs_eval2757);
            pc=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(pc.getTree());
            if ( state.backtracking==0 ) {
              	if (((DroolsTree) (pc!=null?((Object)pc.tree):null)).getText() != null){
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	            		
              		}
              	
            }
            if ( state.backtracking==0 ) {
              	String body = helper.safeSubstring( (pc!=null?input.toString(pc.start,pc.stop):null), 1, (pc!=null?input.toString(pc.start,pc.stop):null).length()-1 );
              		helper.checkTrailingSemicolon( body, (ev!=null?((Token)ev.start):null) );	
            }


            // AST REWRITE
            // elements: paren_chunk, eval_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 742:3: -> ^( eval_key paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:742:6: ^( eval_key paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_eval_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_eval"

    public static class lhs_forall_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_forall"
    // src/main/resources/org/drools/lang/DRL.g:745:1: lhs_forall : forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) ;
    public final DRLParser.lhs_forall_return lhs_forall() throws RecognitionException {
        DRLParser.lhs_forall_return retval = new DRLParser.lhs_forall_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN153=null;
        Token RIGHT_PAREN155=null;
        DRLParser.forall_key_return forall_key152 = null;

        DRLParser.pattern_source_return pattern_source154 = null;


        Object LEFT_PAREN153_tree=null;
        Object RIGHT_PAREN155_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:746:2: ( forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:746:4: forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN
            {
            pushFollow(FOLLOW_forall_key_in_lhs_forall2784);
            forall_key152=forall_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forall_key.add(forall_key152.getTree());
            LEFT_PAREN153=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN153);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN153, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:748:4: ( pattern_source )+
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==ID) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:748:4: pattern_source
            	    {
            	    pushFollow(FOLLOW_pattern_source_in_lhs_forall2797);
            	    pattern_source154=pattern_source();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source154.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);

            RIGHT_PAREN155=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN155);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN155, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: forall_key, RIGHT_PAREN, pattern_source
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 750:3: -> ^( forall_key ( pattern_source )+ RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:750:6: ^( forall_key ( pattern_source )+ RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_forall_key.nextNode(), root_1);

                if ( !(stream_pattern_source.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pattern_source.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern_source.nextTree());

                }
                stream_pattern_source.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_forall"

    public static class lhs_for_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_for"
    // src/main/resources/org/drools/lang/DRL.g:753:1: lhs_for : for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN -> ^( VT_FOR_CE lhs_or for_functions ( constraints )? ) ;
    public final DRLParser.lhs_for_return lhs_for() throws RecognitionException {
        DRLParser.lhs_for_return retval = new DRLParser.lhs_for_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN157=null;
        Token SEMICOLON159=null;
        Token SEMICOLON161=null;
        Token RIGHT_PAREN163=null;
        DRLParser.for_key_return for_key156 = null;

        DRLParser.lhs_or_return lhs_or158 = null;

        DRLParser.for_functions_return for_functions160 = null;

        DRLParser.constraints_return constraints162 = null;


        Object LEFT_PAREN157_tree=null;
        Object SEMICOLON159_tree=null;
        Object SEMICOLON161_tree=null;
        Object RIGHT_PAREN163_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_for_functions=new RewriteRuleSubtreeStream(adaptor,"rule for_functions");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:754:2: ( for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN -> ^( VT_FOR_CE lhs_or for_functions ( constraints )? ) )
            // src/main/resources/org/drools/lang/DRL.g:754:4: for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_for_key_in_lhs_for2829);
            for_key156=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key156.getTree());
            LEFT_PAREN157=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_for2834); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN157);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN157, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_lhs_for2842);
            lhs_or158=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or158.getTree());
            SEMICOLON159=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON159);

            pushFollow(FOLLOW_for_functions_in_lhs_for2849);
            for_functions160=for_functions();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_functions.add(for_functions160.getTree());
            // src/main/resources/org/drools/lang/DRL.g:758:4: ( SEMICOLON constraints )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SEMICOLON) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:758:5: SEMICOLON constraints
                    {
                    SEMICOLON161=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON161);

                    pushFollow(FOLLOW_constraints_in_lhs_for2857);
                    constraints162=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints162.getTree());

                    }
                    break;

            }

            RIGHT_PAREN163=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_for2863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN163);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN163, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: lhs_or, constraints, for_functions
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 760:3: -> ^( VT_FOR_CE lhs_or for_functions ( constraints )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:760:6: ^( VT_FOR_CE lhs_or for_functions ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FOR_CE, "VT_FOR_CE"), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                adaptor.addChild(root_1, stream_for_functions.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:760:39: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_for"

    public static class for_functions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_functions"
    // src/main/resources/org/drools/lang/DRL.g:763:1: for_functions : for_function ( COMMA for_function )* -> ^( VT_FOR_FUNCTIONS ( for_function )+ ) ;
    public final DRLParser.for_functions_return for_functions() throws RecognitionException {
        DRLParser.for_functions_return retval = new DRLParser.for_functions_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA165=null;
        DRLParser.for_function_return for_function164 = null;

        DRLParser.for_function_return for_function166 = null;


        Object COMMA165_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_for_function=new RewriteRuleSubtreeStream(adaptor,"rule for_function");
        try {
            // src/main/resources/org/drools/lang/DRL.g:764:2: ( for_function ( COMMA for_function )* -> ^( VT_FOR_FUNCTIONS ( for_function )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:764:4: for_function ( COMMA for_function )*
            {
            pushFollow(FOLLOW_for_function_in_for_functions2892);
            for_function164=for_function();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_function.add(for_function164.getTree());
            // src/main/resources/org/drools/lang/DRL.g:764:17: ( COMMA for_function )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:764:19: COMMA for_function
            	    {
            	    COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_for_functions2896); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA165);

            	    pushFollow(FOLLOW_for_function_in_for_functions2898);
            	    for_function166=for_function();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_for_function.add(for_function166.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: for_function
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 765:3: -> ^( VT_FOR_FUNCTIONS ( for_function )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:765:6: ^( VT_FOR_FUNCTIONS ( for_function )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FOR_FUNCTIONS, "VT_FOR_FUNCTIONS"), root_1);

                if ( !(stream_for_function.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_for_function.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_function.nextTree());

                }
                stream_for_function.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_functions"

    public static class for_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_function"
    // src/main/resources/org/drools/lang/DRL.g:768:1: for_function : label ID arguments -> ^( ID label arguments ) ;
    public final DRLParser.for_function_return for_function() throws RecognitionException {
        DRLParser.for_function_return retval = new DRLParser.for_function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID168=null;
        DRLParser.label_return label167 = null;

        DRLParser.arguments_return arguments169 = null;


        Object ID168_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        try {
            // src/main/resources/org/drools/lang/DRL.g:769:2: ( label ID arguments -> ^( ID label arguments ) )
            // src/main/resources/org/drools/lang/DRL.g:769:5: label ID arguments
            {
            pushFollow(FOLLOW_label_in_for_function2927);
            label167=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label.add(label167.getTree());
            ID168=(Token)match(input,ID,FOLLOW_ID_in_for_function2929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID168);

            pushFollow(FOLLOW_arguments_in_for_function2931);
            arguments169=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments169.getTree());


            // AST REWRITE
            // elements: arguments, ID, label
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 770:3: -> ^( ID label arguments )
            {
                // src/main/resources/org/drools/lang/DRL.g:770:6: ^( ID label arguments )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ID.nextNode(), root_1);

                adaptor.addChild(root_1, stream_label.nextTree());
                adaptor.addChild(root_1, stream_arguments.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_function"

    public static class pattern_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_source"
    // src/main/resources/org/drools/lang/DRL.g:773:1: pattern_source : lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? ;
    public final DRLParser.pattern_source_return pattern_source() throws RecognitionException {
        DRLParser.pattern_source_return retval = new DRLParser.pattern_source_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FROM172=null;
        DRLParser.lhs_pattern_return lhs_pattern170 = null;

        DRLParser.over_clause_return over_clause171 = null;

        DRLParser.accumulate_statement_return accumulate_statement173 = null;

        DRLParser.collect_statement_return collect_statement174 = null;

        DRLParser.entrypoint_statement_return entrypoint_statement175 = null;

        DRLParser.from_source_return from_source176 = null;


        Object FROM172_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:776:2: ( lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? )
            // src/main/resources/org/drools/lang/DRL.g:776:4: lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_pattern_in_pattern_source2965);
            lhs_pattern170=lhs_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_pattern170.getTree());
            // src/main/resources/org/drools/lang/DRL.g:777:3: ( over_clause )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==OVER) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:777:3: over_clause
                    {
                    pushFollow(FOLLOW_over_clause_in_pattern_source2969);
                    over_clause171=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause171.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:778:3: ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==FROM) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:779:4: FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    {
                    FROM172=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FROM172_tree = (Object)adaptor.create(FROM172);
                    root_0 = (Object)adaptor.becomeRoot(FROM172_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FROM172, DroolsEditorType.KEYWORD);
                      			helper.emit(Location.LOCATION_LHS_FROM);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:782:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    int alt52=4;
                    alt52 = dfa52.predict(input);
                    switch (alt52) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:782:14: accumulate_statement
                            {
                            pushFollow(FOLLOW_accumulate_statement_in_pattern_source2999);
                            accumulate_statement173=accumulate_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_statement173.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:783:15: collect_statement
                            {
                            pushFollow(FOLLOW_collect_statement_in_pattern_source3015);
                            collect_statement174=collect_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collect_statement174.getTree());

                            }
                            break;
                        case 3 :
                            // src/main/resources/org/drools/lang/DRL.g:784:15: entrypoint_statement
                            {
                            pushFollow(FOLLOW_entrypoint_statement_in_pattern_source3032);
                            entrypoint_statement175=entrypoint_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, entrypoint_statement175.getTree());

                            }
                            break;
                        case 4 :
                            // src/main/resources/org/drools/lang/DRL.g:785:15: from_source
                            {
                            pushFollow(FOLLOW_from_source_in_pattern_source3048);
                            from_source176=from_source();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_source176.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_ACCUMULATE);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_COLLECT);
            	}

        }
        return retval;
    }
    // $ANTLR end "pattern_source"

    public static class over_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_clause"
    // src/main/resources/org/drools/lang/DRL.g:803:1: over_clause : OVER over_elements ( COMMA over_elements )* ;
    public final DRLParser.over_clause_return over_clause() throws RecognitionException {
        DRLParser.over_clause_return retval = new DRLParser.over_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OVER177=null;
        Token COMMA179=null;
        DRLParser.over_elements_return over_elements178 = null;

        DRLParser.over_elements_return over_elements180 = null;


        Object OVER177_tree=null;
        Object COMMA179_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:804:2: ( OVER over_elements ( COMMA over_elements )* )
            // src/main/resources/org/drools/lang/DRL.g:804:4: OVER over_elements ( COMMA over_elements )*
            {
            root_0 = (Object)adaptor.nil();

            OVER177=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause3080); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OVER177_tree = (Object)adaptor.create(OVER177);
            root_0 = (Object)adaptor.becomeRoot(OVER177_tree, root_0);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(OVER177, DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_over_elements_in_over_clause3085);
            over_elements178=over_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements178.getTree());
            // src/main/resources/org/drools/lang/DRL.g:805:4: ( COMMA over_elements )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==COMMA) ) {
                    int LA54_2 = input.LA(2);

                    if ( (LA54_2==ID) ) {
                        int LA54_3 = input.LA(3);

                        if ( (LA54_3==COLON) ) {
                            alt54=1;
                        }


                    }


                }


                switch (alt54) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:805:5: COMMA over_elements
            	    {
            	    COMMA179=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause3092); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA179, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_over_elements_in_over_clause3097);
            	    over_elements180=over_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements180.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_clause"

    public static class over_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_elements"
    // src/main/resources/org/drools/lang/DRL.g:808:1: over_elements : id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) ;
    public final DRLParser.over_elements_return over_elements() throws RecognitionException {
        DRLParser.over_elements_return retval = new DRLParser.over_elements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token t=null;
        Token COLON181=null;
        Token LEFT_PAREN182=null;
        Token RIGHT_PAREN183=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object t_tree=null;
        Object COLON181_tree=null;
        Object LEFT_PAREN182_tree=null;
        Object RIGHT_PAREN183_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_TimePeriod=new RewriteRuleTokenStream(adaptor,"token TimePeriod");

        try {
            // src/main/resources/org/drools/lang/DRL.g:809:2: (id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) )
            // src/main/resources/org/drools/lang/DRL.g:809:4: id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN
            {
            id1=(Token)match(input,ID,FOLLOW_ID_in_over_elements3112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.IDENTIFIER);	
            }
            COLON181=(Token)match(input,COLON,FOLLOW_COLON_in_over_elements3119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON181);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON181, DroolsEditorType.SYMBOL);	
            }
            id2=(Token)match(input,ID,FOLLOW_ID_in_over_elements3128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              	helper.emit(id2, DroolsEditorType.IDENTIFIER);	
            }
            LEFT_PAREN182=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_over_elements3135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN182);

            // src/main/resources/org/drools/lang/DRL.g:813:4: (t= TimePeriod | t= DECIMAL )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==TimePeriod) ) {
                alt55=1;
            }
            else if ( (LA55_0==DECIMAL) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:814:5: t= TimePeriod
                    {
                    t=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_over_elements3150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TimePeriod.add(t);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:814:20: t= DECIMAL
                    {
                    t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_over_elements3156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(t);


                    }
                    break;

            }

            RIGHT_PAREN183=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_over_elements3166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN183);



            // AST REWRITE
            // elements: id2, id1
            // token labels: id2, id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 817:2: -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
            {
                // src/main/resources/org/drools/lang/DRL.g:817:5: ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BEHAVIOR, "VT_BEHAVIOR"), root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());
                adaptor.addChild(root_1, stream_id2.nextNode());
                adaptor.addChild(root_1, (Object)adaptor.create(VT_PAREN_CHUNK, t));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_elements"

    public static class accumulate_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_statement"
    // src/main/resources/org/drools/lang/DRL.g:820:1: accumulate_statement : ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) ;
    public final DRLParser.accumulate_statement_return accumulate_statement() throws RecognitionException {
        DRLParser.accumulate_statement_return retval = new DRLParser.accumulate_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ACCUMULATE184=null;
        Token LEFT_PAREN185=null;
        Token COMMA187=null;
        Token RIGHT_PAREN190=null;
        DRLParser.lhs_or_return lhs_or186 = null;

        DRLParser.accumulate_init_clause_return accumulate_init_clause188 = null;

        DRLParser.accumulate_id_clause_return accumulate_id_clause189 = null;


        Object ACCUMULATE184_tree=null;
        Object LEFT_PAREN185_tree=null;
        Object COMMA187_tree=null;
        Object RIGHT_PAREN190_tree=null;
        RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
        RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        try {
            // src/main/resources/org/drools/lang/DRL.g:821:2: ( ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:821:4: ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN
            {
            ACCUMULATE184=(Token)match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement3193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ACCUMULATE.add(ACCUMULATE184);

            if ( state.backtracking==0 ) {
              	helper.emit(ACCUMULATE184, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE);	
            }
            LEFT_PAREN185=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement3202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN185);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN185, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_accumulate_statement3210);
            lhs_or186=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or186.getTree());
            // src/main/resources/org/drools/lang/DRL.g:825:3: ( COMMA )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==COMMA) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:825:3: COMMA
                    {
                    COMMA187=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement3215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA187);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COMMA187, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:826:3: ( accumulate_init_clause | accumulate_id_clause )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ID) ) {
                int LA57_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                    alt57=1;
                }
                else if ( (true) ) {
                    alt57=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:826:5: accumulate_init_clause
                    {
                    pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement3225);
                    accumulate_init_clause188=accumulate_init_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_init_clause.add(accumulate_init_clause188.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:827:5: accumulate_id_clause
                    {
                    pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement3231);
                    accumulate_id_clause189=accumulate_id_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_id_clause.add(accumulate_id_clause189.getTree());

                    }
                    break;

            }

            RIGHT_PAREN190=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement3239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN190);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN190, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, ACCUMULATE, accumulate_init_clause, lhs_or, accumulate_id_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 831:3: -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:831:6: ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ACCUMULATE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:831:26: ( accumulate_init_clause )?
                if ( stream_accumulate_init_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_init_clause.nextTree());

                }
                stream_accumulate_init_clause.reset();
                // src/main/resources/org/drools/lang/DRL.g:831:50: ( accumulate_id_clause )?
                if ( stream_accumulate_id_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_id_clause.nextTree());

                }
                stream_accumulate_id_clause.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_statement"

    public static class accumulate_init_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_init_clause"
    // src/main/resources/org/drools/lang/DRL.g:835:1: accumulate_init_clause : init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) ;
    public final DRLParser.accumulate_init_clause_return accumulate_init_clause() throws RecognitionException {
        DRLParser.accumulate_init_clause_return retval = new DRLParser.accumulate_init_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token cm1=null;
        Token cm2=null;
        Token cm3=null;
        DRLParser.accumulate_paren_chunk_return pc1 = null;

        DRLParser.accumulate_paren_chunk_return pc2 = null;

        DRLParser.accumulate_paren_chunk_return pc3 = null;

        DRLParser.result_key_return res1 = null;

        DRLParser.accumulate_paren_chunk_return pc4 = null;

        DRLParser.init_key_return init_key191 = null;

        DRLParser.action_key_return action_key192 = null;

        DRLParser.reverse_key_return reverse_key193 = null;


        Object cm1_tree=null;
        Object cm2_tree=null;
        Object cm3_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
        RewriteRuleSubtreeStream stream_accumulate_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk");
        RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_init_key=new RewriteRuleSubtreeStream(adaptor,"rule init_key");
         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:838:2: ( init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) )
            // src/main/resources/org/drools/lang/DRL.g:838:4: init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE]
            {
            pushFollow(FOLLOW_init_key_in_accumulate_init_clause3285);
            init_key191=init_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_init_key.add(init_key191.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3295);
            pc1=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc1.getTree());
            // src/main/resources/org/drools/lang/DRL.g:840:84: (cm1= COMMA )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==COMMA) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:840:84: cm1= COMMA
                    {
                    cm1=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm1, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);	
            }
            pushFollow(FOLLOW_action_key_in_accumulate_init_clause3311);
            action_key192=action_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_action_key.add(action_key192.getTree());
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3315);
            pc2=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:842:97: (cm2= COMMA )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==COMMA) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:842:97: cm2= COMMA
                    {
                    cm2=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm2);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm2, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null && pc2 != null && ((DroolsTree) pc2.getTree()).getText() != null ) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);	
            }
            // src/main/resources/org/drools/lang/DRL.g:844:2: ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==ID) ) {
                int LA61_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                    alt61=1;
                }
            }
            switch (alt61) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:844:4: reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )?
                    {
                    pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause3332);
                    reverse_key193=reverse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reverse_key.add(reverse_key193.getTree());
                    pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3336);
                    pc3=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc3.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:844:100: (cm3= COMMA )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==COMMA) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:844:100: cm3= COMMA
                            {
                            cm3=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3341); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(cm3);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      	helper.emit(cm3, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if ((pc1 != null && ((DroolsTree) pc1.tree).getText() != null) &&
                          			(pc2 != null && ((DroolsTree) pc2.tree).getText() != null) &&
                          			(pc3 != null && ((DroolsTree) pc3.tree).getText() != null)) {
              			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
              		}	
              	
            }
            pushFollow(FOLLOW_result_key_in_accumulate_init_clause3357);
            res1=result_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_key.add(res1.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit((res1!=null?((Token)res1.start):null), DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3363);
            pc4=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc4.getTree());


            // AST REWRITE
            // elements: reverse_key, pc1, pc4, pc3, action_key, pc2, init_key, result_key
            // token labels: 
            // rule labels: pc4, pc3, retval, pc1, pc2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"rule pc4",pc4!=null?pc4.tree:null);
            RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"rule pc3",pc3!=null?pc3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"rule pc1",pc1!=null?pc1.tree:null);
            RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"rule pc2",pc2!=null?pc2.tree:null);

            root_0 = (Object)adaptor.nil();
            // 853:2: -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
            {
                // src/main/resources/org/drools/lang/DRL.g:853:5: ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_INIT_CLAUSE, "VT_ACCUMULATE_INIT_CLAUSE"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:853:33: ^( init_key $pc1)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_init_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc1.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:853:50: ^( action_key $pc2)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_action_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc2.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:853:69: ( ^( reverse_key $pc3) )?
                if ( stream_reverse_key.hasNext()||stream_pc3.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:853:69: ^( reverse_key $pc3)
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_reverse_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_pc3.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_reverse_key.reset();
                stream_pc3.reset();
                // src/main/resources/org/drools/lang/DRL.g:853:90: ^( result_key $pc4)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_result_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc4.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.RESULT)) {
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		if (input.LA(1) == LEFT_PAREN){
            			input.consume();
            			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "accumulate_init_clause"

    public static class accumulate_paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:866:1: accumulate_paren_chunk[int locationType] : pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.accumulate_paren_chunk_return accumulate_paren_chunk(int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_return retval = new DRLParser.accumulate_paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accumulate_paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_accumulate_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:869:3: (pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:869:5: pc= accumulate_paren_chunk_data[false,$locationType]
            {
            pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3421);
            pc=accumulate_paren_chunk_data(false, locationType);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 870:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk"

    public static class accumulate_paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:873:1: accumulate_paren_chunk_data[boolean isRecursive, int locationType] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN ;
    public final DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data(boolean isRecursive, int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_data_return retval = new DRLParser.accumulate_paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data194 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:874:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:874:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              				helper.emit(locationType);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:882:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )*
            loop62:
            do {
                int alt62=3;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0>=VT_COMPILATION_UNIT && LA62_0<=BOOL)||(LA62_0>=FROM && LA62_0<=MISC)) ) {
                    alt62=1;
                }
                else if ( (LA62_0==LEFT_PAREN) ) {
                    alt62=2;
                }


                switch (alt62) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:882:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:882:94: accumulate_paren_chunk_data[true,-1]
            	    {
            	    pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3473);
            	    accumulate_paren_chunk_data194=accumulate_paren_chunk_data(true, -1);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_paren_chunk_data194.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3484); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk_data"

    public static class accumulate_id_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_id_clause"
    // src/main/resources/org/drools/lang/DRL.g:892:1: accumulate_id_clause : ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) ;
    public final DRLParser.accumulate_id_clause_return accumulate_id_clause() throws RecognitionException {
        DRLParser.accumulate_id_clause_return retval = new DRLParser.accumulate_id_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID195=null;
        DRLParser.paren_chunk_return paren_chunk196 = null;


        Object ID195_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:893:2: ( ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:893:4: ID paren_chunk
            {
            ID195=(Token)match(input,ID,FOLLOW_ID_in_accumulate_id_clause3500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID195);

            if ( state.backtracking==0 ) {
              	helper.emit(ID195, DroolsEditorType.IDENTIFIER);	
            }
            pushFollow(FOLLOW_paren_chunk_in_accumulate_id_clause3506);
            paren_chunk196=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk196.getTree());


            // AST REWRITE
            // elements: paren_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 895:2: -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:895:5: ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_ID_CLAUSE, "VT_ACCUMULATE_ID_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_id_clause"

    public static class collect_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collect_statement"
    // src/main/resources/org/drools/lang/DRL.g:898:1: collect_statement : COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) ;
    public final DRLParser.collect_statement_return collect_statement() throws RecognitionException {
        DRLParser.collect_statement_return retval = new DRLParser.collect_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLLECT197=null;
        Token LEFT_PAREN198=null;
        Token RIGHT_PAREN200=null;
        DRLParser.pattern_source_return pattern_source199 = null;


        Object COLLECT197_tree=null;
        Object LEFT_PAREN198_tree=null;
        Object RIGHT_PAREN200_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COLLECT=new RewriteRuleTokenStream(adaptor,"token COLLECT");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        try {
            // src/main/resources/org/drools/lang/DRL.g:899:2: ( COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:899:4: COLLECT LEFT_PAREN pattern_source RIGHT_PAREN
            {
            COLLECT197=(Token)match(input,COLLECT,FOLLOW_COLLECT_in_collect_statement3528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLLECT.add(COLLECT197);

            if ( state.backtracking==0 ) {
              	helper.emit(COLLECT197, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            LEFT_PAREN198=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement3537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN198);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN198, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_pattern_source_in_collect_statement3544);
            pattern_source199=pattern_source();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source199.getTree());
            RIGHT_PAREN200=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement3549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN200);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN200, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, COLLECT, pattern_source
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 905:2: -> ^( COLLECT pattern_source RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:905:5: ^( COLLECT pattern_source RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_COLLECT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_pattern_source.nextTree());
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "collect_statement"

    public static class entrypoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_statement"
    // src/main/resources/org/drools/lang/DRL.g:908:1: entrypoint_statement : entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) ;
    public final DRLParser.entrypoint_statement_return entrypoint_statement() throws RecognitionException {
        DRLParser.entrypoint_statement_return retval = new DRLParser.entrypoint_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.entry_point_key_return entry_point_key201 = null;

        DRLParser.entrypoint_id_return entrypoint_id202 = null;


        RewriteRuleSubtreeStream stream_entrypoint_id=new RewriteRuleSubtreeStream(adaptor,"rule entrypoint_id");
        RewriteRuleSubtreeStream stream_entry_point_key=new RewriteRuleSubtreeStream(adaptor,"rule entry_point_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:909:2: ( entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) )
            // src/main/resources/org/drools/lang/DRL.g:909:4: entry_point_key entrypoint_id
            {
            pushFollow(FOLLOW_entry_point_key_in_entrypoint_statement3576);
            entry_point_key201=entry_point_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entry_point_key.add(entry_point_key201.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            pushFollow(FOLLOW_entrypoint_id_in_entrypoint_statement3584);
            entrypoint_id202=entrypoint_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entrypoint_id.add(entrypoint_id202.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: entrypoint_id, entry_point_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 913:2: -> ^( entry_point_key entrypoint_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:913:5: ^( entry_point_key entrypoint_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_entry_point_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_entrypoint_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_statement"

    public static class entrypoint_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_id"
    // src/main/resources/org/drools/lang/DRL.g:916:1: entrypoint_id : (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] );
    public final DRLParser.entrypoint_id_return entrypoint_id() throws RecognitionException {
        DRLParser.entrypoint_id_return retval = new DRLParser.entrypoint_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;

        Object value_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // src/main/resources/org/drools/lang/DRL.g:917:2: (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==ID) ) {
                alt63=1;
            }
            else if ( (LA63_0==STRING) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:917:5: value= ID
                    {
                    value=(Token)match(input,ID,FOLLOW_ID_in_entrypoint_id3610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 918:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:919:5: value= STRING
                    {
                    value=(Token)match(input,STRING,FOLLOW_STRING_in_entrypoint_id3627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 920:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_id"

    public static class from_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_source"
    // src/main/resources/org/drools/lang/DRL.g:924:1: from_source options {backtrack=true; memoize=true; } : fs= expression -> VT_FROM_SOURCE[$fs.text] ;
    public final DRLParser.from_source_return from_source() throws RecognitionException {
        DRLParser.from_source_return retval = new DRLParser.from_source_return();
        retval.start = input.LT(1);
        int from_source_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.expression_return fs = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:926:2: (fs= expression -> VT_FROM_SOURCE[$fs.text] )
            // src/main/resources/org/drools/lang/DRL.g:926:4: fs= expression
            {
            pushFollow(FOLLOW_expression_in_from_source3664);
            fs=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(fs.getTree());
            if ( state.backtracking==0 ) {
               if ( input.LA(1) != EOF || input.get(input.index() - 1).getType() == WS ) { helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION); } 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 927:10: -> VT_FROM_SOURCE[$fs.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FROM_SOURCE, (fs!=null?input.toString(fs.start,fs.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, from_source_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_source"

    public static class lhs_pattern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_pattern"
    // src/main/resources/org/drools/lang/DRL.g:933:1: lhs_pattern : ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) );
    public final DRLParser.lhs_pattern_return lhs_pattern() throws RecognitionException {
        DRLParser.lhs_pattern_return retval = new DRLParser.lhs_pattern_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.fact_binding_return fact_binding203 = null;

        DRLParser.fact_return fact204 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        try {
            // src/main/resources/org/drools/lang/DRL.g:934:2: ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==ID) ) {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==COLON) ) {
                    alt64=1;
                }
                else if ( (LA64_1==DOT||LA64_1==LEFT_PAREN||LA64_1==LEFT_SQUARE) ) {
                    alt64=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:934:4: fact_binding
                    {
                    pushFollow(FOLLOW_fact_binding_in_lhs_pattern3695);
                    fact_binding203=fact_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding203.getTree());


                    // AST REWRITE
                    // elements: fact_binding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 934:17: -> ^( VT_PATTERN fact_binding )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:934:20: ^( VT_PATTERN fact_binding )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact_binding.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:935:4: fact
                    {
                    pushFollow(FOLLOW_fact_in_lhs_pattern3708);
                    fact204=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact204.getTree());


                    // AST REWRITE
                    // elements: fact
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 935:9: -> ^( VT_PATTERN fact )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:935:12: ^( VT_PATTERN fact )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_pattern"

    public static class fact_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding"
    // src/main/resources/org/drools/lang/DRL.g:938:1: fact_binding : label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.fact_binding_return fact_binding() throws RecognitionException {
        DRLParser.fact_binding_return retval = new DRLParser.fact_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN207=null;
        Token RIGHT_PAREN209=null;
        DRLParser.label_return label205 = null;

        DRLParser.fact_return fact206 = null;

        DRLParser.fact_binding_expression_return fact_binding_expression208 = null;


        Object LEFT_PAREN207_tree=null;
        Object RIGHT_PAREN209_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        RewriteRuleSubtreeStream stream_fact_binding_expression=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding_expression");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        try {
            // src/main/resources/org/drools/lang/DRL.g:939:3: ( label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:939:5: label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            {
            pushFollow(FOLLOW_label_in_fact_binding3728);
            label205=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label.add(label205.getTree());
            // src/main/resources/org/drools/lang/DRL.g:940:3: ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==ID) ) {
                alt65=1;
            }
            else if ( (LA65_0==LEFT_PAREN) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:940:5: fact
                    {
                    pushFollow(FOLLOW_fact_in_fact_binding3734);
                    fact206=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact206.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:941:6: LEFT_PAREN fact_binding_expression RIGHT_PAREN
                    {
                    LEFT_PAREN207=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_binding3741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN207);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN207, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_fact_binding_expression_in_fact_binding3749);
                    fact_binding_expression208=fact_binding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding_expression.add(fact_binding_expression208.getTree());
                    RIGHT_PAREN209=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_binding3757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN209);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN209, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: label, fact_binding_expression, RIGHT_PAREN, fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 945:3: -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:945:6: ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_BINDING, "VT_FACT_BINDING"), root_1);

                adaptor.addChild(root_1, stream_label.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:945:30: ( fact )?
                if ( stream_fact.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact.nextTree());

                }
                stream_fact.reset();
                // src/main/resources/org/drools/lang/DRL.g:945:36: ( fact_binding_expression )?
                if ( stream_fact_binding_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact_binding_expression.nextTree());

                }
                stream_fact_binding_expression.reset();
                // src/main/resources/org/drools/lang/DRL.g:945:61: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding"

    public static class fact_binding_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding_expression"
    // src/main/resources/org/drools/lang/DRL.g:948:1: fact_binding_expression : ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* ;
    public final DRLParser.fact_binding_expression_return fact_binding_expression() throws RecognitionException {
        DRLParser.fact_binding_expression_return retval = new DRLParser.fact_binding_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token pipe=null;
        DRLParser.or_key_return value = null;

        DRLParser.fact_return fact210 = null;

        DRLParser.fact_return fact211 = null;


        Object pipe_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:951:3: ( ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* )
            // src/main/resources/org/drools/lang/DRL.g:951:5: ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            {
            // src/main/resources/org/drools/lang/DRL.g:951:5: ( fact -> fact )
            // src/main/resources/org/drools/lang/DRL.g:951:6: fact
            {
            pushFollow(FOLLOW_fact_in_fact_binding_expression3798);
            fact210=fact();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact.add(fact210.getTree());


            // AST REWRITE
            // elements: fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 951:11: -> fact
            {
                adaptor.addChild(root_0, stream_fact.nextTree());

            }

            retval.tree = root_0;}
            }

            // src/main/resources/org/drools/lang/DRL.g:951:20: ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
                    alt67=1;
                }
                else if ( (LA67_0==DOUBLE_PIPE) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:951:22: (value= or_key | pipe= DOUBLE_PIPE ) fact
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:951:22: (value= or_key | pipe= DOUBLE_PIPE )
            	    int alt66=2;
            	    int LA66_0 = input.LA(1);

            	    if ( (LA66_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            	        alt66=1;
            	    }
            	    else if ( (LA66_0==DOUBLE_PIPE) ) {
            	        alt66=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 66, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt66) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:951:23: value= or_key
            	            {
            	            pushFollow(FOLLOW_or_key_in_fact_binding_expression3810);
            	            value=or_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
            	            if ( state.backtracking==0 ) {
            	              orToken = (value!=null?((Token)value.start):null);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/main/resources/org/drools/lang/DRL.g:951:62: pipe= DOUBLE_PIPE
            	            {
            	            pipe=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3816); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOUBLE_PIPE.add(pipe);

            	            if ( state.backtracking==0 ) {
            	              orToken = pipe;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_fact_in_fact_binding_expression3821);
            	    fact211=fact();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_fact.add(fact211.getTree());


            	    // AST REWRITE
            	    // elements: fact_binding_expression, fact
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 952:3: -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	    {
            	        // src/main/resources/org/drools/lang/DRL.g:952:6: ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_OR, orToken), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_fact.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding_expression"

    public static class fact_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact"
    // src/main/resources/org/drools/lang/DRL.g:955:1: fact : pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) ;
    public final DRLParser.fact_return fact() throws RecognitionException {
        DRLParser.fact_return retval = new DRLParser.fact_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN213=null;
        Token RIGHT_PAREN215=null;
        DRLParser.pattern_type_return pattern_type212 = null;

        DRLParser.constraints_return constraints214 = null;


        Object LEFT_PAREN213_tree=null;
        Object RIGHT_PAREN215_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
        RewriteRuleSubtreeStream stream_pattern_type=new RewriteRuleSubtreeStream(adaptor,"rule pattern_type");
         boolean isFailedOnConstraints = true; helper.pushParaphrases(DroolsParaphraseTypes.PATTERN); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:958:2: ( pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) )
            // src/main/resources/org/drools/lang/DRL.g:958:4: pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_pattern_type_in_fact3861);
            pattern_type212=pattern_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_type.add(pattern_type212.getTree());
            LEFT_PAREN213=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact3866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN213);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN213, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            }
            // src/main/resources/org/drools/lang/DRL.g:961:4: ( constraints )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==ID||LA68_0==LEFT_PAREN) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:961:4: constraints
                    {
                    pushFollow(FOLLOW_constraints_in_fact3877);
                    constraints214=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints214.getTree());

                    }
                    break;

            }

            RIGHT_PAREN215=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact3883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN215);

            if ( state.backtracking==0 ) {
              	isFailedOnConstraints = false;	
            }
            if ( state.backtracking==0 ) {
              	if ((RIGHT_PAREN215!=null?RIGHT_PAREN215.getText():null).equals(")") ){ //WORKAROUND FOR ANTLR BUG!
              			helper.emit(RIGHT_PAREN215, DroolsEditorType.SYMBOL);
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
              		}	
            }


            // AST REWRITE
            // elements: constraints, pattern_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 967:2: -> ^( VT_FACT pattern_type ( constraints )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:967:5: ^( VT_FACT pattern_type ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT, "VT_FACT"), root_1);

                adaptor.addChild(root_1, stream_pattern_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:967:28: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases();	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailedOnConstraints && input.LA(1) == EOF && input.get(input.index() - 1).getType() == WS){
            		if (!(helper.getActiveSentence().getContent().getLast() instanceof Integer) && input.LA(-1) != COLON) {
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "fact"

    public static class constraints_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraints"
    // src/main/resources/org/drools/lang/DRL.g:977:1: constraints : constraint ( COMMA constraint )* ;
    public final DRLParser.constraints_return constraints() throws RecognitionException {
        DRLParser.constraints_return retval = new DRLParser.constraints_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA217=null;
        DRLParser.constraint_return constraint216 = null;

        DRLParser.constraint_return constraint218 = null;


        Object COMMA217_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:978:2: ( constraint ( COMMA constraint )* )
            // src/main/resources/org/drools/lang/DRL.g:978:4: constraint ( COMMA constraint )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_in_constraints3915);
            constraint216=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint216.getTree());
            // src/main/resources/org/drools/lang/DRL.g:978:15: ( COMMA constraint )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:978:17: COMMA constraint
            	    {
            	    COMMA217=(Token)match(input,COMMA,FOLLOW_COMMA_in_constraints3919); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA217, DroolsEditorType.SYMBOL);
            	      		helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            	    }
            	    pushFollow(FOLLOW_constraint_in_constraints3926);
            	    constraint218=constraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint218.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraints"

    public static class constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // src/main/resources/org/drools/lang/DRL.g:983:1: constraint : or_constr ;
    public final DRLParser.constraint_return constraint() throws RecognitionException {
        DRLParser.constraint_return retval = new DRLParser.constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.or_constr_return or_constr219 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:984:2: ( or_constr )
            // src/main/resources/org/drools/lang/DRL.g:984:4: or_constr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_or_constr_in_constraint3940);
            or_constr219=or_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr219.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint"

    public static class or_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_constr"
    // src/main/resources/org/drools/lang/DRL.g:987:1: or_constr : and_constr ( DOUBLE_PIPE and_constr )* ;
    public final DRLParser.or_constr_return or_constr() throws RecognitionException {
        DRLParser.or_constr_return retval = new DRLParser.or_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE221=null;
        DRLParser.and_constr_return and_constr220 = null;

        DRLParser.and_constr_return and_constr222 = null;


        Object DOUBLE_PIPE221_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:988:2: ( and_constr ( DOUBLE_PIPE and_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:988:4: and_constr ( DOUBLE_PIPE and_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_constr_in_or_constr3951);
            and_constr220=and_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr220.getTree());
            // src/main/resources/org/drools/lang/DRL.g:988:15: ( DOUBLE_PIPE and_constr )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==DOUBLE_PIPE) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:988:17: DOUBLE_PIPE and_constr
            	    {
            	    DOUBLE_PIPE221=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_constr3955); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE221_tree = (Object)adaptor.create(DOUBLE_PIPE221);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE221_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE221, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_constr_in_or_constr3962);
            	    and_constr222=and_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr222.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_constr"

    public static class and_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_constr"
    // src/main/resources/org/drools/lang/DRL.g:992:1: and_constr : unary_constr ( DOUBLE_AMPER unary_constr )* ;
    public final DRLParser.and_constr_return and_constr() throws RecognitionException {
        DRLParser.and_constr_return retval = new DRLParser.and_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER224=null;
        DRLParser.unary_constr_return unary_constr223 = null;

        DRLParser.unary_constr_return unary_constr225 = null;


        Object DOUBLE_AMPER224_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:993:2: ( unary_constr ( DOUBLE_AMPER unary_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:993:4: unary_constr ( DOUBLE_AMPER unary_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unary_constr_in_and_constr3977);
            unary_constr223=unary_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr223.getTree());
            // src/main/resources/org/drools/lang/DRL.g:993:17: ( DOUBLE_AMPER unary_constr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==DOUBLE_AMPER) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:993:19: DOUBLE_AMPER unary_constr
            	    {
            	    DOUBLE_AMPER224=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_constr3981); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER224_tree = (Object)adaptor.create(DOUBLE_AMPER224);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER224_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER224, DroolsEditorType.SYMBOL);;	
            	    }
            	    pushFollow(FOLLOW_unary_constr_in_and_constr3988);
            	    unary_constr225=unary_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr225.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_constr"

    public static class unary_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_constr"
    // src/main/resources/org/drools/lang/DRL.g:997:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );
    public final DRLParser.unary_constr_return unary_constr() throws RecognitionException {
        DRLParser.unary_constr_return retval = new DRLParser.unary_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN229=null;
        Token RIGHT_PAREN231=null;
        DRLParser.eval_key_return eval_key226 = null;

        DRLParser.paren_chunk_return paren_chunk227 = null;

        DRLParser.field_constraint_return field_constraint228 = null;

        DRLParser.or_constr_return or_constr230 = null;


        Object LEFT_PAREN229_tree=null;
        Object RIGHT_PAREN231_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:1001:2: ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN )
            int alt72=3;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1001:4: eval_key paren_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_eval_key_in_unary_constr4021);
                    eval_key226=eval_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(eval_key226.getTree(), root_0);
                    pushFollow(FOLLOW_paren_chunk_in_unary_constr4024);
                    paren_chunk227=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk227.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1002:4: field_constraint
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_field_constraint_in_unary_constr4029);
                    field_constraint228=field_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_constraint228.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1003:5: LEFT_PAREN or_constr RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN229=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_constr4035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN229, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_constr_in_unary_constr4045);
                    or_constr230=or_constr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr230.getTree());
                    RIGHT_PAREN231=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_constr4050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN231_tree = (Object)adaptor.create(RIGHT_PAREN231);
                    adaptor.addChild(root_0, RIGHT_PAREN231_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN231, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS)
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}

        }
        return retval;
    }
    // $ANTLR end "unary_constr"

    public static class field_constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_constraint"
    // src/main/resources/org/drools/lang/DRL.g:1016:1: field_constraint : ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) );
    public final DRLParser.field_constraint_return field_constraint() throws RecognitionException {
        DRLParser.field_constraint_return retval = new DRLParser.field_constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token arw=null;
        DRLParser.label_return label232 = null;

        DRLParser.accessor_path_return accessor_path233 = null;

        DRLParser.or_restr_connective_return or_restr_connective234 = null;

        DRLParser.paren_chunk_return paren_chunk235 = null;

        DRLParser.accessor_path_return accessor_path236 = null;

        DRLParser.or_restr_connective_return or_restr_connective237 = null;


        Object arw_tree=null;
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");

        	boolean isArrow = false;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1019:3: ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID) ) {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==COLON) ) {
                    alt74=1;
                }
                else if ( ((LA74_1>=ID && LA74_1<=DOT)||LA74_1==LEFT_PAREN||(LA74_1>=EQUALS && LA74_1<=LEFT_SQUARE)) ) {
                    alt74=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1019:5: label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )?
                    {
                    pushFollow(FOLLOW_label_in_field_constraint4070);
                    label232=label();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label.add(label232.getTree());
                    pushFollow(FOLLOW_accessor_path_in_field_constraint4072);
                    accessor_path233=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path233.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1020:3: ( or_restr_connective | arw= ARROW paren_chunk )?
                    int alt73=3;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {
                        alt73=1;
                    }
                    else if ( (LA73_0==LEFT_PAREN||(LA73_0>=EQUALS && LA73_0<=NOT_EQUALS)) ) {
                        alt73=1;
                    }
                    else if ( (LA73_0==ARROW) ) {
                        alt73=2;
                    }
                    switch (alt73) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1020:5: or_restr_connective
                            {
                            pushFollow(FOLLOW_or_restr_connective_in_field_constraint4079);
                            or_restr_connective234=or_restr_connective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective234.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1020:27: arw= ARROW paren_chunk
                            {
                            arw=(Token)match(input,ARROW,FOLLOW_ARROW_in_field_constraint4085); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ARROW.add(arw);

                            if ( state.backtracking==0 ) {
                              	helper.emit(arw, DroolsEditorType.SYMBOL);	
                            }
                            pushFollow(FOLLOW_paren_chunk_in_field_constraint4089);
                            paren_chunk235=paren_chunk();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk235.getTree());
                            if ( state.backtracking==0 ) {
                              isArrow = true;
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: label, accessor_path, or_restr_connective, paren_chunk, label, accessor_path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1021:3: -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )?
                    if (isArrow) {
                        // src/main/resources/org/drools/lang/DRL.g:1021:17: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1021:39: ^( VT_FIELD accessor_path )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        // src/main/resources/org/drools/lang/DRL.g:1021:66: ( ^( VK_EVAL[$arw] paren_chunk ) )?
                        if ( stream_paren_chunk.hasNext() ) {
                            // src/main/resources/org/drools/lang/DRL.g:1021:66: ^( VK_EVAL[$arw] paren_chunk )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VK_EVAL, arw), root_1);

                            adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_paren_chunk.reset();

                    }
                    else // 1022:3: -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:1022:6: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1022:28: ^( VT_FIELD accessor_path ( or_restr_connective )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1022:53: ( or_restr_connective )?
                        if ( stream_or_restr_connective.hasNext() ) {
                            adaptor.addChild(root_2, stream_or_restr_connective.nextTree());

                        }
                        stream_or_restr_connective.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1023:4: accessor_path or_restr_connective
                    {
                    pushFollow(FOLLOW_accessor_path_in_field_constraint4143);
                    accessor_path236=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path236.getTree());
                    pushFollow(FOLLOW_or_restr_connective_in_field_constraint4145);
                    or_restr_connective237=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective237.getTree());


                    // AST REWRITE
                    // elements: or_restr_connective, accessor_path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1024:3: -> ^( VT_FIELD accessor_path or_restr_connective )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:1024:6: ^( VT_FIELD accessor_path or_restr_connective )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_accessor_path.nextTree());
                        adaptor.addChild(root_1, stream_or_restr_connective.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "field_constraint"

    public static class label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // src/main/resources/org/drools/lang/DRL.g:1027:1: label : value= ID COLON -> VT_LABEL[$value] ;
    public final DRLParser.label_return label() throws RecognitionException {
        DRLParser.label_return retval = new DRLParser.label_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;
        Token COLON238=null;

        Object value_tree=null;
        Object COLON238_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1028:2: (value= ID COLON -> VT_LABEL[$value] )
            // src/main/resources/org/drools/lang/DRL.g:1028:4: value= ID COLON
            {
            value=(Token)match(input,ID,FOLLOW_ID_in_label4170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(value);

            if ( state.backtracking==0 ) {
              	helper.emit(value, DroolsEditorType.IDENTIFIER_VARIABLE);	
            }
            COLON238=(Token)match(input,COLON,FOLLOW_COLON_in_label4177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON238);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON238, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1030:3: -> VT_LABEL[$value]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_LABEL, value));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class or_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:1033:1: or_restr_connective : and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* ;
    public final DRLParser.or_restr_connective_return or_restr_connective() throws RecognitionException {
        DRLParser.or_restr_connective_return retval = new DRLParser.or_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE240=null;
        DRLParser.and_restr_connective_return and_restr_connective239 = null;

        DRLParser.and_restr_connective_return and_restr_connective241 = null;


        Object DOUBLE_PIPE240_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1034:2: ( and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* )
            // src/main/resources/org/drools/lang/DRL.g:1034:4: and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4198);
            and_restr_connective239=and_restr_connective();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective239.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1034:25: ({...}? => DOUBLE_PIPE and_restr_connective )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==DOUBLE_PIPE) ) {
                    int LA75_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt75=1;
                    }


                }


                switch (alt75) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1034:26: {...}? => DOUBLE_PIPE and_restr_connective
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "or_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_PIPE240=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective4204); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE240_tree = (Object)adaptor.create(DOUBLE_PIPE240);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE240_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE240, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4212);
            	    and_restr_connective241=and_restr_connective();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective241.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_restr_connective"

    public static class and_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:1047:1: and_restr_connective : constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* ;
    public final DRLParser.and_restr_connective_return and_restr_connective() throws RecognitionException {
        DRLParser.and_restr_connective_return retval = new DRLParser.and_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER243=null;
        DRLParser.constraint_expression_return constraint_expression242 = null;

        DRLParser.constraint_expression_return constraint_expression244 = null;


        Object DOUBLE_AMPER243_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1048:2: ( constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* )
            // src/main/resources/org/drools/lang/DRL.g:1048:4: constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4233);
            constraint_expression242=constraint_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression242.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1048:26: ({...}? => DOUBLE_AMPER constraint_expression )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==DOUBLE_AMPER) ) {
                    int LA76_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt76=1;
                    }


                }


                switch (alt76) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1048:27: {...}? => DOUBLE_AMPER constraint_expression
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "and_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_AMPER243=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_restr_connective4239); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER243_tree = (Object)adaptor.create(DOUBLE_AMPER243);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER243_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER243, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4246);
            	    constraint_expression244=constraint_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression244.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_restr_connective"

    public static class constraint_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_expression"
    // src/main/resources/org/drools/lang/DRL.g:1061:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );
    public final DRLParser.constraint_expression_return constraint_expression() throws RecognitionException {
        DRLParser.constraint_expression_return retval = new DRLParser.constraint_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN247=null;
        Token RIGHT_PAREN249=null;
        DRLParser.compound_operator_return compound_operator245 = null;

        DRLParser.simple_operator_return simple_operator246 = null;

        DRLParser.or_restr_connective_return or_restr_connective248 = null;


        Object LEFT_PAREN247_tree=null;
        Object RIGHT_PAREN249_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1063:2: ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN )
            int alt77=3;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1063:4: compound_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compound_operator_in_constraint_expression4276);
                    compound_operator245=compound_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_operator245.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1064:4: simple_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_operator_in_constraint_expression4281);
                    simple_operator246=simple_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_operator246.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1065:4: LEFT_PAREN or_restr_connective RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN247=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression4286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN247, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_restr_connective_in_constraint_expression4295);
                    or_restr_connective248=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_restr_connective248.getTree());
                    RIGHT_PAREN249=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression4300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN249_tree = (Object)adaptor.create(RIGHT_PAREN249);
                    adaptor.addChild(root_0, RIGHT_PAREN249_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN249, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && 
            				input.LA(2) == ID && helper.validateLT(1, DroolsSoftKeywords.NOT)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF  && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.IN)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS){
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_END);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "constraint_expression"

    public static class simple_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_operator"
    // src/main/resources/org/drools/lang/DRL.g:1111:1: simple_operator : ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value ;
    public final DRLParser.simple_operator_return simple_operator() throws RecognitionException {
        DRLParser.simple_operator_return retval = new DRLParser.simple_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS250=null;
        Token GREATER251=null;
        Token GREATER_EQUALS252=null;
        Token LESS253=null;
        Token LESS_EQUALS254=null;
        Token NOT_EQUALS255=null;
        DRLParser.not_key_return not_key256 = null;

        DRLParser.operator_key_return operator_key257 = null;

        DRLParser.operator_params_return operator_params258 = null;

        DRLParser.expression_value_return expression_value259 = null;


        Object EQUALS250_tree=null;
        Object GREATER251_tree=null;
        Object GREATER_EQUALS252_tree=null;
        Object LESS253_tree=null;
        Object LESS_EQUALS254_tree=null;
        Object NOT_EQUALS255_tree=null;

        if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
        try {
            // src/main/resources/org/drools/lang/DRL.g:1113:2: ( ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value )
            // src/main/resources/org/drools/lang/DRL.g:1114:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1114:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) )
            int alt80=7;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==EQUALS) ) {
                alt80=1;
            }
            else if ( (LA80_0==GREATER) ) {
                alt80=2;
            }
            else if ( (LA80_0==GREATER_EQUALS) ) {
                alt80=3;
            }
            else if ( (LA80_0==LESS) ) {
                alt80=4;
            }
            else if ( (LA80_0==LESS_EQUALS) ) {
                alt80=5;
            }
            else if ( (LA80_0==NOT_EQUALS) ) {
                alt80=6;
            }
            else if ( (LA80_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {
                alt80=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1115:3: EQUALS
                    {
                    EQUALS250=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator4335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS250_tree = (Object)adaptor.create(EQUALS250);
                    root_0 = (Object)adaptor.becomeRoot(EQUALS250_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(EQUALS250, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1116:4: GREATER
                    {
                    GREATER251=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER251_tree = (Object)adaptor.create(GREATER251);
                    root_0 = (Object)adaptor.becomeRoot(GREATER251_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER251, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1117:4: GREATER_EQUALS
                    {
                    GREATER_EQUALS252=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator4351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_EQUALS252_tree = (Object)adaptor.create(GREATER_EQUALS252);
                    root_0 = (Object)adaptor.becomeRoot(GREATER_EQUALS252_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER_EQUALS252, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1118:4: LESS
                    {
                    LESS253=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS253_tree = (Object)adaptor.create(LESS253);
                    root_0 = (Object)adaptor.becomeRoot(LESS253_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS253, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1119:4: LESS_EQUALS
                    {
                    LESS_EQUALS254=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator4367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_EQUALS254_tree = (Object)adaptor.create(LESS_EQUALS254);
                    root_0 = (Object)adaptor.becomeRoot(LESS_EQUALS254_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS_EQUALS254, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1120:4: NOT_EQUALS
                    {
                    NOT_EQUALS255=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator4375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EQUALS255_tree = (Object)adaptor.create(NOT_EQUALS255);
                    root_0 = (Object)adaptor.becomeRoot(NOT_EQUALS255_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NOT_EQUALS255, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1121:4: ( not_key )? ( operator_key ( operator_params )? )
                    {
                    // src/main/resources/org/drools/lang/DRL.g:1121:4: ( not_key )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {
                        int LA78_1 = input.LA(2);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                            alt78=1;
                        }
                    }
                    switch (alt78) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1121:4: not_key
                            {
                            pushFollow(FOLLOW_not_key_in_simple_operator4383);
                            not_key256=not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key256.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1122:3: ( operator_key ( operator_params )? )
                    // src/main/resources/org/drools/lang/DRL.g:1122:5: operator_key ( operator_params )?
                    {
                    pushFollow(FOLLOW_operator_key_in_simple_operator4390);
                    operator_key257=operator_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(operator_key257.getTree(), root_0);
                    // src/main/resources/org/drools/lang/DRL.g:1122:19: ( operator_params )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==LEFT_SQUARE) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1122:20: operator_params
                            {
                            pushFollow(FOLLOW_operator_params_in_simple_operator4394);
                            operator_params258=operator_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_params258.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            pushFollow(FOLLOW_expression_value_in_simple_operator4407);
            expression_value259=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value259.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_operator"

    public static class operator_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_params"
    // src/main/resources/org/drools/lang/DRL.g:1128:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );
    public final DRLParser.operator_params_return operator_params() throws RecognitionException {
        DRLParser.operator_params_return retval = new DRLParser.operator_params_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.operator_args_return ops = null;

        DRLParser.square_chunk_return square_chunk260 = null;


        RewriteRuleSubtreeStream stream_operator_args=new RewriteRuleSubtreeStream(adaptor,"rule operator_args");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1129:2: ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1129:4: ( operator_args )=>ops= operator_args
                    {
                    pushFollow(FOLLOW_operator_args_in_operator_params4426);
                    ops=operator_args();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_operator_args.add(ops.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1130:2: -> VT_SQUARE_CHUNK[$ops.start, $ops.text]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (ops!=null?((Token)ops.start):null), (ops!=null?input.toString(ops.start,ops.stop):null)));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1131:4: square_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_square_chunk_in_operator_params4438);
                    square_chunk260=square_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk260.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_params"

    public static class operator_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_args"
    // src/main/resources/org/drools/lang/DRL.g:1134:1: operator_args : LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE ;
    public final DRLParser.operator_args_return operator_args() throws RecognitionException {
        DRLParser.operator_args_return retval = new DRLParser.operator_args_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE261=null;
        Token COMMA263=null;
        Token RIGHT_SQUARE265=null;
        DRLParser.operator_arg_return operator_arg262 = null;

        DRLParser.operator_arg_return operator_arg264 = null;


        Object LEFT_SQUARE261_tree=null;
        Object COMMA263_tree=null;
        Object RIGHT_SQUARE265_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1135:2: ( LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1135:4: LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE261=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_operator_args4449); if (state.failed) return retval;
            pushFollow(FOLLOW_operator_arg_in_operator_args4452);
            operator_arg262=operator_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg262.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1135:30: ( COMMA operator_arg )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1135:31: COMMA operator_arg
            	    {
            	    COMMA263=(Token)match(input,COMMA,FOLLOW_COMMA_in_operator_args4455); if (state.failed) return retval;
            	    pushFollow(FOLLOW_operator_arg_in_operator_args4458);
            	    operator_arg264=operator_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg264.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            RIGHT_SQUARE265=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_operator_args4462); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_args"

    public static class operator_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_arg"
    // src/main/resources/org/drools/lang/DRL.g:1138:1: operator_arg : TimePeriod ;
    public final DRLParser.operator_arg_return operator_arg() throws RecognitionException {
        DRLParser.operator_arg_return retval = new DRLParser.operator_arg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TimePeriod266=null;

        Object TimePeriod266_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1139:2: ( TimePeriod )
            // src/main/resources/org/drools/lang/DRL.g:1139:4: TimePeriod
            {
            root_0 = (Object)adaptor.nil();

            TimePeriod266=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_operator_arg4475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TimePeriod266_tree = (Object)adaptor.create(TimePeriod266);
            adaptor.addChild(root_0, TimePeriod266_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_arg"

    public static class compound_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_operator"
    // src/main/resources/org/drools/lang/DRL.g:1143:1: compound_operator : ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN ;
    public final DRLParser.compound_operator_return compound_operator() throws RecognitionException {
        DRLParser.compound_operator_return retval = new DRLParser.compound_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN270=null;
        Token COMMA272=null;
        Token RIGHT_PAREN274=null;
        DRLParser.in_key_return in_key267 = null;

        DRLParser.not_key_return not_key268 = null;

        DRLParser.in_key_return in_key269 = null;

        DRLParser.expression_value_return expression_value271 = null;

        DRLParser.expression_value_return expression_value273 = null;


        Object LEFT_PAREN270_tree=null;
        Object COMMA272_tree=null;
        Object RIGHT_PAREN274_tree=null;

         if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:1145:2: ( ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1146:2: ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1146:2: ( in_key | not_key in_key )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))))) {
                int LA83_1 = input.LA(2);

                if ( (LA83_1==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
                    alt83=1;
                }
                else if ( (LA83_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
                    alt83=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1146:4: in_key
                    {
                    pushFollow(FOLLOW_in_key_in_compound_operator4498);
                    in_key267=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key267.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1146:14: not_key in_key
                    {
                    pushFollow(FOLLOW_not_key_in_compound_operator4503);
                    not_key268=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key268.getTree());
                    pushFollow(FOLLOW_in_key_in_compound_operator4505);
                    in_key269=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key269.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            LEFT_PAREN270=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN270, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_expression_value_in_compound_operator4524);
            expression_value271=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value271.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1149:21: ( COMMA expression_value )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1149:23: COMMA expression_value
            	    {
            	    COMMA272=(Token)match(input,COMMA,FOLLOW_COMMA_in_compound_operator4528); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA272, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_expression_value_in_compound_operator4533);
            	    expression_value273=expression_value();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value273.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            RIGHT_PAREN274=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN274_tree = (Object)adaptor.create(RIGHT_PAREN274);
            adaptor.addChild(root_0, RIGHT_PAREN274_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN274, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
            		helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}	
        }
        return retval;
    }
    // $ANTLR end "compound_operator"

    public static class expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_value"
    // src/main/resources/org/drools/lang/DRL.g:1160:1: expression_value : ( accessor_path | signed_literal | paren_chunk ) ;
    public final DRLParser.expression_value_return expression_value() throws RecognitionException {
        DRLParser.expression_value_return retval = new DRLParser.expression_value_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accessor_path_return accessor_path275 = null;

        DRLParser.signed_literal_return signed_literal276 = null;

        DRLParser.paren_chunk_return paren_chunk277 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1161:2: ( ( accessor_path | signed_literal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:1161:4: ( accessor_path | signed_literal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1161:4: ( accessor_path | signed_literal | paren_chunk )
            int alt85=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt85=1;
                }
                break;
            case STRING:
            case BOOL:
            case DECIMAL:
            case NULL:
            case PLUS:
            case MINUS:
            case HEX:
            case FLOAT:
                {
                alt85=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1161:5: accessor_path
                    {
                    pushFollow(FOLLOW_accessor_path_in_expression_value4562);
                    accessor_path275=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_path275.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1162:4: signed_literal
                    {
                    pushFollow(FOLLOW_signed_literal_in_expression_value4567);
                    signed_literal276=signed_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_literal276.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1163:4: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_expression_value4573);
                    paren_chunk277=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk277.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if (helper.isEditorInterfaceEnabled && !(input.LA(1) == EOF && input.get(input.index() - 1).getType() != WS))
              			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF) {
            		if (input.LA(1) == DOUBLE_PIPE) {
            			helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "expression_value"

    public static class signed_literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_literal"
    // src/main/resources/org/drools/lang/DRL.g:1177:1: signed_literal : ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL );
    public final DRLParser.signed_literal_return signed_literal() throws RecognitionException {
        DRLParser.signed_literal_return retval = new DRLParser.signed_literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING278=null;
        Token BOOL282=null;
        Token NULL283=null;
        DRLParser.signed_decimal_return signed_decimal279 = null;

        DRLParser.signed_hex_return signed_hex280 = null;

        DRLParser.signed_float_return signed_float281 = null;


        Object STRING278_tree=null;
        Object BOOL282_tree=null;
        Object NULL283_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1178:9: ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL )
            int alt86=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt86=1;
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case DECIMAL:
                    {
                    alt86=2;
                    }
                    break;
                case HEX:
                    {
                    alt86=3;
                    }
                    break;
                case FLOAT:
                    {
                    alt86=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 2, input);

                    throw nvae;
                }

                }
                break;
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case DECIMAL:
                    {
                    alt86=2;
                    }
                    break;
                case HEX:
                    {
                    alt86=3;
                    }
                    break;
                case FLOAT:
                    {
                    alt86=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 3, input);

                    throw nvae;
                }

                }
                break;
            case DECIMAL:
                {
                alt86=2;
                }
                break;
            case HEX:
                {
                alt86=3;
                }
                break;
            case FLOAT:
                {
                alt86=4;
                }
                break;
            case BOOL:
                {
                alt86=5;
                }
                break;
            case NULL:
                {
                alt86=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1178:17: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING278=(Token)match(input,STRING,FOLLOW_STRING_in_signed_literal4605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING278_tree = (Object)adaptor.create(STRING278);
                    adaptor.addChild(root_0, STRING278_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(STRING278, DroolsEditorType.STRING_CONST);  
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1179:17: signed_decimal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_decimal_in_signed_literal4642);
                    signed_decimal279=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal279.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1180:17: signed_hex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_hex_in_signed_literal4660);
                    signed_hex280=signed_hex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_hex280.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1181:17: signed_float
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_float_in_signed_literal4678);
                    signed_float281=signed_float();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_float281.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1182:17: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL282=(Token)match(input,BOOL,FOLLOW_BOOL_in_signed_literal4696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL282_tree = (Object)adaptor.create(BOOL282);
                    adaptor.addChild(root_0, BOOL282_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(BOOL282, DroolsEditorType.BOOLEAN_CONST); 
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1183:17: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL283=(Token)match(input,NULL,FOLLOW_NULL_in_signed_literal4735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL283_tree = (Object)adaptor.create(NULL283);
                    adaptor.addChild(root_0, NULL283_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(NULL283, DroolsEditorType.NULL_CONST); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_literal"

    public static class signed_decimal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal"
    // src/main/resources/org/drools/lang/DRL.g:1186:1: signed_decimal : sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] ;
    public final DRLParser.signed_decimal_return signed_decimal() throws RecognitionException {
        DRLParser.signed_decimal_return retval = new DRLParser.signed_decimal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_decimal_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_decimal_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_decimal_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1187:9: (sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1187:17: sdm= signed_decimal_match
            {
            pushFollow(FOLLOW_signed_decimal_match_in_signed_decimal4789);
            sdm=signed_decimal_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_decimal_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1187:42: -> SIGNED_DECIMAL[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_DECIMAL, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal"

    public static class signed_decimal_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal_match"
    // src/main/resources/org/drools/lang/DRL.g:1190:1: signed_decimal_match : ( PLUS | MINUS )? DECIMAL ;
    public final DRLParser.signed_decimal_match_return signed_decimal_match() throws RecognitionException {
        DRLParser.signed_decimal_match_return retval = new DRLParser.signed_decimal_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS284=null;
        Token MINUS285=null;
        Token DECIMAL286=null;

        Object PLUS284_tree=null;
        Object MINUS285_tree=null;
        Object DECIMAL286_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1191:9: ( ( PLUS | MINUS )? DECIMAL )
            // src/main/resources/org/drools/lang/DRL.g:1191:17: ( PLUS | MINUS )? DECIMAL
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1191:17: ( PLUS | MINUS )?
            int alt87=3;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==PLUS) ) {
                alt87=1;
            }
            else if ( (LA87_0==MINUS) ) {
                alt87=2;
            }
            switch (alt87) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1191:18: PLUS
                    {
                    PLUS284=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_decimal_match4826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS284_tree = (Object)adaptor.create(PLUS284);
                    adaptor.addChild(root_0, PLUS284_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS284, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1191:81: MINUS
                    {
                    MINUS285=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_decimal_match4832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS285_tree = (Object)adaptor.create(MINUS285);
                    adaptor.addChild(root_0, MINUS285_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS285, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            DECIMAL286=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_signed_decimal_match4854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECIMAL286_tree = (Object)adaptor.create(DECIMAL286);
            adaptor.addChild(root_0, DECIMAL286_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(DECIMAL286, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal_match"

    public static class signed_hex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex"
    // src/main/resources/org/drools/lang/DRL.g:1195:1: signed_hex : sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] ;
    public final DRLParser.signed_hex_return signed_hex() throws RecognitionException {
        DRLParser.signed_hex_return retval = new DRLParser.signed_hex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_hex_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_hex_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_hex_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1196:9: (sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1196:17: sdm= signed_hex_match
            {
            pushFollow(FOLLOW_signed_hex_match_in_signed_hex4889);
            sdm=signed_hex_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_hex_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1196:38: -> SIGNED_HEX[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_HEX, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex"

    public static class signed_hex_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex_match"
    // src/main/resources/org/drools/lang/DRL.g:1199:1: signed_hex_match : ( PLUS | MINUS )? HEX ;
    public final DRLParser.signed_hex_match_return signed_hex_match() throws RecognitionException {
        DRLParser.signed_hex_match_return retval = new DRLParser.signed_hex_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS287=null;
        Token MINUS288=null;
        Token HEX289=null;

        Object PLUS287_tree=null;
        Object MINUS288_tree=null;
        Object HEX289_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1200:9: ( ( PLUS | MINUS )? HEX )
            // src/main/resources/org/drools/lang/DRL.g:1200:17: ( PLUS | MINUS )? HEX
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1200:17: ( PLUS | MINUS )?
            int alt88=3;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==PLUS) ) {
                alt88=1;
            }
            else if ( (LA88_0==MINUS) ) {
                alt88=2;
            }
            switch (alt88) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1200:18: PLUS
                    {
                    PLUS287=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_hex_match4926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS287_tree = (Object)adaptor.create(PLUS287);
                    adaptor.addChild(root_0, PLUS287_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS287, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1200:81: MINUS
                    {
                    MINUS288=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_hex_match4932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS288_tree = (Object)adaptor.create(MINUS288);
                    adaptor.addChild(root_0, MINUS288_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS288, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            HEX289=(Token)match(input,HEX,FOLLOW_HEX_in_signed_hex_match4954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            HEX289_tree = (Object)adaptor.create(HEX289);
            adaptor.addChild(root_0, HEX289_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(HEX289, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex_match"

    public static class signed_float_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float"
    // src/main/resources/org/drools/lang/DRL.g:1204:1: signed_float : sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] ;
    public final DRLParser.signed_float_return signed_float() throws RecognitionException {
        DRLParser.signed_float_return retval = new DRLParser.signed_float_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_float_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_float_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_float_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1205:9: (sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1205:17: sdm= signed_float_match
            {
            pushFollow(FOLLOW_signed_float_match_in_signed_float4989);
            sdm=signed_float_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_float_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1205:40: -> SIGNED_FLOAT[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_FLOAT, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float"

    public static class signed_float_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float_match"
    // src/main/resources/org/drools/lang/DRL.g:1208:1: signed_float_match : ( PLUS | MINUS )? FLOAT ;
    public final DRLParser.signed_float_match_return signed_float_match() throws RecognitionException {
        DRLParser.signed_float_match_return retval = new DRLParser.signed_float_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS290=null;
        Token MINUS291=null;
        Token FLOAT292=null;

        Object PLUS290_tree=null;
        Object MINUS291_tree=null;
        Object FLOAT292_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1209:9: ( ( PLUS | MINUS )? FLOAT )
            // src/main/resources/org/drools/lang/DRL.g:1209:17: ( PLUS | MINUS )? FLOAT
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1209:17: ( PLUS | MINUS )?
            int alt89=3;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==PLUS) ) {
                alt89=1;
            }
            else if ( (LA89_0==MINUS) ) {
                alt89=2;
            }
            switch (alt89) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1209:18: PLUS
                    {
                    PLUS290=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_float_match5026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS290_tree = (Object)adaptor.create(PLUS290);
                    adaptor.addChild(root_0, PLUS290_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS290, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1209:81: MINUS
                    {
                    MINUS291=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_float_match5032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS291_tree = (Object)adaptor.create(MINUS291);
                    adaptor.addChild(root_0, MINUS291_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS291, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            FLOAT292=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_signed_float_match5054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLOAT292_tree = (Object)adaptor.create(FLOAT292);
            adaptor.addChild(root_0, FLOAT292_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(FLOAT292, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float_match"

    public static class pattern_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_type"
    // src/main/resources/org/drools/lang/DRL.g:1212:1: pattern_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.pattern_type_return pattern_type() throws RecognitionException {
        DRLParser.pattern_type_return retval = new DRLParser.pattern_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition293 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1213:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1213:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type5075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1213:11: (id+= DOT id+= ID )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==DOT) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1213:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_type5081); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type5085); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PATTERN, helper.buildStringFromTokens(list_id));	
            }
            // src/main/resources/org/drools/lang/DRL.g:1216:6: ( dimension_definition )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==LEFT_SQUARE) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1216:6: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_pattern_type5100);
            	    dimension_definition293=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition293.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);



            // AST REWRITE
            // elements: dimension_definition, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1217:3: -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1217:6: ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN_TYPE, "VT_PATTERN_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1217:28: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern_type"

    public static class data_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // src/main/resources/org/drools/lang/DRL.g:1220:1: data_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.data_type_return data_type() throws RecognitionException {
        DRLParser.data_type_return retval = new DRLParser.data_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition294 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1221:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1221:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_data_type5128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1221:11: (id+= DOT id+= ID )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==DOT) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1221:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_data_type5134); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_data_type5138); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:1221:31: ( dimension_definition )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==LEFT_SQUARE) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1221:31: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_data_type5143);
            	    dimension_definition294=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition294.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);	
            }


            // AST REWRITE
            // elements: ID, dimension_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1223:3: -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1223:6: ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_DATA_TYPE, "VT_DATA_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1223:25: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class dimension_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dimension_definition"
    // src/main/resources/org/drools/lang/DRL.g:1226:1: dimension_definition : LEFT_SQUARE RIGHT_SQUARE ;
    public final DRLParser.dimension_definition_return dimension_definition() throws RecognitionException {
        DRLParser.dimension_definition_return retval = new DRLParser.dimension_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE295=null;
        Token RIGHT_SQUARE296=null;

        Object LEFT_SQUARE295_tree=null;
        Object RIGHT_SQUARE296_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1227:2: ( LEFT_SQUARE RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1227:4: LEFT_SQUARE RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE295=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_dimension_definition5172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE295_tree = (Object)adaptor.create(LEFT_SQUARE295);
            adaptor.addChild(root_0, LEFT_SQUARE295_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_SQUARE295, DroolsEditorType.SYMBOL);	
            }
            RIGHT_SQUARE296=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_dimension_definition5179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE296_tree = (Object)adaptor.create(RIGHT_SQUARE296);
            adaptor.addChild(root_0, RIGHT_SQUARE296_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_SQUARE296, DroolsEditorType.SYMBOL);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dimension_definition"

    public static class accessor_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_path"
    // src/main/resources/org/drools/lang/DRL.g:1231:1: accessor_path : accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) ;
    public final DRLParser.accessor_path_return accessor_path() throws RecognitionException {
        DRLParser.accessor_path_return retval = new DRLParser.accessor_path_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT298=null;
        DRLParser.accessor_element_return accessor_element297 = null;

        DRLParser.accessor_element_return accessor_element299 = null;


        Object DOT298_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_accessor_element=new RewriteRuleSubtreeStream(adaptor,"rule accessor_element");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1232:2: ( accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1232:4: accessor_element ( DOT accessor_element )*
            {
            pushFollow(FOLLOW_accessor_element_in_accessor_path5193);
            accessor_element297=accessor_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element297.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1232:21: ( DOT accessor_element )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==DOT) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1232:23: DOT accessor_element
            	    {
            	    DOT298=(Token)match(input,DOT,FOLLOW_DOT_in_accessor_path5197); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT298);

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOT298, DroolsEditorType.IDENTIFIER);	
            	    }
            	    pushFollow(FOLLOW_accessor_element_in_accessor_path5201);
            	    accessor_element299=accessor_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element299.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);



            // AST REWRITE
            // elements: accessor_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1233:2: -> ^( VT_ACCESSOR_PATH ( accessor_element )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1233:5: ^( VT_ACCESSOR_PATH ( accessor_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_PATH, "VT_ACCESSOR_PATH"), root_1);

                if ( !(stream_accessor_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_accessor_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessor_element.nextTree());

                }
                stream_accessor_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_path"

    public static class accessor_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_element"
    // src/main/resources/org/drools/lang/DRL.g:1236:1: accessor_element : ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) ;
    public final DRLParser.accessor_element_return accessor_element() throws RecognitionException {
        DRLParser.accessor_element_return retval = new DRLParser.accessor_element_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID300=null;
        DRLParser.square_chunk_return square_chunk301 = null;


        Object ID300_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1237:2: ( ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1237:4: ID ( square_chunk )*
            {
            ID300=(Token)match(input,ID,FOLLOW_ID_in_accessor_element5225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID300);

            if ( state.backtracking==0 ) {
              	helper.emit(ID300, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1238:3: ( square_chunk )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==LEFT_SQUARE) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1238:3: square_chunk
            	    {
            	    pushFollow(FOLLOW_square_chunk_in_accessor_element5231);
            	    square_chunk301=square_chunk();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_square_chunk.add(square_chunk301.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);



            // AST REWRITE
            // elements: square_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1239:2: -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1239:5: ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_ELEMENT, "VT_ACCESSOR_ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // src/main/resources/org/drools/lang/DRL.g:1239:30: ( square_chunk )*
                while ( stream_square_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_square_chunk.nextTree());

                }
                stream_square_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_element"

    public static class rhs_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1245:1: rhs_chunk : rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] ;
    public final DRLParser.rhs_chunk_return rhs_chunk() throws RecognitionException {
        DRLParser.rhs_chunk_return retval = new DRLParser.rhs_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rhs_chunk_data_return rc = null;


        RewriteRuleSubtreeStream stream_rhs_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1248:3: (rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1248:5: rc= rhs_chunk_data
            {
            pushFollow(FOLLOW_rhs_chunk_data_in_rhs_chunk5263);
            rc=rhs_chunk_data();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk_data.add(rc.getTree());
            if ( state.backtracking==0 ) {
              text = (rc!=null?input.toString(rc.start,rc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1249:2: -> VT_RHS_CHUNK[$rc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_RHS_CHUNK, (rc!=null?((Token)rc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk"

    public static class rhs_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1252:1: rhs_chunk_data : THEN ( not_end_key )* end_key ( SEMICOLON )? ;
    public final DRLParser.rhs_chunk_data_return rhs_chunk_data() throws RecognitionException {
        DRLParser.rhs_chunk_data_return retval = new DRLParser.rhs_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token THEN302=null;
        Token SEMICOLON305=null;
        DRLParser.not_end_key_return not_end_key303 = null;

        DRLParser.end_key_return end_key304 = null;


        Object THEN302_tree=null;
        Object SEMICOLON305_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1253:2: ( THEN ( not_end_key )* end_key ( SEMICOLON )? )
            // src/main/resources/org/drools/lang/DRL.g:1253:4: THEN ( not_end_key )* end_key ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            THEN302=(Token)match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data5282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN302_tree = (Object)adaptor.create(THEN302);
            adaptor.addChild(root_0, THEN302_tree);
            }
            if ( state.backtracking==0 ) {
              	if ((THEN302!=null?THEN302.getText():null).equalsIgnoreCase("then")){
              			helper.emit(THEN302, DroolsEditorType.KEYWORD);
              			helper.emit(Location.LOCATION_RHS);
              		}	
            }
            // src/main/resources/org/drools/lang/DRL.g:1258:4: ( not_end_key )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||(!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) {
                    int LA96_1 = input.LA(2);

                    if ( ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                        alt96=1;
                    }


                }
                else if ( ((LA96_0>=VT_COMPILATION_UNIT && LA96_0<=SEMICOLON)||(LA96_0>=DOT && LA96_0<=MISC)) && ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1258:4: not_end_key
            	    {
            	    pushFollow(FOLLOW_not_end_key_in_rhs_chunk_data5291);
            	    not_end_key303=not_end_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_end_key303.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_rhs_chunk_data5297);
            end_key304=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, end_key304.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1260:3: ( SEMICOLON )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==SEMICOLON) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1260:3: SEMICOLON
                    {
                    SEMICOLON305=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data5302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON305_tree = (Object)adaptor.create(SEMICOLON305);
                    adaptor.addChild(root_0, SEMICOLON305_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON305, DroolsEditorType.KEYWORD);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk_data"

    public static class curly_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1263:1: curly_chunk : cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] ;
    public final DRLParser.curly_chunk_return curly_chunk() throws RecognitionException {
        DRLParser.curly_chunk_return retval = new DRLParser.curly_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.curly_chunk_data_return cc = null;


        RewriteRuleSubtreeStream stream_curly_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1266:3: (cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1266:5: cc= curly_chunk_data[false]
            {
            pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk5321);
            cc=curly_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk_data.add(cc.getTree());
            if ( state.backtracking==0 ) {
              text = (cc!=null?input.toString(cc.start,cc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1267:2: -> VT_CURLY_CHUNK[$cc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_CURLY_CHUNK, (cc!=null?((Token)cc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk"

    public static class curly_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1270:1: curly_chunk_data[boolean isRecursive] : lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY ;
    public final DRLParser.curly_chunk_data_return curly_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.curly_chunk_data_return retval = new DRLParser.curly_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lc1=null;
        Token any=null;
        Token rc1=null;
        DRLParser.curly_chunk_data_return curly_chunk_data306 = null;


        Object lc1_tree=null;
        Object any_tree=null;
        Object rc1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1271:2: (lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1271:4: lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            lc1=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_chunk_data5344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lc1_tree = (Object)adaptor.create(lc1);
            adaptor.addChild(root_0, lc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1278:4: (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )*
            loop98:
            do {
                int alt98=3;
                int LA98_0 = input.LA(1);

                if ( ((LA98_0>=VT_COMPILATION_UNIT && LA98_0<=THEN)||(LA98_0>=QUESTION && LA98_0<=MISC)) ) {
                    alt98=1;
                }
                else if ( (LA98_0==LEFT_CURLY) ) {
                    alt98=2;
                }


                switch (alt98) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1278:5: any=~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=THEN)||(input.LA(1)>=QUESTION && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1278:94: curly_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk_data5372);
            	    curly_chunk_data306=curly_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_chunk_data306.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            rc1=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_chunk_data5383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rc1_tree = (Object)adaptor.create(rc1);
            adaptor.addChild(root_0, rc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk_data"

    public static class paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1288:1: paren_chunk : pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.paren_chunk_return paren_chunk() throws RecognitionException {
        DRLParser.paren_chunk_return retval = new DRLParser.paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1291:3: (pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1291:5: pc= paren_chunk_data[false]
            {
            pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk5404);
            pc=paren_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1292:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk"

    public static class paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1295:1: paren_chunk_data[boolean isRecursive] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN ;
    public final DRLParser.paren_chunk_data_return paren_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.paren_chunk_data_return retval = new DRLParser.paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.paren_chunk_data_return paren_chunk_data307 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1296:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1296:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_chunk_data5428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1303:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )*
            loop99:
            do {
                int alt99=3;
                int LA99_0 = input.LA(1);

                if ( ((LA99_0>=VT_COMPILATION_UNIT && LA99_0<=BOOL)||(LA99_0>=FROM && LA99_0<=MISC)) ) {
                    alt99=1;
                }
                else if ( (LA99_0==LEFT_PAREN) ) {
                    alt99=2;
                }


                switch (alt99) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1303:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1303:94: paren_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk_data5456);
            	    paren_chunk_data307=paren_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk_data307.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_chunk_data5467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk_data"

    public static class square_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1313:1: square_chunk : sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] ;
    public final DRLParser.square_chunk_return square_chunk() throws RecognitionException {
        DRLParser.square_chunk_return retval = new DRLParser.square_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.square_chunk_data_return sc = null;


        RewriteRuleSubtreeStream stream_square_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1316:3: (sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1316:5: sc= square_chunk_data[false]
            {
            pushFollow(FOLLOW_square_chunk_data_in_square_chunk5488);
            sc=square_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_square_chunk_data.add(sc.getTree());
            if ( state.backtracking==0 ) {
              text = (sc!=null?input.toString(sc.start,sc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1317:2: -> VT_SQUARE_CHUNK[$sc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (sc!=null?((Token)sc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk"

    public static class square_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1320:1: square_chunk_data[boolean isRecursive] : ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE ;
    public final DRLParser.square_chunk_data_return square_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.square_chunk_data_return retval = new DRLParser.square_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ls1=null;
        Token any=null;
        Token rs1=null;
        DRLParser.square_chunk_data_return square_chunk_data308 = null;


        Object ls1_tree=null;
        Object any_tree=null;
        Object rs1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1321:2: (ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1321:4: ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            ls1=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_square_chunk_data5511); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ls1_tree = (Object)adaptor.create(ls1);
            adaptor.addChild(root_0, ls1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(ls1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(ls1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1328:4: (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )*
            loop100:
            do {
                int alt100=3;
                int LA100_0 = input.LA(1);

                if ( ((LA100_0>=VT_COMPILATION_UNIT && LA100_0<=NOT_EQUALS)||(LA100_0>=NULL && LA100_0<=MISC)) ) {
                    alt100=1;
                }
                else if ( (LA100_0==LEFT_SQUARE) ) {
                    alt100=2;
                }


                switch (alt100) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1328:5: any=~ ( LEFT_SQUARE | RIGHT_SQUARE )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=NOT_EQUALS)||(input.LA(1)>=NULL && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1328:95: square_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_square_chunk_data_in_square_chunk_data5538);
            	    square_chunk_data308=square_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk_data308.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            rs1=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_square_chunk_data5549); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rs1_tree = (Object)adaptor.create(rs1);
            adaptor.addChild(root_0, rs1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rs1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rs1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk_data"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // src/main/resources/org/drools/lang/DRL.g:1341:1: literal : ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL );
    public final DRLParser.literal_return literal() throws RecognitionException {
        DRLParser.literal_return retval = new DRLParser.literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING309=null;
        Token DECIMAL310=null;
        Token HEX311=null;
        Token FLOAT312=null;
        Token BOOL313=null;
        Token NULL314=null;

        Object STRING309_tree=null;
        Object DECIMAL310_tree=null;
        Object HEX311_tree=null;
        Object FLOAT312_tree=null;
        Object BOOL313_tree=null;
        Object NULL314_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1342:2: ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL )
            int alt101=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt101=1;
                }
                break;
            case DECIMAL:
                {
                alt101=2;
                }
                break;
            case HEX:
                {
                alt101=3;
                }
                break;
            case FLOAT:
                {
                alt101=4;
                }
                break;
            case BOOL:
                {
                alt101=5;
                }
                break;
            case NULL:
                {
                alt101=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1342:4: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING309=(Token)match(input,STRING,FOLLOW_STRING_in_literal5567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING309_tree = (Object)adaptor.create(STRING309);
                    adaptor.addChild(root_0, STRING309_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(STRING309, DroolsEditorType.STRING_CONST);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1343:4: DECIMAL
                    {
                    root_0 = (Object)adaptor.nil();

                    DECIMAL310=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL310_tree = (Object)adaptor.create(DECIMAL310);
                    adaptor.addChild(root_0, DECIMAL310_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(DECIMAL310, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1344:4: HEX
                    {
                    root_0 = (Object)adaptor.nil();

                    HEX311=(Token)match(input,HEX,FOLLOW_HEX_in_literal5599); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX311_tree = (Object)adaptor.create(HEX311);
                    adaptor.addChild(root_0, HEX311_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(HEX311, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1345:4: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();

                    FLOAT312=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT312_tree = (Object)adaptor.create(FLOAT312);
                    adaptor.addChild(root_0, FLOAT312_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FLOAT312, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1346:4: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL313=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL313_tree = (Object)adaptor.create(BOOL313);
                    adaptor.addChild(root_0, BOOL313_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL313, DroolsEditorType.BOOLEAN_CONST);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1347:4: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL314=(Token)match(input,NULL,FOLLOW_NULL_in_literal5648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL314_tree = (Object)adaptor.create(NULL314);
                    adaptor.addChild(root_0, NULL314_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NULL314, DroolsEditorType.NULL_CONST);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // src/main/resources/org/drools/lang/DRL.g:1350:1: typeList : type ( COMMA type )* ;
    public final DRLParser.typeList_return typeList() throws RecognitionException {
        DRLParser.typeList_return retval = new DRLParser.typeList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA316=null;
        DRLParser.type_return type315 = null;

        DRLParser.type_return type317 = null;


        Object COMMA316_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1351:2: ( type ( COMMA type )* )
            // src/main/resources/org/drools/lang/DRL.g:1351:4: type ( COMMA type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5679);
            type315=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type315.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1351:9: ( COMMA type )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==COMMA) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1351:10: COMMA type
            	    {
            	    COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5682); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA316_tree = (Object)adaptor.create(COMMA316);
            	    adaptor.addChild(root_0, COMMA316_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList5684);
            	    type317=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type317.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class typeNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeNameList"
    // src/main/resources/org/drools/lang/DRL.g:1354:1: typeNameList : typeName ( COMMA typeName )* ;
    public final DRLParser.typeNameList_return typeNameList() throws RecognitionException {
        DRLParser.typeNameList_return retval = new DRLParser.typeNameList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA319=null;
        DRLParser.typeName_return typeName318 = null;

        DRLParser.typeName_return typeName320 = null;


        Object COMMA319_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1355:2: ( typeName ( COMMA typeName )* )
            // src/main/resources/org/drools/lang/DRL.g:1355:4: typeName ( COMMA typeName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeName_in_typeNameList5698);
            typeName318=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName318.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1355:13: ( COMMA typeName )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1355:14: COMMA typeName
            	    {
            	    COMMA319=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeNameList5701); if (state.failed) return retval;
            	    pushFollow(FOLLOW_typeName_in_typeNameList5704);
            	    typeName320=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName320.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeNameList"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // src/main/resources/org/drools/lang/DRL.g:1359:1: type options {backtrack=true; memoize=true; } : ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) );
    public final DRLParser.type_return type() throws RecognitionException {
        DRLParser.type_return retval = new DRLParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE322=null;
        Token RIGHT_SQUARE323=null;
        Token ID324=null;
        Token DOT326=null;
        Token ID327=null;
        Token LEFT_SQUARE329=null;
        Token RIGHT_SQUARE330=null;
        DRLParser.primitiveType_return primitiveType321 = null;

        DRLParser.typeArguments_return typeArguments325 = null;

        DRLParser.typeArguments_return typeArguments328 = null;


        Object LEFT_SQUARE322_tree=null;
        Object RIGHT_SQUARE323_tree=null;
        Object ID324_tree=null;
        Object DOT326_tree=null;
        Object ID327_tree=null;
        Object LEFT_SQUARE329_tree=null;
        Object RIGHT_SQUARE330_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1361:2: ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ID) ) {
                int LA109_1 = input.LA(2);

                if ( (((synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))))) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1361:5: ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1361:24: ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1361:26: primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type5744);
                    primitiveType321=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType321.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1361:40: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==LEFT_SQUARE) ) {
                            int LA104_2 = input.LA(2);

                            if ( (LA104_2==RIGHT_SQUARE) ) {
                                int LA104_3 = input.LA(3);

                                if ( (synpred9_DRL()) ) {
                                    alt104=1;
                                }


                            }


                        }


                        switch (alt104) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1361:41: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE322=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5754); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE322_tree = (Object)adaptor.create(LEFT_SQUARE322);
                    	    adaptor.addChild(root_0, LEFT_SQUARE322_tree);
                    	    }
                    	    RIGHT_SQUARE323=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5756); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE323_tree = (Object)adaptor.create(RIGHT_SQUARE323);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE323_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop104;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1362:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1362:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1362:6: ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    ID324=(Token)match(input,ID,FOLLOW_ID_in_type5767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID324_tree = (Object)adaptor.create(ID324);
                    adaptor.addChild(root_0, ID324_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1362:9: ( ( typeArguments )=> typeArguments )?
                    int alt105=2;
                    alt105 = dfa105.predict(input);
                    switch (alt105) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1362:10: ( typeArguments )=> typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_type5774);
                            typeArguments325=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments325.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1362:43: ( DOT ID ( ( typeArguments )=> typeArguments )? )*
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==DOT) ) {
                            alt107=1;
                        }


                        switch (alt107) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1362:44: DOT ID ( ( typeArguments )=> typeArguments )?
                    	    {
                    	    DOT326=(Token)match(input,DOT,FOLLOW_DOT_in_type5779); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT326_tree = (Object)adaptor.create(DOT326);
                    	    adaptor.addChild(root_0, DOT326_tree);
                    	    }
                    	    ID327=(Token)match(input,ID,FOLLOW_ID_in_type5781); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID327_tree = (Object)adaptor.create(ID327);
                    	    adaptor.addChild(root_0, ID327_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1362:51: ( ( typeArguments )=> typeArguments )?
                    	    int alt106=2;
                    	    alt106 = dfa106.predict(input);
                    	    switch (alt106) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1362:52: ( typeArguments )=> typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_type5788);
                    	            typeArguments328=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments328.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop107;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1362:88: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==LEFT_SQUARE) ) {
                            int LA108_2 = input.LA(2);

                            if ( (LA108_2==RIGHT_SQUARE) ) {
                                int LA108_3 = input.LA(3);

                                if ( (synpred12_DRL()) ) {
                                    alt108=1;
                                }


                            }


                        }


                        switch (alt108) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1362:89: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE329=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5803); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE329_tree = (Object)adaptor.create(LEFT_SQUARE329);
                    	    adaptor.addChild(root_0, LEFT_SQUARE329_tree);
                    	    }
                    	    RIGHT_SQUARE330=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5805); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE330_tree = (Object)adaptor.create(RIGHT_SQUARE330);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE330_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // src/main/resources/org/drools/lang/DRL.g:1365:1: typeName : ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] ;
    public final DRLParser.typeName_return typeName() throws RecognitionException {
        DRLParser.typeName_return retval = new DRLParser.typeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID331=null;
        Token DOT332=null;
        Token ID333=null;

        Object ID331_tree=null;
        Object DOT332_tree=null;
        Object ID333_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1366:2: ( ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] )
            // src/main/resources/org/drools/lang/DRL.g:1366:6: ID ( DOT ID )*
            {
            ID331=(Token)match(input,ID,FOLLOW_ID_in_typeName5822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID331);

            // src/main/resources/org/drools/lang/DRL.g:1366:9: ( DOT ID )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==DOT) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1366:10: DOT ID
            	    {
            	    DOT332=(Token)match(input,DOT,FOLLOW_DOT_in_typeName5825); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT332);

            	    ID333=(Token)match(input,ID,FOLLOW_ID_in_typeName5827); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(ID333);


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1366:19: -> VT_TYPE_NAME[$typeName.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_NAME, input.toString(retval.start,input.LT(-1))));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // src/main/resources/org/drools/lang/DRL.g:1371:1: packageOrTypeName : id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) ;
    public final DRLParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        DRLParser.packageOrTypeName_return retval = new DRLParser.packageOrTypeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1372:2: (id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1372:4: id+= ID (id+= DOT id+= ID )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1372:11: (id+= DOT id+= ID )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==DOT) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1372:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_packageOrTypeName5861); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5865); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PACKAGE, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1375:3: -> ^( VT_PACKAGE_ID ( ID )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1375:6: ^( VT_PACKAGE_ID ( ID )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PACKAGE_ID, "VT_PACKAGE_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1378:1: typeArguments : LESS typeArgument ( COMMA typeArgument )* GREATER ;
    public final DRLParser.typeArguments_return typeArguments() throws RecognitionException {
        DRLParser.typeArguments_return retval = new DRLParser.typeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS334=null;
        Token COMMA336=null;
        Token GREATER338=null;
        DRLParser.typeArgument_return typeArgument335 = null;

        DRLParser.typeArgument_return typeArgument337 = null;


        Object LESS334_tree=null;
        Object COMMA336_tree=null;
        Object GREATER338_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1379:2: ( LESS typeArgument ( COMMA typeArgument )* GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1379:4: LESS typeArgument ( COMMA typeArgument )* GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS334=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS334_tree = (Object)adaptor.create(LESS334);
            adaptor.addChild(root_0, LESS334_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5895);
            typeArgument335=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument335.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1379:22: ( COMMA typeArgument )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1379:23: COMMA typeArgument
            	    {
            	    COMMA336=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5898); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA336_tree = (Object)adaptor.create(COMMA336);
            	    adaptor.addChild(root_0, COMMA336_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments5900);
            	    typeArgument337=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument337.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            GREATER338=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER338_tree = (Object)adaptor.create(GREATER338);
            adaptor.addChild(root_0, GREATER338_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // src/main/resources/org/drools/lang/DRL.g:1382:1: typeArgument : ( type | QUESTION ( ( extends_key | super_key ) type )? );
    public final DRLParser.typeArgument_return typeArgument() throws RecognitionException {
        DRLParser.typeArgument_return retval = new DRLParser.typeArgument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION340=null;
        DRLParser.type_return type339 = null;

        DRLParser.extends_key_return extends_key341 = null;

        DRLParser.super_key_return super_key342 = null;

        DRLParser.type_return type343 = null;


        Object QUESTION340_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1383:2: ( type | QUESTION ( ( extends_key | super_key ) type )? )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==ID) ) {
                alt115=1;
            }
            else if ( (LA115_0==QUESTION) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1383:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument5916);
                    type339=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type339.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1384:4: QUESTION ( ( extends_key | super_key ) type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    QUESTION340=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_typeArgument5921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION340_tree = (Object)adaptor.create(QUESTION340);
                    adaptor.addChild(root_0, QUESTION340_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1384:13: ( ( extends_key | super_key ) type )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1384:14: ( extends_key | super_key ) type
                            {
                            // src/main/resources/org/drools/lang/DRL.g:1384:14: ( extends_key | super_key )
                            int alt113=2;
                            int LA113_0 = input.LA(1);

                            if ( (LA113_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                                int LA113_1 = input.LA(2);

                                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                                    alt113=1;
                                }
                                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                                    alt113=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 113, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 113, 0, input);

                                throw nvae;
                            }
                            switch (alt113) {
                                case 1 :
                                    // src/main/resources/org/drools/lang/DRL.g:1384:15: extends_key
                                    {
                                    pushFollow(FOLLOW_extends_key_in_typeArgument5925);
                                    extends_key341=extends_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key341.getTree());

                                    }
                                    break;
                                case 2 :
                                    // src/main/resources/org/drools/lang/DRL.g:1384:29: super_key
                                    {
                                    pushFollow(FOLLOW_super_key_in_typeArgument5929);
                                    super_key342=super_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key342.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument5932);
                            type343=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type343.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameters"
    // src/main/resources/org/drools/lang/DRL.g:1387:1: parameters : LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) ;
    public final DRLParser.parameters_return parameters() throws RecognitionException {
        DRLParser.parameters_return retval = new DRLParser.parameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN344=null;
        Token COMMA346=null;
        Token RIGHT_PAREN348=null;
        DRLParser.param_definition_return param_definition345 = null;

        DRLParser.param_definition_return param_definition347 = null;


        Object LEFT_PAREN344_tree=null;
        Object COMMA346_tree=null;
        Object RIGHT_PAREN348_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_param_definition=new RewriteRuleSubtreeStream(adaptor,"rule param_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1388:2: ( LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:1388:4: LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN
            {
            LEFT_PAREN344=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parameters5945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN344);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN344, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1389:4: ( param_definition ( COMMA param_definition )* )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==ID) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1389:6: param_definition ( COMMA param_definition )*
                    {
                    pushFollow(FOLLOW_param_definition_in_parameters5954);
                    param_definition345=param_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_param_definition.add(param_definition345.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1389:23: ( COMMA param_definition )*
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==COMMA) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1389:24: COMMA param_definition
                    	    {
                    	    COMMA346=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters5957); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA346);

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(COMMA346, DroolsEditorType.SYMBOL);	
                    	    }
                    	    pushFollow(FOLLOW_param_definition_in_parameters5961);
                    	    param_definition347=param_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_param_definition.add(param_definition347.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_PAREN348=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parameters5970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN348);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN348, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, param_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1391:3: -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:1391:6: ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PARAM_LIST, "VT_PARAM_LIST"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:1391:22: ( param_definition )*
                while ( stream_param_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_param_definition.nextTree());

                }
                stream_param_definition.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameters"

    public static class param_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "param_definition"
    // src/main/resources/org/drools/lang/DRL.g:1394:1: param_definition : ( data_type )? argument ;
    public final DRLParser.param_definition_return param_definition() throws RecognitionException {
        DRLParser.param_definition_return retval = new DRLParser.param_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.data_type_return data_type349 = null;

        DRLParser.argument_return argument350 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1395:2: ( ( data_type )? argument )
            // src/main/resources/org/drools/lang/DRL.g:1395:4: ( data_type )? argument
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1395:4: ( data_type )?
            int alt118=2;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1395:4: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_param_definition5996);
                    data_type349=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type349.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_argument_in_param_definition5999);
            argument350=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument350.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "param_definition"

    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // src/main/resources/org/drools/lang/DRL.g:1398:1: argument : ID ( dimension_definition )* ;
    public final DRLParser.argument_return argument() throws RecognitionException {
        DRLParser.argument_return retval = new DRLParser.argument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID351=null;
        DRLParser.dimension_definition_return dimension_definition352 = null;


        Object ID351_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1399:2: ( ID ( dimension_definition )* )
            // src/main/resources/org/drools/lang/DRL.g:1399:4: ID ( dimension_definition )*
            {
            root_0 = (Object)adaptor.nil();

            ID351=(Token)match(input,ID,FOLLOW_ID_in_argument6010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID351_tree = (Object)adaptor.create(ID351);
            adaptor.addChild(root_0, ID351_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(ID351, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1400:3: ( dimension_definition )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==LEFT_SQUARE) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1400:3: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_argument6016);
            	    dimension_definition352=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dimension_definition352.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class string_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_list"
    // src/main/resources/org/drools/lang/DRL.g:1403:1: string_list : first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] ;
    public final DRLParser.string_list_return string_list() throws RecognitionException {
        DRLParser.string_list_return retval = new DRLParser.string_list_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token first=null;
        Token next=null;
        Token COMMA353=null;

        Object first_tree=null;
        Object next_tree=null;
        Object COMMA353_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");


            StringBuilder buf = new StringBuilder();

        try {
            // src/main/resources/org/drools/lang/DRL.g:1407:2: (first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] )
            // src/main/resources/org/drools/lang/DRL.g:1407:4: first= STRING ( COMMA next= STRING )*
            {
            first=(Token)match(input,STRING,FOLLOW_STRING_in_string_list6035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING.add(first);

            if ( state.backtracking==0 ) {
               buf.append( "[ "+ (first!=null?first.getText():null) ); 
            }
            // src/main/resources/org/drools/lang/DRL.g:1408:5: ( COMMA next= STRING )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    int LA120_2 = input.LA(2);

                    if ( (LA120_2==STRING) ) {
                        alt120=1;
                    }


                }


                switch (alt120) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1408:6: COMMA next= STRING
            	    {
            	    COMMA353=(Token)match(input,COMMA,FOLLOW_COMMA_in_string_list6044); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA353);

            	    next=(Token)match(input,STRING,FOLLOW_STRING_in_string_list6048); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_STRING.add(next);

            	    if ( state.backtracking==0 ) {
            	       buf.append( ", " + (next!=null?next.getText():null) ); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: STRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1409:2: -> STRING[$first,buf.toString()+\" ]\"]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STRING, first, buf.toString()+" ]"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_list"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // src/main/resources/org/drools/lang/DRL.g:1550:1: expression options {backtrack=true; memoize=true; } : conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? -> ^( VT_EXPRESSION conditionalExpression ( assignmentOperator expression )? ) ;
    public final DRLParser.expression_return expression() throws RecognitionException {
        DRLParser.expression_return retval = new DRLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.conditionalExpression_return conditionalExpression354 = null;

        DRLParser.assignmentOperator_return assignmentOperator355 = null;

        DRLParser.expression_return expression356 = null;


        RewriteRuleSubtreeStream stream_assignmentOperator=new RewriteRuleSubtreeStream(adaptor,"rule assignmentOperator");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1552:2: ( conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? -> ^( VT_EXPRESSION conditionalExpression ( assignmentOperator expression )? ) )
            // src/main/resources/org/drools/lang/DRL.g:1552:4: conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )?
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression6094);
            conditionalExpression354=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression354.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1552:26: ( ( assignmentOperator )=> assignmentOperator expression )?
            int alt121=2;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1552:27: ( assignmentOperator )=> assignmentOperator expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression6103);
                    assignmentOperator355=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignmentOperator.add(assignmentOperator355.getTree());
                    pushFollow(FOLLOW_expression_in_expression6105);
                    expression356=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression356.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: conditionalExpression, expression, assignmentOperator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1553:2: -> ^( VT_EXPRESSION conditionalExpression ( assignmentOperator expression )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:1553:5: ^( VT_EXPRESSION conditionalExpression ( assignmentOperator expression )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_EXPRESSION, "VT_EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:1553:43: ( assignmentOperator expression )?
                if ( stream_expression.hasNext()||stream_assignmentOperator.hasNext() ) {
                    adaptor.addChild(root_1, stream_assignmentOperator.nextTree());
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();
                stream_assignmentOperator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1556:1: conditionalExpression : conditionalOrExpression ( QUESTION expression COLON expression )? ;
    public final DRLParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        DRLParser.conditionalExpression_return retval = new DRLParser.conditionalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION358=null;
        Token COLON360=null;
        DRLParser.conditionalOrExpression_return conditionalOrExpression357 = null;

        DRLParser.expression_return expression359 = null;

        DRLParser.expression_return expression361 = null;


        Object QUESTION358_tree=null;
        Object COLON360_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1557:9: ( conditionalOrExpression ( QUESTION expression COLON expression )? )
            // src/main/resources/org/drools/lang/DRL.g:1557:17: conditionalOrExpression ( QUESTION expression COLON expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression6148);
            conditionalOrExpression357=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression357.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1557:41: ( QUESTION expression COLON expression )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==QUESTION) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1557:43: QUESTION expression COLON expression
                    {
                    QUESTION358=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression6152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION358_tree = (Object)adaptor.create(QUESTION358);
                    adaptor.addChild(root_0, QUESTION358_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6154);
                    expression359=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression359.getTree());
                    COLON360=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression6156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON360_tree = (Object)adaptor.create(COLON360);
                    adaptor.addChild(root_0, COLON360_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6158);
                    expression361=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression361.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1559:1: conditionalOrExpression : conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* ;
    public final DRLParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        DRLParser.conditionalOrExpression_return retval = new DRLParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE363=null;
        DRLParser.conditionalAndExpression_return conditionalAndExpression362 = null;

        DRLParser.conditionalAndExpression_return conditionalAndExpression364 = null;


        Object DOUBLE_PIPE363_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1560:5: ( conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1560:9: conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6176);
            conditionalAndExpression362=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression362.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1560:34: ( DOUBLE_PIPE conditionalAndExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==DOUBLE_PIPE) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1560:36: DOUBLE_PIPE conditionalAndExpression
            	    {
            	    DOUBLE_PIPE363=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6180); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE363_tree = (Object)adaptor.create(DOUBLE_PIPE363);
            	    adaptor.addChild(root_0, DOUBLE_PIPE363_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6182);
            	    conditionalAndExpression364=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression364.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // src/main/resources/org/drools/lang/DRL.g:1563:1: conditionalAndExpression : inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* ;
    public final DRLParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        DRLParser.conditionalAndExpression_return retval = new DRLParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER366=null;
        DRLParser.inclusiveOrExpression_return inclusiveOrExpression365 = null;

        DRLParser.inclusiveOrExpression_return inclusiveOrExpression367 = null;


        Object DOUBLE_AMPER366_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1564:5: ( inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1564:9: inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6201);
            inclusiveOrExpression365=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression365.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1564:31: ( DOUBLE_AMPER inclusiveOrExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==DOUBLE_AMPER) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1564:33: DOUBLE_AMPER inclusiveOrExpression
            	    {
            	    DOUBLE_AMPER366=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression6205); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER366_tree = (Object)adaptor.create(DOUBLE_AMPER366);
            	    adaptor.addChild(root_0, DOUBLE_AMPER366_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6207);
            	    inclusiveOrExpression367=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression367.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1567:1: inclusiveOrExpression : exclusiveOrExpression ( PIPE exclusiveOrExpression )* ;
    public final DRLParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        DRLParser.inclusiveOrExpression_return retval = new DRLParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PIPE369=null;
        DRLParser.exclusiveOrExpression_return exclusiveOrExpression368 = null;

        DRLParser.exclusiveOrExpression_return exclusiveOrExpression370 = null;


        Object PIPE369_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1568:5: ( exclusiveOrExpression ( PIPE exclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1568:9: exclusiveOrExpression ( PIPE exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6226);
            exclusiveOrExpression368=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression368.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1568:31: ( PIPE exclusiveOrExpression )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==PIPE) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1568:33: PIPE exclusiveOrExpression
            	    {
            	    PIPE369=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression6230); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE369_tree = (Object)adaptor.create(PIPE369);
            	    adaptor.addChild(root_0, PIPE369_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6232);
            	    exclusiveOrExpression370=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression370.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1571:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final DRLParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        DRLParser.exclusiveOrExpression_return retval = new DRLParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token XOR372=null;
        DRLParser.andExpression_return andExpression371 = null;

        DRLParser.andExpression_return andExpression373 = null;


        Object XOR372_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1572:5: ( andExpression ( XOR andExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1572:9: andExpression ( XOR andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6251);
            andExpression371=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression371.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1572:23: ( XOR andExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==XOR) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1572:25: XOR andExpression
            	    {
            	    XOR372=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression6255); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR372_tree = (Object)adaptor.create(XOR372);
            	    adaptor.addChild(root_0, XOR372_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6257);
            	    andExpression373=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression373.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // src/main/resources/org/drools/lang/DRL.g:1575:1: andExpression : equalityExpression ( AMPER equalityExpression )* ;
    public final DRLParser.andExpression_return andExpression() throws RecognitionException {
        DRLParser.andExpression_return retval = new DRLParser.andExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPER375=null;
        DRLParser.equalityExpression_return equalityExpression374 = null;

        DRLParser.equalityExpression_return equalityExpression376 = null;


        Object AMPER375_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1576:5: ( equalityExpression ( AMPER equalityExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1576:9: equalityExpression ( AMPER equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression6276);
            equalityExpression374=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression374.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1576:28: ( AMPER equalityExpression )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==AMPER) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1576:30: AMPER equalityExpression
            	    {
            	    AMPER375=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression6280); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPER375_tree = (Object)adaptor.create(AMPER375);
            	    adaptor.addChild(root_0, AMPER375_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression6282);
            	    equalityExpression376=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression376.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // src/main/resources/org/drools/lang/DRL.g:1579:1: equalityExpression : instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* ;
    public final DRLParser.equalityExpression_return equalityExpression() throws RecognitionException {
        DRLParser.equalityExpression_return retval = new DRLParser.equalityExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set378=null;
        DRLParser.instanceOfExpression_return instanceOfExpression377 = null;

        DRLParser.instanceOfExpression_return instanceOfExpression379 = null;


        Object set378_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1580:5: ( instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1580:9: instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression6301);
            instanceOfExpression377=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression377.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1580:30: ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==EQUALS||LA128_0==NOT_EQUALS) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1580:32: ( EQUALS | NOT_EQUALS ) instanceOfExpression
            	    {
            	    set378=(Token)input.LT(1);
            	    if ( input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set378));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression6315);
            	    instanceOfExpression379=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression379.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // src/main/resources/org/drools/lang/DRL.g:1583:1: instanceOfExpression : relationalExpression ( instanceof_key type )? ;
    public final DRLParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        DRLParser.instanceOfExpression_return retval = new DRLParser.instanceOfExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.relationalExpression_return relationalExpression380 = null;

        DRLParser.instanceof_key_return instanceof_key381 = null;

        DRLParser.type_return type382 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1584:5: ( relationalExpression ( instanceof_key type )? )
            // src/main/resources/org/drools/lang/DRL.g:1584:9: relationalExpression ( instanceof_key type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression6334);
            relationalExpression380=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression380.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1584:30: ( instanceof_key type )?
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1584:31: instanceof_key type
                    {
                    pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression6337);
                    instanceof_key381=instanceof_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceof_key381.getTree());
                    pushFollow(FOLLOW_type_in_instanceOfExpression6339);
                    type382=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type382.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1587:1: relationalExpression : shiftExpression ( ( LESS )=> relationalOp shiftExpression )* ;
    public final DRLParser.relationalExpression_return relationalExpression() throws RecognitionException {
        DRLParser.relationalExpression_return retval = new DRLParser.relationalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.shiftExpression_return shiftExpression383 = null;

        DRLParser.relationalOp_return relationalOp384 = null;

        DRLParser.shiftExpression_return shiftExpression385 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1588:5: ( shiftExpression ( ( LESS )=> relationalOp shiftExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1588:9: shiftExpression ( ( LESS )=> relationalOp shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression6357);
            shiftExpression383=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression383.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1588:25: ( ( LESS )=> relationalOp shiftExpression )*
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1588:27: ( LESS )=> relationalOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression6366);
            	    relationalOp384=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalOp384.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression6368);
            	    shiftExpression385=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression385.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // src/main/resources/org/drools/lang/DRL.g:1591:1: relationalOp : ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) ;
    public final DRLParser.relationalOp_return relationalOp() throws RecognitionException {
        DRLParser.relationalOp_return retval = new DRLParser.relationalOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set386=null;

        Object set386_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1592:2: ( ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) )
            // src/main/resources/org/drools/lang/DRL.g:1592:4: ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER )
            {
            root_0 = (Object)adaptor.nil();

            set386=(Token)input.LT(1);
            if ( (input.LA(1)>=GREATER && input.LA(1)<=LESS_EQUALS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set386));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // src/main/resources/org/drools/lang/DRL.g:1595:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
    public final DRLParser.shiftExpression_return shiftExpression() throws RecognitionException {
        DRLParser.shiftExpression_return retval = new DRLParser.shiftExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.additiveExpression_return additiveExpression387 = null;

        DRLParser.shiftOp_return shiftOp388 = null;

        DRLParser.additiveExpression_return additiveExpression389 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1596:5: ( additiveExpression ( shiftOp additiveExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1596:9: additiveExpression ( shiftOp additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression6415);
            additiveExpression387=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression387.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1596:28: ( shiftOp additiveExpression )*
            loop131:
            do {
                int alt131=2;
                switch ( input.LA(1) ) {
                case SHIFT_LEFT:
                    {
                    int LA131_2 = input.LA(2);

                    if ( (LA131_2==ID||LA131_2==STRING||(LA131_2>=BOOL && LA131_2<=LEFT_PAREN)||LA131_2==DECIMAL||LA131_2==LESS||LA131_2==LEFT_SQUARE||(LA131_2>=NULL && LA131_2<=FLOAT)||(LA131_2>=INCR && LA131_2<=NEGATION)) ) {
                        alt131=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT:
                    {
                    int LA131_3 = input.LA(2);

                    if ( (LA131_3==ID||LA131_3==STRING||(LA131_3>=BOOL && LA131_3<=LEFT_PAREN)||LA131_3==DECIMAL||LA131_3==LESS||LA131_3==LEFT_SQUARE||(LA131_3>=NULL && LA131_3<=FLOAT)||(LA131_3>=INCR && LA131_3<=NEGATION)) ) {
                        alt131=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT_UNSIG:
                    {
                    int LA131_4 = input.LA(2);

                    if ( (LA131_4==ID||LA131_4==STRING||(LA131_4>=BOOL && LA131_4<=LEFT_PAREN)||LA131_4==DECIMAL||LA131_4==LESS||LA131_4==LEFT_SQUARE||(LA131_4>=NULL && LA131_4<=FLOAT)||(LA131_4>=INCR && LA131_4<=NEGATION)) ) {
                        alt131=1;
                    }


                    }
                    break;

                }

                switch (alt131) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1596:30: shiftOp additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression6419);
            	    shiftOp388=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftOp388.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression6421);
            	    additiveExpression389=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression389.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // src/main/resources/org/drools/lang/DRL.g:1599:1: shiftOp : ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) ;
    public final DRLParser.shiftOp_return shiftOp() throws RecognitionException {
        DRLParser.shiftOp_return retval = new DRLParser.shiftOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set390=null;

        Object set390_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1600:2: ( ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) )
            // src/main/resources/org/drools/lang/DRL.g:1600:4: ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT )
            {
            root_0 = (Object)adaptor.nil();

            set390=(Token)input.LT(1);
            if ( (input.LA(1)>=SHIFT_LEFT && input.LA(1)<=SHIFT_RIGHT) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set390));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // src/main/resources/org/drools/lang/DRL.g:1603:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final DRLParser.additiveExpression_return additiveExpression() throws RecognitionException {
        DRLParser.additiveExpression_return retval = new DRLParser.additiveExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set392=null;
        DRLParser.multiplicativeExpression_return multiplicativeExpression391 = null;

        DRLParser.multiplicativeExpression_return multiplicativeExpression393 = null;


        Object set392_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1604:5: ( multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1604:9: multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6462);
            multiplicativeExpression391=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression391.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1604:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            loop132:
            do {
                int alt132=2;
                alt132 = dfa132.predict(input);
                switch (alt132) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1604:36: ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    set392=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set392));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6481);
            	    multiplicativeExpression393=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression393.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // src/main/resources/org/drools/lang/DRL.g:1607:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final DRLParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        DRLParser.multiplicativeExpression_return retval = new DRLParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set395=null;
        DRLParser.unaryExpression_return unaryExpression394 = null;

        DRLParser.unaryExpression_return unaryExpression396 = null;


        Object set395_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1608:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1608:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6500);
            unaryExpression394=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression394.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1608:25: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( ((LA133_0>=STAR && LA133_0<=MOD)) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1608:27: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    set395=(Token)input.LT(1);
            	    if ( (input.LA(1)>=STAR && input.LA(1)<=MOD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set395));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6518);
            	    unaryExpression396=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression396.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // src/main/resources/org/drools/lang/DRL.g:1611:1: unaryExpression : ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus );
    public final DRLParser.unaryExpression_return unaryExpression() throws RecognitionException {
        DRLParser.unaryExpression_return retval = new DRLParser.unaryExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS397=null;
        Token MINUS399=null;
        Token INCR401=null;
        Token DECR403=null;
        DRLParser.unaryExpression_return unaryExpression398 = null;

        DRLParser.unaryExpression_return unaryExpression400 = null;

        DRLParser.primary_return primary402 = null;

        DRLParser.primary_return primary404 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus405 = null;


        Object PLUS397_tree=null;
        Object MINUS399_tree=null;
        Object INCR401_tree=null;
        Object DECR403_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1612:5: ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus )
            int alt134=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt134=1;
                }
                break;
            case MINUS:
                {
                alt134=2;
                }
                break;
            case INCR:
                {
                alt134=3;
                }
                break;
            case DECR:
                {
                alt134=4;
                }
                break;
            case ID:
            case STRING:
            case BOOL:
            case LEFT_PAREN:
            case DECIMAL:
            case LESS:
            case LEFT_SQUARE:
            case NULL:
            case HEX:
            case FLOAT:
            case TILDE:
            case NEGATION:
                {
                alt134=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }

            switch (alt134) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1612:9: PLUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS397=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression6538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS397_tree = (Object)adaptor.create(PLUS397);
                    adaptor.addChild(root_0, PLUS397_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6540);
                    unaryExpression398=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression398.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1613:7: MINUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS399=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS399_tree = (Object)adaptor.create(MINUS399);
                    adaptor.addChild(root_0, MINUS399_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6550);
                    unaryExpression400=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression400.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1614:9: INCR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    INCR401=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression6560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INCR401_tree = (Object)adaptor.create(INCR401);
                    adaptor.addChild(root_0, INCR401_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression6562);
                    primary402=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary402.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1615:9: DECR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    DECR403=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression6572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECR403_tree = (Object)adaptor.create(DECR403);
                    adaptor.addChild(root_0, DECR403_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression6574);
                    primary404=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary404.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1616:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6584);
                    unaryExpressionNotPlusMinus405=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus405.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // src/main/resources/org/drools/lang/DRL.g:1619:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );
    public final DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        DRLParser.unaryExpressionNotPlusMinus_return retval = new DRLParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token TILDE406=null;
        Token NEGATION408=null;
        Token set413=null;
        DRLParser.unaryExpression_return unaryExpression407 = null;

        DRLParser.unaryExpression_return unaryExpression409 = null;

        DRLParser.castExpression_return castExpression410 = null;

        DRLParser.primary_return primary411 = null;

        DRLParser.selector_return selector412 = null;


        Object TILDE406_tree=null;
        Object NEGATION408_tree=null;
        Object set413_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1621:5: ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? )
            int alt137=4;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1621:9: TILDE unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    TILDE406=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus6617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE406_tree = (Object)adaptor.create(TILDE406);
                    adaptor.addChild(root_0, TILDE406_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6619);
                    unaryExpression407=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression407.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1622:8: NEGATION unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    NEGATION408=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus6628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEGATION408_tree = (Object)adaptor.create(NEGATION408);
                    adaptor.addChild(root_0, NEGATION408_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6630);
                    unaryExpression409=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression409.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1623:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6640);
                    castExpression410=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression410.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1624:9: primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6650);
                    primary411=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary411.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1624:17: ( ( selector )=> selector )*
                    loop135:
                    do {
                        int alt135=2;
                        alt135 = dfa135.predict(input);
                        switch (alt135) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1624:18: ( selector )=> selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6657);
                    	    selector412=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector412.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1624:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    int alt136=2;
                    alt136 = dfa136.predict(input);
                    switch (alt136) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1624:42: ( INCR | DECR )=> ( INCR | DECR )
                            {
                            set413=(Token)input.LT(1);
                            if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set413));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // src/main/resources/org/drools/lang/DRL.g:1627:1: castExpression options {backtrack=true; memoize=true; } : ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus );
    public final DRLParser.castExpression_return castExpression() throws RecognitionException {
        DRLParser.castExpression_return retval = new DRLParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN414=null;
        Token RIGHT_PAREN416=null;
        Token LEFT_PAREN418=null;
        Token RIGHT_PAREN420=null;
        Token LEFT_PAREN422=null;
        Token RIGHT_PAREN424=null;
        DRLParser.primitiveType_return primitiveType415 = null;

        DRLParser.unaryExpression_return unaryExpression417 = null;

        DRLParser.type_return type419 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus421 = null;

        DRLParser.expression_return expression423 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus425 = null;


        Object LEFT_PAREN414_tree=null;
        Object RIGHT_PAREN416_tree=null;
        Object LEFT_PAREN418_tree=null;
        Object RIGHT_PAREN420_tree=null;
        Object LEFT_PAREN422_tree=null;
        Object RIGHT_PAREN424_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1629:5: ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus )
            int alt138=3;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==LEFT_PAREN) ) {
                int LA138_1 = input.LA(2);

                if ( (synpred21_DRL()) ) {
                    alt138=1;
                }
                else if ( (synpred22_DRL()) ) {
                    alt138=2;
                }
                else if ( (true) ) {
                    alt138=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1629:8: ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN414=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6719); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN414_tree = (Object)adaptor.create(LEFT_PAREN414);
                    adaptor.addChild(root_0, LEFT_PAREN414_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression6721);
                    primitiveType415=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType415.getTree());
                    RIGHT_PAREN416=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6723); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN416_tree = (Object)adaptor.create(RIGHT_PAREN416);
                    adaptor.addChild(root_0, RIGHT_PAREN416_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression6725);
                    unaryExpression417=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression417.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1630:8: ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN418=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN418_tree = (Object)adaptor.create(LEFT_PAREN418);
                    adaptor.addChild(root_0, LEFT_PAREN418_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression6744);
                    type419=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type419.getTree());
                    RIGHT_PAREN420=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN420_tree = (Object)adaptor.create(RIGHT_PAREN420);
                    adaptor.addChild(root_0, RIGHT_PAREN420_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6748);
                    unaryExpressionNotPlusMinus421=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus421.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1631:8: LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN422=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN422_tree = (Object)adaptor.create(LEFT_PAREN422);
                    adaptor.addChild(root_0, LEFT_PAREN422_tree);
                    }
                    pushFollow(FOLLOW_expression_in_castExpression6759);
                    expression423=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression423.getTree());
                    RIGHT_PAREN424=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6761); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN424_tree = (Object)adaptor.create(RIGHT_PAREN424);
                    adaptor.addChild(root_0, RIGHT_PAREN424_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6763);
                    unaryExpressionNotPlusMinus425=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus425.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // src/main/resources/org/drools/lang/DRL.g:1634:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );
    public final DRLParser.primitiveType_return primitiveType() throws RecognitionException {
        DRLParser.primitiveType_return retval = new DRLParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.boolean_key_return boolean_key426 = null;

        DRLParser.char_key_return char_key427 = null;

        DRLParser.byte_key_return byte_key428 = null;

        DRLParser.short_key_return short_key429 = null;

        DRLParser.int_key_return int_key430 = null;

        DRLParser.long_key_return long_key431 = null;

        DRLParser.float_key_return float_key432 = null;

        DRLParser.double_key_return double_key433 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1636:5: ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key )
            int alt139=8;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1636:9: boolean_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolean_key_in_primitiveType6800);
                    boolean_key426=boolean_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_key426.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1637:7: char_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_char_key_in_primitiveType6808);
                    char_key427=char_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_key427.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1638:7: byte_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_byte_key_in_primitiveType6816);
                    byte_key428=byte_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, byte_key428.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1639:7: short_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_short_key_in_primitiveType6824);
                    short_key429=short_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, short_key429.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1640:7: int_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_int_key_in_primitiveType6832);
                    int_key430=int_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, int_key430.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1641:7: long_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_long_key_in_primitiveType6840);
                    long_key431=long_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, long_key431.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1642:7: float_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_float_key_in_primitiveType6848);
                    float_key432=float_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, float_key432.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1643:7: double_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_double_key_in_primitiveType6856);
                    double_key433=double_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_key433.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // src/main/resources/org/drools/lang/DRL.g:1646:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );
    public final DRLParser.primary_return primary() throws RecognitionException {
        DRLParser.primary_return retval = new DRLParser.primary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE445=null;
        Token RIGHT_SQUARE446=null;
        Token DOT447=null;
        Token ID451=null;
        Token DOT452=null;
        Token ID453=null;
        DRLParser.parExpression_return parExpression434 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments435 = null;

        DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix436 = null;

        DRLParser.this_key_return this_key437 = null;

        DRLParser.arguments_return arguments438 = null;

        DRLParser.literal_return literal439 = null;

        DRLParser.super_key_return super_key440 = null;

        DRLParser.superSuffix_return superSuffix441 = null;

        DRLParser.new_key_return new_key442 = null;

        DRLParser.creator_return creator443 = null;

        DRLParser.primitiveType_return primitiveType444 = null;

        DRLParser.class_key_return class_key448 = null;

        DRLParser.inlineMapExpression_return inlineMapExpression449 = null;

        DRLParser.inlineListExpression_return inlineListExpression450 = null;

        DRLParser.identifierSuffix_return identifierSuffix454 = null;


        Object LEFT_SQUARE445_tree=null;
        Object RIGHT_SQUARE446_tree=null;
        Object DOT447_tree=null;
        Object ID451_tree=null;
        Object DOT452_tree=null;
        Object ID453_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1648:5: ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? )
            int alt144=9;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1648:7: ( parExpression )=> parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6879);
                    parExpression434=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression434.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1649:9: ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6894);
                    nonWildcardTypeArguments435=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments435.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1649:63: ( explicitGenericInvocationSuffix | this_key arguments )
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==ID) ) {
                        int LA140_1 = input.LA(2);

                        if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))))) ) {
                            alt140=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                            alt140=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 140, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 140, 0, input);

                        throw nvae;
                    }
                    switch (alt140) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1649:64: explicitGenericInvocationSuffix
                            {
                            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6897);
                            explicitGenericInvocationSuffix436=explicitGenericInvocationSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix436.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1649:98: this_key arguments
                            {
                            pushFollow(FOLLOW_this_key_in_primary6901);
                            this_key437=this_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, this_key437.getTree());
                            pushFollow(FOLLOW_arguments_in_primary6903);
                            arguments438=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments438.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1650:9: ( literal )=> literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6919);
                    literal439=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal439.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1652:9: ( super_key )=> super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_primary6939);
                    super_key440=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key440.getTree());
                    pushFollow(FOLLOW_superSuffix_in_primary6941);
                    superSuffix441=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix441.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1653:9: ( new_key )=> new_key creator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_new_key_in_primary6956);
                    new_key442=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key442.getTree());
                    pushFollow(FOLLOW_creator_in_primary6958);
                    creator443=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, creator443.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1654:9: ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_primary6973);
                    primitiveType444=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType444.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1654:41: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==LEFT_SQUARE) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1654:42: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE445=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary6976); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE445_tree = (Object)adaptor.create(LEFT_SQUARE445);
                    	    adaptor.addChild(root_0, LEFT_SQUARE445_tree);
                    	    }
                    	    RIGHT_SQUARE446=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary6978); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE446_tree = (Object)adaptor.create(RIGHT_SQUARE446);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE446_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);

                    DOT447=(Token)match(input,DOT,FOLLOW_DOT_in_primary6982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT447_tree = (Object)adaptor.create(DOT447);
                    adaptor.addChild(root_0, DOT447_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_primary6984);
                    class_key448=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key448.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1656:9: ( inlineMapExpression )=> inlineMapExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineMapExpression_in_primary7004);
                    inlineMapExpression449=inlineMapExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineMapExpression449.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1657:9: ( inlineListExpression )=> inlineListExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineListExpression_in_primary7019);
                    inlineListExpression450=inlineListExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineListExpression450.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1658:9: ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ID451=(Token)match(input,ID,FOLLOW_ID_in_primary7033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID451_tree = (Object)adaptor.create(ID451);
                    adaptor.addChild(root_0, ID451_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1658:18: ( ( DOT ID )=> DOT ID )*
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==DOT) ) {
                            int LA142_2 = input.LA(2);

                            if ( (LA142_2==ID) ) {
                                int LA142_3 = input.LA(3);

                                if ( (synpred39_DRL()) ) {
                                    alt142=1;
                                }


                            }


                        }


                        switch (alt142) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1658:19: ( DOT ID )=> DOT ID
                    	    {
                    	    DOT452=(Token)match(input,DOT,FOLLOW_DOT_in_primary7042); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT452_tree = (Object)adaptor.create(DOT452);
                    	    adaptor.addChild(root_0, DOT452_tree);
                    	    }
                    	    ID453=(Token)match(input,ID,FOLLOW_ID_in_primary7044); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID453_tree = (Object)adaptor.create(ID453);
                    	    adaptor.addChild(root_0, ID453_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1658:38: ( ( identifierSuffix )=> identifierSuffix )?
                    int alt143=2;
                    alt143 = dfa143.predict(input);
                    switch (alt143) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1658:39: ( identifierSuffix )=> identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary7053);
                            identifierSuffix454=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierSuffix454.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class inlineListExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineListExpression"
    // src/main/resources/org/drools/lang/DRL.g:1661:1: inlineListExpression : LEFT_SQUARE ( expressionList )? RIGHT_SQUARE ;
    public final DRLParser.inlineListExpression_return inlineListExpression() throws RecognitionException {
        DRLParser.inlineListExpression_return retval = new DRLParser.inlineListExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE455=null;
        Token RIGHT_SQUARE457=null;
        DRLParser.expressionList_return expressionList456 = null;


        Object LEFT_SQUARE455_tree=null;
        Object RIGHT_SQUARE457_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1662:5: ( LEFT_SQUARE ( expressionList )? RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1662:9: LEFT_SQUARE ( expressionList )? RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE455=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression7074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE455_tree = (Object)adaptor.create(LEFT_SQUARE455);
            adaptor.addChild(root_0, LEFT_SQUARE455_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1662:21: ( expressionList )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ID||LA145_0==STRING||(LA145_0>=BOOL && LA145_0<=LEFT_PAREN)||LA145_0==DECIMAL||LA145_0==LESS||LA145_0==LEFT_SQUARE||(LA145_0>=NULL && LA145_0<=FLOAT)||(LA145_0>=INCR && LA145_0<=NEGATION)) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1662:21: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_inlineListExpression7076);
                    expressionList456=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList456.getTree());

                    }
                    break;

            }

            RIGHT_SQUARE457=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression7079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE457_tree = (Object)adaptor.create(RIGHT_SQUARE457);
            adaptor.addChild(root_0, RIGHT_SQUARE457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineListExpression"

    public static class inlineMapExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineMapExpression"
    // src/main/resources/org/drools/lang/DRL.g:1665:1: inlineMapExpression : LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE ;
    public final DRLParser.inlineMapExpression_return inlineMapExpression() throws RecognitionException {
        DRLParser.inlineMapExpression_return retval = new DRLParser.inlineMapExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE458=null;
        Token RIGHT_SQUARE460=null;
        DRLParser.mapExpressionList_return mapExpressionList459 = null;


        Object LEFT_SQUARE458_tree=null;
        Object RIGHT_SQUARE460_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1666:5: ( LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1666:7: LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE458=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression7101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE458_tree = (Object)adaptor.create(LEFT_SQUARE458);
            adaptor.addChild(root_0, LEFT_SQUARE458_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1666:19: ( mapExpressionList )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ID||LA146_0==STRING||(LA146_0>=BOOL && LA146_0<=LEFT_PAREN)||LA146_0==DECIMAL||LA146_0==LESS||LA146_0==LEFT_SQUARE||(LA146_0>=NULL && LA146_0<=FLOAT)||(LA146_0>=INCR && LA146_0<=NEGATION)) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1666:19: mapExpressionList
            	    {
            	    pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression7103);
            	    mapExpressionList459=mapExpressionList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapExpressionList459.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);

            RIGHT_SQUARE460=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE460_tree = (Object)adaptor.create(RIGHT_SQUARE460);
            adaptor.addChild(root_0, RIGHT_SQUARE460_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineMapExpression"

    public static class mapExpressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapExpressionList"
    // src/main/resources/org/drools/lang/DRL.g:1669:1: mapExpressionList : mapEntry ( COMMA mapEntry )* ;
    public final DRLParser.mapExpressionList_return mapExpressionList() throws RecognitionException {
        DRLParser.mapExpressionList_return retval = new DRLParser.mapExpressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA462=null;
        DRLParser.mapEntry_return mapEntry461 = null;

        DRLParser.mapEntry_return mapEntry463 = null;


        Object COMMA462_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1670:5: ( mapEntry ( COMMA mapEntry )* )
            // src/main/resources/org/drools/lang/DRL.g:1670:7: mapEntry ( COMMA mapEntry )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mapEntry_in_mapExpressionList7123);
            mapEntry461=mapEntry();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry461.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1670:16: ( COMMA mapEntry )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==COMMA) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1670:17: COMMA mapEntry
            	    {
            	    COMMA462=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapExpressionList7126); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA462_tree = (Object)adaptor.create(COMMA462);
            	    adaptor.addChild(root_0, COMMA462_tree);
            	    }
            	    pushFollow(FOLLOW_mapEntry_in_mapExpressionList7128);
            	    mapEntry463=mapEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry463.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapExpressionList"

    public static class mapEntry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapEntry"
    // src/main/resources/org/drools/lang/DRL.g:1673:1: mapEntry : expression COLON expression ;
    public final DRLParser.mapEntry_return mapEntry() throws RecognitionException {
        DRLParser.mapEntry_return retval = new DRLParser.mapEntry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON465=null;
        DRLParser.expression_return expression464 = null;

        DRLParser.expression_return expression466 = null;


        Object COLON465_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1674:5: ( expression COLON expression )
            // src/main/resources/org/drools/lang/DRL.g:1674:7: expression COLON expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_mapEntry7151);
            expression464=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression464.getTree());
            COLON465=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry7153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON465_tree = (Object)adaptor.create(COLON465);
            adaptor.addChild(root_0, COLON465_tree);
            }
            pushFollow(FOLLOW_expression_in_mapEntry7155);
            expression466=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression466.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapEntry"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // src/main/resources/org/drools/lang/DRL.g:1677:1: parExpression : LEFT_PAREN expression RIGHT_PAREN ;
    public final DRLParser.parExpression_return parExpression() throws RecognitionException {
        DRLParser.parExpression_return retval = new DRLParser.parExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN467=null;
        Token RIGHT_PAREN469=null;
        DRLParser.expression_return expression468 = null;


        Object LEFT_PAREN467_tree=null;
        Object RIGHT_PAREN469_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1678:2: ( LEFT_PAREN expression RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1678:4: LEFT_PAREN expression RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN467=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression7169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN467_tree = (Object)adaptor.create(LEFT_PAREN467);
            adaptor.addChild(root_0, LEFT_PAREN467_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression7171);
            expression468=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression468.getTree());
            RIGHT_PAREN469=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression7173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN469_tree = (Object)adaptor.create(RIGHT_PAREN469);
            adaptor.addChild(root_0, RIGHT_PAREN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1681:1: identifierSuffix options {backtrack=true; memoize=true; } : ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments );
    public final DRLParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        DRLParser.identifierSuffix_return retval = new DRLParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE470=null;
        Token RIGHT_SQUARE471=null;
        Token DOT472=null;
        Token LEFT_SQUARE474=null;
        Token RIGHT_SQUARE476=null;
        DRLParser.class_key_return class_key473 = null;

        DRLParser.expression_return expression475 = null;

        DRLParser.arguments_return arguments477 = null;


        Object LEFT_SQUARE470_tree=null;
        Object RIGHT_SQUARE471_tree=null;
        Object DOT472_tree=null;
        Object LEFT_SQUARE474_tree=null;
        Object RIGHT_SQUARE476_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1683:5: ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments )
            int alt150=3;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==LEFT_SQUARE) ) {
                int LA150_1 = input.LA(2);

                if ( (LA150_1==RIGHT_SQUARE) ) {
                    alt150=1;
                }
                else if ( (LA150_1==ID||LA150_1==STRING||(LA150_1>=BOOL && LA150_1<=LEFT_PAREN)||LA150_1==DECIMAL||LA150_1==LESS||LA150_1==LEFT_SQUARE||(LA150_1>=NULL && LA150_1<=FLOAT)||(LA150_1>=INCR && LA150_1<=NEGATION)) ) {
                    alt150=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 150, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA150_0==LEFT_PAREN) ) {
                alt150=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1683:7: ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1683:7: ( LEFT_SQUARE RIGHT_SQUARE )+
                    int cnt148=0;
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==LEFT_SQUARE) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1683:8: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE470=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7203); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE470_tree = (Object)adaptor.create(LEFT_SQUARE470);
                    	    adaptor.addChild(root_0, LEFT_SQUARE470_tree);
                    	    }
                    	    RIGHT_SQUARE471=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7205); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE471_tree = (Object)adaptor.create(RIGHT_SQUARE471);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE471_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt148 >= 1 ) break loop148;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(148, input);
                                throw eee;
                        }
                        cnt148++;
                    } while (true);

                    DOT472=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix7209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT472_tree = (Object)adaptor.create(DOT472);
                    adaptor.addChild(root_0, DOT472_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_identifierSuffix7211);
                    class_key473=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key473.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1684:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1684:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    int cnt149=0;
                    loop149:
                    do {
                        int alt149=2;
                        alt149 = dfa149.predict(input);
                        switch (alt149) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1684:8: ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE474=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7226); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE474_tree = (Object)adaptor.create(LEFT_SQUARE474);
                    	    adaptor.addChild(root_0, LEFT_SQUARE474_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix7228);
                    	    expression475=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression475.getTree());
                    	    RIGHT_SQUARE476=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7230); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE476_tree = (Object)adaptor.create(RIGHT_SQUARE476);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE476_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt149 >= 1 ) break loop149;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(149, input);
                                throw eee;
                        }
                        cnt149++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1685:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_identifierSuffix7243);
                    arguments477=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments477.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // src/main/resources/org/drools/lang/DRL.g:1693:1: creator : ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) ;
    public final DRLParser.creator_return creator() throws RecognitionException {
        DRLParser.creator_return retval = new DRLParser.creator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments478 = null;

        DRLParser.createdName_return createdName479 = null;

        DRLParser.arrayCreatorRest_return arrayCreatorRest480 = null;

        DRLParser.classCreatorRest_return classCreatorRest481 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1694:2: ( ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) )
            // src/main/resources/org/drools/lang/DRL.g:1694:4: ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1694:4: ( nonWildcardTypeArguments )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LESS) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1694:4: nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator7261);
                    nonWildcardTypeArguments478=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments478.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_createdName_in_creator7264);
            createdName479=createdName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName479.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1695:9: ( arrayCreatorRest | classCreatorRest )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LEFT_SQUARE) ) {
                alt152=1;
            }
            else if ( (LA152_0==LEFT_PAREN) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1695:10: arrayCreatorRest
                    {
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator7275);
                    arrayCreatorRest480=arrayCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayCreatorRest480.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1695:29: classCreatorRest
                    {
                    pushFollow(FOLLOW_classCreatorRest_in_creator7279);
                    classCreatorRest481=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest481.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // src/main/resources/org/drools/lang/DRL.g:1698:1: createdName : ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType );
    public final DRLParser.createdName_return createdName() throws RecognitionException {
        DRLParser.createdName_return retval = new DRLParser.createdName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID482=null;
        Token DOT484=null;
        Token ID485=null;
        DRLParser.typeArguments_return typeArguments483 = null;

        DRLParser.typeArguments_return typeArguments486 = null;

        DRLParser.primitiveType_return primitiveType487 = null;


        Object ID482_tree=null;
        Object DOT484_tree=null;
        Object ID485_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1699:2: ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))))) {
                int LA156_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))) ) {
                    alt156=1;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1699:4: ID ( typeArguments )? ( DOT ID ( typeArguments )? )*
                    {
                    root_0 = (Object)adaptor.nil();

                    ID482=(Token)match(input,ID,FOLLOW_ID_in_createdName7291); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID482_tree = (Object)adaptor.create(ID482);
                    adaptor.addChild(root_0, ID482_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1699:7: ( typeArguments )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==LESS) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1699:7: typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_createdName7293);
                            typeArguments483=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments483.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1700:9: ( DOT ID ( typeArguments )? )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==DOT) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1700:11: DOT ID ( typeArguments )?
                    	    {
                    	    DOT484=(Token)match(input,DOT,FOLLOW_DOT_in_createdName7306); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT484_tree = (Object)adaptor.create(DOT484);
                    	    adaptor.addChild(root_0, DOT484_tree);
                    	    }
                    	    ID485=(Token)match(input,ID,FOLLOW_ID_in_createdName7308); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID485_tree = (Object)adaptor.create(ID485);
                    	    adaptor.addChild(root_0, ID485_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1700:18: ( typeArguments )?
                    	    int alt154=2;
                    	    int LA154_0 = input.LA(1);

                    	    if ( (LA154_0==LESS) ) {
                    	        alt154=1;
                    	    }
                    	    switch (alt154) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1700:18: typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_createdName7310);
                    	            typeArguments486=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments486.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1701:11: primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName7325);
                    primitiveType487=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType487.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // src/main/resources/org/drools/lang/DRL.g:1704:1: innerCreator : {...}? => ID classCreatorRest ;
    public final DRLParser.innerCreator_return innerCreator() throws RecognitionException {
        DRLParser.innerCreator_return retval = new DRLParser.innerCreator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID488=null;
        DRLParser.classCreatorRest_return classCreatorRest489 = null;


        Object ID488_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1705:2: ({...}? => ID classCreatorRest )
            // src/main/resources/org/drools/lang/DRL.g:1705:4: {...}? => ID classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "innerCreator", "!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            ID488=(Token)match(input,ID,FOLLOW_ID_in_innerCreator7340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID488_tree = (Object)adaptor.create(ID488);
            adaptor.addChild(root_0, ID488_tree);
            }
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator7342);
            classCreatorRest489=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest489.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1708:1: arrayCreatorRest : LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) ;
    public final DRLParser.arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        DRLParser.arrayCreatorRest_return retval = new DRLParser.arrayCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE490=null;
        Token RIGHT_SQUARE491=null;
        Token LEFT_SQUARE492=null;
        Token RIGHT_SQUARE493=null;
        Token RIGHT_SQUARE496=null;
        Token LEFT_SQUARE497=null;
        Token RIGHT_SQUARE499=null;
        Token LEFT_SQUARE500=null;
        Token RIGHT_SQUARE501=null;
        DRLParser.arrayInitializer_return arrayInitializer494 = null;

        DRLParser.expression_return expression495 = null;

        DRLParser.expression_return expression498 = null;


        Object LEFT_SQUARE490_tree=null;
        Object RIGHT_SQUARE491_tree=null;
        Object LEFT_SQUARE492_tree=null;
        Object RIGHT_SQUARE493_tree=null;
        Object RIGHT_SQUARE496_tree=null;
        Object LEFT_SQUARE497_tree=null;
        Object RIGHT_SQUARE499_tree=null;
        Object LEFT_SQUARE500_tree=null;
        Object RIGHT_SQUARE501_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1709:2: ( LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1709:6: LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE490=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE490_tree = (Object)adaptor.create(LEFT_SQUARE490);
            adaptor.addChild(root_0, LEFT_SQUARE490_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1710:2: ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==RIGHT_SQUARE) ) {
                alt160=1;
            }
            else if ( (LA160_0==ID||LA160_0==STRING||(LA160_0>=BOOL && LA160_0<=LEFT_PAREN)||LA160_0==DECIMAL||LA160_0==LESS||LA160_0==LEFT_SQUARE||(LA160_0>=NULL && LA160_0<=FLOAT)||(LA160_0>=INCR && LA160_0<=NEGATION)) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1710:6: RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer
                    {
                    RIGHT_SQUARE491=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE491_tree = (Object)adaptor.create(RIGHT_SQUARE491);
                    adaptor.addChild(root_0, RIGHT_SQUARE491_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1710:19: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==LEFT_SQUARE) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1710:20: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE492=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7366); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE492_tree = (Object)adaptor.create(LEFT_SQUARE492);
                    	    adaptor.addChild(root_0, LEFT_SQUARE492_tree);
                    	    }
                    	    RIGHT_SQUARE493=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7368); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE493_tree = (Object)adaptor.create(RIGHT_SQUARE493);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE493_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest7372);
                    arrayInitializer494=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer494.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1711:13: expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest7386);
                    expression495=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression495.getTree());
                    RIGHT_SQUARE496=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE496_tree = (Object)adaptor.create(RIGHT_SQUARE496);
                    adaptor.addChild(root_0, RIGHT_SQUARE496_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1711:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*
                    loop158:
                    do {
                        int alt158=2;
                        alt158 = dfa158.predict(input);
                        switch (alt158) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1711:38: {...}? => LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    if ( !((!helper.validateLT(2,"]"))) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "arrayCreatorRest", "!helper.validateLT(2,\"]\")");
                    	    }
                    	    LEFT_SQUARE497=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7393); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE497_tree = (Object)adaptor.create(LEFT_SQUARE497);
                    	    adaptor.addChild(root_0, LEFT_SQUARE497_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest7395);
                    	    expression498=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());
                    	    RIGHT_SQUARE499=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7397); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE499_tree = (Object)adaptor.create(RIGHT_SQUARE499);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE499_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1711:106: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==LEFT_SQUARE) ) {
                            int LA159_2 = input.LA(2);

                            if ( (LA159_2==RIGHT_SQUARE) ) {
                                int LA159_3 = input.LA(3);

                                if ( (synpred44_DRL()) ) {
                                    alt159=1;
                                }


                            }


                        }


                        switch (alt159) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1711:107: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE500=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7409); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE500_tree = (Object)adaptor.create(LEFT_SQUARE500);
                    	    adaptor.addChild(root_0, LEFT_SQUARE500_tree);
                    	    }
                    	    RIGHT_SQUARE501=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7411); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE501_tree = (Object)adaptor.create(RIGHT_SQUARE501);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE501_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayCreatorRest"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1715:1: variableInitializer : ( arrayInitializer | expression );
    public final DRLParser.variableInitializer_return variableInitializer() throws RecognitionException {
        DRLParser.variableInitializer_return retval = new DRLParser.variableInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arrayInitializer_return arrayInitializer502 = null;

        DRLParser.expression_return expression503 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1716:2: ( arrayInitializer | expression )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==LEFT_CURLY) ) {
                alt161=1;
            }
            else if ( (LA161_0==ID||LA161_0==STRING||(LA161_0>=BOOL && LA161_0<=LEFT_PAREN)||LA161_0==DECIMAL||LA161_0==LESS||LA161_0==LEFT_SQUARE||(LA161_0>=NULL && LA161_0<=FLOAT)||(LA161_0>=INCR && LA161_0<=NEGATION)) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1716:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer7434);
                    arrayInitializer502=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer502.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1717:10: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer7445);
                    expression503=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression503.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1720:1: arrayInitializer : LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY ;
    public final DRLParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        DRLParser.arrayInitializer_return retval = new DRLParser.arrayInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY504=null;
        Token COMMA506=null;
        Token COMMA508=null;
        Token RIGHT_CURLY509=null;
        DRLParser.variableInitializer_return variableInitializer505 = null;

        DRLParser.variableInitializer_return variableInitializer507 = null;


        Object LEFT_CURLY504_tree=null;
        Object COMMA506_tree=null;
        Object COMMA508_tree=null;
        Object RIGHT_CURLY509_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1721:2: ( LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1721:4: LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY504=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer7457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY504_tree = (Object)adaptor.create(LEFT_CURLY504);
            adaptor.addChild(root_0, LEFT_CURLY504_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1721:15: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==ID||LA164_0==STRING||(LA164_0>=BOOL && LA164_0<=LEFT_PAREN)||LA164_0==DECIMAL||LA164_0==LESS||LA164_0==LEFT_SQUARE||(LA164_0>=NULL && LA164_0<=FLOAT)||LA164_0==LEFT_CURLY||(LA164_0>=INCR && LA164_0<=NEGATION)) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1721:16: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7460);
                    variableInitializer505=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer505.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1721:36: ( COMMA variableInitializer )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==COMMA) ) {
                            int LA162_1 = input.LA(2);

                            if ( (LA162_1==ID||LA162_1==STRING||(LA162_1>=BOOL && LA162_1<=LEFT_PAREN)||LA162_1==DECIMAL||LA162_1==LESS||LA162_1==LEFT_SQUARE||(LA162_1>=NULL && LA162_1<=FLOAT)||LA162_1==LEFT_CURLY||(LA162_1>=INCR && LA162_1<=NEGATION)) ) {
                                alt162=1;
                            }


                        }


                        switch (alt162) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1721:37: COMMA variableInitializer
                    	    {
                    	    COMMA506=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7463); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA506_tree = (Object)adaptor.create(COMMA506);
                    	    adaptor.addChild(root_0, COMMA506_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7465);
                    	    variableInitializer507=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer507.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1721:65: ( COMMA )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==COMMA) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1721:66: COMMA
                            {
                            COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7470); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA508_tree = (Object)adaptor.create(COMMA508);
                            adaptor.addChild(root_0, COMMA508_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RIGHT_CURLY509=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer7477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY509_tree = (Object)adaptor.create(RIGHT_CURLY509);
            adaptor.addChild(root_0, RIGHT_CURLY509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1724:1: classCreatorRest : arguments ;
    public final DRLParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        DRLParser.classCreatorRest_return retval = new DRLParser.classCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arguments_return arguments510 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1725:2: ( arguments )
            // src/main/resources/org/drools/lang/DRL.g:1725:4: arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest7488);
            arguments510=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments510.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // src/main/resources/org/drools/lang/DRL.g:1728:1: explicitGenericInvocation : nonWildcardTypeArguments arguments ;
    public final DRLParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        DRLParser.explicitGenericInvocation_return retval = new DRLParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments511 = null;

        DRLParser.arguments_return arguments512 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1729:2: ( nonWildcardTypeArguments arguments )
            // src/main/resources/org/drools/lang/DRL.g:1729:4: nonWildcardTypeArguments arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation7501);
            nonWildcardTypeArguments511=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments511.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation7503);
            arguments512=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments512.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1732:1: nonWildcardTypeArguments : LESS typeList GREATER ;
    public final DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        DRLParser.nonWildcardTypeArguments_return retval = new DRLParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS513=null;
        Token GREATER515=null;
        DRLParser.typeList_return typeList514 = null;


        Object LESS513_tree=null;
        Object GREATER515_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1733:2: ( LESS typeList GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1733:4: LESS typeList GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS513=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments7515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS513_tree = (Object)adaptor.create(LESS513);
            adaptor.addChild(root_0, LESS513_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments7517);
            typeList514=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList514.getTree());
            GREATER515=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments7519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER515_tree = (Object)adaptor.create(GREATER515);
            adaptor.addChild(root_0, GREATER515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1736:1: explicitGenericInvocationSuffix : ( super_key superSuffix | ID arguments );
    public final DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        DRLParser.explicitGenericInvocationSuffix_return retval = new DRLParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID518=null;
        DRLParser.super_key_return super_key516 = null;

        DRLParser.superSuffix_return superSuffix517 = null;

        DRLParser.arguments_return arguments519 = null;


        Object ID518_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1737:2: ( super_key superSuffix | ID arguments )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ID) ) {
                int LA165_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                    alt165=1;
                }
                else if ( (true) ) {
                    alt165=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1737:4: super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_explicitGenericInvocationSuffix7531);
                    super_key516=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key516.getTree());
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix7533);
                    superSuffix517=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix517.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1738:7: ID arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    ID518=(Token)match(input,ID,FOLLOW_ID_in_explicitGenericInvocationSuffix7541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID518_tree = (Object)adaptor.create(ID518);
                    adaptor.addChild(root_0, ID518_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix7543);
                    arguments519=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments519.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // src/main/resources/org/drools/lang/DRL.g:1741:1: selector options {backtrack=true; memoize=true; } : ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE );
    public final DRLParser.selector_return selector() throws RecognitionException {
        DRLParser.selector_return retval = new DRLParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token DOT520=null;
        Token ID521=null;
        Token DOT523=null;
        Token DOT526=null;
        Token LEFT_SQUARE530=null;
        Token RIGHT_SQUARE532=null;
        DRLParser.arguments_return arguments522 = null;

        DRLParser.super_key_return super_key524 = null;

        DRLParser.superSuffix_return superSuffix525 = null;

        DRLParser.new_key_return new_key527 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments528 = null;

        DRLParser.innerCreator_return innerCreator529 = null;

        DRLParser.expression_return expression531 = null;


        Object DOT520_tree=null;
        Object ID521_tree=null;
        Object DOT523_tree=null;
        Object DOT526_tree=null;
        Object LEFT_SQUARE530_tree=null;
        Object RIGHT_SQUARE532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1743:2: ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE )
            int alt168=4;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==DOT) ) {
                int LA168_1 = input.LA(2);

                if ( (synpred46_DRL()) ) {
                    alt168=1;
                }
                else if ( (synpred47_DRL()) ) {
                    alt168=2;
                }
                else if ( (synpred48_DRL()) ) {
                    alt168=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA168_0==LEFT_SQUARE) ) {
                alt168=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1743:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT520=(Token)match(input,DOT,FOLLOW_DOT_in_selector7570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT520_tree = (Object)adaptor.create(DOT520);
                    adaptor.addChild(root_0, DOT520_tree);
                    }
                    ID521=(Token)match(input,ID,FOLLOW_ID_in_selector7572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID521_tree = (Object)adaptor.create(ID521);
                    adaptor.addChild(root_0, ID521_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1743:13: ( ( LEFT_PAREN )=> arguments )?
                    int alt166=2;
                    alt166 = dfa166.predict(input);
                    switch (alt166) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1743:14: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector7581);
                            arguments522=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments522.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1745:6: DOT super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT523=(Token)match(input,DOT,FOLLOW_DOT_in_selector7592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT523_tree = (Object)adaptor.create(DOT523);
                    adaptor.addChild(root_0, DOT523_tree);
                    }
                    pushFollow(FOLLOW_super_key_in_selector7594);
                    super_key524=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key524.getTree());
                    pushFollow(FOLLOW_superSuffix_in_selector7596);
                    superSuffix525=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix525.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1746:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT526=(Token)match(input,DOT,FOLLOW_DOT_in_selector7603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT526_tree = (Object)adaptor.create(DOT526);
                    adaptor.addChild(root_0, DOT526_tree);
                    }
                    pushFollow(FOLLOW_new_key_in_selector7605);
                    new_key527=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key527.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1746:18: ( nonWildcardTypeArguments )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==LESS) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1746:19: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7608);
                            nonWildcardTypeArguments528=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments528.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector7612);
                    innerCreator529=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator529.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1747:6: LEFT_SQUARE expression RIGHT_SQUARE
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_SQUARE530=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector7619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_SQUARE530_tree = (Object)adaptor.create(LEFT_SQUARE530);
                    adaptor.addChild(root_0, LEFT_SQUARE530_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector7621);
                    expression531=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression531.getTree());
                    RIGHT_SQUARE532=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector7623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE532_tree = (Object)adaptor.create(RIGHT_SQUARE532);
                    adaptor.addChild(root_0, RIGHT_SQUARE532_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1750:1: superSuffix : ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? );
    public final DRLParser.superSuffix_return superSuffix() throws RecognitionException {
        DRLParser.superSuffix_return retval = new DRLParser.superSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT534=null;
        Token ID535=null;
        DRLParser.arguments_return arguments533 = null;

        DRLParser.arguments_return arguments536 = null;


        Object DOT534_tree=null;
        Object ID535_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1751:2: ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==LEFT_PAREN) ) {
                alt170=1;
            }
            else if ( (LA170_0==DOT) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1751:4: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_superSuffix7635);
                    arguments533=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments533.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1752:7: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT534=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix7643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT534_tree = (Object)adaptor.create(DOT534);
                    adaptor.addChild(root_0, DOT534_tree);
                    }
                    ID535=(Token)match(input,ID,FOLLOW_ID_in_superSuffix7645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID535_tree = (Object)adaptor.create(ID535);
                    adaptor.addChild(root_0, ID535_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1752:14: ( ( LEFT_PAREN )=> arguments )?
                    int alt169=2;
                    alt169 = dfa169.predict(input);
                    switch (alt169) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1752:15: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix7654);
                            arguments536=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments536.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // src/main/resources/org/drools/lang/DRL.g:1755:1: arguments options {backtrack=true; memoize=true; } : LEFT_PAREN ( expressionList )? RIGHT_PAREN -> ^( VT_ARGUMENTS ( expressionList )? RIGHT_PAREN ) ;
    public final DRLParser.arguments_return arguments() throws RecognitionException {
        DRLParser.arguments_return retval = new DRLParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN537=null;
        Token RIGHT_PAREN539=null;
        DRLParser.expressionList_return expressionList538 = null;


        Object LEFT_PAREN537_tree=null;
        Object RIGHT_PAREN539_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1757:2: ( LEFT_PAREN ( expressionList )? RIGHT_PAREN -> ^( VT_ARGUMENTS ( expressionList )? RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:1757:4: LEFT_PAREN ( expressionList )? RIGHT_PAREN
            {
            LEFT_PAREN537=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments7688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN537);

            // src/main/resources/org/drools/lang/DRL.g:1757:15: ( expressionList )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==ID||LA171_0==STRING||(LA171_0>=BOOL && LA171_0<=LEFT_PAREN)||LA171_0==DECIMAL||LA171_0==LESS||LA171_0==LEFT_SQUARE||(LA171_0>=NULL && LA171_0<=FLOAT)||(LA171_0>=INCR && LA171_0<=NEGATION)) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1757:15: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments7690);
                    expressionList538=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList538.getTree());

                    }
                    break;

            }

            RIGHT_PAREN539=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments7693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN539);



            // AST REWRITE
            // elements: expressionList, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1758:3: -> ^( VT_ARGUMENTS ( expressionList )? RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:1758:6: ^( VT_ARGUMENTS ( expressionList )? RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ARGUMENTS, "VT_ARGUMENTS"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:1758:21: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // src/main/resources/org/drools/lang/DRL.g:1761:1: expressionList : expression ( COMMA expression )* ;
    public final DRLParser.expressionList_return expressionList() throws RecognitionException {
        DRLParser.expressionList_return retval = new DRLParser.expressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA541=null;
        DRLParser.expression_return expression540 = null;

        DRLParser.expression_return expression542 = null;


        Object COMMA541_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1762:5: ( expression ( COMMA expression )* )
            // src/main/resources/org/drools/lang/DRL.g:1762:9: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList7722);
            expression540=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression540.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1762:20: ( COMMA expression )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==COMMA) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1762:21: COMMA expression
            	    {
            	    COMMA541=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList7725); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList7728);
            	    expression542=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression542.getTree());

            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // src/main/resources/org/drools/lang/DRL.g:1765:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );
    public final DRLParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        DRLParser.assignmentOperator_return retval = new DRLParser.assignmentOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN543=null;
        Token PLUS_ASSIGN544=null;
        Token MINUS_ASSIGN545=null;
        Token MULT_ASSIGN546=null;
        Token DIV_ASSIGN547=null;
        Token AND_ASSIGN548=null;
        Token OR_ASSIGN549=null;
        Token XOR_ASSIGN550=null;
        Token MOD_ASSIGN551=null;
        Token SHIFT_LEFT552=null;
        Token EQUALS_ASSIGN553=null;
        Token SHIFT_RIGHT554=null;
        Token EQUALS_ASSIGN555=null;
        Token SHIFT_RIGHT_UNSIG556=null;
        Token EQUALS_ASSIGN557=null;

        Object EQUALS_ASSIGN543_tree=null;
        Object PLUS_ASSIGN544_tree=null;
        Object MINUS_ASSIGN545_tree=null;
        Object MULT_ASSIGN546_tree=null;
        Object DIV_ASSIGN547_tree=null;
        Object AND_ASSIGN548_tree=null;
        Object OR_ASSIGN549_tree=null;
        Object XOR_ASSIGN550_tree=null;
        Object MOD_ASSIGN551_tree=null;
        Object SHIFT_LEFT552_tree=null;
        Object EQUALS_ASSIGN553_tree=null;
        Object SHIFT_RIGHT554_tree=null;
        Object EQUALS_ASSIGN555_tree=null;
        Object SHIFT_RIGHT_UNSIG556_tree=null;
        Object EQUALS_ASSIGN557_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1767:2: ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN )
            int alt173=12;
            alt173 = dfa173.predict(input);
            switch (alt173) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1767:6: EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_ASSIGN543=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7755); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN543_tree = (Object)adaptor.create(EQUALS_ASSIGN543);
                    adaptor.addChild(root_0, EQUALS_ASSIGN543_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1768:13: PLUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS_ASSIGN544=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator7769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS_ASSIGN544_tree = (Object)adaptor.create(PLUS_ASSIGN544);
                    adaptor.addChild(root_0, PLUS_ASSIGN544_tree);
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1769:13: MINUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS_ASSIGN545=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator7783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS_ASSIGN545_tree = (Object)adaptor.create(MINUS_ASSIGN545);
                    adaptor.addChild(root_0, MINUS_ASSIGN545_tree);
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1770:13: MULT_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MULT_ASSIGN546=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator7797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MULT_ASSIGN546_tree = (Object)adaptor.create(MULT_ASSIGN546);
                    adaptor.addChild(root_0, MULT_ASSIGN546_tree);
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1771:13: DIV_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DIV_ASSIGN547=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator7811); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV_ASSIGN547_tree = (Object)adaptor.create(DIV_ASSIGN547);
                    adaptor.addChild(root_0, DIV_ASSIGN547_tree);
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1772:13: AND_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_ASSIGN548=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator7825); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_ASSIGN548_tree = (Object)adaptor.create(AND_ASSIGN548);
                    adaptor.addChild(root_0, AND_ASSIGN548_tree);
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1773:13: OR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_ASSIGN549=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator7839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_ASSIGN549_tree = (Object)adaptor.create(OR_ASSIGN549);
                    adaptor.addChild(root_0, OR_ASSIGN549_tree);
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1774:13: XOR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    XOR_ASSIGN550=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator7853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    XOR_ASSIGN550_tree = (Object)adaptor.create(XOR_ASSIGN550);
                    adaptor.addChild(root_0, XOR_ASSIGN550_tree);
                    }

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1775:13: MOD_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MOD_ASSIGN551=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator7867); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOD_ASSIGN551_tree = (Object)adaptor.create(MOD_ASSIGN551);
                    adaptor.addChild(root_0, MOD_ASSIGN551_tree);
                    }

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:1776:13: SHIFT_LEFT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_LEFT552=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator7881); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_LEFT552_tree = (Object)adaptor.create(SHIFT_LEFT552);
                    adaptor.addChild(root_0, SHIFT_LEFT552_tree);
                    }
                    EQUALS_ASSIGN553=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN553_tree = (Object)adaptor.create(EQUALS_ASSIGN553);
                    adaptor.addChild(root_0, EQUALS_ASSIGN553_tree);
                    }

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:1777:13: SHIFT_RIGHT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT554=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator7897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT554_tree = (Object)adaptor.create(SHIFT_RIGHT554);
                    adaptor.addChild(root_0, SHIFT_RIGHT554_tree);
                    }
                    EQUALS_ASSIGN555=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN555_tree = (Object)adaptor.create(EQUALS_ASSIGN555);
                    adaptor.addChild(root_0, EQUALS_ASSIGN555_tree);
                    }

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:1778:13: SHIFT_RIGHT_UNSIG EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT_UNSIG556=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT_UNSIG556_tree = (Object)adaptor.create(SHIFT_RIGHT_UNSIG556);
                    adaptor.addChild(root_0, SHIFT_RIGHT_UNSIG556_tree);
                    }
                    EQUALS_ASSIGN557=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN557_tree = (Object)adaptor.create(EQUALS_ASSIGN557);
                    adaptor.addChild(root_0, EQUALS_ASSIGN557_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_key"
    // src/main/resources/org/drools/lang/DRL.g:2089:1: operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.operator_key_return operator_key() throws RecognitionException {
        DRLParser.operator_key_return retval = new DRLParser.operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2090:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2090:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(false)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "operator_key", "(helper.isPluggableEvaluator(false))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_operator_key7945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2092:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_key"

    public static class neg_operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg_operator_key"
    // src/main/resources/org/drools/lang/DRL.g:2095:1: neg_operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.neg_operator_key_return neg_operator_key() throws RecognitionException {
        DRLParser.neg_operator_key_return retval = new DRLParser.neg_operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2096:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2096:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(true)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "neg_operator_key", "(helper.isPluggableEvaluator(true))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_neg_operator_key7989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2098:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg_operator_key"

    public static class lock_on_active_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active_key"
    // src/main/resources/org/drools/lang/DRL.g:2101:1: lock_on_active_key : {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] ;
    public final DRLParser.lock_on_active_key_return lock_on_active_key() throws RecognitionException {
        DRLParser.lock_on_active_key_return retval = new DRLParser.lock_on_active_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;
        Token mis2=null;
        Token id3=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        Object mis2_tree=null;
        Object id3_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2104:3: ({...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2104:5: {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lock_on_active_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, \"-\") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key8034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key8038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key8042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            mis2=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key8046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis2);

            id3=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key8050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id3);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);
              		helper.emit(mis2, DroolsEditorType.KEYWORD);
              		helper.emit(id3, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2110:3: -> VK_LOCK_ON_ACTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_LOCK_ON_ACTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active_key"

    public static class date_effective_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective_key"
    // src/main/resources/org/drools/lang/DRL.g:2113:1: date_effective_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] ;
    public final DRLParser.date_effective_key_return date_effective_key() throws RecognitionException {
        DRLParser.date_effective_key_return retval = new DRLParser.date_effective_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2116:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2116:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_effective_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key8082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_effective_key8086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key8090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2120:3: -> VK_DATE_EFFECTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EFFECTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective_key"

    public static class date_expires_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires_key"
    // src/main/resources/org/drools/lang/DRL.g:2123:1: date_expires_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] ;
    public final DRLParser.date_expires_key_return date_expires_key() throws RecognitionException {
        DRLParser.date_expires_key_return retval = new DRLParser.date_expires_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2126:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2126:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_expires_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key8122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_expires_key8126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key8130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2130:3: -> VK_DATE_EXPIRES[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EXPIRES, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires_key"

    public static class no_loop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop_key"
    // src/main/resources/org/drools/lang/DRL.g:2133:1: no_loop_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] ;
    public final DRLParser.no_loop_key_return no_loop_key() throws RecognitionException {
        DRLParser.no_loop_key_return retval = new DRLParser.no_loop_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2136:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2136:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "no_loop_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.LOOP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key8162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_no_loop_key8166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key8170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2140:3: -> VK_NO_LOOP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NO_LOOP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop_key"

    public static class auto_focus_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus_key"
    // src/main/resources/org/drools/lang/DRL.g:2143:1: auto_focus_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] ;
    public final DRLParser.auto_focus_key_return auto_focus_key() throws RecognitionException {
        DRLParser.auto_focus_key_return retval = new DRLParser.auto_focus_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2146:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2146:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "auto_focus_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.FOCUS))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key8202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_auto_focus_key8206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key8210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2150:3: -> VK_AUTO_FOCUS[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AUTO_FOCUS, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus_key"

    public static class activation_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2153:1: activation_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] ;
    public final DRLParser.activation_group_key_return activation_group_key() throws RecognitionException {
        DRLParser.activation_group_key_return retval = new DRLParser.activation_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2156:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2156:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "activation_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key8242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_activation_group_key8246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key8250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2160:3: -> VK_ACTIVATION_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTIVATION_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group_key"

    public static class agenda_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2163:1: agenda_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] ;
    public final DRLParser.agenda_group_key_return agenda_group_key() throws RecognitionException {
        DRLParser.agenda_group_key_return retval = new DRLParser.agenda_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2166:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2166:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "agenda_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key8282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_agenda_group_key8286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key8290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2170:3: -> VK_AGENDA_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AGENDA_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group_key"

    public static class ruleflow_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2173:1: ruleflow_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] ;
    public final DRLParser.ruleflow_group_key_return ruleflow_group_key() throws RecognitionException {
        DRLParser.ruleflow_group_key_return retval = new DRLParser.ruleflow_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2176:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2176:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ruleflow_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key8322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_ruleflow_group_key8326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key8330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2180:3: -> VK_RULEFLOW_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULEFLOW_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group_key"

    public static class entry_point_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entry_point_key"
    // src/main/resources/org/drools/lang/DRL.g:2183:1: entry_point_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] ;
    public final DRLParser.entry_point_key_return entry_point_key() throws RecognitionException {
        DRLParser.entry_point_key_return retval = new DRLParser.entry_point_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2186:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2186:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "entry_point_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.POINT))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key8362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_entry_point_key8366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key8370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2190:3: -> VK_ENTRY_POINT[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENTRY_POINT, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entry_point_key"

    public static class timer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer_key"
    // src/main/resources/org/drools/lang/DRL.g:2193:1: timer_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.timer_key_return timer_key() throws RecognitionException {
        DRLParser.timer_key_return retval = new DRLParser.timer_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2194:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2194:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timer_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_timer_key8399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2196:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer_key"

    public static class duration_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "duration_key"
    // src/main/resources/org/drools/lang/DRL.g:2199:1: duration_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.duration_key_return duration_key() throws RecognitionException {
        DRLParser.duration_key_return retval = new DRLParser.duration_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2200:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2200:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "duration_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_duration_key8426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2202:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_key"

    public static class calendars_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars_key"
    // src/main/resources/org/drools/lang/DRL.g:2205:1: calendars_key : {...}? =>id= ID -> VK_CALENDARS[$id] ;
    public final DRLParser.calendars_key_return calendars_key() throws RecognitionException {
        DRLParser.calendars_key_return retval = new DRLParser.calendars_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2206:2: ({...}? =>id= ID -> VK_CALENDARS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2206:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "calendars_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_calendars_key8453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2208:3: -> VK_CALENDARS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CALENDARS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars_key"

    public static class package_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_key"
    // src/main/resources/org/drools/lang/DRL.g:2211:1: package_key : {...}? =>id= ID -> VK_PACKAGE[$id] ;
    public final DRLParser.package_key_return package_key() throws RecognitionException {
        DRLParser.package_key_return retval = new DRLParser.package_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2212:2: ({...}? =>id= ID -> VK_PACKAGE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2212:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "package_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_package_key8480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2214:3: -> VK_PACKAGE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PACKAGE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_key"

    public static class import_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_key"
    // src/main/resources/org/drools/lang/DRL.g:2217:1: import_key : {...}? =>id= ID -> VK_IMPORT[$id] ;
    public final DRLParser.import_key_return import_key() throws RecognitionException {
        DRLParser.import_key_return retval = new DRLParser.import_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2218:2: ({...}? =>id= ID -> VK_IMPORT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2218:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "import_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_import_key8507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2220:3: -> VK_IMPORT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPORT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_key"

    public static class dialect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect_key"
    // src/main/resources/org/drools/lang/DRL.g:2223:1: dialect_key : {...}? =>id= ID -> VK_DIALECT[$id] ;
    public final DRLParser.dialect_key_return dialect_key() throws RecognitionException {
        DRLParser.dialect_key_return retval = new DRLParser.dialect_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2224:2: ({...}? =>id= ID -> VK_DIALECT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2224:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dialect_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_dialect_key8534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2226:3: -> VK_DIALECT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DIALECT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect_key"

    public static class salience_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience_key"
    // src/main/resources/org/drools/lang/DRL.g:2229:1: salience_key : {...}? =>id= ID -> VK_SALIENCE[$id] ;
    public final DRLParser.salience_key_return salience_key() throws RecognitionException {
        DRLParser.salience_key_return retval = new DRLParser.salience_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2230:2: ({...}? =>id= ID -> VK_SALIENCE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2230:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "salience_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_salience_key8561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2232:3: -> VK_SALIENCE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SALIENCE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience_key"

    public static class enabled_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled_key"
    // src/main/resources/org/drools/lang/DRL.g:2235:1: enabled_key : {...}? =>id= ID -> VK_ENABLED[$id] ;
    public final DRLParser.enabled_key_return enabled_key() throws RecognitionException {
        DRLParser.enabled_key_return retval = new DRLParser.enabled_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2236:2: ({...}? =>id= ID -> VK_ENABLED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2236:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enabled_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enabled_key8588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2238:3: -> VK_ENABLED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENABLED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled_key"

    public static class attributes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributes_key"
    // src/main/resources/org/drools/lang/DRL.g:2241:1: attributes_key : {...}? =>id= ID -> VK_ATTRIBUTES[$id] ;
    public final DRLParser.attributes_key_return attributes_key() throws RecognitionException {
        DRLParser.attributes_key_return retval = new DRLParser.attributes_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2242:2: ({...}? =>id= ID -> VK_ATTRIBUTES[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2242:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "attributes_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_attributes_key8615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2244:3: -> VK_ATTRIBUTES[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ATTRIBUTES, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributes_key"

    public static class rule_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_key"
    // src/main/resources/org/drools/lang/DRL.g:2247:1: rule_key : {...}? =>id= ID -> VK_RULE[$id] ;
    public final DRLParser.rule_key_return rule_key() throws RecognitionException {
        DRLParser.rule_key_return retval = new DRLParser.rule_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2248:2: ({...}? =>id= ID -> VK_RULE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2248:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rule_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_rule_key8642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2250:3: -> VK_RULE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_key"

    public static class extend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extend_key"
    // src/main/resources/org/drools/lang/DRL.g:2253:1: extend_key : {...}? =>id= ID -> VK_EXTEND[$id] ;
    public final DRLParser.extend_key_return extend_key() throws RecognitionException {
        DRLParser.extend_key_return retval = new DRLParser.extend_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2254:2: ({...}? =>id= ID -> VK_EXTEND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2254:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extend_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extend_key8669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2256:3: -> VK_EXTEND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTEND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extend_key"

    public static class query_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_key"
    // src/main/resources/org/drools/lang/DRL.g:2259:1: query_key : {...}? =>id= ID -> VK_QUERY[$id] ;
    public final DRLParser.query_key_return query_key() throws RecognitionException {
        DRLParser.query_key_return retval = new DRLParser.query_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2260:2: ({...}? =>id= ID -> VK_QUERY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2260:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "query_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_query_key8696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2262:3: -> VK_QUERY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_QUERY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_key"

    public static class declare_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_key"
    // src/main/resources/org/drools/lang/DRL.g:2265:1: declare_key : {...}? =>id= ID -> VK_DECLARE[$id] ;
    public final DRLParser.declare_key_return declare_key() throws RecognitionException {
        DRLParser.declare_key_return retval = new DRLParser.declare_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2266:2: ({...}? =>id= ID -> VK_DECLARE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2266:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "declare_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_declare_key8723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2268:3: -> VK_DECLARE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DECLARE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "declare_key"

    public static class function_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_key"
    // src/main/resources/org/drools/lang/DRL.g:2271:1: function_key : {...}? =>id= ID -> VK_FUNCTION[$id] ;
    public final DRLParser.function_key_return function_key() throws RecognitionException {
        DRLParser.function_key_return retval = new DRLParser.function_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2272:2: ({...}? =>id= ID -> VK_FUNCTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2272:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_function_key8750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2274:3: -> VK_FUNCTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FUNCTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_key"

    public static class global_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_key"
    // src/main/resources/org/drools/lang/DRL.g:2277:1: global_key : {...}? =>id= ID -> VK_GLOBAL[$id] ;
    public final DRLParser.global_key_return global_key() throws RecognitionException {
        DRLParser.global_key_return retval = new DRLParser.global_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2278:2: ({...}? =>id= ID -> VK_GLOBAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2278:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "global_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_global_key8777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2280:3: -> VK_GLOBAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_GLOBAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_key"

    public static class eval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eval_key"
    // src/main/resources/org/drools/lang/DRL.g:2283:1: eval_key : {...}? =>id= ID -> VK_EVAL[$id] ;
    public final DRLParser.eval_key_return eval_key() throws RecognitionException {
        DRLParser.eval_key_return retval = new DRLParser.eval_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2284:2: ({...}? =>id= ID -> VK_EVAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2284:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "eval_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_eval_key8804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2286:3: -> VK_EVAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EVAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eval_key"

    public static class not_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_key"
    // src/main/resources/org/drools/lang/DRL.g:2289:1: not_key : {...}? =>id= ID -> VK_NOT[$id] ;
    public final DRLParser.not_key_return not_key() throws RecognitionException {
        DRLParser.not_key_return retval = new DRLParser.not_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2290:2: ({...}? =>id= ID -> VK_NOT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2290:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NOT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_not_key8831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2292:3: -> VK_NOT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NOT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_key"

    public static class in_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_key"
    // src/main/resources/org/drools/lang/DRL.g:2295:1: in_key : {...}? =>id= ID -> VK_IN[$id] ;
    public final DRLParser.in_key_return in_key() throws RecognitionException {
        DRLParser.in_key_return retval = new DRLParser.in_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2296:2: ({...}? =>id= ID -> VK_IN[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2296:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "in_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_in_key8858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2298:3: -> VK_IN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_key"

    public static class or_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_key"
    // src/main/resources/org/drools/lang/DRL.g:2301:1: or_key : {...}? =>id= ID -> VK_OR[$id] ;
    public final DRLParser.or_key_return or_key() throws RecognitionException {
        DRLParser.or_key_return retval = new DRLParser.or_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2302:2: ({...}? =>id= ID -> VK_OR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2302:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "or_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.OR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_or_key8885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2304:3: -> VK_OR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_key"

    public static class and_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_key"
    // src/main/resources/org/drools/lang/DRL.g:2307:1: and_key : {...}? =>id= ID -> VK_AND[$id] ;
    public final DRLParser.and_key_return and_key() throws RecognitionException {
        DRLParser.and_key_return retval = new DRLParser.and_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2308:2: ({...}? =>id= ID -> VK_AND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2308:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "and_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_and_key8912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2310:3: -> VK_AND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_key"

    public static class exists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exists_key"
    // src/main/resources/org/drools/lang/DRL.g:2313:1: exists_key : {...}? =>id= ID -> VK_EXISTS[$id] ;
    public final DRLParser.exists_key_return exists_key() throws RecognitionException {
        DRLParser.exists_key_return retval = new DRLParser.exists_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2314:2: ({...}? =>id= ID -> VK_EXISTS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2314:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exists_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_exists_key8939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2316:3: -> VK_EXISTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXISTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exists_key"

    public static class forall_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_key"
    // src/main/resources/org/drools/lang/DRL.g:2319:1: forall_key : {...}? =>id= ID -> VK_FORALL[$id] ;
    public final DRLParser.forall_key_return forall_key() throws RecognitionException {
        DRLParser.forall_key_return retval = new DRLParser.forall_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2320:2: ({...}? =>id= ID -> VK_FORALL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2320:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "forall_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_forall_key8966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2322:3: -> VK_FORALL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FORALL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forall_key"

    public static class action_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "action_key"
    // src/main/resources/org/drools/lang/DRL.g:2325:1: action_key : {...}? =>id= ID -> VK_ACTION[$id] ;
    public final DRLParser.action_key_return action_key() throws RecognitionException {
        DRLParser.action_key_return retval = new DRLParser.action_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2326:2: ({...}? =>id= ID -> VK_ACTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2326:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "action_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_action_key8993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2328:3: -> VK_ACTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "action_key"

    public static class reverse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverse_key"
    // src/main/resources/org/drools/lang/DRL.g:2331:1: reverse_key : {...}? =>id= ID -> VK_REVERSE[$id] ;
    public final DRLParser.reverse_key_return reverse_key() throws RecognitionException {
        DRLParser.reverse_key_return retval = new DRLParser.reverse_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2332:2: ({...}? =>id= ID -> VK_REVERSE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2332:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reverse_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_reverse_key9020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2334:3: -> VK_REVERSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_REVERSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reverse_key"

    public static class result_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "result_key"
    // src/main/resources/org/drools/lang/DRL.g:2337:1: result_key : {...}? =>id= ID -> VK_RESULT[$id] ;
    public final DRLParser.result_key_return result_key() throws RecognitionException {
        DRLParser.result_key_return retval = new DRLParser.result_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2338:2: ({...}? =>id= ID -> VK_RESULT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2338:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RESULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RESULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_result_key9047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2340:3: -> VK_RESULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RESULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "result_key"

    public static class end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "end_key"
    // src/main/resources/org/drools/lang/DRL.g:2343:1: end_key : {...}? =>id= ID -> VK_END[$id] ;
    public final DRLParser.end_key_return end_key() throws RecognitionException {
        DRLParser.end_key_return retval = new DRLParser.end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2344:2: ({...}? =>id= ID -> VK_END[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2344:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "end_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_end_key9074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2346:3: -> VK_END[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_END, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "end_key"

    public static class not_end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_end_key"
    // src/main/resources/org/drools/lang/DRL.g:2349:1: not_end_key : {...}? =>any= . ;
    public final DRLParser.not_end_key_return not_end_key() throws RecognitionException {
        DRLParser.not_end_key_return retval = new DRLParser.not_end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token any=null;

        Object any_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2350:2: ({...}? =>any= . )
            // src/main/resources/org/drools/lang/DRL.g:2350:4: {...}? =>any= .
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_end_key", "!(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            any=(Token)input.LT(1);
            matchAny(input); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            any_tree = (Object)adaptor.create(any);
            adaptor.addChild(root_0, any_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(any, DroolsEditorType.CODE_CHUNK);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_end_key"

    public static class init_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_key"
    // src/main/resources/org/drools/lang/DRL.g:2354:1: init_key : {...}? =>id= ID -> VK_INIT[$id] ;
    public final DRLParser.init_key_return init_key() throws RecognitionException {
        DRLParser.init_key_return retval = new DRLParser.init_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2355:2: ({...}? =>id= ID -> VK_INIT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2355:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "init_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INIT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_init_key9121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2357:3: -> VK_INIT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INIT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "init_key"

    public static class instanceof_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceof_key"
    // src/main/resources/org/drools/lang/DRL.g:2360:1: instanceof_key : {...}? =>id= ID -> VK_INSTANCEOF[$id] ;
    public final DRLParser.instanceof_key_return instanceof_key() throws RecognitionException {
        DRLParser.instanceof_key_return retval = new DRLParser.instanceof_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2361:2: ({...}? =>id= ID -> VK_INSTANCEOF[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2361:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instanceof_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_instanceof_key9148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2363:3: -> VK_INSTANCEOF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INSTANCEOF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceof_key"

    public static class extends_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extends_key"
    // src/main/resources/org/drools/lang/DRL.g:2366:1: extends_key : {...}? =>id= ID -> VK_EXTENDS[$id] ;
    public final DRLParser.extends_key_return extends_key() throws RecognitionException {
        DRLParser.extends_key_return retval = new DRLParser.extends_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2367:2: ({...}? =>id= ID -> VK_EXTENDS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2367:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extends_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extends_key9175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2369:3: -> VK_EXTENDS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTENDS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extends_key"

    public static class implements_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implements_key"
    // src/main/resources/org/drools/lang/DRL.g:2372:1: implements_key : {...}? =>id= ID -> VK_IMPLEMENTS[$id] ;
    public final DRLParser.implements_key_return implements_key() throws RecognitionException {
        DRLParser.implements_key_return retval = new DRLParser.implements_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2373:2: ({...}? =>id= ID -> VK_IMPLEMENTS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2373:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "implements_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_implements_key9202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2375:3: -> VK_IMPLEMENTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPLEMENTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implements_key"

    public static class super_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "super_key"
    // src/main/resources/org/drools/lang/DRL.g:2378:1: super_key : {...}? =>id= ID -> VK_SUPER[$id] ;
    public final DRLParser.super_key_return super_key() throws RecognitionException {
        DRLParser.super_key_return retval = new DRLParser.super_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2379:2: ({...}? =>id= ID -> VK_SUPER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2379:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "super_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_super_key9229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2381:3: -> VK_SUPER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SUPER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "super_key"

    public static class boolean_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_key"
    // src/main/resources/org/drools/lang/DRL.g:2384:1: boolean_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.boolean_key_return boolean_key() throws RecognitionException {
        DRLParser.boolean_key_return retval = new DRLParser.boolean_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2385:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2385:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "boolean_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_boolean_key9257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2387:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "boolean_key"

    public static class char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_key"
    // src/main/resources/org/drools/lang/DRL.g:2390:1: char_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.char_key_return char_key() throws RecognitionException {
        DRLParser.char_key_return retval = new DRLParser.char_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2391:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2391:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_char_key9285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2393:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "char_key"

    public static class byte_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "byte_key"
    // src/main/resources/org/drools/lang/DRL.g:2396:1: byte_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.byte_key_return byte_key() throws RecognitionException {
        DRLParser.byte_key_return retval = new DRLParser.byte_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2397:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2397:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "byte_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_byte_key9313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2399:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "byte_key"

    public static class short_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "short_key"
    // src/main/resources/org/drools/lang/DRL.g:2402:1: short_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.short_key_return short_key() throws RecognitionException {
        DRLParser.short_key_return retval = new DRLParser.short_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2403:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2403:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "short_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_short_key9341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2405:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_key"

    public static class int_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "int_key"
    // src/main/resources/org/drools/lang/DRL.g:2408:1: int_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.int_key_return int_key() throws RecognitionException {
        DRLParser.int_key_return retval = new DRLParser.int_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2409:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2409:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "int_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_int_key9369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2411:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "int_key"

    public static class long_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "long_key"
    // src/main/resources/org/drools/lang/DRL.g:2414:1: long_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.long_key_return long_key() throws RecognitionException {
        DRLParser.long_key_return retval = new DRLParser.long_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2415:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2415:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "long_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LONG))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_long_key9397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2417:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "long_key"

    public static class float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "float_key"
    // src/main/resources/org/drools/lang/DRL.g:2420:1: float_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.float_key_return float_key() throws RecognitionException {
        DRLParser.float_key_return retval = new DRLParser.float_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2421:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2421:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "float_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_float_key9425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2423:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "float_key"

    public static class double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_key"
    // src/main/resources/org/drools/lang/DRL.g:2426:1: double_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.double_key_return double_key() throws RecognitionException {
        DRLParser.double_key_return retval = new DRLParser.double_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2427:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2427:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "double_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_double_key9453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2429:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_key"

    public static class this_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "this_key"
    // src/main/resources/org/drools/lang/DRL.g:2432:1: this_key : {...}? =>id= ID -> VK_THIS[$id] ;
    public final DRLParser.this_key_return this_key() throws RecognitionException {
        DRLParser.this_key_return retval = new DRLParser.this_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2433:2: ({...}? =>id= ID -> VK_THIS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2433:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "this_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THIS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_this_key9481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2435:3: -> VK_THIS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THIS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "this_key"

    public static class void_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "void_key"
    // src/main/resources/org/drools/lang/DRL.g:2438:1: void_key : {...}? =>id= ID -> VK_VOID[$id] ;
    public final DRLParser.void_key_return void_key() throws RecognitionException {
        DRLParser.void_key_return retval = new DRLParser.void_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2439:2: ({...}? =>id= ID -> VK_VOID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2439:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "void_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOID))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_void_key9509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2441:3: -> VK_VOID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "void_key"

    public static class class_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_key"
    // src/main/resources/org/drools/lang/DRL.g:2444:1: class_key : {...}? =>id= ID -> VK_CLASS[$id] ;
    public final DRLParser.class_key_return class_key() throws RecognitionException {
        DRLParser.class_key_return retval = new DRLParser.class_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2445:2: ({...}? =>id= ID -> VK_CLASS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2445:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "class_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_class_key9537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2447:3: -> VK_CLASS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CLASS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "class_key"

    public static class new_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "new_key"
    // src/main/resources/org/drools/lang/DRL.g:2450:1: new_key : {...}? =>id= ID -> VK_NEW[$id] ;
    public final DRLParser.new_key_return new_key() throws RecognitionException {
        DRLParser.new_key_return retval = new DRLParser.new_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2451:2: ({...}? =>id= ID -> VK_NEW[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2451:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "new_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NEW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_new_key9565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2453:3: -> VK_NEW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NEW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "new_key"

    public static class final_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "final_key"
    // src/main/resources/org/drools/lang/DRL.g:2457:1: final_key : {...}? =>id= ID -> VK_FINAL[$id] ;
    public final DRLParser.final_key_return final_key() throws RecognitionException {
        DRLParser.final_key_return retval = new DRLParser.final_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2458:2: ({...}? =>id= ID -> VK_FINAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2458:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "final_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_final_key9594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2460:2: -> VK_FINAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "final_key"

    public static class if_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_key"
    // src/main/resources/org/drools/lang/DRL.g:2464:1: if_key : {...}? =>id= ID -> VK_IF[$id] ;
    public final DRLParser.if_key_return if_key() throws RecognitionException {
        DRLParser.if_key_return retval = new DRLParser.if_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2465:2: ({...}? =>id= ID -> VK_IF[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2465:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "if_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_if_key9620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2467:2: -> VK_IF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_key"

    public static class else_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_key"
    // src/main/resources/org/drools/lang/DRL.g:2471:1: else_key : {...}? =>id= ID -> VK_ELSE[$id] ;
    public final DRLParser.else_key_return else_key() throws RecognitionException {
        DRLParser.else_key_return retval = new DRLParser.else_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2472:2: ({...}? =>id= ID -> VK_ELSE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2472:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "else_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ELSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_else_key9646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2474:2: -> VK_ELSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ELSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_key"

    public static class for_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_key"
    // src/main/resources/org/drools/lang/DRL.g:2478:1: for_key : {...}? =>id= ID -> VK_FOR[$id] ;
    public final DRLParser.for_key_return for_key() throws RecognitionException {
        DRLParser.for_key_return retval = new DRLParser.for_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2479:2: ({...}? =>id= ID -> VK_FOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2479:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "for_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FOR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_for_key9672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2481:2: -> VK_FOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_key"

    public static class while_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_key"
    // src/main/resources/org/drools/lang/DRL.g:2485:1: while_key : {...}? =>id= ID -> VK_WHILE[$id] ;
    public final DRLParser.while_key_return while_key() throws RecognitionException {
        DRLParser.while_key_return retval = new DRLParser.while_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2486:2: ({...}? =>id= ID -> VK_WHILE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2486:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.WHILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "while_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.WHILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_while_key9698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2488:2: -> VK_WHILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_WHILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_key"

    public static class do_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "do_key"
    // src/main/resources/org/drools/lang/DRL.g:2492:1: do_key : {...}? =>id= ID -> VK_DO[$id] ;
    public final DRLParser.do_key_return do_key() throws RecognitionException {
        DRLParser.do_key_return retval = new DRLParser.do_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2493:2: ({...}? =>id= ID -> VK_DO[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2493:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DO)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "do_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DO))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_do_key9724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2495:2: -> VK_DO[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DO, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "do_key"

    public static class case_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_key"
    // src/main/resources/org/drools/lang/DRL.g:2499:1: case_key : {...}? =>id= ID -> VK_CASE[$id] ;
    public final DRLParser.case_key_return case_key() throws RecognitionException {
        DRLParser.case_key_return retval = new DRLParser.case_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2500:2: ({...}? =>id= ID -> VK_CASE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2500:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "case_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CASE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_case_key9750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2502:2: -> VK_CASE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CASE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_key"

    public static class default_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_key"
    // src/main/resources/org/drools/lang/DRL.g:2506:1: default_key : {...}? =>id= ID -> VK_DEFAULT[$id] ;
    public final DRLParser.default_key_return default_key() throws RecognitionException {
        DRLParser.default_key_return retval = new DRLParser.default_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2507:2: ({...}? =>id= ID -> VK_DEFAULT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2507:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "default_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_default_key9776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2509:2: -> VK_DEFAULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DEFAULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "default_key"

    public static class try_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_key"
    // src/main/resources/org/drools/lang/DRL.g:2513:1: try_key : {...}? =>id= ID -> VK_TRY[$id] ;
    public final DRLParser.try_key_return try_key() throws RecognitionException {
        DRLParser.try_key_return retval = new DRLParser.try_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2514:2: ({...}? =>id= ID -> VK_TRY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2514:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "try_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_try_key9802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2516:2: -> VK_TRY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_key"

    public static class catch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catch_key"
    // src/main/resources/org/drools/lang/DRL.g:2520:1: catch_key : {...}? =>id= ID -> VK_CATCH[$id] ;
    public final DRLParser.catch_key_return catch_key() throws RecognitionException {
        DRLParser.catch_key_return retval = new DRLParser.catch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2521:2: ({...}? =>id= ID -> VK_CATCH[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2521:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "catch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CATCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_catch_key9828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2523:2: -> VK_CATCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CATCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catch_key"

    public static class finally_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finally_key"
    // src/main/resources/org/drools/lang/DRL.g:2527:1: finally_key : {...}? =>id= ID -> VK_FINALLY[$id] ;
    public final DRLParser.finally_key_return finally_key() throws RecognitionException {
        DRLParser.finally_key_return retval = new DRLParser.finally_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2528:2: ({...}? =>id= ID -> VK_FINALLY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2528:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "finally_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_finally_key9854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2530:2: -> VK_FINALLY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINALLY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "finally_key"

    public static class switch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_key"
    // src/main/resources/org/drools/lang/DRL.g:2534:1: switch_key : {...}? =>id= ID -> VK_SWITCH[$id] ;
    public final DRLParser.switch_key_return switch_key() throws RecognitionException {
        DRLParser.switch_key_return retval = new DRLParser.switch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2535:2: ({...}? =>id= ID -> VK_SWITCH[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2535:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "switch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_switch_key9880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2537:2: -> VK_SWITCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SWITCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switch_key"

    public static class synchronized_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "synchronized_key"
    // src/main/resources/org/drools/lang/DRL.g:2541:1: synchronized_key : {...}? =>id= ID -> VK_SYNCHRONIZED[$id] ;
    public final DRLParser.synchronized_key_return synchronized_key() throws RecognitionException {
        DRLParser.synchronized_key_return retval = new DRLParser.synchronized_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2542:2: ({...}? =>id= ID -> VK_SYNCHRONIZED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2542:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "synchronized_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_synchronized_key9906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2544:2: -> VK_SYNCHRONIZED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SYNCHRONIZED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "synchronized_key"

    public static class return_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_key"
    // src/main/resources/org/drools/lang/DRL.g:2548:1: return_key : {...}? =>id= ID -> VK_RETURN[$id] ;
    public final DRLParser.return_key_return return_key() throws RecognitionException {
        DRLParser.return_key_return retval = new DRLParser.return_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2549:2: ({...}? =>id= ID -> VK_RETURN[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2549:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RETURN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "return_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RETURN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_return_key9932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2551:2: -> VK_RETURN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RETURN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "return_key"

    public static class throw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throw_key"
    // src/main/resources/org/drools/lang/DRL.g:2555:1: throw_key : {...}? =>id= ID -> VK_THROW[$id] ;
    public final DRLParser.throw_key_return throw_key() throws RecognitionException {
        DRLParser.throw_key_return retval = new DRLParser.throw_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2556:2: ({...}? =>id= ID -> VK_THROW[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2556:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throw_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throw_key9958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2558:2: -> VK_THROW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throw_key"

    public static class break_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "break_key"
    // src/main/resources/org/drools/lang/DRL.g:2562:1: break_key : {...}? =>id= ID -> VK_BREAK[$id] ;
    public final DRLParser.break_key_return break_key() throws RecognitionException {
        DRLParser.break_key_return retval = new DRLParser.break_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2563:2: ({...}? =>id= ID -> VK_BREAK[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2563:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BREAK)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "break_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BREAK))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_break_key9984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2565:2: -> VK_BREAK[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_BREAK, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "break_key"

    public static class continue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_key"
    // src/main/resources/org/drools/lang/DRL.g:2569:1: continue_key : {...}? =>id= ID -> VK_CONTINUE[$id] ;
    public final DRLParser.continue_key_return continue_key() throws RecognitionException {
        DRLParser.continue_key_return retval = new DRLParser.continue_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2570:2: ({...}? =>id= ID -> VK_CONTINUE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2570:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "continue_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_continue_key10010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2572:2: -> VK_CONTINUE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CONTINUE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "continue_key"

    public static class assert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assert_key"
    // src/main/resources/org/drools/lang/DRL.g:2575:1: assert_key : {...}? =>id= ID -> VK_ASSERT[$id] ;
    public final DRLParser.assert_key_return assert_key() throws RecognitionException {
        DRLParser.assert_key_return retval = new DRLParser.assert_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2576:2: ({...}? =>id= ID -> VK_ASSERT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2576:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "assert_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_assert_key10035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2578:2: -> VK_ASSERT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ASSERT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assert_key"

    public static class static_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "static_key"
    // src/main/resources/org/drools/lang/DRL.g:2581:1: static_key : {...}? =>id= ID -> VK_STATIC[$id] ;
    public final DRLParser.static_key_return static_key() throws RecognitionException {
        DRLParser.static_key_return retval = new DRLParser.static_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2582:2: ({...}? =>id= ID -> VK_STATIC[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2582:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "static_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_static_key10060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2584:2: -> VK_STATIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STATIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "static_key"

    public static class modify_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify_key"
    // src/main/resources/org/drools/lang/DRL.g:2587:1: modify_key : {...}? =>id= ID -> VK_MODIFY[$id] ;
    public final DRLParser.modify_key_return modify_key() throws RecognitionException {
        DRLParser.modify_key_return retval = new DRLParser.modify_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2588:2: ({...}? =>id= ID -> VK_MODIFY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2588:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "modify_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_modify_key10085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2590:2: -> VK_MODIFY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_MODIFY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modify_key"

    public static class public_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "public_key"
    // src/main/resources/org/drools/lang/DRL.g:2593:1: public_key : {...}? =>id= ID -> VK_PUBLIC[$id] ;
    public final DRLParser.public_key_return public_key() throws RecognitionException {
        DRLParser.public_key_return retval = new DRLParser.public_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2594:2: ({...}? =>id= ID -> VK_PUBLIC[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2594:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "public_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_public_key10111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2596:2: -> VK_PUBLIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PUBLIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "public_key"

    public static class protected_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_key"
    // src/main/resources/org/drools/lang/DRL.g:2600:1: protected_key : {...}? =>id= ID -> VK_PROTECTED[$id] ;
    public final DRLParser.protected_key_return protected_key() throws RecognitionException {
        DRLParser.protected_key_return retval = new DRLParser.protected_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2601:2: ({...}? =>id= ID -> VK_PROTECTED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2601:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "protected_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_protected_key10137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2603:2: -> VK_PROTECTED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PROTECTED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_key"

    public static class private_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_key"
    // src/main/resources/org/drools/lang/DRL.g:2607:1: private_key : {...}? =>id= ID -> VK_PRIVATE[$id] ;
    public final DRLParser.private_key_return private_key() throws RecognitionException {
        DRLParser.private_key_return retval = new DRLParser.private_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2608:2: ({...}? =>id= ID -> VK_PRIVATE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2608:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "private_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_private_key10163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2610:2: -> VK_PRIVATE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIVATE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_key"

    public static class abstract_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_key"
    // src/main/resources/org/drools/lang/DRL.g:2614:1: abstract_key : {...}? =>id= ID -> VK_ABSTRACT[$id] ;
    public final DRLParser.abstract_key_return abstract_key() throws RecognitionException {
        DRLParser.abstract_key_return retval = new DRLParser.abstract_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2615:2: ({...}? =>id= ID -> VK_ABSTRACT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2615:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "abstract_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_abstract_key10189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2617:2: -> VK_ABSTRACT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ABSTRACT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstract_key"

    public static class native_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "native_key"
    // src/main/resources/org/drools/lang/DRL.g:2621:1: native_key : {...}? =>id= ID -> VK_NATIVE[$id] ;
    public final DRLParser.native_key_return native_key() throws RecognitionException {
        DRLParser.native_key_return retval = new DRLParser.native_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2622:2: ({...}? =>id= ID -> VK_NATIVE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2622:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "native_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_native_key10215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2624:2: -> VK_NATIVE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NATIVE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "native_key"

    public static class transient_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "transient_key"
    // src/main/resources/org/drools/lang/DRL.g:2628:1: transient_key : {...}? =>id= ID -> VK_TRANSIENT[$id] ;
    public final DRLParser.transient_key_return transient_key() throws RecognitionException {
        DRLParser.transient_key_return retval = new DRLParser.transient_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2629:2: ({...}? =>id= ID -> VK_TRANSIENT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2629:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "transient_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_transient_key10241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2631:2: -> VK_TRANSIENT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRANSIENT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "transient_key"

    public static class volatile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volatile_key"
    // src/main/resources/org/drools/lang/DRL.g:2635:1: volatile_key : {...}? =>id= ID -> VK_VOLATILE[$id] ;
    public final DRLParser.volatile_key_return volatile_key() throws RecognitionException {
        DRLParser.volatile_key_return retval = new DRLParser.volatile_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2636:2: ({...}? =>id= ID -> VK_VOLATILE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2636:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "volatile_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_volatile_key10267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2638:2: -> VK_VOLATILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOLATILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volatile_key"

    public static class strictfp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "strictfp_key"
    // src/main/resources/org/drools/lang/DRL.g:2642:1: strictfp_key : {...}? =>id= ID -> VK_STRICTFP[$id] ;
    public final DRLParser.strictfp_key_return strictfp_key() throws RecognitionException {
        DRLParser.strictfp_key_return retval = new DRLParser.strictfp_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2643:2: ({...}? =>id= ID -> VK_STRICTFP[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2643:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "strictfp_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_strictfp_key10293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2645:2: -> VK_STRICTFP[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STRICTFP, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "strictfp_key"

    public static class throws_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throws_key"
    // src/main/resources/org/drools/lang/DRL.g:2649:1: throws_key : {...}? =>id= ID -> VK_THROWS[$id] ;
    public final DRLParser.throws_key_return throws_key() throws RecognitionException {
        DRLParser.throws_key_return retval = new DRLParser.throws_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2650:2: ({...}? =>id= ID -> VK_THROWS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2650:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throws_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throws_key10319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2652:2: -> VK_THROWS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROWS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throws_key"

    public static class interface_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_key"
    // src/main/resources/org/drools/lang/DRL.g:2656:1: interface_key : {...}? =>id= ID -> VK_INTERFACE[$id] ;
    public final DRLParser.interface_key_return interface_key() throws RecognitionException {
        DRLParser.interface_key_return retval = new DRLParser.interface_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2657:2: ({...}? =>id= ID -> VK_INTERFACE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2657:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "interface_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_interface_key10345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2659:2: -> VK_INTERFACE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INTERFACE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interface_key"

    public static class enum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_key"
    // src/main/resources/org/drools/lang/DRL.g:2663:1: enum_key : {...}? =>id= ID -> VK_ENUM[$id] ;
    public final DRLParser.enum_key_return enum_key() throws RecognitionException {
        DRLParser.enum_key_return retval = new DRLParser.enum_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2664:2: ({...}? =>id= ID -> VK_ENUM[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2664:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enum_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enum_key10371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2666:2: -> VK_ENUM[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENUM, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enum_key"

    // $ANTLR start synpred1_DRL
    public final void synpred1_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:660:5: ( LEFT_PAREN or_key )
        // src/main/resources/org/drools/lang/DRL.g:660:6: LEFT_PAREN or_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred1_DRL2201); if (state.failed) return ;
        pushFollow(FOLLOW_or_key_in_synpred1_DRL2203);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_DRL

    // $ANTLR start synpred2_DRL
    public final void synpred2_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:668:5: ( or_key )
        // src/main/resources/org/drools/lang/DRL.g:668:6: or_key
        {
        pushFollow(FOLLOW_or_key_in_synpred2_DRL2270);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_DRL

    // $ANTLR start synpred3_DRL
    public final void synpred3_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:677:5: ( LEFT_PAREN and_key )
        // src/main/resources/org/drools/lang/DRL.g:677:6: LEFT_PAREN and_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred3_DRL2321); if (state.failed) return ;
        pushFollow(FOLLOW_and_key_in_synpred3_DRL2323);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_DRL

    // $ANTLR start synpred4_DRL
    public final void synpred4_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:685:5: ( and_key )
        // src/main/resources/org/drools/lang/DRL.g:685:6: and_key
        {
        pushFollow(FOLLOW_and_key_in_synpred4_DRL2391);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_DRL

    // $ANTLR start synpred5_DRL
    public final void synpred5_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:708:12: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:708:13: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred5_DRL2537); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:708:24: ( or_key | and_key )
        int alt174=2;
        int LA174_0 = input.LA(1);

        if ( (LA174_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))))) {
            int LA174_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt174=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 174, 0, input);

            throw nvae;
        }
        switch (alt174) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:708:25: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred5_DRL2540);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:708:32: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred5_DRL2542);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred5_DRL

    // $ANTLR start synpred6_DRL
    public final void synpred6_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:724:5: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:724:6: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred6_DRL2665); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:724:17: ( or_key | and_key )
        int alt175=2;
        int LA175_0 = input.LA(1);

        if ( (LA175_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))))) {
            int LA175_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt175=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt175=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 175, 0, input);

            throw nvae;
        }
        switch (alt175) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:724:18: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred6_DRL2668);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:724:25: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred6_DRL2670);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred6_DRL

    // $ANTLR start synpred7_DRL
    public final void synpred7_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1129:4: ( operator_args )
        // src/main/resources/org/drools/lang/DRL.g:1129:5: operator_args
        {
        pushFollow(FOLLOW_operator_args_in_synpred7_DRL4419);
        operator_args();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_DRL

    // $ANTLR start synpred8_DRL
    public final void synpred8_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1361:5: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1361:6: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred8_DRL5737);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_DRL

    // $ANTLR start synpred9_DRL
    public final void synpred9_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1361:41: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1361:42: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred9_DRL5748); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred9_DRL5750); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_DRL

    // $ANTLR start synpred10_DRL
    public final void synpred10_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1362:10: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1362:11: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred10_DRL5771);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_DRL

    // $ANTLR start synpred11_DRL
    public final void synpred11_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1362:52: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1362:53: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred11_DRL5785);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_DRL

    // $ANTLR start synpred12_DRL
    public final void synpred12_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1362:89: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1362:90: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred12_DRL5797); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5799); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_DRL

    // $ANTLR start synpred13_DRL
    public final void synpred13_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1552:27: ( assignmentOperator )
        // src/main/resources/org/drools/lang/DRL.g:1552:28: assignmentOperator
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred13_DRL6098);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_DRL

    // $ANTLR start synpred14_DRL
    public final void synpred14_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1588:27: ( LESS )
        // src/main/resources/org/drools/lang/DRL.g:1588:28: LESS
        {
        match(input,LESS,FOLLOW_LESS_in_synpred14_DRL6362); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_DRL

    // $ANTLR start synpred15_DRL
    public final void synpred15_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1604:36: ( PLUS | MINUS )
        // src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred15_DRL

    // $ANTLR start synpred18_DRL
    public final void synpred18_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1623:9: ( castExpression )
        // src/main/resources/org/drools/lang/DRL.g:1623:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred18_DRL6640);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_DRL

    // $ANTLR start synpred19_DRL
    public final void synpred19_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1624:18: ( selector )
        // src/main/resources/org/drools/lang/DRL.g:1624:19: selector
        {
        pushFollow(FOLLOW_selector_in_synpred19_DRL6654);
        selector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_DRL

    // $ANTLR start synpred20_DRL
    public final void synpred20_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1624:42: ( INCR | DECR )
        // src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred20_DRL

    // $ANTLR start synpred21_DRL
    public final void synpred21_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1629:8: ( LEFT_PAREN primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1629:9: LEFT_PAREN primitiveType
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred21_DRL6712); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred21_DRL6714);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_DRL

    // $ANTLR start synpred22_DRL
    public final void synpred22_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1630:8: ( LEFT_PAREN type )
        // src/main/resources/org/drools/lang/DRL.g:1630:9: LEFT_PAREN type
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred22_DRL6735); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred22_DRL6737);
        type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_DRL

    // $ANTLR start synpred23_DRL
    public final void synpred23_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1636:9: ( boolean_key )
        // src/main/resources/org/drools/lang/DRL.g:1636:9: boolean_key
        {
        pushFollow(FOLLOW_boolean_key_in_synpred23_DRL6800);
        boolean_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_DRL

    // $ANTLR start synpred24_DRL
    public final void synpred24_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1637:7: ( char_key )
        // src/main/resources/org/drools/lang/DRL.g:1637:7: char_key
        {
        pushFollow(FOLLOW_char_key_in_synpred24_DRL6808);
        char_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_DRL

    // $ANTLR start synpred25_DRL
    public final void synpred25_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1638:7: ( byte_key )
        // src/main/resources/org/drools/lang/DRL.g:1638:7: byte_key
        {
        pushFollow(FOLLOW_byte_key_in_synpred25_DRL6816);
        byte_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_DRL

    // $ANTLR start synpred26_DRL
    public final void synpred26_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1639:7: ( short_key )
        // src/main/resources/org/drools/lang/DRL.g:1639:7: short_key
        {
        pushFollow(FOLLOW_short_key_in_synpred26_DRL6824);
        short_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_DRL

    // $ANTLR start synpred27_DRL
    public final void synpred27_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1640:7: ( int_key )
        // src/main/resources/org/drools/lang/DRL.g:1640:7: int_key
        {
        pushFollow(FOLLOW_int_key_in_synpred27_DRL6832);
        int_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_DRL

    // $ANTLR start synpred28_DRL
    public final void synpred28_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1641:7: ( long_key )
        // src/main/resources/org/drools/lang/DRL.g:1641:7: long_key
        {
        pushFollow(FOLLOW_long_key_in_synpred28_DRL6840);
        long_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_DRL

    // $ANTLR start synpred29_DRL
    public final void synpred29_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1642:7: ( float_key )
        // src/main/resources/org/drools/lang/DRL.g:1642:7: float_key
        {
        pushFollow(FOLLOW_float_key_in_synpred29_DRL6848);
        float_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_DRL

    // $ANTLR start synpred30_DRL
    public final void synpred30_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1648:7: ( parExpression )
        // src/main/resources/org/drools/lang/DRL.g:1648:8: parExpression
        {
        pushFollow(FOLLOW_parExpression_in_synpred30_DRL6875);
        parExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_DRL

    // $ANTLR start synpred31_DRL
    public final void synpred31_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1649:9: ( nonWildcardTypeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1649:10: nonWildcardTypeArguments
        {
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred31_DRL6890);
        nonWildcardTypeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_DRL

    // $ANTLR start synpred32_DRL
    public final void synpred32_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1650:9: ( literal )
        // src/main/resources/org/drools/lang/DRL.g:1650:10: literal
        {
        pushFollow(FOLLOW_literal_in_synpred32_DRL6915);
        literal();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_DRL

    // $ANTLR start synpred33_DRL
    public final void synpred33_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1652:9: ( super_key )
        // src/main/resources/org/drools/lang/DRL.g:1652:10: super_key
        {
        pushFollow(FOLLOW_super_key_in_synpred33_DRL6935);
        super_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_DRL

    // $ANTLR start synpred34_DRL
    public final void synpred34_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1653:9: ( new_key )
        // src/main/resources/org/drools/lang/DRL.g:1653:10: new_key
        {
        pushFollow(FOLLOW_new_key_in_synpred34_DRL6952);
        new_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_DRL

    // $ANTLR start synpred35_DRL
    public final void synpred35_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1654:9: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1654:10: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred35_DRL6969);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_DRL

    // $ANTLR start synpred36_DRL
    public final void synpred36_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1656:9: ( inlineMapExpression )
        // src/main/resources/org/drools/lang/DRL.g:1656:10: inlineMapExpression
        {
        pushFollow(FOLLOW_inlineMapExpression_in_synpred36_DRL7000);
        inlineMapExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_DRL

    // $ANTLR start synpred37_DRL
    public final void synpred37_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1657:9: ( inlineListExpression )
        // src/main/resources/org/drools/lang/DRL.g:1657:10: inlineListExpression
        {
        pushFollow(FOLLOW_inlineListExpression_in_synpred37_DRL7015);
        inlineListExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_DRL

    // $ANTLR start synpred38_DRL
    public final void synpred38_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1658:9: ( ID )
        // src/main/resources/org/drools/lang/DRL.g:1658:10: ID
        {
        match(input,ID,FOLLOW_ID_in_synpred38_DRL7030); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_DRL

    // $ANTLR start synpred39_DRL
    public final void synpred39_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1658:19: ( DOT ID )
        // src/main/resources/org/drools/lang/DRL.g:1658:20: DOT ID
        {
        match(input,DOT,FOLLOW_DOT_in_synpred39_DRL7037); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred39_DRL7039); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_DRL

    // $ANTLR start synpred40_DRL
    public final void synpred40_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1658:39: ( identifierSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1658:40: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred40_DRL7050);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_DRL

    // $ANTLR start synpred42_DRL
    public final void synpred42_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1684:8: ( LEFT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1684:9: LEFT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred42_DRL7221); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_DRL

    // $ANTLR start synpred44_DRL
    public final void synpred44_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1711:107: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1711:108: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred44_DRL7403); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred44_DRL7405); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_DRL

    // $ANTLR start synpred45_DRL
    public final void synpred45_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1743:14: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1743:15: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred45_DRL7576); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_DRL

    // $ANTLR start synpred46_DRL
    public final void synpred46_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1743:6: ( DOT ID ( ( LEFT_PAREN )=> arguments )? )
        // src/main/resources/org/drools/lang/DRL.g:1743:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
        {
        match(input,DOT,FOLLOW_DOT_in_synpred46_DRL7570); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred46_DRL7572); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1743:13: ( ( LEFT_PAREN )=> arguments )?
        int alt178=2;
        int LA178_0 = input.LA(1);

        if ( (LA178_0==LEFT_PAREN) && (synpred45_DRL())) {
            alt178=1;
        }
        switch (alt178) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1743:14: ( LEFT_PAREN )=> arguments
                {
                pushFollow(FOLLOW_arguments_in_synpred46_DRL7581);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred46_DRL

    // $ANTLR start synpred47_DRL
    public final void synpred47_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1745:6: ( DOT super_key superSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1745:6: DOT super_key superSuffix
        {
        match(input,DOT,FOLLOW_DOT_in_synpred47_DRL7592); if (state.failed) return ;
        pushFollow(FOLLOW_super_key_in_synpred47_DRL7594);
        super_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred47_DRL7596);
        superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_DRL

    // $ANTLR start synpred48_DRL
    public final void synpred48_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1746:6: ( DOT new_key ( nonWildcardTypeArguments )? innerCreator )
        // src/main/resources/org/drools/lang/DRL.g:1746:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
        {
        match(input,DOT,FOLLOW_DOT_in_synpred48_DRL7603); if (state.failed) return ;
        pushFollow(FOLLOW_new_key_in_synpred48_DRL7605);
        new_key();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1746:18: ( nonWildcardTypeArguments )?
        int alt179=2;
        int LA179_0 = input.LA(1);

        if ( (LA179_0==LESS) ) {
            alt179=1;
        }
        switch (alt179) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1746:19: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred48_DRL7608);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_innerCreator_in_synpred48_DRL7612);
        innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_DRL

    // $ANTLR start synpred49_DRL
    public final void synpred49_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1752:15: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1752:16: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred49_DRL7649); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_DRL

    // Delegated rules

    public final boolean synpred36_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA173 dfa173 = new DFA173(this);
    static final String DFA1_eotS =
        "\13\uffff";
    static final String DFA1_eofS =
        "\1\2\12\uffff";
    static final String DFA1_minS =
        "\2\u0082\2\uffff\1\0\6\uffff";
    static final String DFA1_maxS =
        "\1\u0082\1\u00a1\2\uffff\1\0\6\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\2\2\1\uffff\5\2\1\1";
    static final String DFA1_specialS =
        "\1\1\1\2\2\uffff\1\0\6\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1",
            "\1\4\2\uffff\1\11\5\uffff\1\10\1\7\4\uffff\1\6\16\uffff\1\5"+
            "\1\3",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "223:4: ( package_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_4 = input.LA(1);

                         
                        int index1_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {s = 10;}

                        else if ( ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))))) ) {s = 9;}

                         
                        input.seek(index1_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_0 = input.LA(1);

                         
                        int index1_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))))) {s = 1;}

                        else if ( (LA1_0==EOF) ) {s = 2;}

                         
                        input.seek(index1_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA1_1 = input.LA(1);

                         
                        int index1_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 3;}

                        else if ( (LA1_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))))) {s = 4;}

                        else if ( (LA1_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 5;}

                        else if ( (LA1_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 6;}

                        else if ( (LA1_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 7;}

                        else if ( (LA1_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 8;}

                        else if ( (LA1_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 9;}

                         
                        input.seek(index1_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\20\uffff";
    static final String DFA4_eofS =
        "\20\uffff";
    static final String DFA4_minS =
        "\2\u0082\5\uffff\2\0\7\uffff";
    static final String DFA4_maxS =
        "\1\u0082\1\u00a1\5\uffff\2\0\7\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\5\1\2\uffff\1\7\1\10\1\2\1\3\1\4\1\5\1\6";
    static final String DFA4_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\7\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1",
            "\1\10\2\uffff\1\7\5\uffff\1\6\1\5\4\uffff\1\4\16\uffff\1\3"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "302:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_0 = input.LA(1);

                         
                        int index4_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))))) {s = 1;}

                         
                        input.seek(index4_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 2;}

                        else if ( (LA4_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 3;}

                        else if ( (LA4_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 4;}

                        else if ( (LA4_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 5;}

                        else if ( (LA4_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 6;}

                        else if ( (LA4_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 7;}

                        else if ( (LA4_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 8;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 10;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {s = 14;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {s = 15;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 10;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\16\uffff";
    static final String DFA11_eofS =
        "\16\uffff";
    static final String DFA11_minS =
        "\2\u0082\1\uffff\1\u0082\1\uffff\1\u0082\1\u009e\3\u0082\2\u009e"+
        "\1\u008a\1\u0082";
    static final String DFA11_maxS =
        "\1\u008c\1\u008d\1\uffff\1\u009d\1\uffff\1\u0082\1\u009e\3\u009d"+
        "\2\u009e\2\u009d";
    static final String DFA11_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\11\uffff";
    static final String DFA11_specialS =
        "\16\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\2\11\uffff\1\1",
            "\1\3\11\uffff\1\2\1\4",
            "",
            "\1\7\1\5\3\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1"+
            "\6",
            "",
            "\1\10",
            "\1\11",
            "\2\2\3\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\12",
            "\1\4\1\5\10\uffff\1\2\20\uffff\1\13",
            "\1\4\7\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\6",
            "\1\14",
            "\1\15",
            "\1\4\1\uffff\1\2\1\4\17\uffff\1\12",
            "\1\4\11\uffff\1\2\20\uffff\1\13"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "385:3: ( parameters )?";
        }
    }
    static final String DFA21_eotS =
        "\13\uffff";
    static final String DFA21_eofS =
        "\13\uffff";
    static final String DFA21_minS =
        "\2\u0082\3\uffff\1\0\5\uffff";
    static final String DFA21_maxS =
        "\1\u00a4\1\u00a1\3\uffff\1\0\5\uffff";
    static final String DFA21_acceptS =
        "\2\uffff\2\2\1\1\1\uffff\5\2";
    static final String DFA21_specialS =
        "\1\1\1\2\3\uffff\1\0\5\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\1\3\uffff\1\2\2\uffff\1\2\32\uffff\1\2",
            "\1\4\2\uffff\1\5\1\uffff\1\6\3\uffff\1\12\1\11\4\uffff\1\10"+
            "\16\uffff\1\7\1\3",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "481:3: ( extend_key rule_id )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 10;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_0 = input.LA(1);

                         
                        int index21_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 1;}

                        else if ( (LA21_0==AT||LA21_0==WHEN||LA21_0==THEN) ) {s = 2;}

                         
                        input.seek(index21_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_1 = input.LA(1);

                         
                        int index21_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 3;}

                        else if ( (LA21_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {s = 4;}

                        else if ( (LA21_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))))) {s = 5;}

                        else if ( (LA21_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {s = 6;}

                        else if ( (LA21_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 7;}

                        else if ( (LA21_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 8;}

                        else if ( (LA21_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 9;}

                        else if ( (LA21_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 10;}

                         
                        input.seek(index21_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\17\uffff";
    static final String DFA30_eofS =
        "\17\uffff";
    static final String DFA30_minS =
        "\1\u0082\1\0\15\uffff";
    static final String DFA30_maxS =
        "\1\u0082\1\0\15\uffff";
    static final String DFA30_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA30_specialS =
        "\1\0\1\1\15\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "551:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_0 = input.LA(1);

                         
                        int index30_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA30_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 1;}

                         
                        input.seek(index30_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_1 = input.LA(1);

                         
                        int index30_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {s = 2;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {s = 3;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {s = 14;}

                         
                        input.seek(index30_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\12\uffff";
    static final String DFA45_eofS =
        "\12\uffff";
    static final String DFA45_minS =
        "\1\u0082\1\0\10\uffff";
    static final String DFA45_maxS =
        "\1\u008c\1\0\10\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\7\1\1\1\2\1\3\1\4\1\5\1\6\1\10";
    static final String DFA45_specialS =
        "\1\uffff\1\0\10\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "692:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_1 = input.LA(1);

                         
                        int index45_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {s = 3;}

                        else if ( (((helper.validateNotWithBinding())&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) ) {s = 4;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index45_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\24\uffff";
    static final String DFA52_eofS =
        "\24\uffff";
    static final String DFA52_minS =
        "\1\u0082\2\uffff\1\0\20\uffff";
    static final String DFA52_maxS =
        "\1\u00b4\2\uffff\1\0\20\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\16\uffff\1\3";
    static final String DFA52_specialS =
        "\3\uffff\1\0\20\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\3\2\uffff\1\4\5\uffff\2\4\4\uffff\1\4\1\1\1\2\6\uffff\1\4"+
            "\2\uffff\1\4\1\uffff\5\4\15\uffff\4\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "782:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA72_eotS =
        "\17\uffff";
    static final String DFA72_eofS =
        "\17\uffff";
    static final String DFA72_minS =
        "\2\u0082\1\uffff\1\0\13\uffff";
    static final String DFA72_maxS =
        "\1\u008c\1\u009d\1\uffff\1\0\13\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\3\1\uffff\1\2\11\uffff\1\1";
    static final String DFA72_specialS =
        "\3\uffff\1\0\13\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\11\uffff\1\2",
            "\2\4\3\uffff\1\4\4\uffff\1\3\12\uffff\7\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "997:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_3 = input.LA(1);

                         
                        int index72_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 14;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index72_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA77_eotS =
        "\61\uffff";
    static final String DFA77_eofS =
        "\61\uffff";
    static final String DFA77_minS =
        "\2\u0082\7\uffff\1\4\1\u0082\11\uffff\12\0\2\uffff\1\0\20\uffff";
    static final String DFA77_maxS =
        "\1\u009c\1\u00a3\7\uffff\1\u00cb\1\u00a3\11\uffff\12\0\2\uffff\1"+
        "\0\20\uffff";
    static final String DFA77_acceptS =
        "\2\uffff\1\2\5\uffff\1\3\2\uffff\1\2\25\uffff\2\2\10\uffff\1\2\4"+
        "\uffff\1\1";
    static final String DFA77_specialS =
        "\1\0\1\1\7\uffff\1\2\1\3\11\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\2\uffff\1\16\20\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\1\11\uffff\1\10\12\uffff\6\2",
            "\1\12\2\uffff\1\13\5\uffff\1\13\1\11\4\uffff\1\13\13\uffff"+
            "\1\13\1\uffff\5\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\176\13\1\24\2\13\1\25\5\13\1\33\1\35\4\13\1\30\15\13\1\34"+
            "\1\26\1\27\1\31\1\32\50\13",
            "\1\42\1\53\1\uffff\1\42\4\uffff\1\53\1\42\1\40\1\53\3\uffff"+
            "\1\42\2\uffff\2\53\7\uffff\1\41\1\uffff\5\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "1061:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_0 = input.LA(1);

                         
                        int index77_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 1;}

                        else if ( ((LA77_0>=EQUALS && LA77_0<=NOT_EQUALS)) ) {s = 2;}

                        else if ( (LA77_0==LEFT_PAREN) ) {s = 8;}

                         
                        input.seek(index77_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_1 = input.LA(1);

                         
                        int index77_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 9;}

                        else if ( (LA77_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {s = 10;}

                        else if ( (LA77_1==STRING||LA77_1==BOOL||LA77_1==DECIMAL||LA77_1==LEFT_SQUARE||(LA77_1>=NULL && LA77_1<=FLOAT)) && (((helper.isPluggableEvaluator(false))))) {s = 11;}

                         
                        input.seek(index77_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA77_9 = input.LA(1);

                         
                        int index77_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_9==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 20;}

                        else if ( (LA77_9==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 21;}

                        else if ( (LA77_9==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 22;}

                        else if ( (LA77_9==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 23;}

                        else if ( (LA77_9==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 24;}

                        else if ( (LA77_9==HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 25;}

                        else if ( (LA77_9==FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 26;}

                        else if ( (LA77_9==BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 27;}

                        else if ( (LA77_9==NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 28;}

                        else if ( (LA77_9==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 29;}

                        else if ( ((LA77_9>=VT_COMPILATION_UNIT && LA77_9<=SEMICOLON)||(LA77_9>=DOT && LA77_9<=DOT_STAR)||(LA77_9>=AT && LA77_9<=COMMA)||(LA77_9>=RIGHT_PAREN && LA77_9<=TimePeriod)||(LA77_9>=ACCUMULATE && LA77_9<=RIGHT_SQUARE)||(LA77_9>=THEN && LA77_9<=MISC)) && (((helper.isPluggableEvaluator(false))))) {s = 11;}

                         
                        input.seek(index77_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA77_10 = input.LA(1);

                         
                        int index77_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_10==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 32;}

                        else if ( (LA77_10==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {s = 33;}

                        else if ( (LA77_10==ID||LA77_10==STRING||LA77_10==BOOL||LA77_10==DECIMAL||(LA77_10>=NULL && LA77_10<=FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 34;}

                        else if ( (LA77_10==DOT||LA77_10==COMMA||LA77_10==RIGHT_PAREN||(LA77_10>=DOUBLE_PIPE && LA77_10<=DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {s = 43;}

                         
                        input.seek(index77_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA77_20 = input.LA(1);

                         
                        int index77_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA77_21 = input.LA(1);

                         
                        int index77_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA77_22 = input.LA(1);

                         
                        int index77_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA77_23 = input.LA(1);

                         
                        int index77_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA77_24 = input.LA(1);

                         
                        int index77_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA77_25 = input.LA(1);

                         
                        int index77_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA77_26 = input.LA(1);

                         
                        int index77_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA77_27 = input.LA(1);

                         
                        int index77_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA77_28 = input.LA(1);

                         
                        int index77_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA77_29 = input.LA(1);

                         
                        int index77_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index77_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA77_32 = input.LA(1);

                         
                        int index77_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 48;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 43;}

                         
                        input.seek(index77_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA81_eotS =
        "\10\uffff";
    static final String DFA81_eofS =
        "\10\uffff";
    static final String DFA81_minS =
        "\1\u009d\2\4\1\uffff\1\4\1\0\1\4\1\uffff";
    static final String DFA81_maxS =
        "\1\u009d\2\u00cb\1\uffff\1\u00cb\1\0\1\u00cb\1\uffff";
    static final String DFA81_acceptS =
        "\3\uffff\1\2\3\uffff\1\1";
    static final String DFA81_specialS =
        "\5\uffff\1\0\2\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1",
            "\u008c\3\1\2\73\3",
            "\u0086\3\1\4\23\3\1\5\55\3",
            "",
            "\u008c\3\1\6\73\3",
            "\1\uffff",
            "\u0086\3\1\4\23\3\1\5\55\3",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "1128:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_5 = input.LA(1);

                         
                        int index81_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_DRL()) ) {s = 7;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA105_eotS =
        "\57\uffff";
    static final String DFA105_eofS =
        "\1\2\56\uffff";
    static final String DFA105_minS =
        "\1\u0081\1\0\55\uffff";
    static final String DFA105_maxS =
        "\1\u00bc\1\0\55\uffff";
    static final String DFA105_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA105_specialS =
        "\1\uffff\1\0\55\uffff}>";
    static final String[] DFA105_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\2\2\1\uffff\1\1\1\uffff\11\2\1\uffff\10\2\3\uffff"+
            "\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "1362:9: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA106_eotS =
        "\57\uffff";
    static final String DFA106_eofS =
        "\1\2\56\uffff";
    static final String DFA106_minS =
        "\1\u0081\1\0\55\uffff";
    static final String DFA106_maxS =
        "\1\u00bc\1\0\55\uffff";
    static final String DFA106_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA106_specialS =
        "\1\uffff\1\0\55\uffff}>";
    static final String[] DFA106_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\2\2\1\uffff\1\1\1\uffff\11\2\1\uffff\10\2\3\uffff"+
            "\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "1362:51: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_1 = input.LA(1);

                         
                        int index106_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA118_eotS =
        "\6\uffff";
    static final String DFA118_eofS =
        "\6\uffff";
    static final String DFA118_minS =
        "\2\u0082\1\uffff\1\u009e\1\uffff\1\u0082";
    static final String DFA118_maxS =
        "\1\u0082\1\u009d\1\uffff\1\u009e\1\uffff\1\u009d";
    static final String DFA118_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA118_specialS =
        "\6\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\1",
            "\2\2\6\uffff\1\4\2\uffff\1\4\17\uffff\1\3",
            "",
            "\1\5",
            "",
            "\1\2\7\uffff\1\4\2\uffff\1\4\17\uffff\1\3"
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "1395:4: ( data_type )?";
        }
    }
    static final String DFA121_eotS =
        "\17\uffff";
    static final String DFA121_eofS =
        "\17\uffff";
    static final String DFA121_minS =
        "\1\u0081\14\0\2\uffff";
    static final String DFA121_maxS =
        "\1\u00bc\14\0\2\uffff";
    static final String DFA121_acceptS =
        "\15\uffff\1\2\1\1";
    static final String DFA121_specialS =
        "\1\uffff\1\3\1\12\1\13\1\10\1\11\1\4\1\6\1\0\1\2\1\7\1\5\1\1\2\uffff}>";
    static final String[] DFA121_transitionS = {
            "\2\15\2\uffff\1\15\1\uffff\1\15\1\1\1\uffff\4\15\3\uffff\1\15"+
            "\10\uffff\1\15\2\uffff\10\15\1\uffff\1\15\4\uffff\1\12\1\14"+
            "\1\13\3\uffff\4\15\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "1552:26: ( ( assignmentOperator )=> assignmentOperator expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_12 = input.LA(1);

                         
                        int index121_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_1 = input.LA(1);

                         
                        int index121_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_11 = input.LA(1);

                         
                        int index121_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA121_7 = input.LA(1);

                         
                        int index121_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA121_10 = input.LA(1);

                         
                        int index121_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA121_4 = input.LA(1);

                         
                        int index121_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA121_2 = input.LA(1);

                         
                        int index121_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_2);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA121_3 = input.LA(1);

                         
                        int index121_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index121_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA129_eotS =
        "\54\uffff";
    static final String DFA129_eofS =
        "\54\uffff";
    static final String DFA129_minS =
        "\1\u0081\1\0\52\uffff";
    static final String DFA129_maxS =
        "\1\u00bc\1\0\52\uffff";
    static final String DFA129_acceptS =
        "\2\uffff\1\2\50\uffff\1\1";
    static final String DFA129_specialS =
        "\1\uffff\1\0\52\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\2\1\1\2\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\1\2\2\uffff\1\2\1\uffff\11\2\1\uffff\10\2\3\uffff"+
            "\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "1584:30: ( instanceof_key type )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA130_eotS =
        "\54\uffff";
    static final String DFA130_eofS =
        "\54\uffff";
    static final String DFA130_minS =
        "\1\u0081\41\uffff\1\0\11\uffff";
    static final String DFA130_maxS =
        "\1\u00bc\41\uffff\1\0\11\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\2\51\uffff\1\1";
    static final String DFA130_specialS =
        "\1\0\41\uffff\1\1\11\uffff}>";
    static final String[] DFA130_transitionS = {
            "\2\1\2\uffff\1\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2\uffff"+
            "\2\1\1\uffff\1\1\2\53\1\42\1\53\11\1\1\uffff\10\1\3\uffff\14"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 1588:25: ( ( LESS )=> relationalOp shiftExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_0 = input.LA(1);

                         
                        int index130_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA130_0>=SEMICOLON && LA130_0<=ID)||LA130_0==STRING||(LA130_0>=COLON && LA130_0<=EQUALS_ASSIGN)||(LA130_0>=COMMA && LA130_0<=RIGHT_PAREN)||LA130_0==DECIMAL||(LA130_0>=DOUBLE_PIPE && LA130_0<=DOUBLE_AMPER)||LA130_0==EQUALS||(LA130_0>=NOT_EQUALS && LA130_0<=THEN)||(LA130_0>=RIGHT_CURLY && LA130_0<=SHIFT_RIGHT)||(LA130_0>=INCR && LA130_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA130_0==LESS) ) {s = 34;}

                        else if ( ((LA130_0>=GREATER && LA130_0<=GREATER_EQUALS)||LA130_0==LESS_EQUALS) && (synpred14_DRL())) {s = 43;}

                         
                        input.seek(index130_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_34 = input.LA(1);

                         
                        int index130_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_DRL()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\55\uffff";
    static final String DFA132_eofS =
        "\55\uffff";
    static final String DFA132_minS =
        "\1\u0081\34\uffff\2\0\16\uffff";
    static final String DFA132_maxS =
        "\1\u00bc\34\uffff\2\0\16\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA132_specialS =
        "\35\uffff\1\0\1\1\16\uffff}>";
    static final String[] DFA132_transitionS = {
            "\2\1\2\uffff\1\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2\uffff"+
            "\2\1\1\uffff\11\1\1\35\1\36\3\1\1\uffff\10\1\3\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 1604:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_29 = input.LA(1);

                         
                        int index132_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_DRL()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_30 = input.LA(1);

                         
                        int index132_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_DRL()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\16\uffff";
    static final String DFA137_eofS =
        "\16\uffff";
    static final String DFA137_minS =
        "\1\u0082\2\uffff\1\0\12\uffff";
    static final String DFA137_maxS =
        "\1\u00b4\2\uffff\1\0\12\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\10\uffff\1\3";
    static final String DFA137_specialS =
        "\3\uffff\1\0\12\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\4\2\uffff\1\4\5\uffff\1\4\1\3\4\uffff\1\4\10\uffff\1\4\2"+
            "\uffff\1\4\1\uffff\1\4\2\uffff\2\4\17\uffff\1\1\1\2",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "1619:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_3 = input.LA(1);

                         
                        int index137_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_DRL()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index137_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\57\uffff";
    static final String DFA135_eofS =
        "\1\1\56\uffff";
    static final String DFA135_minS =
        "\1\u0081\52\uffff\1\0\3\uffff";
    static final String DFA135_maxS =
        "\1\u00bc\52\uffff\1\0\3\uffff";
    static final String DFA135_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA135_specialS =
        "\1\0\52\uffff\1\1\3\uffff}>";
    static final String[] DFA135_transitionS = {
            "\2\1\1\56\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2"+
            "\uffff\2\1\1\uffff\6\1\1\53\7\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()* loopback of 1624:17: ( ( selector )=> selector )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_0 = input.LA(1);

                         
                        int index135_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA135_0==EOF||(LA135_0>=SEMICOLON && LA135_0<=ID)||LA135_0==STRING||(LA135_0>=COLON && LA135_0<=EQUALS_ASSIGN)||(LA135_0>=COMMA && LA135_0<=RIGHT_PAREN)||LA135_0==DECIMAL||(LA135_0>=DOUBLE_PIPE && LA135_0<=DOUBLE_AMPER)||(LA135_0>=EQUALS && LA135_0<=NOT_EQUALS)||(LA135_0>=RIGHT_SQUARE && LA135_0<=THEN)||(LA135_0>=RIGHT_CURLY && LA135_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA135_0==LEFT_SQUARE) ) {s = 43;}

                        else if ( (LA135_0==DOT) && (synpred19_DRL())) {s = 46;}

                         
                        input.seek(index135_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_43 = input.LA(1);

                         
                        int index135_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index135_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\57\uffff";
    static final String DFA136_eofS =
        "\1\2\56\uffff";
    static final String DFA136_minS =
        "\1\u0081\1\0\37\uffff\1\0\15\uffff";
    static final String DFA136_maxS =
        "\1\u00bc\1\0\37\uffff\1\0\15\uffff";
    static final String DFA136_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA136_specialS =
        "\1\uffff\1\0\37\uffff\1\1\15\uffff}>";
    static final String[] DFA136_transitionS = {
            "\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\16\2\1\uffff\13\2\1\1\1\41\12\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "1624:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_1 = input.LA(1);

                         
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_33 = input.LA(1);

                         
                        int index136_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index136_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA139_eotS =
        "\12\uffff";
    static final String DFA139_eofS =
        "\12\uffff";
    static final String DFA139_minS =
        "\1\u0082\1\0\10\uffff";
    static final String DFA139_maxS =
        "\1\u0082\1\0\10\uffff";
    static final String DFA139_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA139_specialS =
        "\1\1\1\0\10\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "1634:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_1 = input.LA(1);

                         
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) ) {s = 2;}

                        else if ( ((synpred24_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {s = 3;}

                        else if ( ((synpred25_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))) ) {s = 4;}

                        else if ( ((synpred26_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))) ) {s = 5;}

                        else if ( ((synpred27_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) ) {s = 6;}

                        else if ( ((synpred28_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))) ) {s = 7;}

                        else if ( ((synpred29_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {s = 9;}

                         
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA139_0 = input.LA(1);

                         
                        int index139_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA139_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {s = 1;}

                         
                        input.seek(index139_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\21\uffff";
    static final String DFA144_eofS =
        "\21\uffff";
    static final String DFA144_minS =
        "\1\u0082\10\uffff\2\0\6\uffff";
    static final String DFA144_maxS =
        "\1\u00a3\10\uffff\2\0\6\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\1\2\6\3\2\uffff\1\4\1\5\1\6\1\11\1\7\1\10";
    static final String DFA144_specialS =
        "\1\0\10\uffff\1\1\1\2\6\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\11\2\uffff\1\3\5\uffff\1\7\1\1\4\uffff\1\4\10\uffff\1\2\2"+
            "\uffff\1\12\1\uffff\1\10\2\uffff\1\5\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "1646:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_0 = input.LA(1);

                         
                        int index144_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA144_0==LEFT_PAREN) && (synpred30_DRL())) {s = 1;}

                        else if ( (LA144_0==LESS) && (synpred31_DRL())) {s = 2;}

                        else if ( (LA144_0==STRING) && (synpred32_DRL())) {s = 3;}

                        else if ( (LA144_0==DECIMAL) && (synpred32_DRL())) {s = 4;}

                        else if ( (LA144_0==HEX) && (synpred32_DRL())) {s = 5;}

                        else if ( (LA144_0==FLOAT) && (synpred32_DRL())) {s = 6;}

                        else if ( (LA144_0==BOOL) && (synpred32_DRL())) {s = 7;}

                        else if ( (LA144_0==NULL) && (synpred32_DRL())) {s = 8;}

                        else if ( (LA144_0==ID) ) {s = 9;}

                        else if ( (LA144_0==LEFT_SQUARE) ) {s = 10;}

                         
                        input.seek(index144_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) ) {s = 11;}

                        else if ( ((synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NEW))))) ) {s = 12;}

                        else if ( (((synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))))) ) {s = 13;}

                        else if ( (synpred38_DRL()) ) {s = 14;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_DRL()) ) {s = 15;}

                        else if ( (synpred37_DRL()) ) {s = 16;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\60\uffff";
    static final String DFA143_eofS =
        "\1\3\57\uffff";
    static final String DFA143_minS =
        "\1\u0081\2\0\55\uffff";
    static final String DFA143_maxS =
        "\1\u00bc\2\0\55\uffff";
    static final String DFA143_acceptS =
        "\3\uffff\1\2\53\uffff\1\1";
    static final String DFA143_specialS =
        "\1\uffff\1\0\1\1\55\uffff}>";
    static final String[] DFA143_transitionS = {
            "\3\3\1\uffff\1\3\1\uffff\2\3\1\uffff\2\3\1\2\1\3\3\uffff\1\3"+
            "\2\uffff\2\3\1\uffff\6\3\1\1\7\3\1\uffff\27\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "1658:38: ( ( identifierSuffix )=> identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA149_eotS =
        "\60\uffff";
    static final String DFA149_eofS =
        "\1\1\57\uffff";
    static final String DFA149_minS =
        "\1\u0081\52\uffff\1\0\4\uffff";
    static final String DFA149_maxS =
        "\1\u00bc\52\uffff\1\0\4\uffff";
    static final String DFA149_acceptS =
        "\1\uffff\1\2\55\uffff\1\1";
    static final String DFA149_specialS =
        "\53\uffff\1\0\4\uffff}>";
    static final String[] DFA149_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2\uffff"+
            "\2\1\1\uffff\6\1\1\53\7\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1684:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_43 = input.LA(1);

                         
                        int index149_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index149_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\60\uffff";
    static final String DFA158_eofS =
        "\1\2\57\uffff";
    static final String DFA158_minS =
        "\1\u0081\1\0\56\uffff";
    static final String DFA158_maxS =
        "\1\u00bc\1\0\56\uffff";
    static final String DFA158_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA158_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA158_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\6\2\1\1\7\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 1711:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_1 = input.LA(1);

                         
                        int index158_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!helper.validateLT(2,"]"))) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\60\uffff";
    static final String DFA166_eofS =
        "\1\2\57\uffff";
    static final String DFA166_minS =
        "\1\u0081\1\0\56\uffff";
    static final String DFA166_maxS =
        "\1\u00bc\1\0\56\uffff";
    static final String DFA166_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA166_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA166_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2"+
            "\2\uffff\2\2\1\uffff\16\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "1743:13: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_1 = input.LA(1);

                         
                        int index166_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index166_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA169_eotS =
        "\60\uffff";
    static final String DFA169_eofS =
        "\1\2\57\uffff";
    static final String DFA169_minS =
        "\1\u0081\1\0\56\uffff";
    static final String DFA169_maxS =
        "\1\u00bc\1\0\56\uffff";
    static final String DFA169_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA169_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA169_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2"+
            "\2\uffff\2\2\1\uffff\16\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "1752:14: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_1 = input.LA(1);

                         
                        int index169_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index169_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA173_eotS =
        "\15\uffff";
    static final String DFA173_eofS =
        "\15\uffff";
    static final String DFA173_minS =
        "\1\u0088\14\uffff";
    static final String DFA173_maxS =
        "\1\u00bc\14\uffff";
    static final String DFA173_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA173_specialS =
        "\15\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\1\42\uffff\1\12\1\14\1\13\7\uffff\1\2\1\3\1\4\1\5\1\6\1\7"+
            "\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "1765:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );";
        }
    }
 

    public static final BitSet FOLLOW_package_statement_in_compilation_unit619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_resync_in_compilation_unit638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_compilation_unit645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_resync_in_compilation_unit647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_key_in_package_statement748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_packageOrTypeName_in_package_statement752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_statement754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_attribute_in_statement794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_import_statement_in_statement799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_in_statement818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_statement824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_statement829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_statement834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_in_statement839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_import_statement865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_import_name_in_import_statement867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_import_statement870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_function_import_statement910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_function_key_in_function_import_statement912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_import_name_in_function_import_statement924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_import_statement927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_name961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_DOT_in_import_name967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_import_name971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_DOT_STAR_in_import_name978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_key_in_global1021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_data_type_in_global1023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_global_id_in_global1025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_global1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_id1056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_function1091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_data_type_in_function1093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_function_id_in_function1096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_parameters_in_function1098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_curly_chunk_in_function1100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_id1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_key_in_query1165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_query_id_in_query1167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_parameters_in_query1175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_normal_lhs_block_in_query1184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_end_key_in_query1191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_query1193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_id1228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_query_id1244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_type_declaration1277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_declare_id_in_type_declaration1280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_type_decl_extends_in_type_declaration1282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_type_decl_implements_in_type_declaration1285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_decl_metadata_in_type_declaration1290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_decl_field_in_type_declaration1295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_end_key_in_type_declaration1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_declare_id1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extends_key_in_type_decl_extends1362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeName_in_type_decl_extends1365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_key_in_type_decl_implements1377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeNameList_in_type_decl_implements1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_decl_metadata1399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_decl_metadata1407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_metadata1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_decl_field1439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_decl_field_initialization_in_decl_field1445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_decl_field1451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_data_type_in_decl_field1457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_decl_metadata_in_decl_field1461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_field_initialization1495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_key_in_rule1533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_rule_id_in_rule1551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_extend_key_in_rule1560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_rule_id_in_rule1562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_decl_metadata_in_rule1566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_rule_attributes_in_rule1569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_when_part_in_rule1572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_rhs_chunk_in_rule1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_when_part1619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001084L});
    public static final BitSet FOLLOW_COLON_in_when_part1625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_normal_lhs_block_in_when_part1635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_id1656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_rule_id1672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_key_in_rule_attributes1693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_rule_attributes1695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1705 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_rule_attributes1709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_salience_in_rule_attribute1755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_in_rule_attribute1761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_in_rule_attribute1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timer_in_rule_attribute1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_in_rule_attribute1780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_in_rule_attribute1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_in_rule_attribute1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_in_rule_attribute1798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_in_rule_attribute1804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_in_rule_attribute1810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_in_rule_attribute1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_in_rule_attribute1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_in_rule_attribute1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_key_in_date_effective1843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_date_effective1848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_key_in_date_expires1862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_date_expires1867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_key_in_enabled1882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_BOOL_in_enabled1895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_enabled1906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_salience_key_in_salience1926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300021000L});
    public static final BitSet FOLLOW_signed_decimal_in_salience1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_salience1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_key_in_no_loop1957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BOOL_in_no_loop1962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_key_in_auto_focus1977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BOOL_in_auto_focus1982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_key_in_activation_group1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_activation_group2004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_key_in_ruleflow_group2018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_ruleflow_group2023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_key_in_agenda_group2037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_agenda_group2042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_key_in_timer2057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300021000L});
    public static final BitSet FOLLOW_timer_key_in_timer2060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300021000L});
    public static final BitSet FOLLOW_signed_decimal_in_timer2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_timer2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_key_in_calendars2103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_string_list_in_calendars2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_key_in_dialect2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_dialect2124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_key_in_lock_on_active2142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BOOL_in_lock_on_active2147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_in_normal_lhs_block2165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs2186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_or2210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_or2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_and2330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_and2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_lhs_exist_in_lhs_unary2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_not_binding_in_lhs_unary2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_not_in_lhs_unary2455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_eval_in_lhs_unary2461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_forall_in_lhs_unary2467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_for_in_lhs_unary2474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_unary2480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_unary2491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_unary2497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_unary2505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exists_key_in_lhs_exist2520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_exist2554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_exist2569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_exist2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not_binding2630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_not_binding2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not2655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_not2684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_not2699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_not2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eval_key_in_lhs_eval2748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_lhs_eval2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_key_in_lhs_forall2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_forall2789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_forall2797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_forall2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_lhs_for2829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_for2834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_for2842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_for2844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_functions_in_lhs_for2849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002002L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_for2855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_constraints_in_lhs_for2857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_for2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_function_in_for_functions2892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_for_functions2896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_function_in_for_functions2898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_in_for_function2927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_for_function2929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_for_function2931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_pattern_source2965 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_over_clause_in_pattern_source2969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_FROM_in_pattern_source2979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_accumulate_statement_in_pattern_source2999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_statement_in_pattern_source3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entrypoint_statement_in_pattern_source3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_source_in_pattern_source3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVER_in_over_clause3080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_over_elements_in_over_clause3085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_over_clause3092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_over_elements_in_over_clause3097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ID_in_over_elements3112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_over_elements3119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_over_elements3128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_over_elements3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_TimePeriod_in_over_elements3150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_DECIMAL_in_over_elements3156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_over_elements3166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ACCUMULATE_in_accumulate_statement3193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_statement3202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_accumulate_statement3210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_statement3215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_accumulate_init_clause_in_accumulate_statement3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_accumulate_id_clause_in_accumulate_statement3231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_statement3239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_key_in_accumulate_init_clause3285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_action_key_in_accumulate_init_clause3311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_reverse_key_in_accumulate_init_clause3332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_result_key_in_accumulate_init_clause3357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3445 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_set_in_accumulate_paren_chunk_data3457 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3473 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_accumulate_id_clause3500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_accumulate_id_clause3506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_in_collect_statement3528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_collect_statement3537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_pattern_source_in_collect_statement3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_collect_statement3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entry_point_key_in_entrypoint_statement3576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_entrypoint_id_in_entrypoint_statement3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entrypoint_id3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_entrypoint_id3627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_source3664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_pattern3695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_lhs_pattern3708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_fact_binding3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_fact_in_fact_binding3734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact_binding3741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_fact_binding_expression_in_fact_binding3749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact_binding3757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100004L});
    public static final BitSet FOLLOW_or_key_in_fact_binding_expression3810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100004L});
    public static final BitSet FOLLOW_pattern_type_in_fact3861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact3866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_constraints_in_fact3877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact3883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_constraints3915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_constraints3919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_constraint_in_constraints3926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_or_constr_in_constraint3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_constr3955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr3977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_constr3981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr3988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eval_key_in_unary_constr4021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_unary_constr4024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_constraint_in_unary_constr4029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_constr4035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_or_constr_in_unary_constr4045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_constr4050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_field_constraint4070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint4072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000001FC01004L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROW_in_field_constraint4085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_field_constraint4089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint4143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_label4170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_label4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_restr_connective4204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4233 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_restr_connective4239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_compound_operator_in_constraint_expression4276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_operator_in_constraint_expression4281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_constraint_expression4286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_or_restr_connective_in_constraint_expression4295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_constraint_expression4300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_simple_operator4335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_GREATER_in_simple_operator4343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_GREATER_EQUALS_in_simple_operator4351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_LESS_in_simple_operator4359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_LESS_EQUALS_in_simple_operator4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_NOT_EQUALS_in_simple_operator4375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_not_key_in_simple_operator4383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F800004L});
    public static final BitSet FOLLOW_operator_key_in_simple_operator4390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000FA0021824L});
    public static final BitSet FOLLOW_operator_params_in_simple_operator4394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_expression_value_in_simple_operator4407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_operator_params4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_in_operator_params4438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_operator_args4449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000400L});
    public static final BitSet FOLLOW_COMMA_in_operator_args4455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000400L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_operator_args4462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TimePeriod_in_operator_arg4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_not_key_in_compound_operator4503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_compound_operator4516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_COMMA_in_compound_operator4528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_compound_operator4541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_expression_value4562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_literal_in_expression_value4567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_expression_value4573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_signed_literal4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_in_signed_literal4642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_in_signed_literal4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_in_signed_literal4678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_signed_literal4696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_signed_literal4735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_match_in_signed_decimal4789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_decimal_match4826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_MINUS_in_signed_decimal_match4832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_DECIMAL_in_signed_decimal_match4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_match_in_signed_hex4889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_hex_match4926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_hex_match4932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_HEX_in_signed_hex_match4954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_match_in_signed_float4989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_float_match5026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_float_match5032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_FLOAT_in_signed_float_match5054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_pattern_type5075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_pattern_type5081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_pattern_type5085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_dimension_definition_in_pattern_type5100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ID_in_data_type5128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_data_type5134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_data_type5138 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_dimension_definition_in_data_type5143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_dimension_definition5172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_dimension_definition5179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_accessor_path5197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ID_in_accessor_element5225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_square_chunk_in_accessor_element5231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_rhs_chunk_data_in_rhs_chunk5263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_rhs_chunk_data5282 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_not_end_key_in_rhs_chunk_data5291 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_end_key_in_rhs_chunk_data5297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_chunk_data5302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk5321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_chunk_data5344 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_set_in_curly_chunk_data5356 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk_data5372 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_chunk_data5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk5404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_chunk_data5428 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_set_in_paren_chunk_data5440 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk_data5456 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_paren_chunk_data5467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_square_chunk_data5511 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_set_in_square_chunk_data5523 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk_data5538 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000FFFL});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_square_chunk_data5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_literal5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_literal5590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_in_literal5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_literal5612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_literal5623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_typeList5682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typeList5684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5698 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_typeNameList5701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5704 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_primitiveType_in_type5744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ID_in_type5767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000024000008L});
    public static final BitSet FOLLOW_typeArguments_in_type5774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_type5779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_type5781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000024000008L});
    public static final BitSet FOLLOW_typeArguments_in_type5788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5805 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ID_in_typeName5822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_typeName5825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_typeName5827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_packageOrTypeName5861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LESS_in_typeArguments5893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000400L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments5898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000400L});
    public static final BitSet FOLLOW_GREATER_in_typeArguments5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument5916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_typeArgument5921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_extends_key_in_typeArgument5925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_super_key_in_typeArgument5929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typeArgument5932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parameters5945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002004L});
    public static final BitSet FOLLOW_param_definition_in_parameters5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_COMMA_in_parameters5957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_param_definition_in_parameters5961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parameters5970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_data_type_in_param_definition5996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_argument_in_param_definition5999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_argument6010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_dimension_definition_in_argument6016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_STRING_in_string_list6035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_string_list6044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_string_list6048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression6094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1FE0380000000100L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression6103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_expression6105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression6148 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression6152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression6156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6176 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression6205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6207 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_PIPE_in_inclusiveOrExpression6230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression6251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression6255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression6257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression6276 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_AMPER_in_andExpression6280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression6282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression6301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_set_in_equalityExpression6305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression6315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression6334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_instanceof_key_in_instanceOfExpression6337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression6357 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression6366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression6368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_set_in_relationalOp6386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression6415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression6419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression6421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_set_in_shiftOp6435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_set_in_additiveExpression6473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6500 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression6504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression6538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression6548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCR_in_unaryExpression6560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_primary_in_unaryExpression6562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECR_in_unaryExpression6572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_primary_in_unaryExpression6574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unaryExpressionNotPlusMinus6617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus6628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus6650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0006000020000008L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus6657 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0006000020000008L});
    public static final BitSet FOLLOW_set_in_unaryExpressionNotPlusMinus6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_castExpression6744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_castExpression6759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_primitiveType6800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_primitiveType6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_primitiveType6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_primitiveType6824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_primitiveType6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_primitiveType6840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_primitiveType6848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_double_key_in_primitiveType6856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_key_in_primary6901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_primary6903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_primary6939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_primary6941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_primary6956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_creator_in_primary6958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary6973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_primary6976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_primary6978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_primary6982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_class_key_in_primary6984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_primary7004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_primary7019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_primary7033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020001008L});
    public static final BitSet FOLLOW_DOT_in_primary7042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_primary7044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020001008L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary7053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineListExpression7074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FE40E1824L});
    public static final BitSet FOLLOW_expressionList_in_inlineListExpression7076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineListExpression7079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineMapExpression7101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_mapExpressionList_in_inlineMapExpression7103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FE40E1824L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_mapExpressionList7126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_mapEntry7151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_mapEntry7153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_mapEntry7155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parExpression7169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_parExpression7171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parExpression7173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix7203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix7205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix7209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_class_key_in_identifierSuffix7211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix7226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix7228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix7230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator7261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_createdName_in_creator7264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020001000L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator7275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator7279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_createdName7291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_typeArguments_in_createdName7293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_createdName7306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_createdName7308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_typeArguments_in_createdName7310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_primitiveType_in_createdName7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_innerCreator7340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020001000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator7342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FE40E1824L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest7372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest7386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest7395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7411 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer7434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer7445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_arrayInitializer7457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E006FA40E1824L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000400L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E002FA40E1824L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000400L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_arrayInitializer7477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest7488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation7501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation7503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_nonWildcardTypeArguments7515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments7517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_GREATER_in_nonWildcardTypeArguments7519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_explicitGenericInvocationSuffix7531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix7533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_explicitGenericInvocationSuffix7541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix7543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_selector7572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_selector7581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_super_key_in_selector7594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_selector7596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_new_key_in_selector7605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_innerCreator_in_selector7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_selector7619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_selector7621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_selector7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_superSuffix7643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_superSuffix7645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_arguments7688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E3824L});
    public static final BitSet FOLLOW_expressionList_in_arguments7690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_arguments7693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList7722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_expressionList7725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x001E000FA40E1824L});
    public static final BitSet FOLLOW_expression_in_expressionList7728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentOperator7769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentOperator7783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULT_ASSIGN_in_assignmentOperator7797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentOperator7811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentOperator7825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentOperator7839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentOperator7853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentOperator7867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_assignmentOperator7881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_assignmentOperator7897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_operator_key7945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_neg_operator_key7989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key8034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key8038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key8042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key8046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key8050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_effective_key8082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_date_effective_key8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_date_effective_key8090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_expires_key8122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_date_expires_key8126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_date_expires_key8130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_no_loop_key8162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_no_loop_key8166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_no_loop_key8170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key8202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_auto_focus_key8206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key8210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_activation_group_key8242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_activation_group_key8246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_activation_group_key8250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key8282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_agenda_group_key8286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key8290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key8322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_ruleflow_group_key8326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key8330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entry_point_key8362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_entry_point_key8366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_entry_point_key8370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_timer_key8399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_duration_key8426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_calendars_key8453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_package_key8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_key8507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_dialect_key8534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_salience_key8561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enabled_key8588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_attributes_key8615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_key8642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extend_key8669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_key8696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_declare_key8723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_key8750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_key8777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_eval_key8804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_not_key8831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_in_key8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_or_key8885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_and_key8912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_exists_key8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_forall_key8966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_action_key8993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_reverse_key9020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_result_key9047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_end_key9074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_init_key9121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_instanceof_key9148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extends_key9175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_implements_key9202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_super_key9229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_boolean_key9257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_char_key9285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_byte_key9313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_short_key9341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_int_key9369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_long_key9397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_float_key9425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_double_key9453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_this_key9481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_void_key9509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_key9537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_new_key9565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_final_key9594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_if_key9620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_else_key9646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_for_key9672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_while_key9698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_do_key9724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_key9750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_default_key9776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_try_key9802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_catch_key9828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_finally_key9854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_switch_key9880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synchronized_key9906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_return_key9932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throw_key9958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_break_key9984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_continue_key10010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_assert_key10035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_static_key10060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_modify_key10085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_public_key10111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protected_key10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_private_key10163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_abstract_key10189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_native_key10215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_transient_key10241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_volatile_key10267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_strictfp_key10293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throws_key10319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_key10345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enum_key10371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred1_DRL2201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_synpred1_DRL2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_key_in_synpred2_DRL2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred3_DRL2321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_and_key_in_synpred3_DRL2323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred4_DRL2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred5_DRL2537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_synpred5_DRL2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred5_DRL2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred6_DRL2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_synpred6_DRL2668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred6_DRL2670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_synpred7_DRL4419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred8_DRL5737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred9_DRL5748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred9_DRL5750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred10_DRL5771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred11_DRL5785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred12_DRL5797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred13_DRL6098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_synpred14_DRL6362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred15_DRL6466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred18_DRL6640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_synpred19_DRL6654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred20_DRL6662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred21_DRL6712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_primitiveType_in_synpred21_DRL6714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred22_DRL6735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_synpred22_DRL6737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_synpred23_DRL6800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_synpred24_DRL6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_synpred25_DRL6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_synpred26_DRL6824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_synpred27_DRL6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_synpred28_DRL6840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_synpred29_DRL6848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred30_DRL6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred31_DRL6890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred32_DRL6915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_synpred33_DRL6935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_synpred34_DRL6952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred35_DRL6969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_synpred36_DRL7000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_synpred37_DRL7015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred38_DRL7030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred39_DRL7037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_synpred39_DRL7039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred40_DRL7050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred42_DRL7221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred44_DRL7403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred44_DRL7405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred45_DRL7576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred46_DRL7570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_synpred46_DRL7572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_synpred46_DRL7581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred47_DRL7592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_super_key_in_synpred47_DRL7594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_synpred47_DRL7596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred48_DRL7603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_new_key_in_synpred48_DRL7605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred48_DRL7608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_innerCreator_in_synpred48_DRL7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred49_DRL7649 = new BitSet(new long[]{0x0000000000000002L});

}