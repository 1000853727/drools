// $ANTLR 3.2 Sep 23, 2009 12:02:23 /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g 2010-11-10 01:08:16

	package org.drools.lang;
	
	import java.util.List;
	import java.util.LinkedList;
	import org.drools.compiler.DroolsParserException;
	import org.drools.lang.ParserHelper;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class DRLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "VT_COMPILATION_UNIT", "VT_FUNCTION_IMPORT", "VT_FACT", "VT_CONSTRAINTS", "VT_LABEL", "VT_QUERY_ID", "VT_TYPE_DECLARE_ID", "VT_TYPE_NAME", "VT_RULE_ID", "VT_ENTRYPOINT_ID", "VT_RULE_ATTRIBUTES", "VT_PKG_ATTRIBUTES", "VT_RHS_CHUNK", "VT_CURLY_CHUNK", "VT_SQUARE_CHUNK", "VT_PAREN_CHUNK", "VT_BEHAVIOR", "VT_AND_IMPLICIT", "VT_AND_PREFIX", "VT_OR_PREFIX", "VT_AND_INFIX", "VT_OR_INFIX", "VT_ACCUMULATE_INIT_CLAUSE", "VT_ACCUMULATE_ID_CLAUSE", "VT_FROM_SOURCE", "VT_EXPRESSION_CHAIN", "VT_PATTERN", "VT_FACT_BINDING", "VT_FACT_OR", "VT_BIND_FIELD", "VT_FIELD", "VT_ACCESSOR_PATH", "VT_ACCESSOR_ELEMENT", "VT_DATA_TYPE", "VT_PATTERN_TYPE", "VT_PACKAGE_ID", "VT_IMPORT_ID", "VT_GLOBAL_ID", "VT_FUNCTION_ID", "VT_PARAM_LIST", "VK_DATE_EFFECTIVE", "VK_DATE_EXPIRES", "VK_LOCK_ON_ACTIVE", "VK_NO_LOOP", "VK_AUTO_FOCUS", "VK_ACTIVATION_GROUP", "VK_AGENDA_GROUP", "VK_RULEFLOW_GROUP", "VK_TIMER", "VK_CALENDARS", "VK_DIALECT", "VK_SALIENCE", "VK_ENABLED", "VK_ATTRIBUTES", "VK_RULE", "VK_EXTEND", "VK_IMPLEMENTS", "VK_IMPORT", "VK_PACKAGE", "VK_QUERY", "VK_DECLARE", "VK_FUNCTION", "VK_GLOBAL", "VK_EVAL", "VK_ENTRY_POINT", "VK_NOT", "VK_IN", "VK_OR", "VK_AND", "VK_EXISTS", "VK_FORALL", "VK_ACTION", "VK_REVERSE", "VK_RESULT", "VK_OPERATOR", "VK_END", "VK_INIT", "VK_INSTANCEOF", "VK_EXTENDS", "VK_SUPER", "VK_PRIMITIVE_TYPE", "VK_THIS", "VK_VOID", "VK_CLASS", "VK_NEW", "VK_FINAL", "VK_IF", "VK_ELSE", "VK_FOR", "VK_WHILE", "VK_DO", "VK_CASE", "VK_DEFAULT", "VK_TRY", "VK_CATCH", "VK_FINALLY", "VK_SWITCH", "VK_SYNCHRONIZED", "VK_RETURN", "VK_THROW", "VK_BREAK", "VK_CONTINUE", "VK_ASSERT", "VK_MODIFY", "VK_STATIC", "VK_PUBLIC", "VK_PROTECTED", "VK_PRIVATE", "VK_ABSTRACT", "VK_NATIVE", "VK_TRANSIENT", "VK_VOLATILE", "VK_STRICTFP", "VK_THROWS", "VK_INTERFACE", "VK_ENUM", "SIGNED_DECIMAL", "SIGNED_HEX", "SIGNED_FLOAT", "VT_PROP_KEY", "VT_PROP_VALUE", "SEMICOLON", "ID", "DOT", "DOT_STAR", "STRING", "COLON", "EQUALS_ASSIGN", "WHEN", "COMMA", "BOOL", "LEFT_PAREN", "RIGHT_PAREN", "FROM", "OVER", "TimePeriod", "DECIMAL", "ACCUMULATE", "COLLECT", "DOUBLE_PIPE", "DOUBLE_AMPER", "ARROW", "EQUALS", "GREATER", "GREATER_EQUALS", "LESS", "LESS_EQUALS", "NOT_EQUALS", "LEFT_SQUARE", "RIGHT_SQUARE", "NULL", "PLUS", "MINUS", "HEX", "FLOAT", "THEN", "LEFT_CURLY", "RIGHT_CURLY", "QUESTION", "PIPE", "XOR", "AMPER", "SHIFT_LEFT", "SHIFT_RIGHT_UNSIG", "SHIFT_RIGHT", "STAR", "DIV", "MOD", "INCR", "DECR", "TILDE", "NEGATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "AT", "EOL", "WS", "Exponent", "FloatTypeSuffix", "HexDigit", "IntegerTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "SH_STYLE_SINGLE_LINE_COMMENT", "C_STYLE_SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "IdentifierStart", "IdentifierPart", "MISC"
    };
    public static final int VT_ACCESSOR_ELEMENT=36;
    public static final int VK_CASE=95;
    public static final int ACCUMULATE=141;
    public static final int VK_TRY=97;
    public static final int VT_DATA_TYPE=37;
    public static final int STAR=169;
    public static final int MOD=171;
    public static final int VK_OPERATOR=78;
    public static final int VK_FUNCTION=65;
    public static final int VK_GLOBAL=66;
    public static final int SH_STYLE_SINGLE_LINE_COMMENT=194;
    public static final int VK_SALIENCE=55;
    public static final int EOF=-1;
    public static final int EOL=185;
    public static final int VK_MODIFY=107;
    public static final int VK_CLASS=87;
    public static final int VK_ACTION=75;
    public static final int TimePeriod=139;
    public static final int VK_INTERFACE=118;
    public static final int SIGNED_FLOAT=122;
    public static final int VK_FINAL=89;
    public static final int VK_OR=71;
    public static final int IntegerTypeSuffix=190;
    public static final int VK_NEW=88;
    public static final int MINUS_ASSIGN=177;
    public static final int BOOL=134;
    public static final int SEMICOLON=125;
    public static final int VT_FUNCTION_ID=42;
    public static final int SHIFT_RIGHT_UNSIG=167;
    public static final int VK_RULEFLOW_GROUP=51;
    public static final int VK_RESULT=77;
    public static final int VT_LABEL=8;
    public static final int WS=186;
    public static final int VK_NO_LOOP=47;
    public static final int VK_STRICTFP=116;
    public static final int VT_FACT=6;
    public static final int LEFT_CURLY=160;
    public static final int VT_TYPE_NAME=11;
    public static final int LEFT_PAREN=135;
    public static final int VK_ASSERT=106;
    public static final int VT_RULE_ID=12;
    public static final int VK_ACTIVATION_GROUP=49;
    public static final int C_STYLE_SINGLE_LINE_COMMENT=195;
    public static final int VK_VOID=86;
    public static final int VK_DEFAULT=96;
    public static final int VK_EXTEND=59;
    public static final int VT_FACT_OR=32;
    public static final int FLOAT=158;
    public static final int VT_ACCUMULATE_ID_CLAUSE=27;
    public static final int HexDigit=189;
    public static final int NOT_EQUALS=151;
    public static final int VK_EVAL=67;
    public static final int DOUBLE_PIPE=143;
    public static final int AT=184;
    public static final int RIGHT_PAREN=136;
    public static final int VT_COMPILATION_UNIT=4;
    public static final int THEN=159;
    public static final int VT_EXPRESSION_CHAIN=29;
    public static final int GREATER_EQUALS=148;
    public static final int XOR_ASSIGN=182;
    public static final int VK_ABSTRACT=112;
    public static final int PLUS=155;
    public static final int PIPE=163;
    public static final int VK_DIALECT=54;
    public static final int VT_GLOBAL_ID=41;
    public static final int VK_NOT=69;
    public static final int VT_FROM_SOURCE=28;
    public static final int VK_DECLARE=64;
    public static final int VT_ENTRYPOINT_ID=13;
    public static final int VK_ENUM=119;
    public static final int VK_INSTANCEOF=81;
    public static final int VT_TYPE_DECLARE_ID=10;
    public static final int VK_REVERSE=76;
    public static final int VK_LOCK_ON_ACTIVE=46;
    public static final int VK_PUBLIC=109;
    public static final int SIGNED_HEX=121;
    public static final int VK_THIS=85;
    public static final int VT_RULE_ATTRIBUTES=14;
    public static final int VK_SYNCHRONIZED=101;
    public static final int MINUS=156;
    public static final int VT_ACCESSOR_PATH=35;
    public static final int MULTI_LINE_COMMENT=196;
    public static final int COLON=130;
    public static final int OR_ASSIGN=181;
    public static final int VT_AND_IMPLICIT=21;
    public static final int VK_THROW=103;
    public static final int NEGATION=175;
    public static final int DECIMAL=140;
    public static final int VK_ATTRIBUTES=57;
    public static final int WHEN=132;
    public static final int PLUS_ASSIGN=176;
    public static final int VT_PARAM_LIST=43;
    public static final int ARROW=145;
    public static final int VT_BIND_FIELD=33;
    public static final int DIV=170;
    public static final int VK_AGENDA_GROUP=50;
    public static final int VT_CONSTRAINTS=7;
    public static final int OctalEscape=193;
    public static final int VK_NATIVE=113;
    public static final int STRING=129;
    public static final int VK_THROWS=117;
    public static final int FloatTypeSuffix=188;
    public static final int EQUALS_ASSIGN=131;
    public static final int VK_VOLATILE=115;
    public static final int DOT_STAR=128;
    public static final int MOD_ASSIGN=183;
    public static final int VK_AND=72;
    public static final int VT_PROP_VALUE=124;
    public static final int EQUALS=146;
    public static final int VK_AUTO_FOCUS=48;
    public static final int VK_CONTINUE=105;
    public static final int DIV_ASSIGN=179;
    public static final int VT_PATTERN_TYPE=38;
    public static final int VT_FUNCTION_IMPORT=5;
    public static final int VT_OR_INFIX=25;
    public static final int DOUBLE_AMPER=144;
    public static final int GREATER=147;
    public static final int VK_IMPORT=61;
    public static final int INCR=172;
    public static final int VK_RULE=58;
    public static final int LESS=149;
    public static final int VT_AND_PREFIX=22;
    public static final int VK_SWITCH=100;
    public static final int VK_BREAK=104;
    public static final int NULL=154;
    public static final int VK_RETURN=102;
    public static final int IdentifierStart=197;
    public static final int VK_PRIMITIVE_TYPE=84;
    public static final int VK_QUERY=63;
    public static final int VT_RHS_CHUNK=16;
    public static final int VT_FACT_BINDING=31;
    public static final int VK_ENTRY_POINT=68;
    public static final int SHIFT_LEFT=166;
    public static final int VT_PACKAGE_ID=39;
    public static final int VK_IMPLEMENTS=60;
    public static final int SHIFT_RIGHT=168;
    public static final int VK_CALENDARS=53;
    public static final int VK_IF=90;
    public static final int VK_STATIC=108;
    public static final int VK_CATCH=98;
    public static final int VK_IN=70;
    public static final int VT_PATTERN=30;
    public static final int SIGNED_DECIMAL=120;
    public static final int VT_IMPORT_ID=40;
    public static final int MISC=199;
    public static final int VK_PRIVATE=111;
    public static final int FROM=137;
    public static final int COLLECT=142;
    public static final int EscapeSequence=191;
    public static final int VK_ENABLED=56;
    public static final int VK_WHILE=93;
    public static final int VK_END=79;
    public static final int VK_PACKAGE=62;
    public static final int OVER=138;
    public static final int RIGHT_SQUARE=153;
    public static final int RIGHT_CURLY=161;
    public static final int VK_ELSE=91;
    public static final int VK_FOR=92;
    public static final int VK_PROTECTED=110;
    public static final int VT_PROP_KEY=123;
    public static final int MULT_ASSIGN=178;
    public static final int VT_FIELD=34;
    public static final int VK_FINALLY=99;
    public static final int Exponent=187;
    public static final int VK_SUPER=83;
    public static final int VK_EXISTS=73;
    public static final int VK_DATE_EXPIRES=45;
    public static final int ID=126;
    public static final int AND_ASSIGN=180;
    public static final int VK_TIMER=52;
    public static final int VT_PKG_ATTRIBUTES=15;
    public static final int VT_OR_PREFIX=23;
    public static final int LESS_EQUALS=150;
    public static final int VK_TRANSIENT=114;
    public static final int COMMA=133;
    public static final int HEX=157;
    public static final int AMPER=165;
    public static final int TILDE=174;
    public static final int VT_BEHAVIOR=20;
    public static final int VT_QUERY_ID=9;
    public static final int DOT=127;
    public static final int IdentifierPart=198;
    public static final int VT_PAREN_CHUNK=19;
    public static final int XOR=164;
    public static final int VK_EXTENDS=82;
    public static final int VT_AND_INFIX=24;
    public static final int VK_FORALL=74;
    public static final int VK_DO=94;
    public static final int VT_ACCUMULATE_INIT_CLAUSE=26;
    public static final int VT_CURLY_CHUNK=17;
    public static final int QUESTION=162;
    public static final int UnicodeEscape=192;
    public static final int VT_SQUARE_CHUNK=18;
    public static final int VK_DATE_EFFECTIVE=44;
    public static final int DECR=173;
    public static final int LEFT_SQUARE=152;
    public static final int VK_INIT=80;

    // delegates
    // delegators


        public DRLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public DRLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[395+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return DRLParser.tokenNames; }
    public String getGrammarFileName() { return "/home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g"; }


        private ParserHelper helper = new ParserHelper( this,
                                                        tokenNames,
                                                        input,
                                                        state );
                                                        
        public ParserHelper getHelper()                           { return helper; }
        public boolean hasErrors()                                { return helper.hasErrors(); }
        public List<DroolsParserException> getErrors()            { return helper.getErrors(); }
        public List<String> getErrorMessages()                    { return helper.getErrorMessages(); }
        public void enableEditorInterface()                       {        helper.enableEditorInterface(); }
        public void disableEditorInterface()                      {        helper.disableEditorInterface(); }
        public LinkedList<DroolsSentence> getEditorInterface()    { return helper.getEditorInterface(); }
        public void reportError(RecognitionException ex)          {        helper.reportError( ex ); }
        /** Overrided this method to not output mesages */
        public void emitErrorMessage(String msg)                  {}



    public static class compilation_unit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilation_unit"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:216:1: compilation_unit : ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) ;
    public final DRLParser.compilation_unit_return compilation_unit() throws RecognitionException {
        DRLParser.compilation_unit_return retval = new DRLParser.compilation_unit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF5=null;
        DRLParser.package_statement_return package_statement1 = null;

        DRLParser.resync_return resync2 = null;

        DRLParser.statement_return statement3 = null;

        DRLParser.resync_return resync4 = null;


        Object EOF5_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_package_statement=new RewriteRuleSubtreeStream(adaptor,"rule package_statement");
        RewriteRuleSubtreeStream stream_resync=new RewriteRuleSubtreeStream(adaptor,"rule resync");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:217:2: ( ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:217:4: ( package_statement )? resync ( statement resync )* EOF
            {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:217:4: ( package_statement )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:217:4: package_statement
                    {
                    pushFollow(FOLLOW_package_statement_in_compilation_unit630);
                    package_statement1=package_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_statement.add(package_statement1.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_resync_in_compilation_unit649);
            resync2=resync();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resync.add(resync2.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:219:3: ( statement resync )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:219:5: statement resync
            	    {
            	    pushFollow(FOLLOW_statement_in_compilation_unit656);
            	    statement3=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement3.getTree());
            	    pushFollow(FOLLOW_resync_in_compilation_unit658);
            	    resync4=resync();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_resync.add(resync4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            EOF5=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF5);



            // AST REWRITE
            // elements: statement, package_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 221:3: -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:221:6: ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:221:28: ( package_statement )?
                if ( stream_package_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_package_statement.nextTree());

                }
                stream_package_statement.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:221:47: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException e ) {

            		helper.reportError( e );
            	
        }
        catch ( RewriteEmptyStreamException e ) {

            	
        }
        finally {

            	if (helper.isEditorInterfaceEnabled && retval.tree == null) {
            		retval.tree = root_0;
            		root_0 = (Object) adaptor.nil();
            		Object root_1 = (Object) adaptor.nil();
            		root_1 = (Object) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);
            		if (stream_package_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_package_statement.nextTree());
            		}
            		while (stream_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_statement.nextTree());
            		}
            		adaptor.addChild(root_0, root_1);
            		retval.stop = input.LT(-1);
            		retval.tree = (Object) adaptor.rulePostProcessing(root_0);
            		adaptor.setTokenBoundaries(retval.tree, retval.start,
            				retval.stop);
            	}
            	if (helper.isEditorInterfaceEnabled && helper.hasErrors()) {
            		Tree rootNode = (Tree) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), adaptor.nil());
            		for (int i = 0; i < ((Tree)retval.tree).getChildCount(); i++) {
            			Tree childNode = (Tree) ((Tree)retval.tree).getChild(i);
            			if (!(childNode instanceof CommonErrorNode)) {
            				rootNode.addChild(childNode);
            			}
            		}
            		retval.tree = rootNode; 
            	}

        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public static class resync_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resync"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:264:1: resync : ;
    public final DRLParser.resync_return resync() throws RecognitionException {
        DRLParser.resync_return retval = new DRLParser.resync_return();
        retval.start = input.LT(1);

        Object root_0 = null;


            // Consume any garbled tokens that come before the next statement
            // or the end of the block. The only slight risk here is that the
            // block becomes MORE inclusive than it should but as the script is
            // in error, this is a better course than throwing out the block
            // when the error occurs and screwing up the whole meaning of
            // the rest of the token stream.
            //
            helper.syncToSet();
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:275:5: ()
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:277:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "resync"

    public static class package_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:282:1: package_statement : package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) ;
    public final DRLParser.package_statement_return package_statement() throws RecognitionException {
        DRLParser.package_statement_return retval = new DRLParser.package_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON8=null;
        DRLParser.package_key_return package_key6 = null;

        DRLParser.packageOrTypeName_return packageOrTypeName7 = null;


        Object SEMICOLON8_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_packageOrTypeName=new RewriteRuleSubtreeStream(adaptor,"rule packageOrTypeName");
         helper.pushParaphrases(DroolsParaphraseTypes.PACKAGE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.PACKAGE); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:285:2: ( package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:285:4: package_key packageOrTypeName ( SEMICOLON )?
            {
            pushFollow(FOLLOW_package_key_in_package_statement759);
            package_key6=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key6.getTree());
            pushFollow(FOLLOW_packageOrTypeName_in_package_statement763);
            packageOrTypeName7=packageOrTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_packageOrTypeName.add(packageOrTypeName7.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:286:21: ( SEMICOLON )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SEMICOLON) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:286:21: SEMICOLON
                    {
                    SEMICOLON8=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_statement765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON8);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON8, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: package_key, packageOrTypeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:3: -> ^( package_key packageOrTypeName )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:288:6: ^( package_key packageOrTypeName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_package_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_packageOrTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_statement"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:296:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );
    public final DRLParser.statement_return statement() throws RecognitionException {
        DRLParser.statement_return retval = new DRLParser.statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_attribute_return rule_attribute9 = null;

        DRLParser.function_import_statement_return function_import_statement10 = null;

        DRLParser.import_statement_return import_statement11 = null;

        DRLParser.global_return global12 = null;

        DRLParser.function_return function13 = null;

        DRLParser.type_declaration_return type_declaration14 = null;

        DRLParser.rule_return rule15 = null;

        DRLParser.query_return query16 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:299:3: ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query )
            int alt4=8;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:299:5: rule_attribute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_attribute_in_statement805);
                    rule_attribute9=rule_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule_attribute9.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:300:4: function_import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_import_statement_in_statement810);
                    function_import_statement10=function_import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_import_statement10.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:301:10: import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_import_statement_in_statement823);
                    import_statement11=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement11.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:302:4: global
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_global_in_statement829);
                    global12=global();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global12.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:303:4: function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_in_statement835);
                    function13=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function13.getTree());

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:304:4: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_statement840);
                    type_declaration14=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration14.getTree());

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:305:4: rule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_in_statement845);
                    rule15=rule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule15.getTree());

                    }
                    break;
                case 8 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:306:4: query
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_query_in_statement850);
                    query16=query();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query16.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:312:1: import_statement : import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) ;
    public final DRLParser.import_statement_return import_statement() throws RecognitionException {
        DRLParser.import_statement_return retval = new DRLParser.import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON19=null;
        DRLParser.import_key_return import_key17 = null;

        DRLParser.import_name_return import_name18 = null;


        Object SEMICOLON19_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.IMPORT_STATEMENT);  
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:315:2: ( import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:315:4: import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )?
            {
            pushFollow(FOLLOW_import_key_in_import_statement876);
            import_key17=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(import_key17.getTree());
            pushFollow(FOLLOW_import_name_in_import_statement878);
            import_name18=import_name(DroolsParaphraseTypes.IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name18.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:315:57: ( SEMICOLON )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==SEMICOLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:315:57: SEMICOLON
                    {
                    SEMICOLON19=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_import_statement881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON19);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON19, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_name, import_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:3: -> ^( import_key import_name )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:317:6: ^( import_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_import_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_statement"

    public static class function_import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_import_statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:320:1: function_import_statement : {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) ;
    public final DRLParser.function_import_statement_return function_import_statement() throws RecognitionException {
        DRLParser.function_import_statement_return retval = new DRLParser.function_import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON22=null;
        DRLParser.import_key_return imp = null;

        DRLParser.function_key_return function_key20 = null;

        DRLParser.import_name_return import_name21 = null;


        Object SEMICOLON22_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION_IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION_IMPORT_STATEMENT); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:323:2: ({...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:323:4: {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )?
            {
            if ( !((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_import_statement", "helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION)");
            }
            pushFollow(FOLLOW_import_key_in_function_import_statement921);
            imp=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(imp.getTree());
            pushFollow(FOLLOW_function_key_in_function_import_statement923);
            function_key20=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key20.getTree());
            pushFollow(FOLLOW_import_name_in_function_import_statement935);
            import_name21=import_name(DroolsParaphraseTypes.FUNCTION_IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name21.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:324:61: ( SEMICOLON )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==SEMICOLON) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:324:61: SEMICOLON
                    {
                    SEMICOLON22=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_import_statement938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON22);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON22, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_name, function_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:3: -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:326:6: ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FUNCTION_IMPORT, (imp!=null?((Token)imp.start):null)), root_1);

                adaptor.addChild(root_1, stream_function_key.nextTree());
                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_import_statement"

    public static class import_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_name"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:329:1: import_name[DroolsParaphraseTypes importType] : id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) ;
    public final DRLParser.import_name_return import_name(DroolsParaphraseTypes importType) throws RecognitionException {
        DRLParser.import_name_return retval = new DRLParser.import_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_DOT_STAR=new RewriteRuleTokenStream(adaptor,"token DOT_STAR");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:330:2: (id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:330:4: id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )?
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_import_name972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:330:11: (id+= DOT id+= ID )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DOT) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:330:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_import_name978); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_import_name982); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:330:33: (id+= DOT_STAR )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DOT_STAR) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:330:33: id+= DOT_STAR
                    {
                    id=(Token)match(input,DOT_STAR,FOLLOW_DOT_STAR_in_import_name989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT_STAR.add(id);

                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(importType, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: ID, DOT_STAR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:3: -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:333:6: ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_IMPORT_ID, "VT_IMPORT_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:333:25: ( DOT_STAR )?
                if ( stream_DOT_STAR.hasNext() ) {
                    adaptor.addChild(root_1, stream_DOT_STAR.nextNode());

                }
                stream_DOT_STAR.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_name"

    public static class global_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:339:1: global : global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) ;
    public final DRLParser.global_return global() throws RecognitionException {
        DRLParser.global_return retval = new DRLParser.global_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON26=null;
        DRLParser.global_key_return global_key23 = null;

        DRLParser.data_type_return data_type24 = null;

        DRLParser.global_id_return global_id25 = null;


        Object SEMICOLON26_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_global_key=new RewriteRuleSubtreeStream(adaptor,"rule global_key");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_global_id=new RewriteRuleSubtreeStream(adaptor,"rule global_id");
         helper.pushParaphrases(DroolsParaphraseTypes.GLOBAL);  if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.GLOBAL); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:342:2: ( global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:342:4: global_key data_type global_id ( SEMICOLON )?
            {
            pushFollow(FOLLOW_global_key_in_global1032);
            global_key23=global_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_key.add(global_key23.getTree());
            pushFollow(FOLLOW_data_type_in_global1034);
            data_type24=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type24.getTree());
            pushFollow(FOLLOW_global_id_in_global1036);
            global_id25=global_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_id.add(global_id25.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:342:35: ( SEMICOLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMICOLON) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:342:35: SEMICOLON
                    {
                    SEMICOLON26=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_global1038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON26, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: data_type, global_id, global_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:3: -> ^( global_key data_type global_id )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:344:6: ^( global_key data_type global_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_global_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_data_type.nextTree());
                adaptor.addChild(root_1, stream_global_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global"

    public static class global_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_id"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:347:1: global_id : id= ID -> VT_GLOBAL_ID[$id] ;
    public final DRLParser.global_id_return global_id() throws RecognitionException {
        DRLParser.global_id_return retval = new DRLParser.global_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:348:2: (id= ID -> VT_GLOBAL_ID[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:348:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_global_id1067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.GLOBAL, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:3: -> VT_GLOBAL_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_GLOBAL_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_id"

    public static class function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:357:1: function : function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) ;
    public final DRLParser.function_return function() throws RecognitionException {
        DRLParser.function_return retval = new DRLParser.function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.function_key_return function_key27 = null;

        DRLParser.data_type_return data_type28 = null;

        DRLParser.function_id_return function_id29 = null;

        DRLParser.parameters_return parameters30 = null;

        DRLParser.curly_chunk_return curly_chunk31 = null;


        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_curly_chunk=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION);  
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:360:2: ( function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:360:4: function_key ( data_type )? function_id parameters curly_chunk
            {
            pushFollow(FOLLOW_function_key_in_function1102);
            function_key27=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key27.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:360:17: ( data_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID) ) {
                int LA10_1 = input.LA(2);

                if ( ((LA10_1>=ID && LA10_1<=DOT)||LA10_1==LEFT_SQUARE) ) {
                    alt10=1;
                }
            }
            switch (alt10) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:360:17: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_function1104);
                    data_type28=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_data_type.add(data_type28.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_id_in_function1107);
            function_id29=function_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_id.add(function_id29.getTree());
            pushFollow(FOLLOW_parameters_in_function1109);
            parameters30=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters.add(parameters30.getTree());
            pushFollow(FOLLOW_curly_chunk_in_function1111);
            curly_chunk31=curly_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk.add(curly_chunk31.getTree());


            // AST REWRITE
            // elements: parameters, data_type, function_id, curly_chunk, function_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:3: -> ^( function_key ( data_type )? function_id parameters curly_chunk )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:361:6: ^( function_key ( data_type )? function_id parameters curly_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_function_key.nextNode(), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:361:21: ( data_type )?
                if ( stream_data_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_data_type.nextTree());

                }
                stream_data_type.reset();
                adaptor.addChild(root_1, stream_function_id.nextTree());
                adaptor.addChild(root_1, stream_parameters.nextTree());
                adaptor.addChild(root_1, stream_curly_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function"

    public static class function_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_id"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:364:1: function_id : id= ID -> VT_FUNCTION_ID[$id] ;
    public final DRLParser.function_id_return function_id() throws RecognitionException {
        DRLParser.function_id_return retval = new DRLParser.function_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:365:2: (id= ID -> VT_FUNCTION_ID[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:365:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_function_id1141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.FUNCTION, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:3: -> VT_FUNCTION_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FUNCTION_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_id"

    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:374:1: query : query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) ;
    public final DRLParser.query_return query() throws RecognitionException {
        DRLParser.query_return retval = new DRLParser.query_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON36=null;
        DRLParser.end_key_return end = null;

        DRLParser.query_key_return query_key32 = null;

        DRLParser.query_id_return query_id33 = null;

        DRLParser.parameters_return parameters34 = null;

        DRLParser.normal_lhs_block_return normal_lhs_block35 = null;


        Object SEMICOLON36_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_query_key=new RewriteRuleSubtreeStream(adaptor,"rule query_key");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_query_id=new RewriteRuleSubtreeStream(adaptor,"rule query_id");
         helper.pushParaphrases(DroolsParaphraseTypes.QUERY); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.QUERY); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:377:2: ( query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:377:4: query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )?
            {
            pushFollow(FOLLOW_query_key_in_query1176);
            query_key32=query_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_key.add(query_key32.getTree());
            pushFollow(FOLLOW_query_id_in_query1178);
            query_id33=query_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_id.add(query_id33.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:379:3: ( parameters )?
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:379:3: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_query1186);
                    parameters34=parameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameters.add(parameters34.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_query1195);
            normal_lhs_block35=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block35.getTree());
            pushFollow(FOLLOW_end_key_in_query1202);
            end=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:382:15: ( SEMICOLON )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==SEMICOLON) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:382:15: SEMICOLON
                    {
                    SEMICOLON36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_query1204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON36);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON36, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: query_key, end_key, parameters, query_id, normal_lhs_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:3: -> ^( query_key query_id ( parameters )? normal_lhs_block end_key )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:384:6: ^( query_key query_id ( parameters )? normal_lhs_block end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_query_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_query_id.nextTree());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:384:27: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();
                adaptor.addChild(root_1, stream_normal_lhs_block.nextTree());
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query"

    public static class query_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_id"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:387:1: query_id : (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] );
    public final DRLParser.query_id_return query_id() throws RecognitionException {
        DRLParser.query_id_return retval = new DRLParser.query_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:388:2: (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ID) ) {
                alt13=1;
            }
            else if ( (LA13_0==STRING) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:388:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_query_id1239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 390:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:391:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_query_id1255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 393:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_id"

    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:399:1: type_declaration : declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* ( decl_method )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) ;
    public final DRLParser.type_declaration_return type_declaration() throws RecognitionException {
        DRLParser.type_declaration_return retval = new DRLParser.type_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.declare_key_return declare_key37 = null;

        DRLParser.type_declare_id_return type_declare_id38 = null;

        DRLParser.type_decl_extends_return type_decl_extends39 = null;

        DRLParser.type_decl_implements_return type_decl_implements40 = null;

        DRLParser.decl_metadata_return decl_metadata41 = null;

        DRLParser.decl_field_return decl_field42 = null;

        DRLParser.decl_method_return decl_method43 = null;

        DRLParser.end_key_return end_key44 = null;


        RewriteRuleSubtreeStream stream_decl_field=new RewriteRuleSubtreeStream(adaptor,"rule decl_field");
        RewriteRuleSubtreeStream stream_type_declare_id=new RewriteRuleSubtreeStream(adaptor,"rule type_declare_id");
        RewriteRuleSubtreeStream stream_type_decl_extends=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_extends");
        RewriteRuleSubtreeStream stream_decl_method=new RewriteRuleSubtreeStream(adaptor,"rule decl_method");
        RewriteRuleSubtreeStream stream_type_decl_implements=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_implements");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
         helper.pushParaphrases(DroolsParaphraseTypes.TYPE_DECLARE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.TYPE_DECLARATION); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:402:2: ( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* ( decl_method )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:402:4: declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* ( decl_method )* end_key
            {
            pushFollow(FOLLOW_declare_key_in_type_declaration1288);
            declare_key37=declare_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declare_key.add(declare_key37.getTree());
            pushFollow(FOLLOW_type_declare_id_in_type_declaration1291);
            type_declare_id38=type_declare_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declare_id.add(type_declare_id38.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:402:33: ( type_decl_extends )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==ID) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==ID) ) {
                    int LA14_4 = input.LA(3);

                    if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                        alt14=1;
                    }
                }
            }
            switch (alt14) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:402:33: type_decl_extends
                    {
                    pushFollow(FOLLOW_type_decl_extends_in_type_declaration1293);
                    type_decl_extends39=type_decl_extends();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_extends.add(type_decl_extends39.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:402:52: ( type_decl_implements )?
            int alt15=2;
            alt15 = dfa15.predict(input);
            switch (alt15) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:402:52: type_decl_implements
                    {
                    pushFollow(FOLLOW_type_decl_implements_in_type_declaration1296);
                    type_decl_implements40=type_decl_implements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_implements.add(type_decl_implements40.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:403:3: ( decl_metadata )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==AT) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:403:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_type_declaration1301);
            	    decl_metadata41=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata41.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:404:3: ( decl_field )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==ID) ) {
                    int LA17_1 = input.LA(2);

                    if ( ((LA17_1>=COLON && LA17_1<=EQUALS_ASSIGN)) ) {
                        alt17=1;
                    }


                }


                switch (alt17) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:404:3: decl_field
            	    {
            	    pushFollow(FOLLOW_decl_field_in_type_declaration1306);
            	    decl_field42=decl_field();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_field.add(decl_field42.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:405:3: ( decl_method )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==ID) ) {
                    int LA18_1 = input.LA(2);

                    if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) ) {
                        alt18=1;
                    }


                }


                switch (alt18) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:405:3: decl_method
            	    {
            	    pushFollow(FOLLOW_decl_method_in_type_declaration1311);
            	    decl_method43=decl_method();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_method.add(decl_method43.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_type_declaration1316);
            end_key44=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key44.getTree());


            // AST REWRITE
            // elements: decl_metadata, decl_field, declare_key, type_declare_id, type_decl_implements, type_decl_extends, end_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:3: -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:407:6: ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_declare_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_type_declare_id.nextTree());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:407:36: ( type_decl_extends )?
                if ( stream_type_decl_extends.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_extends.nextTree());

                }
                stream_type_decl_extends.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:407:55: ( type_decl_implements )?
                if ( stream_type_decl_implements.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_implements.nextTree());

                }
                stream_type_decl_implements.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:407:77: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:407:92: ( decl_field )*
                while ( stream_decl_field.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field.nextTree());

                }
                stream_decl_field.reset();
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_declare_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declare_id"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:410:1: type_declare_id : id= ID -> VT_TYPE_DECLARE_ID[$id] ;
    public final DRLParser.type_declare_id_return type_declare_id() throws RecognitionException {
        DRLParser.type_declare_id_return retval = new DRLParser.type_declare_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:411:2: (id= ID -> VT_TYPE_DECLARE_ID[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:411:5: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_type_declare_id1354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.TYPE_DECLARE, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:79: -> VT_TYPE_DECLARE_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_DECLARE_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declare_id"

    public static class type_decl_extends_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_extends"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:418:1: type_decl_extends : extends_key typeName ;
    public final DRLParser.type_decl_extends_return type_decl_extends() throws RecognitionException {
        DRLParser.type_decl_extends_return retval = new DRLParser.type_decl_extends_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.extends_key_return extends_key45 = null;

        DRLParser.typeName_return typeName46 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:419:2: ( extends_key typeName )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:419:4: extends_key typeName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_extends_key_in_type_decl_extends1377);
            extends_key45=extends_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(extends_key45.getTree(), root_0);
            pushFollow(FOLLOW_typeName_in_type_decl_extends1380);
            typeName46=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName46.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_extends"

    public static class type_decl_implements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_implements"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:422:1: type_decl_implements : implements_key typeNameList ;
    public final DRLParser.type_decl_implements_return type_decl_implements() throws RecognitionException {
        DRLParser.type_decl_implements_return retval = new DRLParser.type_decl_implements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.implements_key_return implements_key47 = null;

        DRLParser.typeNameList_return typeNameList48 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:423:2: ( implements_key typeNameList )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:423:4: implements_key typeNameList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_implements_key_in_type_decl_implements1392);
            implements_key47=implements_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(implements_key47.getTree(), root_0);
            pushFollow(FOLLOW_typeNameList_in_type_decl_implements1395);
            typeNameList48=typeNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList48.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_implements"

    public static class decl_metadata_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_metadata"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:430:1: decl_metadata : annotation ;
    public final DRLParser.decl_metadata_return decl_metadata() throws RecognitionException {
        DRLParser.decl_metadata_return retval = new DRLParser.decl_metadata_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotation_return annotation49 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:431:2: ( annotation )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:431:4: annotation
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_annotation_in_decl_metadata1410);
            annotation49=annotation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation49.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_metadata"

    public static class decl_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:443:1: decl_field : ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) ;
    public final DRLParser.decl_field_return decl_field() throws RecognitionException {
        DRLParser.decl_field_return retval = new DRLParser.decl_field_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID50=null;
        Token COLON52=null;
        DRLParser.decl_field_initialization_return decl_field_initialization51 = null;

        DRLParser.data_type_return data_type53 = null;

        DRLParser.decl_metadata_return decl_metadata54 = null;


        Object ID50_tree=null;
        Object COLON52_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_decl_field_initialization=new RewriteRuleSubtreeStream(adaptor,"rule decl_field_initialization");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:444:2: ( ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:444:4: ID ( decl_field_initialization )? COLON data_type ( decl_metadata )*
            {
            ID50=(Token)match(input,ID,FOLLOW_ID_in_decl_field1430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID50);

            if ( state.backtracking==0 ) {
              	helper.emit(ID50, DroolsEditorType.IDENTIFIER);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:445:3: ( decl_field_initialization )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==EQUALS_ASSIGN) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:445:3: decl_field_initialization
                    {
                    pushFollow(FOLLOW_decl_field_initialization_in_decl_field1436);
                    decl_field_initialization51=decl_field_initialization();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decl_field_initialization.add(decl_field_initialization51.getTree());

                    }
                    break;

            }

            COLON52=(Token)match(input,COLON,FOLLOW_COLON_in_decl_field1442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON52);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON52, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_data_type_in_decl_field1448);
            data_type53=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type53.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:448:3: ( decl_metadata )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==AT) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:448:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_decl_field1452);
            	    decl_metadata54=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata54.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);



            // AST REWRITE
            // elements: ID, decl_metadata, decl_field_initialization, data_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:3: -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:449:6: ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ID.nextNode(), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:449:11: ( decl_field_initialization )?
                if ( stream_decl_field_initialization.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field_initialization.nextTree());

                }
                stream_decl_field_initialization.reset();
                adaptor.addChild(root_1, stream_data_type.nextTree());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:449:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field"

    public static class decl_field_initialization_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field_initialization"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:452:1: decl_field_initialization : EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) ;
    public final DRLParser.decl_field_initialization_return decl_field_initialization() throws RecognitionException {
        DRLParser.decl_field_initialization_return retval = new DRLParser.decl_field_initialization_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN55=null;
        DRLParser.paren_chunk_return paren_chunk56 = null;


        Object EQUALS_ASSIGN55_tree=null;
        RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:453:2: ( EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:453:4: EQUALS_ASSIGN paren_chunk
            {
            EQUALS_ASSIGN55=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN55);

            if ( state.backtracking==0 ) {
              	helper.emit(EQUALS_ASSIGN55, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_decl_field_initialization1486);
            paren_chunk56=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk56.getTree());


            // AST REWRITE
            // elements: paren_chunk, EQUALS_ASSIGN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:2: -> ^( EQUALS_ASSIGN paren_chunk )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:455:5: ^( EQUALS_ASSIGN paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_EQUALS_ASSIGN.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field_initialization"

    public static class decl_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_method"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:458:1: decl_method options {backtrack=true; memoize=true; } : ( methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest );
    public final DRLParser.decl_method_return decl_method() throws RecognitionException {
        DRLParser.decl_method_return retval = new DRLParser.decl_method_return();
        retval.start = input.LT(1);
        int decl_method_StartIndex = input.index();
        Object root_0 = null;

        Token ID59=null;
        Token ID61=null;
        DRLParser.methodDeclaration_return methodDeclaration57 = null;

        DRLParser.void_key_return void_key58 = null;

        DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest60 = null;

        DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest62 = null;


        Object ID59_tree=null;
        Object ID61_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:460:2: ( methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest )
            int alt21=3;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==ID) ) {
                int LA21_1 = input.LA(2);

                if ( ((synpred1_DRL()||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred1_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))))) ) {
                    alt21=1;
                }
                else if ( ((synpred2_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))) ) {
                    alt21=2;
                }
                else if ( (true) ) {
                    alt21=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:460:4: methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_decl_method1520);
                    methodDeclaration57=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaration57.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:461:4: void_key ID voidMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_void_key_in_decl_method1525);
                    void_key58=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key58.getTree());
                    ID59=(Token)match(input,ID,FOLLOW_ID_in_decl_method1527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID59_tree = (Object)adaptor.create(ID59);
                    adaptor.addChild(root_0, ID59_tree);
                    }
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_decl_method1529);
                    voidMethodDeclaratorRest60=voidMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, voidMethodDeclaratorRest60.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:462:4: ID constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    ID61=(Token)match(input,ID,FOLLOW_ID_in_decl_method1534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID61_tree = (Object)adaptor.create(ID61);
                    adaptor.addChild(root_0, ID61_tree);
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_decl_method1536);
                    constructorDeclaratorRest62=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest62.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, decl_method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "decl_method"

    public static class rule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:468:1: rule : rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) ;
    public final DRLParser.rule_return rule() throws RecognitionException {
        DRLParser.rule_return retval = new DRLParser.rule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_key_return rule_key63 = null;

        DRLParser.rule_id_return rule_id64 = null;

        DRLParser.extend_key_return extend_key65 = null;

        DRLParser.rule_id_return rule_id66 = null;

        DRLParser.decl_metadata_return decl_metadata67 = null;

        DRLParser.rule_attributes_return rule_attributes68 = null;

        DRLParser.when_part_return when_part69 = null;

        DRLParser.rhs_chunk_return rhs_chunk70 = null;


        RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
        RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
        RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
        RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
        RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.RULE);
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:471:2: ( rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:472:3: rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk
            {
            pushFollow(FOLLOW_rule_key_in_rule1563);
            rule_key63=rule_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_key.add(rule_key63.getTree());
            pushFollow(FOLLOW_rule_id_in_rule1581);
            rule_id64=rule_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_id.add(rule_id64.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:3: ( extend_key rule_id )?
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:4: extend_key rule_id
                    {
                    pushFollow(FOLLOW_extend_key_in_rule1590);
                    extend_key65=extend_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extend_key.add(extend_key65.getTree());
                    pushFollow(FOLLOW_rule_id_in_rule1592);
                    rule_id66=rule_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_id.add(rule_id66.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:25: ( decl_metadata )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==AT) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:25: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_rule1596);
            	    decl_metadata67=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata67.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:40: ( rule_attributes )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:40: rule_attributes
                    {
                    pushFollow(FOLLOW_rule_attributes_in_rule1599);
                    rule_attributes68=rule_attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_attributes.add(rule_attributes68.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:57: ( when_part )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==WHEN) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:475:57: when_part
                    {
                    pushFollow(FOLLOW_when_part_in_rule1602);
                    when_part69=when_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_when_part.add(when_part69.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rhs_chunk_in_rule1605);
            rhs_chunk70=rhs_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk.add(rhs_chunk70.getTree());


            // AST REWRITE
            // elements: rhs_chunk, when_part, rule_id, rule_id, extend_key, rule_attributes, decl_metadata, rule_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:3: -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:476:6: ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rule_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_rule_id.nextTree());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:476:25: ( ^( extend_key rule_id ) )?
                if ( stream_rule_id.hasNext()||stream_extend_key.hasNext() ) {
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:476:25: ^( extend_key rule_id )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_extend_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_rule_id.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_rule_id.reset();
                stream_extend_key.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:476:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:476:63: ( rule_attributes )?
                if ( stream_rule_attributes.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attributes.nextTree());

                }
                stream_rule_attributes.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:476:80: ( when_part )?
                if ( stream_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_when_part.nextTree());

                }
                stream_when_part.reset();
                adaptor.addChild(root_1, stream_rhs_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(6) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			input.LA(5) == MINUS && input.LA(6) == ID && 
            			helper.validateLT(1, DroolsSoftKeywords.LOCK) && helper.validateLT(3, DroolsSoftKeywords.ON) &&
            			helper.validateLT(5, DroolsSoftKeywords.ACTIVE)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(4), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(5), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(4) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			(	(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.NO) && helper.validateLT(3, DroolsSoftKeywords.LOOP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AUTO) && helper.validateLT(3, DroolsSoftKeywords.FOCUS)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.RULEFLOW) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AGENDA) && helper.validateLT(3, DroolsSoftKeywords.GROUP))	)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(2) == EOF && input.LA(1) == ID && 
            				(helper.validateLT(1, DroolsSoftKeywords.DIALECT) || helper.validateLT(1, DroolsSoftKeywords.ENABLED) ||
            				 helper.validateLT(1, DroolsSoftKeywords.SALIENCE) || helper.validateLT(1, DroolsSoftKeywords.DURATION) ||
            				 helper.validateLT(1, DroolsSoftKeywords.TIMER))){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "when_part"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:522:1: when_part : WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block ;
    public final DRLParser.when_part_return when_part() throws RecognitionException {
        DRLParser.when_part_return retval = new DRLParser.when_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHEN71=null;
        Token COLON72=null;
        DRLParser.normal_lhs_block_return normal_lhs_block73 = null;


        Object WHEN71_tree=null;
        Object COLON72_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:523:2: ( WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:523:5: WHEN ( COLON )? normal_lhs_block
            {
            WHEN71=(Token)match(input,WHEN,FOLLOW_WHEN_in_when_part1649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN71);

            if ( state.backtracking==0 ) {
              	helper.emit(WHEN71, DroolsEditorType.KEYWORD);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:524:3: ( COLON )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==COLON) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:524:3: COLON
                    {
                    COLON72=(Token)match(input,COLON,FOLLOW_COLON_in_when_part1655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON72);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COLON72, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_when_part1665);
            normal_lhs_block73=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block73.getTree());


            // AST REWRITE
            // elements: WHEN, normal_lhs_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:2: -> WHEN normal_lhs_block
            {
                adaptor.addChild(root_0, stream_WHEN.nextNode());
                adaptor.addChild(root_0, stream_normal_lhs_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "when_part"

    public static class rule_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_id"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:530:1: rule_id : (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] );
    public final DRLParser.rule_id_return rule_id() throws RecognitionException {
        DRLParser.rule_id_return retval = new DRLParser.rule_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:531:2: (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ID) ) {
                alt27=1;
            }
            else if ( (LA27_0==STRING) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:531:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_rule_id1686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 533:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:534:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_rule_id1702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 536:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_id"

    public static class rule_attributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attributes"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:539:1: rule_attributes : ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) ;
    public final DRLParser.rule_attributes_return rule_attributes() throws RecognitionException {
        DRLParser.rule_attributes_return retval = new DRLParser.rule_attributes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON75=null;
        Token COMMA77=null;
        DRLParser.rule_attribute_return attr = null;

        DRLParser.attributes_key_return attributes_key74 = null;

        DRLParser.rule_attribute_return rule_attribute76 = null;


        Object COLON75_tree=null;
        Object COMMA77_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
        RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:540:2: ( ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:540:4: ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )*
            {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:540:4: ( attributes_key COLON )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                int LA28_1 = input.LA(2);

                if ( (LA28_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
                    alt28=1;
                }
            }
            switch (alt28) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:540:6: attributes_key COLON
                    {
                    pushFollow(FOLLOW_attributes_key_in_rule_attributes1723);
                    attributes_key74=attributes_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attributes_key.add(attributes_key74.getTree());
                    COLON75=(Token)match(input,COLON,FOLLOW_COLON_in_rule_attributes1725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON75);

                    if ( state.backtracking==0 ) {
                      	helper.emit(COLON75, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_rule_attribute_in_rule_attributes1735);
            rule_attribute76=rule_attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_attribute.add(rule_attribute76.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:541:18: ( ( COMMA )? attr= rule_attribute )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==ID||LA30_0==COMMA) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:541:20: ( COMMA )? attr= rule_attribute
            	    {
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:541:20: ( COMMA )?
            	    int alt29=2;
            	    int LA29_0 = input.LA(1);

            	    if ( (LA29_0==COMMA) ) {
            	        alt29=1;
            	    }
            	    switch (alt29) {
            	        case 1 :
            	            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:541:20: COMMA
            	            {
            	            COMMA77=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1739); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA77);


            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA77, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1746);
            	    attr=rule_attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rule_attribute.add(attr.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);



            // AST REWRITE
            // elements: rule_attribute, attributes_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 542:3: -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:542:6: ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_RULE_ATTRIBUTES, "VT_RULE_ATTRIBUTES"), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:542:27: ( attributes_key )?
                if ( stream_attributes_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_attributes_key.nextTree());

                }
                stream_attributes_key.reset();
                if ( !(stream_rule_attribute.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rule_attribute.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attribute.nextTree());

                }
                stream_rule_attribute.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_attributes"

    public static class rule_attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attribute"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:545:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );
    public final DRLParser.rule_attribute_return rule_attribute() throws RecognitionException {
        DRLParser.rule_attribute_return retval = new DRLParser.rule_attribute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_return salience78 = null;

        DRLParser.no_loop_return no_loop79 = null;

        DRLParser.agenda_group_return agenda_group80 = null;

        DRLParser.timer_return timer81 = null;

        DRLParser.activation_group_return activation_group82 = null;

        DRLParser.auto_focus_return auto_focus83 = null;

        DRLParser.date_effective_return date_effective84 = null;

        DRLParser.date_expires_return date_expires85 = null;

        DRLParser.enabled_return enabled86 = null;

        DRLParser.ruleflow_group_return ruleflow_group87 = null;

        DRLParser.lock_on_active_return lock_on_active88 = null;

        DRLParser.dialect_return dialect89 = null;

        DRLParser.calendars_return calendars90 = null;



         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE_ATTRIBUTE); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:548:2: ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars )
            int alt31=13;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:548:4: salience
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_salience_in_rule_attribute1785);
                    salience78=salience();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, salience78.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:549:4: no_loop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_no_loop_in_rule_attribute1791);
                    no_loop79=no_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_loop79.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:550:4: agenda_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_agenda_group_in_rule_attribute1796);
                    agenda_group80=agenda_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, agenda_group80.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:551:4: timer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_timer_in_rule_attribute1803);
                    timer81=timer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timer81.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:552:4: activation_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_activation_group_in_rule_attribute1810);
                    activation_group82=activation_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, activation_group82.getTree());

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:553:4: auto_focus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_auto_focus_in_rule_attribute1816);
                    auto_focus83=auto_focus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, auto_focus83.getTree());

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:554:4: date_effective
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_effective_in_rule_attribute1822);
                    date_effective84=date_effective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_effective84.getTree());

                    }
                    break;
                case 8 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:555:4: date_expires
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_expires_in_rule_attribute1828);
                    date_expires85=date_expires();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_expires85.getTree());

                    }
                    break;
                case 9 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:556:4: enabled
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enabled_in_rule_attribute1834);
                    enabled86=enabled();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enabled86.getTree());

                    }
                    break;
                case 10 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:557:4: ruleflow_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1840);
                    ruleflow_group87=ruleflow_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ruleflow_group87.getTree());

                    }
                    break;
                case 11 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:558:4: lock_on_active
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_on_active_in_rule_attribute1846);
                    lock_on_active88=lock_on_active();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_on_active88.getTree());

                    }
                    break;
                case 12 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:559:4: dialect
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dialect_in_rule_attribute1851);
                    dialect89=dialect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dialect89.getTree());

                    }
                    break;
                case 13 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:560:6: calendars
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_calendars_in_rule_attribute1859);
                    calendars90=calendars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, calendars90.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; if (!(retval.tree instanceof CommonErrorNode)) helper.emit(Location.LOCATION_RULE_HEADER); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(2) == EOF && input.LA(1) == ID){
            			helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule_attribute"

    public static class date_effective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:570:1: date_effective : date_effective_key STRING ;
    public final DRLParser.date_effective_return date_effective() throws RecognitionException {
        DRLParser.date_effective_return retval = new DRLParser.date_effective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING92=null;
        DRLParser.date_effective_key_return date_effective_key91 = null;


        Object STRING92_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:571:2: ( date_effective_key STRING )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:571:4: date_effective_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_effective_key_in_date_effective1873);
            date_effective_key91=date_effective_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_effective_key91.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING92=(Token)match(input,STRING,FOLLOW_STRING_in_date_effective1878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING92_tree = (Object)adaptor.create(STRING92);
            adaptor.addChild(root_0, STRING92_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING92, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective"

    public static class date_expires_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:575:1: date_expires : date_expires_key STRING ;
    public final DRLParser.date_expires_return date_expires() throws RecognitionException {
        DRLParser.date_expires_return retval = new DRLParser.date_expires_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING94=null;
        DRLParser.date_expires_key_return date_expires_key93 = null;


        Object STRING94_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:576:2: ( date_expires_key STRING )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:576:4: date_expires_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_expires_key_in_date_expires1892);
            date_expires_key93=date_expires_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_expires_key93.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING94=(Token)match(input,STRING,FOLLOW_STRING_in_date_expires1897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING94_tree = (Object)adaptor.create(STRING94);
            adaptor.addChild(root_0, STRING94_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING94, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires"

    public static class enabled_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:580:1: enabled : enabled_key ( BOOL | paren_chunk ) ;
    public final DRLParser.enabled_return enabled() throws RecognitionException {
        DRLParser.enabled_return retval = new DRLParser.enabled_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL96=null;
        DRLParser.enabled_key_return enabled_key95 = null;

        DRLParser.paren_chunk_return paren_chunk97 = null;


        Object BOOL96_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:581:2: ( enabled_key ( BOOL | paren_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:581:4: enabled_key ( BOOL | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enabled_key_in_enabled1912);
            enabled_key95=enabled_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(enabled_key95.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:582:6: ( BOOL | paren_chunk )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BOOL) ) {
                alt32=1;
            }
            else if ( (LA32_0==LEFT_PAREN) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:582:8: BOOL
                    {
                    BOOL96=(Token)match(input,BOOL,FOLLOW_BOOL_in_enabled1925); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL96_tree = (Object)adaptor.create(BOOL96);
                    adaptor.addChild(root_0, BOOL96_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL96, DroolsEditorType.BOOLEAN_CONST );	
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:583:8: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_enabled1936);
                    paren_chunk97=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk97.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled"

    public static class salience_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:587:1: salience : salience_key ( signed_decimal | paren_chunk ) ;
    public final DRLParser.salience_return salience() throws RecognitionException {
        DRLParser.salience_return retval = new DRLParser.salience_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_key_return salience_key98 = null;

        DRLParser.signed_decimal_return signed_decimal99 = null;

        DRLParser.paren_chunk_return paren_chunk100 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:588:2: ( salience_key ( signed_decimal | paren_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:588:4: salience_key ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_salience_key_in_salience1956);
            salience_key98=salience_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(salience_key98.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:589:3: ( signed_decimal | paren_chunk )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==DECIMAL||(LA33_0>=PLUS && LA33_0<=MINUS)) ) {
                alt33=1;
            }
            else if ( (LA33_0==LEFT_PAREN) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:589:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_salience1965);
                    signed_decimal99=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal99.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:590:5: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_salience1972);
                    paren_chunk100=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk100.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience"

    public static class no_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:594:1: no_loop : no_loop_key ( BOOL )? ;
    public final DRLParser.no_loop_return no_loop() throws RecognitionException {
        DRLParser.no_loop_return retval = new DRLParser.no_loop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL102=null;
        DRLParser.no_loop_key_return no_loop_key101 = null;


        Object BOOL102_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:595:2: ( no_loop_key ( BOOL )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:595:4: no_loop_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_no_loop_key_in_no_loop1987);
            no_loop_key101=no_loop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(no_loop_key101.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:595:73: ( BOOL )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BOOL) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:595:73: BOOL
                    {
                    BOOL102=(Token)match(input,BOOL,FOLLOW_BOOL_in_no_loop1992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL102_tree = (Object)adaptor.create(BOOL102);
                    adaptor.addChild(root_0, BOOL102_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL102, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop"

    public static class auto_focus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:599:1: auto_focus : auto_focus_key ( BOOL )? ;
    public final DRLParser.auto_focus_return auto_focus() throws RecognitionException {
        DRLParser.auto_focus_return retval = new DRLParser.auto_focus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL104=null;
        DRLParser.auto_focus_key_return auto_focus_key103 = null;


        Object BOOL104_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:600:2: ( auto_focus_key ( BOOL )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:600:4: auto_focus_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_auto_focus_key_in_auto_focus2007);
            auto_focus_key103=auto_focus_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(auto_focus_key103.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:600:76: ( BOOL )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==BOOL) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:600:76: BOOL
                    {
                    BOOL104=(Token)match(input,BOOL,FOLLOW_BOOL_in_auto_focus2012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL104_tree = (Object)adaptor.create(BOOL104);
                    adaptor.addChild(root_0, BOOL104_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL104, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus"

    public static class activation_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:604:1: activation_group : activation_group_key STRING ;
    public final DRLParser.activation_group_return activation_group() throws RecognitionException {
        DRLParser.activation_group_return retval = new DRLParser.activation_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING106=null;
        DRLParser.activation_group_key_return activation_group_key105 = null;


        Object STRING106_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:605:2: ( activation_group_key STRING )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:605:4: activation_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_activation_group_key_in_activation_group2029);
            activation_group_key105=activation_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(activation_group_key105.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING106=(Token)match(input,STRING,FOLLOW_STRING_in_activation_group2034); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING106_tree = (Object)adaptor.create(STRING106);
            adaptor.addChild(root_0, STRING106_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING106, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group"

    public static class ruleflow_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:609:1: ruleflow_group : ruleflow_group_key STRING ;
    public final DRLParser.ruleflow_group_return ruleflow_group() throws RecognitionException {
        DRLParser.ruleflow_group_return retval = new DRLParser.ruleflow_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING108=null;
        DRLParser.ruleflow_group_key_return ruleflow_group_key107 = null;


        Object STRING108_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:610:2: ( ruleflow_group_key STRING )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:610:4: ruleflow_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ruleflow_group_key_in_ruleflow_group2048);
            ruleflow_group_key107=ruleflow_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(ruleflow_group_key107.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING108=(Token)match(input,STRING,FOLLOW_STRING_in_ruleflow_group2053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING108_tree = (Object)adaptor.create(STRING108);
            adaptor.addChild(root_0, STRING108_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING108, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group"

    public static class agenda_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:614:1: agenda_group : agenda_group_key STRING ;
    public final DRLParser.agenda_group_return agenda_group() throws RecognitionException {
        DRLParser.agenda_group_return retval = new DRLParser.agenda_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING110=null;
        DRLParser.agenda_group_key_return agenda_group_key109 = null;


        Object STRING110_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:615:2: ( agenda_group_key STRING )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:615:4: agenda_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_agenda_group_key_in_agenda_group2067);
            agenda_group_key109=agenda_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(agenda_group_key109.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING110=(Token)match(input,STRING,FOLLOW_STRING_in_agenda_group2072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING110_tree = (Object)adaptor.create(STRING110);
            adaptor.addChild(root_0, STRING110_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING110, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group"

    public static class timer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:619:1: timer : ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) ;
    public final DRLParser.timer_return timer() throws RecognitionException {
        DRLParser.timer_return retval = new DRLParser.timer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.duration_key_return duration_key111 = null;

        DRLParser.timer_key_return timer_key112 = null;

        DRLParser.signed_decimal_return signed_decimal113 = null;

        DRLParser.paren_chunk_return paren_chunk114 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:620:2: ( ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:620:4: ( duration_key | timer_key ) ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:620:4: ( duration_key | timer_key )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
                int LA36_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                    alt36=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:620:5: duration_key
                    {
                    pushFollow(FOLLOW_duration_key_in_timer2087);
                    duration_key111=duration_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(duration_key111.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:620:19: timer_key
                    {
                    pushFollow(FOLLOW_timer_key_in_timer2090);
                    timer_key112=timer_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(timer_key112.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:621:3: ( signed_decimal | paren_chunk )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==DECIMAL||(LA37_0>=PLUS && LA37_0<=MINUS)) ) {
                alt37=1;
            }
            else if ( (LA37_0==LEFT_PAREN) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:621:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_timer2101);
                    signed_decimal113=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal113.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:622:9: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_timer2112);
                    paren_chunk114=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk114.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer"

    public static class calendars_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:626:1: calendars : calendars_key string_list ;
    public final DRLParser.calendars_return calendars() throws RecognitionException {
        DRLParser.calendars_return retval = new DRLParser.calendars_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.calendars_key_return calendars_key115 = null;

        DRLParser.string_list_return string_list116 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:627:2: ( calendars_key string_list )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:627:4: calendars_key string_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_calendars_key_in_calendars2133);
            calendars_key115=calendars_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(calendars_key115.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            pushFollow(FOLLOW_string_list_in_calendars2138);
            string_list116=string_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_list116.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars"

    public static class dialect_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:630:1: dialect : dialect_key STRING ;
    public final DRLParser.dialect_return dialect() throws RecognitionException {
        DRLParser.dialect_return retval = new DRLParser.dialect_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING118=null;
        DRLParser.dialect_key_return dialect_key117 = null;


        Object STRING118_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:631:2: ( dialect_key STRING )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:631:4: dialect_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_dialect_key_in_dialect2149);
            dialect_key117=dialect_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(dialect_key117.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING118=(Token)match(input,STRING,FOLLOW_STRING_in_dialect2154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING118_tree = (Object)adaptor.create(STRING118);
            adaptor.addChild(root_0, STRING118_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING118, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect"

    public static class lock_on_active_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:635:1: lock_on_active : lock_on_active_key ( BOOL )? ;
    public final DRLParser.lock_on_active_return lock_on_active() throws RecognitionException {
        DRLParser.lock_on_active_return retval = new DRLParser.lock_on_active_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL120=null;
        DRLParser.lock_on_active_key_return lock_on_active_key119 = null;


        Object BOOL120_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:636:2: ( lock_on_active_key ( BOOL )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:636:4: lock_on_active_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lock_on_active_key_in_lock_on_active2172);
            lock_on_active_key119=lock_on_active_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(lock_on_active_key119.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:636:80: ( BOOL )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==BOOL) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:636:80: BOOL
                    {
                    BOOL120=(Token)match(input,BOOL,FOLLOW_BOOL_in_lock_on_active2177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL120_tree = (Object)adaptor.create(BOOL120);
                    adaptor.addChild(root_0, BOOL120_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL120, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active"

    public static class normal_lhs_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normal_lhs_block"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:643:1: normal_lhs_block : ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) ;
    public final DRLParser.normal_lhs_block_return normal_lhs_block() throws RecognitionException {
        DRLParser.normal_lhs_block_return retval = new DRLParser.normal_lhs_block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_return lhs121 = null;


        RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:644:2: ( ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:644:4: ( lhs )*
            {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:644:4: ( lhs )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==ID) ) {
                    int LA39_1 = input.LA(2);

                    if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) ) {
                        alt39=1;
                    }


                }
                else if ( (LA39_0==LEFT_PAREN) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:644:4: lhs
            	    {
            	    pushFollow(FOLLOW_lhs_in_normal_lhs_block2195);
            	    lhs121=lhs();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_lhs.add(lhs121.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);



            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:2: -> ^( VT_AND_IMPLICIT ( lhs )* )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:645:5: ^( VT_AND_IMPLICIT ( lhs )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_IMPLICIT, "VT_AND_IMPLICIT"), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:645:23: ( lhs )*
                while ( stream_lhs.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs.nextTree());

                }
                stream_lhs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normal_lhs_block"

    public static class lhs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:648:1: lhs : lhs_or ;
    public final DRLParser.lhs_return lhs() throws RecognitionException {
        DRLParser.lhs_return retval = new DRLParser.lhs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_or_return lhs_or122 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:648:5: ( lhs_or )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:648:7: lhs_or
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_or_in_lhs2216);
            lhs_or122=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or122.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs"

    public static class lhs_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_or"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:651:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );
    public final DRLParser.lhs_or_return lhs_or() throws RecognitionException {
        DRLParser.lhs_or_return retval = new DRLParser.lhs_or_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN123=null;
        Token RIGHT_PAREN125=null;
        DRLParser.or_key_return or = null;

        DRLParser.or_key_return value = null;

        DRLParser.lhs_and_return lhs_and124 = null;

        DRLParser.lhs_and_return lhs_and126 = null;

        DRLParser.lhs_and_return lhs_and127 = null;


        Object LEFT_PAREN123_tree=null;
        Object RIGHT_PAREN125_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_lhs_and=new RewriteRuleSubtreeStream(adaptor,"rule lhs_and");

        	Token orToken = null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:654:3: ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==LEFT_PAREN) ) {
                int LA42_1 = input.LA(2);

                if ( (synpred3_DRL()) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA42_0==ID) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:654:5: ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN
                    {
                    LEFT_PAREN123=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or2240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN123);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN123, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_key_in_lhs_or2250);
                    or=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:658:4: ( lhs_and )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ID||LA40_0==LEFT_PAREN) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:658:4: lhs_and
                    	    {
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2258);
                    	    lhs_and124=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and124.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);

                    RIGHT_PAREN125=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or2264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN125);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN125, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: RIGHT_PAREN, lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 660:3: -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:660:6: ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_PREFIX, (or!=null?((Token)or.start):null)), root_1);

                        if ( !(stream_lhs_and.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_and.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_and.nextTree());

                        }
                        stream_lhs_and.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:661:4: ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    {
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:661:4: ( lhs_and -> lhs_and )
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:661:5: lhs_and
                    {
                    pushFollow(FOLLOW_lhs_and_in_lhs_or2287);
                    lhs_and126=lhs_and();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and126.getTree());


                    // AST REWRITE
                    // elements: lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 661:13: -> lhs_and
                    {
                        adaptor.addChild(root_0, stream_lhs_and.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:662:3: ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==ID) ) {
                            int LA41_1 = input.LA(2);

                            if ( ((synpred4_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) ) {
                                alt41=1;
                            }


                        }


                        switch (alt41) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:662:5: ( or_key )=> (value= or_key ) lhs_and
                    	    {
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:662:16: (value= or_key )
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:662:17: value= or_key
                    	    {
                    	    pushFollow(FOLLOW_or_key_in_lhs_or2307);
                    	    value=or_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      orToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2319);
                    	    lhs_and127=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and127.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_or, lhs_and
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 665:3: -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	    {
                    	        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:665:6: ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_INFIX, orToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_and.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_or"

    public static class lhs_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_and"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:668:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );
    public final DRLParser.lhs_and_return lhs_and() throws RecognitionException {
        DRLParser.lhs_and_return retval = new DRLParser.lhs_and_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN128=null;
        Token RIGHT_PAREN130=null;
        DRLParser.and_key_return and = null;

        DRLParser.and_key_return value = null;

        DRLParser.lhs_unary_return lhs_unary129 = null;

        DRLParser.lhs_unary_return lhs_unary131 = null;

        DRLParser.lhs_unary_return lhs_unary132 = null;


        Object LEFT_PAREN128_tree=null;
        Object RIGHT_PAREN130_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_unary=new RewriteRuleSubtreeStream(adaptor,"rule lhs_unary");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");

        	Token andToken = null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:671:3: ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==LEFT_PAREN) ) {
                int LA45_1 = input.LA(2);

                if ( (synpred5_DRL()) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==ID) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:671:5: ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN
                    {
                    LEFT_PAREN128=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and2360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN128);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN128, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_and_key_in_lhs_and2370);
                    and=and_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_and_key.add(and.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:675:4: ( lhs_unary )+
                    int cnt43=0;
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==ID||LA43_0==LEFT_PAREN) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:675:4: lhs_unary
                    	    {
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2378);
                    	    lhs_unary129=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary129.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt43 >= 1 ) break loop43;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(43, input);
                                throw eee;
                        }
                        cnt43++;
                    } while (true);

                    RIGHT_PAREN130=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and2384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN130);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN130, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: RIGHT_PAREN, lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 677:3: -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:677:6: ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_PREFIX, (and!=null?((Token)and.start):null)), root_1);

                        if ( !(stream_lhs_unary.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_unary.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                        }
                        stream_lhs_unary.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:678:4: ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    {
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:678:4: ( lhs_unary -> lhs_unary )
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:678:5: lhs_unary
                    {
                    pushFollow(FOLLOW_lhs_unary_in_lhs_and2408);
                    lhs_unary131=lhs_unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary131.getTree());


                    // AST REWRITE
                    // elements: lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 678:15: -> lhs_unary
                    {
                        adaptor.addChild(root_0, stream_lhs_unary.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:679:3: ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ID) ) {
                            int LA44_2 = input.LA(2);

                            if ( ((synpred6_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.AND))))) ) {
                                alt44=1;
                            }


                        }


                        switch (alt44) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:679:5: ( and_key )=> (value= and_key ) lhs_unary
                    	    {
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:679:17: (value= and_key )
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:679:18: value= and_key
                    	    {
                    	    pushFollow(FOLLOW_and_key_in_lhs_and2428);
                    	    value=and_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_and_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      andToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2440);
                    	    lhs_unary132=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary132.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_and, lhs_unary
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 682:3: -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	    {
                    	        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:682:6: ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_INFIX, andToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_and"

    public static class lhs_unary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_unary"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:685:1: lhs_unary : ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )? ;
    public final DRLParser.lhs_unary_return lhs_unary() throws RecognitionException {
        DRLParser.lhs_unary_return retval = new DRLParser.lhs_unary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN138=null;
        Token RIGHT_PAREN140=null;
        Token SEMICOLON142=null;
        DRLParser.lhs_exist_return lhs_exist133 = null;

        DRLParser.lhs_not_binding_return lhs_not_binding134 = null;

        DRLParser.lhs_not_return lhs_not135 = null;

        DRLParser.lhs_eval_return lhs_eval136 = null;

        DRLParser.lhs_forall_return lhs_forall137 = null;

        DRLParser.lhs_or_return lhs_or139 = null;

        DRLParser.pattern_source_return pattern_source141 = null;


        Object LEFT_PAREN138_tree=null;
        Object RIGHT_PAREN140_tree=null;
        Object SEMICOLON142_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:686:2: ( ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:686:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:686:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )
            int alt46=7;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==ID) ) {
                int LA46_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {
                    alt46=1;
                }
                else if ( (((helper.validateNotWithBinding())&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) ) {
                    alt46=2;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                    alt46=3;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {
                    alt46=4;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {
                    alt46=5;
                }
                else if ( (true) ) {
                    alt46=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==LEFT_PAREN) ) {
                alt46=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:686:6: lhs_exist
                    {
                    pushFollow(FOLLOW_lhs_exist_in_lhs_unary2471);
                    lhs_exist133=lhs_exist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_exist133.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:687:4: {...}? => lhs_not_binding
                    {
                    if ( !((helper.validateNotWithBinding())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "lhs_unary", "helper.validateNotWithBinding()");
                    }
                    pushFollow(FOLLOW_lhs_not_binding_in_lhs_unary2479);
                    lhs_not_binding134=lhs_not_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not_binding134.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:688:5: lhs_not
                    {
                    pushFollow(FOLLOW_lhs_not_in_lhs_unary2485);
                    lhs_not135=lhs_not();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not135.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:689:5: lhs_eval
                    {
                    pushFollow(FOLLOW_lhs_eval_in_lhs_unary2491);
                    lhs_eval136=lhs_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_eval136.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:690:5: lhs_forall
                    {
                    pushFollow(FOLLOW_lhs_forall_in_lhs_unary2497);
                    lhs_forall137=lhs_forall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_forall137.getTree());

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:691:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN138=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary2503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN138, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_unary2514);
                    lhs_or139=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or139.getTree());
                    RIGHT_PAREN140=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary2520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN140_tree = (Object)adaptor.create(RIGHT_PAREN140);
                    adaptor.addChild(root_0, RIGHT_PAREN140_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN140, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:694:5: pattern_source
                    {
                    pushFollow(FOLLOW_pattern_source_in_lhs_unary2528);
                    pattern_source141=pattern_source();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_source141.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:696:3: ( ( SEMICOLON )=> SEMICOLON )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SEMICOLON) ) {
                int LA47_1 = input.LA(2);

                if ( (synpred7_DRL()) ) {
                    alt47=1;
                }
            }
            switch (alt47) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:696:4: ( SEMICOLON )=> SEMICOLON
                    {
                    SEMICOLON142=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_unary2542); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(SEMICOLON142, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_unary"

    public static class lhs_exist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_exist"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:699:1: lhs_exist : exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_exist_return lhs_exist() throws RecognitionException {
        DRLParser.lhs_exist_return retval = new DRLParser.lhs_exist_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN145=null;
        Token RIGHT_PAREN147=null;
        DRLParser.exists_key_return exists_key143 = null;

        DRLParser.lhs_or_return lhs_or144 = null;

        DRLParser.lhs_or_return lhs_or146 = null;

        DRLParser.lhs_pattern_return lhs_pattern148 = null;


        Object LEFT_PAREN145_tree=null;
        Object RIGHT_PAREN147_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_exists_key=new RewriteRuleSubtreeStream(adaptor,"rule exists_key");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:700:2: ( exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:700:4: exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_exists_key_in_lhs_exist2558);
            exists_key143=exists_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exists_key.add(exists_key143.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:702:10: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt48=3;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==LEFT_PAREN) ) {
                int LA48_1 = input.LA(2);

                if ( (synpred8_DRL()) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA48_0==ID) ) {
                int LA48_2 = input.LA(2);

                if ( (((synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))))||synpred8_DRL()||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))))||((synpred8_DRL()&&(helper.validateNotWithBinding()))&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) ) {
                    alt48=1;
                }
                else if ( (true) ) {
                    alt48=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:702:12: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2585);
                    lhs_or144=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or144.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:703:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN145=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_exist2592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN145);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN145, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2600);
                    lhs_or146=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or146.getTree());
                    RIGHT_PAREN147=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_exist2607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN147);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN147, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:706:12: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_exist2622);
                    lhs_pattern148=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern148.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: exists_key, lhs_pattern, RIGHT_PAREN, lhs_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 708:10: -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:708:13: ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exists_key.nextNode(), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:708:26: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:708:34: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:708:47: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_exist"

    public static class lhs_not_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not_binding"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:711:1: lhs_not_binding : not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) ;
    public final DRLParser.lhs_not_binding_return lhs_not_binding() throws RecognitionException {
        DRLParser.lhs_not_binding_return retval = new DRLParser.lhs_not_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.not_key_return not_key149 = null;

        DRLParser.fact_binding_return fact_binding150 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:712:2: ( not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:712:4: not_key fact_binding
            {
            pushFollow(FOLLOW_not_key_in_lhs_not_binding2668);
            not_key149=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key149.getTree());
            pushFollow(FOLLOW_fact_binding_in_lhs_not_binding2670);
            fact_binding150=fact_binding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding150.getTree());


            // AST REWRITE
            // elements: not_key, fact_binding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 713:2: -> ^( not_key ^( VT_PATTERN fact_binding ) )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:713:5: ^( not_key ^( VT_PATTERN fact_binding ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:713:15: ^( VT_PATTERN fact_binding )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_2);

                adaptor.addChild(root_2, stream_fact_binding.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not_binding"

    public static class lhs_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:716:1: lhs_not : not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_not_return lhs_not() throws RecognitionException {
        DRLParser.lhs_not_return retval = new DRLParser.lhs_not_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN153=null;
        Token RIGHT_PAREN155=null;
        DRLParser.not_key_return not_key151 = null;

        DRLParser.lhs_or_return lhs_or152 = null;

        DRLParser.lhs_or_return lhs_or154 = null;

        DRLParser.lhs_pattern_return lhs_pattern156 = null;


        Object LEFT_PAREN153_tree=null;
        Object RIGHT_PAREN155_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:716:9: ( not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:716:11: not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_not_key_in_lhs_not2693);
            not_key151=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key151.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_NOT);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:718:3: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt49=3;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==LEFT_PAREN) ) {
                int LA49_1 = input.LA(2);

                if ( (synpred9_DRL()) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==ID) ) {
                int LA49_2 = input.LA(2);

                if ( (synpred9_DRL()) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:718:5: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2715);
                    lhs_or152=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or152.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:719:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN153=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_not2722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN153);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN153, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2731);
                    lhs_or154=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or154.getTree());
                    RIGHT_PAREN155=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_not2737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN155);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN155, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:722:6: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_not2747);
                    lhs_pattern156=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern156.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lhs_or, not_key, lhs_pattern, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 723:10: -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:723:13: ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:723:23: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:723:31: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:723:44: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not"

    public static class lhs_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_eval"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:726:1: lhs_eval : ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) ;
    public final DRLParser.lhs_eval_return lhs_eval() throws RecognitionException {
        DRLParser.lhs_eval_return retval = new DRLParser.lhs_eval_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.eval_key_return ev = null;

        DRLParser.paren_chunk_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_eval_key=new RewriteRuleSubtreeStream(adaptor,"rule eval_key");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:727:2: (ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:727:4: ev= eval_key pc= paren_chunk
            {
            pushFollow(FOLLOW_eval_key_in_lhs_eval2786);
            ev=eval_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eval_key.add(ev.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_EVAL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_lhs_eval2795);
            pc=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(pc.getTree());
            if ( state.backtracking==0 ) {
              	if (((DroolsTree) (pc!=null?((Object)pc.tree):null)).getText() != null){
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	            		
              		}
              	
            }
            if ( state.backtracking==0 ) {
              	String body = helper.safeSubstring( (pc!=null?input.toString(pc.start,pc.stop):null), 1, (pc!=null?input.toString(pc.start,pc.stop):null).length()-1 );
              		helper.checkTrailingSemicolon( body, (ev!=null?((Token)ev.start):null) );	
            }


            // AST REWRITE
            // elements: paren_chunk, eval_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 736:3: -> ^( eval_key paren_chunk )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:736:6: ^( eval_key paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_eval_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_eval"

    public static class lhs_forall_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_forall"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:739:1: lhs_forall : forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) ;
    public final DRLParser.lhs_forall_return lhs_forall() throws RecognitionException {
        DRLParser.lhs_forall_return retval = new DRLParser.lhs_forall_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN158=null;
        Token RIGHT_PAREN160=null;
        DRLParser.forall_key_return forall_key157 = null;

        DRLParser.pattern_source_return pattern_source159 = null;


        Object LEFT_PAREN158_tree=null;
        Object RIGHT_PAREN160_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:740:2: ( forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:740:4: forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN
            {
            pushFollow(FOLLOW_forall_key_in_lhs_forall2822);
            forall_key157=forall_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forall_key.add(forall_key157.getTree());
            LEFT_PAREN158=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN158);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN158, DroolsEditorType.SYMBOL);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:742:4: ( pattern_source )+
            int cnt50=0;
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==ID) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:742:4: pattern_source
            	    {
            	    pushFollow(FOLLOW_pattern_source_in_lhs_forall2835);
            	    pattern_source159=pattern_source();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source159.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt50 >= 1 ) break loop50;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(50, input);
                        throw eee;
                }
                cnt50++;
            } while (true);

            RIGHT_PAREN160=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN160);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN160, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, pattern_source, forall_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 744:3: -> ^( forall_key ( pattern_source )+ RIGHT_PAREN )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:744:6: ^( forall_key ( pattern_source )+ RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_forall_key.nextNode(), root_1);

                if ( !(stream_pattern_source.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pattern_source.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern_source.nextTree());

                }
                stream_pattern_source.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_forall"

    public static class pattern_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_source"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:747:1: pattern_source : lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? ;
    public final DRLParser.pattern_source_return pattern_source() throws RecognitionException {
        DRLParser.pattern_source_return retval = new DRLParser.pattern_source_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FROM163=null;
        DRLParser.lhs_pattern_return lhs_pattern161 = null;

        DRLParser.over_clause_return over_clause162 = null;

        DRLParser.accumulate_statement_return accumulate_statement164 = null;

        DRLParser.collect_statement_return collect_statement165 = null;

        DRLParser.entrypoint_statement_return entrypoint_statement166 = null;

        DRLParser.from_source_return from_source167 = null;


        Object FROM163_tree=null;

         boolean isFailed = true;	
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:750:2: ( lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:750:4: lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_pattern_in_pattern_source2877);
            lhs_pattern161=lhs_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_pattern161.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:751:3: ( over_clause )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==OVER) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:751:3: over_clause
                    {
                    pushFollow(FOLLOW_over_clause_in_pattern_source2881);
                    over_clause162=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause162.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:752:3: ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==FROM) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:753:4: FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    {
                    FROM163=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FROM163_tree = (Object)adaptor.create(FROM163);
                    root_0 = (Object)adaptor.becomeRoot(FROM163_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FROM163, DroolsEditorType.KEYWORD);
                      			helper.emit(Location.LOCATION_LHS_FROM);	
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:756:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    int alt52=4;
                    alt52 = dfa52.predict(input);
                    switch (alt52) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:756:14: accumulate_statement
                            {
                            pushFollow(FOLLOW_accumulate_statement_in_pattern_source2911);
                            accumulate_statement164=accumulate_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_statement164.getTree());

                            }
                            break;
                        case 2 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:757:15: collect_statement
                            {
                            pushFollow(FOLLOW_collect_statement_in_pattern_source2927);
                            collect_statement165=collect_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collect_statement165.getTree());

                            }
                            break;
                        case 3 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:758:15: entrypoint_statement
                            {
                            pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2944);
                            entrypoint_statement166=entrypoint_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, entrypoint_statement166.getTree());

                            }
                            break;
                        case 4 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:759:15: from_source
                            {
                            pushFollow(FOLLOW_from_source_in_pattern_source2960);
                            from_source167=from_source();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_source167.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_ACCUMULATE);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_COLLECT);
            	}

        }
        return retval;
    }
    // $ANTLR end "pattern_source"

    public static class over_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_clause"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:777:1: over_clause : OVER over_elements ( COMMA over_elements )* ;
    public final DRLParser.over_clause_return over_clause() throws RecognitionException {
        DRLParser.over_clause_return retval = new DRLParser.over_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OVER168=null;
        Token COMMA170=null;
        DRLParser.over_elements_return over_elements169 = null;

        DRLParser.over_elements_return over_elements171 = null;


        Object OVER168_tree=null;
        Object COMMA170_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:778:2: ( OVER over_elements ( COMMA over_elements )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:778:4: OVER over_elements ( COMMA over_elements )*
            {
            root_0 = (Object)adaptor.nil();

            OVER168=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause2992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OVER168_tree = (Object)adaptor.create(OVER168);
            root_0 = (Object)adaptor.becomeRoot(OVER168_tree, root_0);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(OVER168, DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_over_elements_in_over_clause2997);
            over_elements169=over_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements169.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:779:4: ( COMMA over_elements )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==COMMA) ) {
                    int LA54_2 = input.LA(2);

                    if ( (LA54_2==ID) ) {
                        int LA54_3 = input.LA(3);

                        if ( (LA54_3==COLON) ) {
                            alt54=1;
                        }


                    }


                }


                switch (alt54) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:779:5: COMMA over_elements
            	    {
            	    COMMA170=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause3004); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA170, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_over_elements_in_over_clause3009);
            	    over_elements171=over_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements171.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_clause"

    public static class over_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_elements"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:782:1: over_elements : id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) ;
    public final DRLParser.over_elements_return over_elements() throws RecognitionException {
        DRLParser.over_elements_return retval = new DRLParser.over_elements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token t=null;
        Token COLON172=null;
        Token LEFT_PAREN173=null;
        Token RIGHT_PAREN174=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object t_tree=null;
        Object COLON172_tree=null;
        Object LEFT_PAREN173_tree=null;
        Object RIGHT_PAREN174_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_TimePeriod=new RewriteRuleTokenStream(adaptor,"token TimePeriod");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:783:2: (id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:783:4: id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN
            {
            id1=(Token)match(input,ID,FOLLOW_ID_in_over_elements3024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.IDENTIFIER);	
            }
            COLON172=(Token)match(input,COLON,FOLLOW_COLON_in_over_elements3031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON172);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON172, DroolsEditorType.SYMBOL);	
            }
            id2=(Token)match(input,ID,FOLLOW_ID_in_over_elements3040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              	helper.emit(id2, DroolsEditorType.IDENTIFIER);	
            }
            LEFT_PAREN173=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_over_elements3047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN173);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:787:4: (t= TimePeriod | t= DECIMAL )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==TimePeriod) ) {
                alt55=1;
            }
            else if ( (LA55_0==DECIMAL) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:788:5: t= TimePeriod
                    {
                    t=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_over_elements3062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TimePeriod.add(t);


                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:788:20: t= DECIMAL
                    {
                    t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_over_elements3068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(t);


                    }
                    break;

            }

            RIGHT_PAREN174=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_over_elements3078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN174);



            // AST REWRITE
            // elements: id2, id1
            // token labels: id2, id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 791:2: -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:791:5: ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BEHAVIOR, "VT_BEHAVIOR"), root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());
                adaptor.addChild(root_1, stream_id2.nextNode());
                adaptor.addChild(root_1, (Object)adaptor.create(VT_PAREN_CHUNK, t));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_elements"

    public static class accumulate_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:794:1: accumulate_statement : ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) ;
    public final DRLParser.accumulate_statement_return accumulate_statement() throws RecognitionException {
        DRLParser.accumulate_statement_return retval = new DRLParser.accumulate_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ACCUMULATE175=null;
        Token LEFT_PAREN176=null;
        Token COMMA178=null;
        Token RIGHT_PAREN181=null;
        DRLParser.lhs_or_return lhs_or177 = null;

        DRLParser.accumulate_init_clause_return accumulate_init_clause179 = null;

        DRLParser.accumulate_id_clause_return accumulate_id_clause180 = null;


        Object ACCUMULATE175_tree=null;
        Object LEFT_PAREN176_tree=null;
        Object COMMA178_tree=null;
        Object RIGHT_PAREN181_tree=null;
        RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
        RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:795:2: ( ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:795:4: ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN
            {
            ACCUMULATE175=(Token)match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement3105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ACCUMULATE.add(ACCUMULATE175);

            if ( state.backtracking==0 ) {
              	helper.emit(ACCUMULATE175, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE);	
            }
            LEFT_PAREN176=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement3114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN176);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN176, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_accumulate_statement3122);
            lhs_or177=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or177.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:799:3: ( COMMA )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==COMMA) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:799:3: COMMA
                    {
                    COMMA178=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement3127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA178);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COMMA178, DroolsEditorType.SYMBOL);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:800:3: ( accumulate_init_clause | accumulate_id_clause )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ID) ) {
                int LA57_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                    alt57=1;
                }
                else if ( (true) ) {
                    alt57=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:800:5: accumulate_init_clause
                    {
                    pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement3137);
                    accumulate_init_clause179=accumulate_init_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_init_clause.add(accumulate_init_clause179.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:801:5: accumulate_id_clause
                    {
                    pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement3143);
                    accumulate_id_clause180=accumulate_id_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_id_clause.add(accumulate_id_clause180.getTree());

                    }
                    break;

            }

            RIGHT_PAREN181=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement3151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN181);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN181, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: accumulate_id_clause, accumulate_init_clause, ACCUMULATE, RIGHT_PAREN, lhs_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:3: -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:805:6: ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ACCUMULATE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:805:26: ( accumulate_init_clause )?
                if ( stream_accumulate_init_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_init_clause.nextTree());

                }
                stream_accumulate_init_clause.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:805:50: ( accumulate_id_clause )?
                if ( stream_accumulate_id_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_id_clause.nextTree());

                }
                stream_accumulate_id_clause.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_statement"

    public static class accumulate_init_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_init_clause"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:809:1: accumulate_init_clause : init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) ;
    public final DRLParser.accumulate_init_clause_return accumulate_init_clause() throws RecognitionException {
        DRLParser.accumulate_init_clause_return retval = new DRLParser.accumulate_init_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token cm1=null;
        Token cm2=null;
        Token cm3=null;
        DRLParser.accumulate_paren_chunk_return pc1 = null;

        DRLParser.accumulate_paren_chunk_return pc2 = null;

        DRLParser.accumulate_paren_chunk_return pc3 = null;

        DRLParser.result_key_return res1 = null;

        DRLParser.accumulate_paren_chunk_return pc4 = null;

        DRLParser.init_key_return init_key182 = null;

        DRLParser.action_key_return action_key183 = null;

        DRLParser.reverse_key_return reverse_key184 = null;


        Object cm1_tree=null;
        Object cm2_tree=null;
        Object cm3_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
        RewriteRuleSubtreeStream stream_accumulate_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk");
        RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_init_key=new RewriteRuleSubtreeStream(adaptor,"rule init_key");
         boolean isFailed = true;	
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:812:2: ( init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:812:4: init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE]
            {
            pushFollow(FOLLOW_init_key_in_accumulate_init_clause3197);
            init_key182=init_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_init_key.add(init_key182.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3207);
            pc1=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc1.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:814:84: (cm1= COMMA )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==COMMA) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:814:84: cm1= COMMA
                    {
                    cm1=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm1, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);	
            }
            pushFollow(FOLLOW_action_key_in_accumulate_init_clause3223);
            action_key183=action_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_action_key.add(action_key183.getTree());
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3227);
            pc2=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc2.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:816:97: (cm2= COMMA )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==COMMA) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:816:97: cm2= COMMA
                    {
                    cm2=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm2);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm2, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null && pc2 != null && ((DroolsTree) pc2.getTree()).getText() != null ) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:818:2: ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==ID) ) {
                int LA61_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                    alt61=1;
                }
            }
            switch (alt61) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:818:4: reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )?
                    {
                    pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause3244);
                    reverse_key184=reverse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reverse_key.add(reverse_key184.getTree());
                    pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3248);
                    pc3=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc3.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:818:100: (cm3= COMMA )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==COMMA) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:818:100: cm3= COMMA
                            {
                            cm3=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3253); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(cm3);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      	helper.emit(cm3, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if ((pc1 != null && ((DroolsTree) pc1.tree).getText() != null) &&
                          			(pc2 != null && ((DroolsTree) pc2.tree).getText() != null) &&
                          			(pc3 != null && ((DroolsTree) pc3.tree).getText() != null)) {
              			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
              		}	
              	
            }
            pushFollow(FOLLOW_result_key_in_accumulate_init_clause3269);
            res1=result_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_key.add(res1.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit((res1!=null?((Token)res1.start):null), DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3275);
            pc4=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc4.getTree());


            // AST REWRITE
            // elements: result_key, init_key, pc2, pc1, action_key, pc3, reverse_key, pc4
            // token labels: 
            // rule labels: pc4, pc3, retval, pc1, pc2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"rule pc4",pc4!=null?pc4.tree:null);
            RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"rule pc3",pc3!=null?pc3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"rule pc1",pc1!=null?pc1.tree:null);
            RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"rule pc2",pc2!=null?pc2.tree:null);

            root_0 = (Object)adaptor.nil();
            // 827:2: -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:827:5: ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_INIT_CLAUSE, "VT_ACCUMULATE_INIT_CLAUSE"), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:827:33: ^( init_key $pc1)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_init_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc1.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:827:50: ^( action_key $pc2)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_action_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc2.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:827:69: ( ^( reverse_key $pc3) )?
                if ( stream_pc3.hasNext()||stream_reverse_key.hasNext() ) {
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:827:69: ^( reverse_key $pc3)
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_reverse_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_pc3.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_pc3.reset();
                stream_reverse_key.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:827:90: ^( result_key $pc4)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_result_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc4.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.RESULT)) {
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		if (input.LA(1) == LEFT_PAREN){
            			input.consume();
            			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "accumulate_init_clause"

    public static class accumulate_paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:840:1: accumulate_paren_chunk[int locationType] : pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.accumulate_paren_chunk_return accumulate_paren_chunk(int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_return retval = new DRLParser.accumulate_paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accumulate_paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_accumulate_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk_data");

        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:843:3: (pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:843:5: pc= accumulate_paren_chunk_data[false,$locationType]
            {
            pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3333);
            pc=accumulate_paren_chunk_data(false, locationType);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 844:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk"

    public static class accumulate_paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk_data"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:847:1: accumulate_paren_chunk_data[boolean isRecursive, int locationType] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN ;
    public final DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data(boolean isRecursive, int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_data_return retval = new DRLParser.accumulate_paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data185 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:848:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:848:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              				helper.emit(locationType);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:856:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )*
            loop62:
            do {
                int alt62=3;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0>=VT_COMPILATION_UNIT && LA62_0<=BOOL)||(LA62_0>=FROM && LA62_0<=MISC)) ) {
                    alt62=1;
                }
                else if ( (LA62_0==LEFT_PAREN) ) {
                    alt62=2;
                }


                switch (alt62) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:856:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:856:94: accumulate_paren_chunk_data[true,-1]
            	    {
            	    pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3385);
            	    accumulate_paren_chunk_data185=accumulate_paren_chunk_data(true, -1);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_paren_chunk_data185.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk_data"

    public static class accumulate_id_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_id_clause"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:866:1: accumulate_id_clause : ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) ;
    public final DRLParser.accumulate_id_clause_return accumulate_id_clause() throws RecognitionException {
        DRLParser.accumulate_id_clause_return retval = new DRLParser.accumulate_id_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID186=null;
        DRLParser.paren_chunk_return paren_chunk187 = null;


        Object ID186_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:867:2: ( ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:867:4: ID paren_chunk
            {
            ID186=(Token)match(input,ID,FOLLOW_ID_in_accumulate_id_clause3412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID186);

            if ( state.backtracking==0 ) {
              	helper.emit(ID186, DroolsEditorType.IDENTIFIER);	
            }
            pushFollow(FOLLOW_paren_chunk_in_accumulate_id_clause3418);
            paren_chunk187=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk187.getTree());


            // AST REWRITE
            // elements: ID, paren_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 869:2: -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:869:5: ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_ID_CLAUSE, "VT_ACCUMULATE_ID_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_id_clause"

    public static class collect_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collect_statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:872:1: collect_statement : COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) ;
    public final DRLParser.collect_statement_return collect_statement() throws RecognitionException {
        DRLParser.collect_statement_return retval = new DRLParser.collect_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLLECT188=null;
        Token LEFT_PAREN189=null;
        Token RIGHT_PAREN191=null;
        DRLParser.pattern_source_return pattern_source190 = null;


        Object COLLECT188_tree=null;
        Object LEFT_PAREN189_tree=null;
        Object RIGHT_PAREN191_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COLLECT=new RewriteRuleTokenStream(adaptor,"token COLLECT");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:873:2: ( COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:873:4: COLLECT LEFT_PAREN pattern_source RIGHT_PAREN
            {
            COLLECT188=(Token)match(input,COLLECT,FOLLOW_COLLECT_in_collect_statement3440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLLECT.add(COLLECT188);

            if ( state.backtracking==0 ) {
              	helper.emit(COLLECT188, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            LEFT_PAREN189=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement3449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN189);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN189, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_pattern_source_in_collect_statement3456);
            pattern_source190=pattern_source();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source190.getTree());
            RIGHT_PAREN191=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement3461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN191);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN191, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, pattern_source, COLLECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 879:2: -> ^( COLLECT pattern_source RIGHT_PAREN )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:879:5: ^( COLLECT pattern_source RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_COLLECT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_pattern_source.nextTree());
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "collect_statement"

    public static class entrypoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:882:1: entrypoint_statement : entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) ;
    public final DRLParser.entrypoint_statement_return entrypoint_statement() throws RecognitionException {
        DRLParser.entrypoint_statement_return retval = new DRLParser.entrypoint_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.entry_point_key_return entry_point_key192 = null;

        DRLParser.entrypoint_id_return entrypoint_id193 = null;


        RewriteRuleSubtreeStream stream_entrypoint_id=new RewriteRuleSubtreeStream(adaptor,"rule entrypoint_id");
        RewriteRuleSubtreeStream stream_entry_point_key=new RewriteRuleSubtreeStream(adaptor,"rule entry_point_key");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:883:2: ( entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:883:4: entry_point_key entrypoint_id
            {
            pushFollow(FOLLOW_entry_point_key_in_entrypoint_statement3488);
            entry_point_key192=entry_point_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entry_point_key.add(entry_point_key192.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            pushFollow(FOLLOW_entrypoint_id_in_entrypoint_statement3496);
            entrypoint_id193=entrypoint_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entrypoint_id.add(entrypoint_id193.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: entrypoint_id, entry_point_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 887:2: -> ^( entry_point_key entrypoint_id )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:887:5: ^( entry_point_key entrypoint_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_entry_point_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_entrypoint_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_statement"

    public static class entrypoint_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_id"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:890:1: entrypoint_id : (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] );
    public final DRLParser.entrypoint_id_return entrypoint_id() throws RecognitionException {
        DRLParser.entrypoint_id_return retval = new DRLParser.entrypoint_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;

        Object value_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:891:2: (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==ID) ) {
                alt63=1;
            }
            else if ( (LA63_0==STRING) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:891:5: value= ID
                    {
                    value=(Token)match(input,ID,FOLLOW_ID_in_entrypoint_id3522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 892:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:893:5: value= STRING
                    {
                    value=(Token)match(input,STRING,FOLLOW_STRING_in_entrypoint_id3539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 894:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_id"

    public static class from_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_source"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:898:1: from_source options {backtrack=true; memoize=true; } : fs= expression -> VT_FROM_SOURCE[$fs.text] ;
    public final DRLParser.from_source_return from_source() throws RecognitionException {
        DRLParser.from_source_return retval = new DRLParser.from_source_return();
        retval.start = input.LT(1);
        int from_source_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.expression_return fs = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:900:2: (fs= expression -> VT_FROM_SOURCE[$fs.text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:900:4: fs= expression
            {
            pushFollow(FOLLOW_expression_in_from_source3576);
            fs=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(fs.getTree());
            if ( state.backtracking==0 ) {
               if ( input.LA(1) != EOF || input.get(input.index() - 1).getType() == WS ) { helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION); } 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 901:10: -> VT_FROM_SOURCE[$fs.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FROM_SOURCE, (fs!=null?input.toString(fs.start,fs.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, from_source_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_source"

    public static class lhs_pattern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_pattern"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:907:1: lhs_pattern : ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) );
    public final DRLParser.lhs_pattern_return lhs_pattern() throws RecognitionException {
        DRLParser.lhs_pattern_return retval = new DRLParser.lhs_pattern_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.fact_binding_return fact_binding194 = null;

        DRLParser.fact_return fact195 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:908:2: ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==ID) ) {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==DOT||LA64_1==LEFT_PAREN||LA64_1==LEFT_SQUARE) ) {
                    alt64=2;
                }
                else if ( (LA64_1==COLON) ) {
                    alt64=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:908:4: fact_binding
                    {
                    pushFollow(FOLLOW_fact_binding_in_lhs_pattern3607);
                    fact_binding194=fact_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding194.getTree());


                    // AST REWRITE
                    // elements: fact_binding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 908:17: -> ^( VT_PATTERN fact_binding )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:908:20: ^( VT_PATTERN fact_binding )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact_binding.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:909:4: fact
                    {
                    pushFollow(FOLLOW_fact_in_lhs_pattern3620);
                    fact195=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact195.getTree());


                    // AST REWRITE
                    // elements: fact
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 909:9: -> ^( VT_PATTERN fact )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:909:12: ^( VT_PATTERN fact )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_pattern"

    public static class fact_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:912:1: fact_binding : label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.fact_binding_return fact_binding() throws RecognitionException {
        DRLParser.fact_binding_return retval = new DRLParser.fact_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN198=null;
        Token RIGHT_PAREN200=null;
        DRLParser.label_return label196 = null;

        DRLParser.fact_return fact197 = null;

        DRLParser.fact_binding_expression_return fact_binding_expression199 = null;


        Object LEFT_PAREN198_tree=null;
        Object RIGHT_PAREN200_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        RewriteRuleSubtreeStream stream_fact_binding_expression=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding_expression");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:913:3: ( label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:913:5: label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            {
            pushFollow(FOLLOW_label_in_fact_binding3640);
            label196=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label.add(label196.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:914:3: ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==ID) ) {
                alt65=1;
            }
            else if ( (LA65_0==LEFT_PAREN) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:914:5: fact
                    {
                    pushFollow(FOLLOW_fact_in_fact_binding3646);
                    fact197=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact197.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:915:6: LEFT_PAREN fact_binding_expression RIGHT_PAREN
                    {
                    LEFT_PAREN198=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_binding3653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN198);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN198, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_fact_binding_expression_in_fact_binding3661);
                    fact_binding_expression199=fact_binding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding_expression.add(fact_binding_expression199.getTree());
                    RIGHT_PAREN200=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_binding3669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN200);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN200, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: fact, label, RIGHT_PAREN, fact_binding_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 919:3: -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:919:6: ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_BINDING, "VT_FACT_BINDING"), root_1);

                adaptor.addChild(root_1, stream_label.nextTree());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:919:30: ( fact )?
                if ( stream_fact.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact.nextTree());

                }
                stream_fact.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:919:36: ( fact_binding_expression )?
                if ( stream_fact_binding_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact_binding_expression.nextTree());

                }
                stream_fact_binding_expression.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:919:61: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding"

    public static class fact_binding_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding_expression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:922:1: fact_binding_expression : ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* ;
    public final DRLParser.fact_binding_expression_return fact_binding_expression() throws RecognitionException {
        DRLParser.fact_binding_expression_return retval = new DRLParser.fact_binding_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token pipe=null;
        DRLParser.or_key_return value = null;

        DRLParser.fact_return fact201 = null;

        DRLParser.fact_return fact202 = null;


        Object pipe_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

        	Token orToken = null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:3: ( ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:5: ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:5: ( fact -> fact )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:6: fact
            {
            pushFollow(FOLLOW_fact_in_fact_binding_expression3710);
            fact201=fact();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact.add(fact201.getTree());


            // AST REWRITE
            // elements: fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 925:11: -> fact
            {
                adaptor.addChild(root_0, stream_fact.nextTree());

            }

            retval.tree = root_0;}
            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:20: ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
                    alt67=1;
                }
                else if ( (LA67_0==DOUBLE_PIPE) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:22: (value= or_key | pipe= DOUBLE_PIPE ) fact
            	    {
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:22: (value= or_key | pipe= DOUBLE_PIPE )
            	    int alt66=2;
            	    int LA66_0 = input.LA(1);

            	    if ( (LA66_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            	        alt66=1;
            	    }
            	    else if ( (LA66_0==DOUBLE_PIPE) ) {
            	        alt66=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 66, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt66) {
            	        case 1 :
            	            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:23: value= or_key
            	            {
            	            pushFollow(FOLLOW_or_key_in_fact_binding_expression3722);
            	            value=or_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
            	            if ( state.backtracking==0 ) {
            	              orToken = (value!=null?((Token)value.start):null);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:925:62: pipe= DOUBLE_PIPE
            	            {
            	            pipe=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3728); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOUBLE_PIPE.add(pipe);

            	            if ( state.backtracking==0 ) {
            	              orToken = pipe;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_fact_in_fact_binding_expression3733);
            	    fact202=fact();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_fact.add(fact202.getTree());


            	    // AST REWRITE
            	    // elements: fact, fact_binding_expression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 926:3: -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	    {
            	        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:926:6: ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_OR, orToken), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_fact.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding_expression"

    public static class fact_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:929:1: fact : pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) ;
    public final DRLParser.fact_return fact() throws RecognitionException {
        DRLParser.fact_return retval = new DRLParser.fact_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN204=null;
        Token RIGHT_PAREN206=null;
        DRLParser.pattern_type_return pattern_type203 = null;

        DRLParser.constraints_return constraints205 = null;


        Object LEFT_PAREN204_tree=null;
        Object RIGHT_PAREN206_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
        RewriteRuleSubtreeStream stream_pattern_type=new RewriteRuleSubtreeStream(adaptor,"rule pattern_type");
         boolean isFailedOnConstraints = true; helper.pushParaphrases(DroolsParaphraseTypes.PATTERN); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:932:2: ( pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:932:4: pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_pattern_type_in_fact3773);
            pattern_type203=pattern_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_type.add(pattern_type203.getTree());
            LEFT_PAREN204=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN204);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN204, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:935:4: ( constraints )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==ID||LA68_0==LEFT_PAREN) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:935:4: constraints
                    {
                    pushFollow(FOLLOW_constraints_in_fact3789);
                    constraints205=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints205.getTree());

                    }
                    break;

            }

            RIGHT_PAREN206=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact3795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN206);

            if ( state.backtracking==0 ) {
              	isFailedOnConstraints = false;	
            }
            if ( state.backtracking==0 ) {
              	if ((RIGHT_PAREN206!=null?RIGHT_PAREN206.getText():null).equals(")") ){ //WORKAROUND FOR ANTLR BUG!
              			helper.emit(RIGHT_PAREN206, DroolsEditorType.SYMBOL);
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
              		}	
            }


            // AST REWRITE
            // elements: constraints, pattern_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 941:2: -> ^( VT_FACT pattern_type ( constraints )? )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:941:5: ^( VT_FACT pattern_type ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT, "VT_FACT"), root_1);

                adaptor.addChild(root_1, stream_pattern_type.nextTree());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:941:28: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases();	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailedOnConstraints && input.LA(1) == EOF && input.get(input.index() - 1).getType() == WS){
            		if (!(helper.getActiveSentence().getContent().getLast() instanceof Integer) && input.LA(-1) != COLON) {
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "fact"

    public static class constraints_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraints"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:951:1: constraints : constraint ( COMMA constraint )* ;
    public final DRLParser.constraints_return constraints() throws RecognitionException {
        DRLParser.constraints_return retval = new DRLParser.constraints_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA208=null;
        DRLParser.constraint_return constraint207 = null;

        DRLParser.constraint_return constraint209 = null;


        Object COMMA208_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:952:2: ( constraint ( COMMA constraint )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:952:4: constraint ( COMMA constraint )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_in_constraints3827);
            constraint207=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint207.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:952:15: ( COMMA constraint )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:952:17: COMMA constraint
            	    {
            	    COMMA208=(Token)match(input,COMMA,FOLLOW_COMMA_in_constraints3831); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA208, DroolsEditorType.SYMBOL);
            	      		helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            	    }
            	    pushFollow(FOLLOW_constraint_in_constraints3838);
            	    constraint209=constraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint209.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraints"

    public static class constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:957:1: constraint : or_constr ;
    public final DRLParser.constraint_return constraint() throws RecognitionException {
        DRLParser.constraint_return retval = new DRLParser.constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.or_constr_return or_constr210 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:958:2: ( or_constr )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:958:4: or_constr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_or_constr_in_constraint3852);
            or_constr210=or_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr210.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint"

    public static class or_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_constr"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:961:1: or_constr : and_constr ( DOUBLE_PIPE and_constr )* ;
    public final DRLParser.or_constr_return or_constr() throws RecognitionException {
        DRLParser.or_constr_return retval = new DRLParser.or_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE212=null;
        DRLParser.and_constr_return and_constr211 = null;

        DRLParser.and_constr_return and_constr213 = null;


        Object DOUBLE_PIPE212_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:962:2: ( and_constr ( DOUBLE_PIPE and_constr )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:962:4: and_constr ( DOUBLE_PIPE and_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_constr_in_or_constr3863);
            and_constr211=and_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr211.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:962:15: ( DOUBLE_PIPE and_constr )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==DOUBLE_PIPE) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:962:17: DOUBLE_PIPE and_constr
            	    {
            	    DOUBLE_PIPE212=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_constr3867); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE212_tree = (Object)adaptor.create(DOUBLE_PIPE212);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE212_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE212, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_constr_in_or_constr3874);
            	    and_constr213=and_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr213.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_constr"

    public static class and_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_constr"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:966:1: and_constr : unary_constr ( DOUBLE_AMPER unary_constr )* ;
    public final DRLParser.and_constr_return and_constr() throws RecognitionException {
        DRLParser.and_constr_return retval = new DRLParser.and_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER215=null;
        DRLParser.unary_constr_return unary_constr214 = null;

        DRLParser.unary_constr_return unary_constr216 = null;


        Object DOUBLE_AMPER215_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:967:2: ( unary_constr ( DOUBLE_AMPER unary_constr )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:967:4: unary_constr ( DOUBLE_AMPER unary_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unary_constr_in_and_constr3889);
            unary_constr214=unary_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr214.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:967:17: ( DOUBLE_AMPER unary_constr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==DOUBLE_AMPER) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:967:19: DOUBLE_AMPER unary_constr
            	    {
            	    DOUBLE_AMPER215=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_constr3893); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER215_tree = (Object)adaptor.create(DOUBLE_AMPER215);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER215_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER215, DroolsEditorType.SYMBOL);;	
            	    }
            	    pushFollow(FOLLOW_unary_constr_in_and_constr3900);
            	    unary_constr216=unary_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr216.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_constr"

    public static class unary_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_constr"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:971:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );
    public final DRLParser.unary_constr_return unary_constr() throws RecognitionException {
        DRLParser.unary_constr_return retval = new DRLParser.unary_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN220=null;
        Token RIGHT_PAREN222=null;
        DRLParser.eval_key_return eval_key217 = null;

        DRLParser.paren_chunk_return paren_chunk218 = null;

        DRLParser.field_constraint_return field_constraint219 = null;

        DRLParser.or_constr_return or_constr221 = null;


        Object LEFT_PAREN220_tree=null;
        Object RIGHT_PAREN222_tree=null;

         boolean isFailed = true;	
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:975:2: ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN )
            int alt72=3;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:975:4: eval_key paren_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_eval_key_in_unary_constr3933);
                    eval_key217=eval_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(eval_key217.getTree(), root_0);
                    pushFollow(FOLLOW_paren_chunk_in_unary_constr3936);
                    paren_chunk218=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk218.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:976:4: field_constraint
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_field_constraint_in_unary_constr3941);
                    field_constraint219=field_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_constraint219.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:977:5: LEFT_PAREN or_constr RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN220=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_constr3947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN220, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_constr_in_unary_constr3957);
                    or_constr221=or_constr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr221.getTree());
                    RIGHT_PAREN222=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_constr3962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN222_tree = (Object)adaptor.create(RIGHT_PAREN222);
                    adaptor.addChild(root_0, RIGHT_PAREN222_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN222, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS)
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}

        }
        return retval;
    }
    // $ANTLR end "unary_constr"

    public static class field_constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_constraint"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:990:1: field_constraint : ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) );
    public final DRLParser.field_constraint_return field_constraint() throws RecognitionException {
        DRLParser.field_constraint_return retval = new DRLParser.field_constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token arw=null;
        DRLParser.label_return label223 = null;

        DRLParser.accessor_path_return accessor_path224 = null;

        DRLParser.or_restr_connective_return or_restr_connective225 = null;

        DRLParser.paren_chunk_return paren_chunk226 = null;

        DRLParser.accessor_path_return accessor_path227 = null;

        DRLParser.or_restr_connective_return or_restr_connective228 = null;


        Object arw_tree=null;
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");

        	boolean isArrow = false;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:993:3: ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID) ) {
                int LA74_1 = input.LA(2);

                if ( ((LA74_1>=ID && LA74_1<=DOT)||LA74_1==LEFT_PAREN||(LA74_1>=EQUALS && LA74_1<=LEFT_SQUARE)) ) {
                    alt74=2;
                }
                else if ( (LA74_1==COLON) ) {
                    alt74=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:993:5: label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )?
                    {
                    pushFollow(FOLLOW_label_in_field_constraint3982);
                    label223=label();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label.add(label223.getTree());
                    pushFollow(FOLLOW_accessor_path_in_field_constraint3984);
                    accessor_path224=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path224.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:994:3: ( or_restr_connective | arw= ARROW paren_chunk )?
                    int alt73=3;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {
                        alt73=1;
                    }
                    else if ( (LA73_0==LEFT_PAREN||(LA73_0>=EQUALS && LA73_0<=NOT_EQUALS)) ) {
                        alt73=1;
                    }
                    else if ( (LA73_0==ARROW) ) {
                        alt73=2;
                    }
                    switch (alt73) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:994:5: or_restr_connective
                            {
                            pushFollow(FOLLOW_or_restr_connective_in_field_constraint3991);
                            or_restr_connective225=or_restr_connective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective225.getTree());

                            }
                            break;
                        case 2 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:994:27: arw= ARROW paren_chunk
                            {
                            arw=(Token)match(input,ARROW,FOLLOW_ARROW_in_field_constraint3997); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ARROW.add(arw);

                            if ( state.backtracking==0 ) {
                              	helper.emit(arw, DroolsEditorType.SYMBOL);	
                            }
                            pushFollow(FOLLOW_paren_chunk_in_field_constraint4001);
                            paren_chunk226=paren_chunk();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk226.getTree());
                            if ( state.backtracking==0 ) {
                              isArrow = true;
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: accessor_path, accessor_path, label, or_restr_connective, paren_chunk, label
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 995:3: -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )?
                    if (isArrow) {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:995:17: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:995:39: ^( VT_FIELD accessor_path )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:995:66: ( ^( VK_EVAL[$arw] paren_chunk ) )?
                        if ( stream_paren_chunk.hasNext() ) {
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:995:66: ^( VK_EVAL[$arw] paren_chunk )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VK_EVAL, arw), root_1);

                            adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_paren_chunk.reset();

                    }
                    else // 996:3: -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:996:6: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:996:28: ^( VT_FIELD accessor_path ( or_restr_connective )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:996:53: ( or_restr_connective )?
                        if ( stream_or_restr_connective.hasNext() ) {
                            adaptor.addChild(root_2, stream_or_restr_connective.nextTree());

                        }
                        stream_or_restr_connective.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:997:4: accessor_path or_restr_connective
                    {
                    pushFollow(FOLLOW_accessor_path_in_field_constraint4055);
                    accessor_path227=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path227.getTree());
                    pushFollow(FOLLOW_or_restr_connective_in_field_constraint4057);
                    or_restr_connective228=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective228.getTree());


                    // AST REWRITE
                    // elements: or_restr_connective, accessor_path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 998:3: -> ^( VT_FIELD accessor_path or_restr_connective )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:998:6: ^( VT_FIELD accessor_path or_restr_connective )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_accessor_path.nextTree());
                        adaptor.addChild(root_1, stream_or_restr_connective.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "field_constraint"

    public static class label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1001:1: label : value= ID COLON -> VT_LABEL[$value] ;
    public final DRLParser.label_return label() throws RecognitionException {
        DRLParser.label_return retval = new DRLParser.label_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;
        Token COLON229=null;

        Object value_tree=null;
        Object COLON229_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1002:2: (value= ID COLON -> VT_LABEL[$value] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1002:4: value= ID COLON
            {
            value=(Token)match(input,ID,FOLLOW_ID_in_label4082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(value);

            if ( state.backtracking==0 ) {
              	helper.emit(value, DroolsEditorType.IDENTIFIER_VARIABLE);	
            }
            COLON229=(Token)match(input,COLON,FOLLOW_COLON_in_label4089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON229);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON229, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1004:3: -> VT_LABEL[$value]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_LABEL, value));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class or_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_restr_connective"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1007:1: or_restr_connective : and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* ;
    public final DRLParser.or_restr_connective_return or_restr_connective() throws RecognitionException {
        DRLParser.or_restr_connective_return retval = new DRLParser.or_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE231=null;
        DRLParser.and_restr_connective_return and_restr_connective230 = null;

        DRLParser.and_restr_connective_return and_restr_connective232 = null;


        Object DOUBLE_PIPE231_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1008:2: ( and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1008:4: and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4110);
            and_restr_connective230=and_restr_connective();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective230.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1008:25: ({...}? => DOUBLE_PIPE and_restr_connective )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==DOUBLE_PIPE) ) {
                    int LA75_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt75=1;
                    }


                }


                switch (alt75) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1008:26: {...}? => DOUBLE_PIPE and_restr_connective
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "or_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_PIPE231=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective4116); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE231_tree = (Object)adaptor.create(DOUBLE_PIPE231);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE231_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE231, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4124);
            	    and_restr_connective232=and_restr_connective();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective232.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_restr_connective"

    public static class and_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_restr_connective"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1021:1: and_restr_connective : constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* ;
    public final DRLParser.and_restr_connective_return and_restr_connective() throws RecognitionException {
        DRLParser.and_restr_connective_return retval = new DRLParser.and_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER234=null;
        DRLParser.constraint_expression_return constraint_expression233 = null;

        DRLParser.constraint_expression_return constraint_expression235 = null;


        Object DOUBLE_AMPER234_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1022:2: ( constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1022:4: constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4145);
            constraint_expression233=constraint_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression233.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1022:26: ({...}? => DOUBLE_AMPER constraint_expression )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==DOUBLE_AMPER) ) {
                    int LA76_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt76=1;
                    }


                }


                switch (alt76) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1022:27: {...}? => DOUBLE_AMPER constraint_expression
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "and_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_AMPER234=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_restr_connective4151); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER234_tree = (Object)adaptor.create(DOUBLE_AMPER234);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER234_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER234, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4158);
            	    constraint_expression235=constraint_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression235.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_restr_connective"

    public static class constraint_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_expression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1035:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );
    public final DRLParser.constraint_expression_return constraint_expression() throws RecognitionException {
        DRLParser.constraint_expression_return retval = new DRLParser.constraint_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN238=null;
        Token RIGHT_PAREN240=null;
        DRLParser.compound_operator_return compound_operator236 = null;

        DRLParser.simple_operator_return simple_operator237 = null;

        DRLParser.or_restr_connective_return or_restr_connective239 = null;


        Object LEFT_PAREN238_tree=null;
        Object RIGHT_PAREN240_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1037:2: ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN )
            int alt77=3;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1037:4: compound_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compound_operator_in_constraint_expression4188);
                    compound_operator236=compound_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_operator236.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1038:4: simple_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_operator_in_constraint_expression4193);
                    simple_operator237=simple_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_operator237.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1039:4: LEFT_PAREN or_restr_connective RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN238=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression4198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN238, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_restr_connective_in_constraint_expression4207);
                    or_restr_connective239=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_restr_connective239.getTree());
                    RIGHT_PAREN240=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression4212); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN240_tree = (Object)adaptor.create(RIGHT_PAREN240);
                    adaptor.addChild(root_0, RIGHT_PAREN240_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN240, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && 
            				input.LA(2) == ID && helper.validateLT(1, DroolsSoftKeywords.NOT)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF  && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.IN)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS){
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_END);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "constraint_expression"

    public static class simple_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_operator"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1085:1: simple_operator : ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value ;
    public final DRLParser.simple_operator_return simple_operator() throws RecognitionException {
        DRLParser.simple_operator_return retval = new DRLParser.simple_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS241=null;
        Token GREATER242=null;
        Token GREATER_EQUALS243=null;
        Token LESS244=null;
        Token LESS_EQUALS245=null;
        Token NOT_EQUALS246=null;
        DRLParser.not_key_return not_key247 = null;

        DRLParser.operator_key_return operator_key248 = null;

        DRLParser.operator_params_return operator_params249 = null;

        DRLParser.expression_value_return expression_value250 = null;


        Object EQUALS241_tree=null;
        Object GREATER242_tree=null;
        Object GREATER_EQUALS243_tree=null;
        Object LESS244_tree=null;
        Object LESS_EQUALS245_tree=null;
        Object NOT_EQUALS246_tree=null;

        if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1087:2: ( ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1088:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1088:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) )
            int alt80=7;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==EQUALS) ) {
                alt80=1;
            }
            else if ( (LA80_0==GREATER) ) {
                alt80=2;
            }
            else if ( (LA80_0==GREATER_EQUALS) ) {
                alt80=3;
            }
            else if ( (LA80_0==LESS) ) {
                alt80=4;
            }
            else if ( (LA80_0==LESS_EQUALS) ) {
                alt80=5;
            }
            else if ( (LA80_0==NOT_EQUALS) ) {
                alt80=6;
            }
            else if ( (LA80_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {
                alt80=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1089:3: EQUALS
                    {
                    EQUALS241=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator4247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS241_tree = (Object)adaptor.create(EQUALS241);
                    root_0 = (Object)adaptor.becomeRoot(EQUALS241_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(EQUALS241, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1090:4: GREATER
                    {
                    GREATER242=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER242_tree = (Object)adaptor.create(GREATER242);
                    root_0 = (Object)adaptor.becomeRoot(GREATER242_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER242, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1091:4: GREATER_EQUALS
                    {
                    GREATER_EQUALS243=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator4263); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_EQUALS243_tree = (Object)adaptor.create(GREATER_EQUALS243);
                    root_0 = (Object)adaptor.becomeRoot(GREATER_EQUALS243_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER_EQUALS243, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1092:4: LESS
                    {
                    LESS244=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS244_tree = (Object)adaptor.create(LESS244);
                    root_0 = (Object)adaptor.becomeRoot(LESS244_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS244, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1093:4: LESS_EQUALS
                    {
                    LESS_EQUALS245=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator4279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_EQUALS245_tree = (Object)adaptor.create(LESS_EQUALS245);
                    root_0 = (Object)adaptor.becomeRoot(LESS_EQUALS245_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS_EQUALS245, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1094:4: NOT_EQUALS
                    {
                    NOT_EQUALS246=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator4287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EQUALS246_tree = (Object)adaptor.create(NOT_EQUALS246);
                    root_0 = (Object)adaptor.becomeRoot(NOT_EQUALS246_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NOT_EQUALS246, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1095:4: ( not_key )? ( operator_key ( operator_params )? )
                    {
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1095:4: ( not_key )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {
                        int LA78_1 = input.LA(2);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                            alt78=1;
                        }
                    }
                    switch (alt78) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1095:4: not_key
                            {
                            pushFollow(FOLLOW_not_key_in_simple_operator4295);
                            not_key247=not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key247.getTree());

                            }
                            break;

                    }

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1096:3: ( operator_key ( operator_params )? )
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1096:5: operator_key ( operator_params )?
                    {
                    pushFollow(FOLLOW_operator_key_in_simple_operator4302);
                    operator_key248=operator_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(operator_key248.getTree(), root_0);
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1096:19: ( operator_params )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==LEFT_SQUARE) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1096:20: operator_params
                            {
                            pushFollow(FOLLOW_operator_params_in_simple_operator4306);
                            operator_params249=operator_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_params249.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            pushFollow(FOLLOW_expression_value_in_simple_operator4319);
            expression_value250=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value250.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_operator"

    public static class operator_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_params"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1102:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );
    public final DRLParser.operator_params_return operator_params() throws RecognitionException {
        DRLParser.operator_params_return retval = new DRLParser.operator_params_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.operator_args_return ops = null;

        DRLParser.square_chunk_return square_chunk251 = null;


        RewriteRuleSubtreeStream stream_operator_args=new RewriteRuleSubtreeStream(adaptor,"rule operator_args");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1103:2: ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1103:4: ( operator_args )=>ops= operator_args
                    {
                    pushFollow(FOLLOW_operator_args_in_operator_params4338);
                    ops=operator_args();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_operator_args.add(ops.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1104:2: -> VT_SQUARE_CHUNK[$ops.start, $ops.text]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (ops!=null?((Token)ops.start):null), (ops!=null?input.toString(ops.start,ops.stop):null)));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1105:4: square_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_square_chunk_in_operator_params4350);
                    square_chunk251=square_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk251.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_params"

    public static class operator_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_args"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1108:1: operator_args : LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE ;
    public final DRLParser.operator_args_return operator_args() throws RecognitionException {
        DRLParser.operator_args_return retval = new DRLParser.operator_args_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE252=null;
        Token COMMA254=null;
        Token RIGHT_SQUARE256=null;
        DRLParser.operator_arg_return operator_arg253 = null;

        DRLParser.operator_arg_return operator_arg255 = null;


        Object LEFT_SQUARE252_tree=null;
        Object COMMA254_tree=null;
        Object RIGHT_SQUARE256_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1109:2: ( LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1109:4: LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE252=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_operator_args4361); if (state.failed) return retval;
            pushFollow(FOLLOW_operator_arg_in_operator_args4364);
            operator_arg253=operator_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg253.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1109:30: ( COMMA operator_arg )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1109:31: COMMA operator_arg
            	    {
            	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_operator_args4367); if (state.failed) return retval;
            	    pushFollow(FOLLOW_operator_arg_in_operator_args4370);
            	    operator_arg255=operator_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg255.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            RIGHT_SQUARE256=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_operator_args4374); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_args"

    public static class operator_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_arg"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1112:1: operator_arg : TimePeriod ;
    public final DRLParser.operator_arg_return operator_arg() throws RecognitionException {
        DRLParser.operator_arg_return retval = new DRLParser.operator_arg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TimePeriod257=null;

        Object TimePeriod257_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1113:2: ( TimePeriod )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1113:4: TimePeriod
            {
            root_0 = (Object)adaptor.nil();

            TimePeriod257=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_operator_arg4387); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TimePeriod257_tree = (Object)adaptor.create(TimePeriod257);
            adaptor.addChild(root_0, TimePeriod257_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_arg"

    public static class compound_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_operator"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1117:1: compound_operator : ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN ;
    public final DRLParser.compound_operator_return compound_operator() throws RecognitionException {
        DRLParser.compound_operator_return retval = new DRLParser.compound_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN261=null;
        Token COMMA263=null;
        Token RIGHT_PAREN265=null;
        DRLParser.in_key_return in_key258 = null;

        DRLParser.not_key_return not_key259 = null;

        DRLParser.in_key_return in_key260 = null;

        DRLParser.expression_value_return expression_value262 = null;

        DRLParser.expression_value_return expression_value264 = null;


        Object LEFT_PAREN261_tree=null;
        Object COMMA263_tree=null;
        Object RIGHT_PAREN265_tree=null;

         if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR); 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1119:2: ( ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1120:2: ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1120:2: ( in_key | not_key in_key )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))))) {
                int LA83_1 = input.LA(2);

                if ( (LA83_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
                    alt83=2;
                }
                else if ( (LA83_1==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
                    alt83=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1120:4: in_key
                    {
                    pushFollow(FOLLOW_in_key_in_compound_operator4410);
                    in_key258=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key258.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1120:14: not_key in_key
                    {
                    pushFollow(FOLLOW_not_key_in_compound_operator4415);
                    not_key259=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key259.getTree());
                    pushFollow(FOLLOW_in_key_in_compound_operator4417);
                    in_key260=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key260.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            LEFT_PAREN261=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN261, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_expression_value_in_compound_operator4436);
            expression_value262=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value262.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1123:21: ( COMMA expression_value )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1123:23: COMMA expression_value
            	    {
            	    COMMA263=(Token)match(input,COMMA,FOLLOW_COMMA_in_compound_operator4440); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA263, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_expression_value_in_compound_operator4445);
            	    expression_value264=expression_value();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value264.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            RIGHT_PAREN265=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN265_tree = (Object)adaptor.create(RIGHT_PAREN265);
            adaptor.addChild(root_0, RIGHT_PAREN265_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN265, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
            		helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}	
        }
        return retval;
    }
    // $ANTLR end "compound_operator"

    public static class expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_value"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1134:1: expression_value : ( accessor_path | signed_literal | paren_chunk ) ;
    public final DRLParser.expression_value_return expression_value() throws RecognitionException {
        DRLParser.expression_value_return retval = new DRLParser.expression_value_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accessor_path_return accessor_path266 = null;

        DRLParser.signed_literal_return signed_literal267 = null;

        DRLParser.paren_chunk_return paren_chunk268 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1135:2: ( ( accessor_path | signed_literal | paren_chunk ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1135:4: ( accessor_path | signed_literal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1135:4: ( accessor_path | signed_literal | paren_chunk )
            int alt85=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt85=1;
                }
                break;
            case STRING:
            case BOOL:
            case DECIMAL:
            case NULL:
            case PLUS:
            case MINUS:
            case HEX:
            case FLOAT:
                {
                alt85=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1135:5: accessor_path
                    {
                    pushFollow(FOLLOW_accessor_path_in_expression_value4474);
                    accessor_path266=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_path266.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1136:4: signed_literal
                    {
                    pushFollow(FOLLOW_signed_literal_in_expression_value4479);
                    signed_literal267=signed_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_literal267.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1137:4: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_expression_value4485);
                    paren_chunk268=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk268.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if (helper.isEditorInterfaceEnabled && !(input.LA(1) == EOF && input.get(input.index() - 1).getType() != WS))
              			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF) {
            		if (input.LA(1) == DOUBLE_PIPE) {
            			helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "expression_value"

    public static class signed_literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_literal"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1151:1: signed_literal : ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL );
    public final DRLParser.signed_literal_return signed_literal() throws RecognitionException {
        DRLParser.signed_literal_return retval = new DRLParser.signed_literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING269=null;
        Token BOOL273=null;
        Token NULL274=null;
        DRLParser.signed_decimal_return signed_decimal270 = null;

        DRLParser.signed_hex_return signed_hex271 = null;

        DRLParser.signed_float_return signed_float272 = null;


        Object STRING269_tree=null;
        Object BOOL273_tree=null;
        Object NULL274_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1152:9: ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL )
            int alt86=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt86=1;
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case HEX:
                    {
                    alt86=3;
                    }
                    break;
                case DECIMAL:
                    {
                    alt86=2;
                    }
                    break;
                case FLOAT:
                    {
                    alt86=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 2, input);

                    throw nvae;
                }

                }
                break;
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case HEX:
                    {
                    alt86=3;
                    }
                    break;
                case DECIMAL:
                    {
                    alt86=2;
                    }
                    break;
                case FLOAT:
                    {
                    alt86=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 3, input);

                    throw nvae;
                }

                }
                break;
            case DECIMAL:
                {
                alt86=2;
                }
                break;
            case HEX:
                {
                alt86=3;
                }
                break;
            case FLOAT:
                {
                alt86=4;
                }
                break;
            case BOOL:
                {
                alt86=5;
                }
                break;
            case NULL:
                {
                alt86=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1152:17: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING269=(Token)match(input,STRING,FOLLOW_STRING_in_signed_literal4517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING269_tree = (Object)adaptor.create(STRING269);
                    adaptor.addChild(root_0, STRING269_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(STRING269, DroolsEditorType.STRING_CONST);  
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1153:17: signed_decimal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_decimal_in_signed_literal4554);
                    signed_decimal270=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal270.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1154:17: signed_hex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_hex_in_signed_literal4572);
                    signed_hex271=signed_hex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_hex271.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1155:17: signed_float
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_float_in_signed_literal4590);
                    signed_float272=signed_float();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_float272.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1156:17: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL273=(Token)match(input,BOOL,FOLLOW_BOOL_in_signed_literal4608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL273_tree = (Object)adaptor.create(BOOL273);
                    adaptor.addChild(root_0, BOOL273_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(BOOL273, DroolsEditorType.BOOLEAN_CONST); 
                    }

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1157:17: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL274=(Token)match(input,NULL,FOLLOW_NULL_in_signed_literal4647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL274_tree = (Object)adaptor.create(NULL274);
                    adaptor.addChild(root_0, NULL274_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(NULL274, DroolsEditorType.NULL_CONST); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_literal"

    public static class signed_decimal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1160:1: signed_decimal : sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] ;
    public final DRLParser.signed_decimal_return signed_decimal() throws RecognitionException {
        DRLParser.signed_decimal_return retval = new DRLParser.signed_decimal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_decimal_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_decimal_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_decimal_match");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1161:9: (sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1161:17: sdm= signed_decimal_match
            {
            pushFollow(FOLLOW_signed_decimal_match_in_signed_decimal4701);
            sdm=signed_decimal_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_decimal_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1161:42: -> SIGNED_DECIMAL[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_DECIMAL, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal"

    public static class signed_decimal_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal_match"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1164:1: signed_decimal_match : ( PLUS | MINUS )? DECIMAL ;
    public final DRLParser.signed_decimal_match_return signed_decimal_match() throws RecognitionException {
        DRLParser.signed_decimal_match_return retval = new DRLParser.signed_decimal_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS275=null;
        Token MINUS276=null;
        Token DECIMAL277=null;

        Object PLUS275_tree=null;
        Object MINUS276_tree=null;
        Object DECIMAL277_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1165:9: ( ( PLUS | MINUS )? DECIMAL )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1165:17: ( PLUS | MINUS )? DECIMAL
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1165:17: ( PLUS | MINUS )?
            int alt87=3;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==PLUS) ) {
                alt87=1;
            }
            else if ( (LA87_0==MINUS) ) {
                alt87=2;
            }
            switch (alt87) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1165:18: PLUS
                    {
                    PLUS275=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_decimal_match4738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS275_tree = (Object)adaptor.create(PLUS275);
                    adaptor.addChild(root_0, PLUS275_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS275, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1165:81: MINUS
                    {
                    MINUS276=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_decimal_match4744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS276_tree = (Object)adaptor.create(MINUS276);
                    adaptor.addChild(root_0, MINUS276_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS276, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            DECIMAL277=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_signed_decimal_match4766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECIMAL277_tree = (Object)adaptor.create(DECIMAL277);
            adaptor.addChild(root_0, DECIMAL277_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(DECIMAL277, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal_match"

    public static class signed_hex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1169:1: signed_hex : sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] ;
    public final DRLParser.signed_hex_return signed_hex() throws RecognitionException {
        DRLParser.signed_hex_return retval = new DRLParser.signed_hex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_hex_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_hex_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_hex_match");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1170:9: (sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1170:17: sdm= signed_hex_match
            {
            pushFollow(FOLLOW_signed_hex_match_in_signed_hex4801);
            sdm=signed_hex_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_hex_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1170:38: -> SIGNED_HEX[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_HEX, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex"

    public static class signed_hex_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex_match"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1173:1: signed_hex_match : ( PLUS | MINUS )? HEX ;
    public final DRLParser.signed_hex_match_return signed_hex_match() throws RecognitionException {
        DRLParser.signed_hex_match_return retval = new DRLParser.signed_hex_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS278=null;
        Token MINUS279=null;
        Token HEX280=null;

        Object PLUS278_tree=null;
        Object MINUS279_tree=null;
        Object HEX280_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1174:9: ( ( PLUS | MINUS )? HEX )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1174:17: ( PLUS | MINUS )? HEX
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1174:17: ( PLUS | MINUS )?
            int alt88=3;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==PLUS) ) {
                alt88=1;
            }
            else if ( (LA88_0==MINUS) ) {
                alt88=2;
            }
            switch (alt88) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1174:18: PLUS
                    {
                    PLUS278=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_hex_match4838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS278_tree = (Object)adaptor.create(PLUS278);
                    adaptor.addChild(root_0, PLUS278_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS278, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1174:81: MINUS
                    {
                    MINUS279=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_hex_match4844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS279_tree = (Object)adaptor.create(MINUS279);
                    adaptor.addChild(root_0, MINUS279_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS279, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            HEX280=(Token)match(input,HEX,FOLLOW_HEX_in_signed_hex_match4866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            HEX280_tree = (Object)adaptor.create(HEX280);
            adaptor.addChild(root_0, HEX280_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(HEX280, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex_match"

    public static class signed_float_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1178:1: signed_float : sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] ;
    public final DRLParser.signed_float_return signed_float() throws RecognitionException {
        DRLParser.signed_float_return retval = new DRLParser.signed_float_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_float_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_float_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_float_match");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1179:9: (sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1179:17: sdm= signed_float_match
            {
            pushFollow(FOLLOW_signed_float_match_in_signed_float4901);
            sdm=signed_float_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_float_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1179:40: -> SIGNED_FLOAT[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_FLOAT, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float"

    public static class signed_float_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float_match"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1182:1: signed_float_match : ( PLUS | MINUS )? FLOAT ;
    public final DRLParser.signed_float_match_return signed_float_match() throws RecognitionException {
        DRLParser.signed_float_match_return retval = new DRLParser.signed_float_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS281=null;
        Token MINUS282=null;
        Token FLOAT283=null;

        Object PLUS281_tree=null;
        Object MINUS282_tree=null;
        Object FLOAT283_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1183:9: ( ( PLUS | MINUS )? FLOAT )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1183:17: ( PLUS | MINUS )? FLOAT
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1183:17: ( PLUS | MINUS )?
            int alt89=3;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==PLUS) ) {
                alt89=1;
            }
            else if ( (LA89_0==MINUS) ) {
                alt89=2;
            }
            switch (alt89) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1183:18: PLUS
                    {
                    PLUS281=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_float_match4938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS281_tree = (Object)adaptor.create(PLUS281);
                    adaptor.addChild(root_0, PLUS281_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS281, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1183:81: MINUS
                    {
                    MINUS282=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_float_match4944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS282_tree = (Object)adaptor.create(MINUS282);
                    adaptor.addChild(root_0, MINUS282_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS282, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            FLOAT283=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_signed_float_match4966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLOAT283_tree = (Object)adaptor.create(FLOAT283);
            adaptor.addChild(root_0, FLOAT283_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(FLOAT283, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float_match"

    public static class pattern_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_type"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1186:1: pattern_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.pattern_type_return pattern_type() throws RecognitionException {
        DRLParser.pattern_type_return retval = new DRLParser.pattern_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition284 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1187:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1187:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type4987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1187:11: (id+= DOT id+= ID )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==DOT) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1187:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_type4993); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type4997); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PATTERN, helper.buildStringFromTokens(list_id));	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1190:6: ( dimension_definition )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==LEFT_SQUARE) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1190:6: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_pattern_type5012);
            	    dimension_definition284=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition284.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);



            // AST REWRITE
            // elements: ID, dimension_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1191:3: -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1191:6: ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN_TYPE, "VT_PATTERN_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1191:28: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern_type"

    public static class data_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1194:1: data_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.data_type_return data_type() throws RecognitionException {
        DRLParser.data_type_return retval = new DRLParser.data_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition285 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1195:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1195:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_data_type5040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1195:11: (id+= DOT id+= ID )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==DOT) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1195:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_data_type5046); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_data_type5050); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1195:31: ( dimension_definition )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==LEFT_SQUARE) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1195:31: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_data_type5055);
            	    dimension_definition285=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition285.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);	
            }


            // AST REWRITE
            // elements: ID, dimension_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1197:3: -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1197:6: ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_DATA_TYPE, "VT_DATA_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1197:25: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class dimension_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dimension_definition"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1200:1: dimension_definition : LEFT_SQUARE RIGHT_SQUARE ;
    public final DRLParser.dimension_definition_return dimension_definition() throws RecognitionException {
        DRLParser.dimension_definition_return retval = new DRLParser.dimension_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE286=null;
        Token RIGHT_SQUARE287=null;

        Object LEFT_SQUARE286_tree=null;
        Object RIGHT_SQUARE287_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1201:2: ( LEFT_SQUARE RIGHT_SQUARE )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1201:4: LEFT_SQUARE RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE286=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_dimension_definition5084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE286_tree = (Object)adaptor.create(LEFT_SQUARE286);
            adaptor.addChild(root_0, LEFT_SQUARE286_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_SQUARE286, DroolsEditorType.SYMBOL);	
            }
            RIGHT_SQUARE287=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_dimension_definition5091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE287_tree = (Object)adaptor.create(RIGHT_SQUARE287);
            adaptor.addChild(root_0, RIGHT_SQUARE287_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_SQUARE287, DroolsEditorType.SYMBOL);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dimension_definition"

    public static class accessor_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_path"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1205:1: accessor_path : accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) ;
    public final DRLParser.accessor_path_return accessor_path() throws RecognitionException {
        DRLParser.accessor_path_return retval = new DRLParser.accessor_path_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT289=null;
        DRLParser.accessor_element_return accessor_element288 = null;

        DRLParser.accessor_element_return accessor_element290 = null;


        Object DOT289_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_accessor_element=new RewriteRuleSubtreeStream(adaptor,"rule accessor_element");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1206:2: ( accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1206:4: accessor_element ( DOT accessor_element )*
            {
            pushFollow(FOLLOW_accessor_element_in_accessor_path5105);
            accessor_element288=accessor_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element288.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1206:21: ( DOT accessor_element )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==DOT) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1206:23: DOT accessor_element
            	    {
            	    DOT289=(Token)match(input,DOT,FOLLOW_DOT_in_accessor_path5109); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT289);

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOT289, DroolsEditorType.IDENTIFIER);	
            	    }
            	    pushFollow(FOLLOW_accessor_element_in_accessor_path5113);
            	    accessor_element290=accessor_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element290.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);



            // AST REWRITE
            // elements: accessor_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1207:2: -> ^( VT_ACCESSOR_PATH ( accessor_element )+ )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1207:5: ^( VT_ACCESSOR_PATH ( accessor_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_PATH, "VT_ACCESSOR_PATH"), root_1);

                if ( !(stream_accessor_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_accessor_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessor_element.nextTree());

                }
                stream_accessor_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_path"

    public static class accessor_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_element"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1210:1: accessor_element : ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) ;
    public final DRLParser.accessor_element_return accessor_element() throws RecognitionException {
        DRLParser.accessor_element_return retval = new DRLParser.accessor_element_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID291=null;
        DRLParser.square_chunk_return square_chunk292 = null;


        Object ID291_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1211:2: ( ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1211:4: ID ( square_chunk )*
            {
            ID291=(Token)match(input,ID,FOLLOW_ID_in_accessor_element5137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID291);

            if ( state.backtracking==0 ) {
              	helper.emit(ID291, DroolsEditorType.IDENTIFIER);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1212:3: ( square_chunk )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==LEFT_SQUARE) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1212:3: square_chunk
            	    {
            	    pushFollow(FOLLOW_square_chunk_in_accessor_element5143);
            	    square_chunk292=square_chunk();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_square_chunk.add(square_chunk292.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);



            // AST REWRITE
            // elements: square_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1213:2: -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1213:5: ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_ELEMENT, "VT_ACCESSOR_ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1213:30: ( square_chunk )*
                while ( stream_square_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_square_chunk.nextTree());

                }
                stream_square_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_element"

    public static class rhs_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1219:1: rhs_chunk : rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] ;
    public final DRLParser.rhs_chunk_return rhs_chunk() throws RecognitionException {
        DRLParser.rhs_chunk_return retval = new DRLParser.rhs_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rhs_chunk_data_return rc = null;


        RewriteRuleSubtreeStream stream_rhs_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk_data");

        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1222:3: (rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1222:5: rc= rhs_chunk_data
            {
            pushFollow(FOLLOW_rhs_chunk_data_in_rhs_chunk5175);
            rc=rhs_chunk_data();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk_data.add(rc.getTree());
            if ( state.backtracking==0 ) {
              text = (rc!=null?input.toString(rc.start,rc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1223:2: -> VT_RHS_CHUNK[$rc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_RHS_CHUNK, (rc!=null?((Token)rc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk"

    public static class rhs_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk_data"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1226:1: rhs_chunk_data : THEN ( not_end_key )* end_key ( SEMICOLON )? ;
    public final DRLParser.rhs_chunk_data_return rhs_chunk_data() throws RecognitionException {
        DRLParser.rhs_chunk_data_return retval = new DRLParser.rhs_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token THEN293=null;
        Token SEMICOLON296=null;
        DRLParser.not_end_key_return not_end_key294 = null;

        DRLParser.end_key_return end_key295 = null;


        Object THEN293_tree=null;
        Object SEMICOLON296_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1227:2: ( THEN ( not_end_key )* end_key ( SEMICOLON )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1227:4: THEN ( not_end_key )* end_key ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            THEN293=(Token)match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data5194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN293_tree = (Object)adaptor.create(THEN293);
            adaptor.addChild(root_0, THEN293_tree);
            }
            if ( state.backtracking==0 ) {
              	if ((THEN293!=null?THEN293.getText():null).equalsIgnoreCase("then")){
              			helper.emit(THEN293, DroolsEditorType.KEYWORD);
              			helper.emit(Location.LOCATION_RHS);
              		}	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1232:4: ( not_end_key )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||(!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) {
                    int LA96_1 = input.LA(2);

                    if ( ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                        alt96=1;
                    }


                }
                else if ( ((LA96_0>=VT_COMPILATION_UNIT && LA96_0<=SEMICOLON)||(LA96_0>=DOT && LA96_0<=MISC)) && ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1232:4: not_end_key
            	    {
            	    pushFollow(FOLLOW_not_end_key_in_rhs_chunk_data5203);
            	    not_end_key294=not_end_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_end_key294.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_rhs_chunk_data5209);
            end_key295=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, end_key295.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1234:3: ( SEMICOLON )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==SEMICOLON) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1234:3: SEMICOLON
                    {
                    SEMICOLON296=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data5214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON296_tree = (Object)adaptor.create(SEMICOLON296);
                    adaptor.addChild(root_0, SEMICOLON296_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON296, DroolsEditorType.KEYWORD);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk_data"

    public static class curly_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1237:1: curly_chunk : cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] ;
    public final DRLParser.curly_chunk_return curly_chunk() throws RecognitionException {
        DRLParser.curly_chunk_return retval = new DRLParser.curly_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.curly_chunk_data_return cc = null;


        RewriteRuleSubtreeStream stream_curly_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk_data");

        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1240:3: (cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1240:5: cc= curly_chunk_data[false]
            {
            pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk5233);
            cc=curly_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk_data.add(cc.getTree());
            if ( state.backtracking==0 ) {
              text = (cc!=null?input.toString(cc.start,cc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1241:2: -> VT_CURLY_CHUNK[$cc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_CURLY_CHUNK, (cc!=null?((Token)cc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk"

    public static class curly_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk_data"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1244:1: curly_chunk_data[boolean isRecursive] : lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY ;
    public final DRLParser.curly_chunk_data_return curly_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.curly_chunk_data_return retval = new DRLParser.curly_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lc1=null;
        Token any=null;
        Token rc1=null;
        DRLParser.curly_chunk_data_return curly_chunk_data297 = null;


        Object lc1_tree=null;
        Object any_tree=null;
        Object rc1_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1245:2: (lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1245:4: lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            lc1=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_chunk_data5256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lc1_tree = (Object)adaptor.create(lc1);
            adaptor.addChild(root_0, lc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1252:4: (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )*
            loop98:
            do {
                int alt98=3;
                int LA98_0 = input.LA(1);

                if ( ((LA98_0>=VT_COMPILATION_UNIT && LA98_0<=THEN)||(LA98_0>=QUESTION && LA98_0<=MISC)) ) {
                    alt98=1;
                }
                else if ( (LA98_0==LEFT_CURLY) ) {
                    alt98=2;
                }


                switch (alt98) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1252:5: any=~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=THEN)||(input.LA(1)>=QUESTION && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1252:94: curly_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk_data5284);
            	    curly_chunk_data297=curly_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_chunk_data297.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            rc1=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_chunk_data5295); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rc1_tree = (Object)adaptor.create(rc1);
            adaptor.addChild(root_0, rc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk_data"

    public static class paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1262:1: paren_chunk : pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.paren_chunk_return paren_chunk() throws RecognitionException {
        DRLParser.paren_chunk_return retval = new DRLParser.paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk_data");

        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1265:3: (pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1265:5: pc= paren_chunk_data[false]
            {
            pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk5316);
            pc=paren_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1266:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk"

    public static class paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk_data"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1269:1: paren_chunk_data[boolean isRecursive] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN ;
    public final DRLParser.paren_chunk_data_return paren_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.paren_chunk_data_return retval = new DRLParser.paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.paren_chunk_data_return paren_chunk_data298 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1270:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1270:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_chunk_data5340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1277:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )*
            loop99:
            do {
                int alt99=3;
                int LA99_0 = input.LA(1);

                if ( ((LA99_0>=VT_COMPILATION_UNIT && LA99_0<=BOOL)||(LA99_0>=FROM && LA99_0<=MISC)) ) {
                    alt99=1;
                }
                else if ( (LA99_0==LEFT_PAREN) ) {
                    alt99=2;
                }


                switch (alt99) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1277:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1277:94: paren_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk_data5368);
            	    paren_chunk_data298=paren_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk_data298.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_chunk_data5379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk_data"

    public static class square_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1287:1: square_chunk : sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] ;
    public final DRLParser.square_chunk_return square_chunk() throws RecognitionException {
        DRLParser.square_chunk_return retval = new DRLParser.square_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.square_chunk_data_return sc = null;


        RewriteRuleSubtreeStream stream_square_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk_data");

        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1290:3: (sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1290:5: sc= square_chunk_data[false]
            {
            pushFollow(FOLLOW_square_chunk_data_in_square_chunk5400);
            sc=square_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_square_chunk_data.add(sc.getTree());
            if ( state.backtracking==0 ) {
              text = (sc!=null?input.toString(sc.start,sc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1291:2: -> VT_SQUARE_CHUNK[$sc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (sc!=null?((Token)sc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk"

    public static class square_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk_data"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1294:1: square_chunk_data[boolean isRecursive] : ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE ;
    public final DRLParser.square_chunk_data_return square_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.square_chunk_data_return retval = new DRLParser.square_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ls1=null;
        Token any=null;
        Token rs1=null;
        DRLParser.square_chunk_data_return square_chunk_data299 = null;


        Object ls1_tree=null;
        Object any_tree=null;
        Object rs1_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1295:2: (ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1295:4: ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            ls1=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_square_chunk_data5423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ls1_tree = (Object)adaptor.create(ls1);
            adaptor.addChild(root_0, ls1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(ls1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(ls1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1302:4: (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )*
            loop100:
            do {
                int alt100=3;
                int LA100_0 = input.LA(1);

                if ( ((LA100_0>=VT_COMPILATION_UNIT && LA100_0<=NOT_EQUALS)||(LA100_0>=NULL && LA100_0<=MISC)) ) {
                    alt100=1;
                }
                else if ( (LA100_0==LEFT_SQUARE) ) {
                    alt100=2;
                }


                switch (alt100) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1302:5: any=~ ( LEFT_SQUARE | RIGHT_SQUARE )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=NOT_EQUALS)||(input.LA(1)>=NULL && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1302:95: square_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_square_chunk_data_in_square_chunk_data5450);
            	    square_chunk_data299=square_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk_data299.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            rs1=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_square_chunk_data5461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rs1_tree = (Object)adaptor.create(rs1);
            adaptor.addChild(root_0, rs1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rs1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rs1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk_data"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1315:1: literal : ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL );
    public final DRLParser.literal_return literal() throws RecognitionException {
        DRLParser.literal_return retval = new DRLParser.literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING300=null;
        Token DECIMAL301=null;
        Token HEX302=null;
        Token FLOAT303=null;
        Token BOOL304=null;
        Token NULL305=null;

        Object STRING300_tree=null;
        Object DECIMAL301_tree=null;
        Object HEX302_tree=null;
        Object FLOAT303_tree=null;
        Object BOOL304_tree=null;
        Object NULL305_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1316:2: ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL )
            int alt101=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt101=1;
                }
                break;
            case DECIMAL:
                {
                alt101=2;
                }
                break;
            case HEX:
                {
                alt101=3;
                }
                break;
            case FLOAT:
                {
                alt101=4;
                }
                break;
            case BOOL:
                {
                alt101=5;
                }
                break;
            case NULL:
                {
                alt101=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1316:4: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING300=(Token)match(input,STRING,FOLLOW_STRING_in_literal5479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING300_tree = (Object)adaptor.create(STRING300);
                    adaptor.addChild(root_0, STRING300_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(STRING300, DroolsEditorType.STRING_CONST);	
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1317:4: DECIMAL
                    {
                    root_0 = (Object)adaptor.nil();

                    DECIMAL301=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL301_tree = (Object)adaptor.create(DECIMAL301);
                    adaptor.addChild(root_0, DECIMAL301_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(DECIMAL301, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1318:4: HEX
                    {
                    root_0 = (Object)adaptor.nil();

                    HEX302=(Token)match(input,HEX,FOLLOW_HEX_in_literal5511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX302_tree = (Object)adaptor.create(HEX302);
                    adaptor.addChild(root_0, HEX302_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(HEX302, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1319:4: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();

                    FLOAT303=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT303_tree = (Object)adaptor.create(FLOAT303);
                    adaptor.addChild(root_0, FLOAT303_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FLOAT303, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1320:4: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL304=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL304_tree = (Object)adaptor.create(BOOL304);
                    adaptor.addChild(root_0, BOOL304_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL304, DroolsEditorType.BOOLEAN_CONST);	
                    }

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1321:4: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL305=(Token)match(input,NULL,FOLLOW_NULL_in_literal5560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL305_tree = (Object)adaptor.create(NULL305);
                    adaptor.addChild(root_0, NULL305_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NULL305, DroolsEditorType.NULL_CONST);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1324:1: typeList : type ( COMMA type )* ;
    public final DRLParser.typeList_return typeList() throws RecognitionException {
        DRLParser.typeList_return retval = new DRLParser.typeList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA307=null;
        DRLParser.type_return type306 = null;

        DRLParser.type_return type308 = null;


        Object COMMA307_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1325:2: ( type ( COMMA type )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1325:4: type ( COMMA type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5591);
            type306=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type306.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1325:9: ( COMMA type )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==COMMA) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1325:10: COMMA type
            	    {
            	    COMMA307=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5594); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA307_tree = (Object)adaptor.create(COMMA307);
            	    adaptor.addChild(root_0, COMMA307_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList5596);
            	    type308=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type308.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class typeNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeNameList"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1328:1: typeNameList : typeName ( COMMA typeName )* ;
    public final DRLParser.typeNameList_return typeNameList() throws RecognitionException {
        DRLParser.typeNameList_return retval = new DRLParser.typeNameList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA310=null;
        DRLParser.typeName_return typeName309 = null;

        DRLParser.typeName_return typeName311 = null;


        Object COMMA310_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1329:2: ( typeName ( COMMA typeName )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1329:4: typeName ( COMMA typeName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeName_in_typeNameList5610);
            typeName309=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName309.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1329:13: ( COMMA typeName )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1329:14: COMMA typeName
            	    {
            	    COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeNameList5613); if (state.failed) return retval;
            	    pushFollow(FOLLOW_typeName_in_typeNameList5616);
            	    typeName311=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName311.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeNameList"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1333:1: type options {backtrack=true; memoize=true; } : ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) );
    public final DRLParser.type_return type() throws RecognitionException {
        DRLParser.type_return retval = new DRLParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE313=null;
        Token RIGHT_SQUARE314=null;
        Token ID315=null;
        Token DOT317=null;
        Token ID318=null;
        Token LEFT_SQUARE320=null;
        Token RIGHT_SQUARE321=null;
        DRLParser.primitiveType_return primitiveType312 = null;

        DRLParser.typeArguments_return typeArguments316 = null;

        DRLParser.typeArguments_return typeArguments319 = null;


        Object LEFT_SQUARE313_tree=null;
        Object RIGHT_SQUARE314_tree=null;
        Object ID315_tree=null;
        Object DOT317_tree=null;
        Object ID318_tree=null;
        Object LEFT_SQUARE320_tree=null;
        Object RIGHT_SQUARE321_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:2: ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ID) ) {
                int LA109_1 = input.LA(2);

                if ( (((synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred11_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))))) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:5: ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:24: ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:26: primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type5656);
                    primitiveType312=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType312.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:40: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==LEFT_SQUARE) ) {
                            int LA104_2 = input.LA(2);

                            if ( (LA104_2==RIGHT_SQUARE) ) {
                                int LA104_3 = input.LA(3);

                                if ( (synpred12_DRL()) ) {
                                    alt104=1;
                                }


                            }


                        }


                        switch (alt104) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:41: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE313=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5666); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE313_tree = (Object)adaptor.create(LEFT_SQUARE313);
                    	    adaptor.addChild(root_0, LEFT_SQUARE313_tree);
                    	    }
                    	    RIGHT_SQUARE314=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5668); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE314_tree = (Object)adaptor.create(RIGHT_SQUARE314);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE314_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop104;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:6: ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    ID315=(Token)match(input,ID,FOLLOW_ID_in_type5679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID315_tree = (Object)adaptor.create(ID315);
                    adaptor.addChild(root_0, ID315_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:9: ( ( typeArguments )=> typeArguments )?
                    int alt105=2;
                    alt105 = dfa105.predict(input);
                    switch (alt105) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:10: ( typeArguments )=> typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_type5686);
                            typeArguments316=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments316.getTree());

                            }
                            break;

                    }

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:43: ( DOT ID ( ( typeArguments )=> typeArguments )? )*
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==DOT) ) {
                            int LA107_2 = input.LA(2);

                            if ( (LA107_2==ID) ) {
                                alt107=1;
                            }


                        }


                        switch (alt107) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:44: DOT ID ( ( typeArguments )=> typeArguments )?
                    	    {
                    	    DOT317=(Token)match(input,DOT,FOLLOW_DOT_in_type5691); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT317_tree = (Object)adaptor.create(DOT317);
                    	    adaptor.addChild(root_0, DOT317_tree);
                    	    }
                    	    ID318=(Token)match(input,ID,FOLLOW_ID_in_type5693); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID318_tree = (Object)adaptor.create(ID318);
                    	    adaptor.addChild(root_0, ID318_tree);
                    	    }
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:51: ( ( typeArguments )=> typeArguments )?
                    	    int alt106=2;
                    	    alt106 = dfa106.predict(input);
                    	    switch (alt106) {
                    	        case 1 :
                    	            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:52: ( typeArguments )=> typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_type5700);
                    	            typeArguments319=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments319.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop107;
                        }
                    } while (true);

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:88: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==LEFT_SQUARE) ) {
                            int LA108_2 = input.LA(2);

                            if ( (LA108_2==RIGHT_SQUARE) ) {
                                int LA108_3 = input.LA(3);

                                if ( (synpred15_DRL()) ) {
                                    alt108=1;
                                }


                            }


                        }


                        switch (alt108) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:89: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE320=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5715); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE320_tree = (Object)adaptor.create(LEFT_SQUARE320);
                    	    adaptor.addChild(root_0, LEFT_SQUARE320_tree);
                    	    }
                    	    RIGHT_SQUARE321=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5717); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE321_tree = (Object)adaptor.create(RIGHT_SQUARE321);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE321_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1339:1: typeName : ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] ;
    public final DRLParser.typeName_return typeName() throws RecognitionException {
        DRLParser.typeName_return retval = new DRLParser.typeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID322=null;
        Token DOT323=null;
        Token ID324=null;

        Object ID322_tree=null;
        Object DOT323_tree=null;
        Object ID324_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1340:2: ( ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1340:6: ID ( DOT ID )*
            {
            ID322=(Token)match(input,ID,FOLLOW_ID_in_typeName5734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID322);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1340:9: ( DOT ID )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==DOT) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1340:10: DOT ID
            	    {
            	    DOT323=(Token)match(input,DOT,FOLLOW_DOT_in_typeName5737); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT323);

            	    ID324=(Token)match(input,ID,FOLLOW_ID_in_typeName5739); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(ID324);


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1340:19: -> VT_TYPE_NAME[$typeName.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_NAME, input.toString(retval.start,input.LT(-1))));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1345:1: packageOrTypeName : id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) ;
    public final DRLParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        DRLParser.packageOrTypeName_return retval = new DRLParser.packageOrTypeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1346:2: (id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1346:4: id+= ID (id+= DOT id+= ID )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1346:11: (id+= DOT id+= ID )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==DOT) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1346:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_packageOrTypeName5773); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5777); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PACKAGE, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1349:3: -> ^( VT_PACKAGE_ID ( ID )+ )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1349:6: ^( VT_PACKAGE_ID ( ID )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PACKAGE_ID, "VT_PACKAGE_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1352:1: typeArguments : LESS typeArgument ( COMMA typeArgument )* GREATER ;
    public final DRLParser.typeArguments_return typeArguments() throws RecognitionException {
        DRLParser.typeArguments_return retval = new DRLParser.typeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS325=null;
        Token COMMA327=null;
        Token GREATER329=null;
        DRLParser.typeArgument_return typeArgument326 = null;

        DRLParser.typeArgument_return typeArgument328 = null;


        Object LESS325_tree=null;
        Object COMMA327_tree=null;
        Object GREATER329_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1353:2: ( LESS typeArgument ( COMMA typeArgument )* GREATER )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1353:4: LESS typeArgument ( COMMA typeArgument )* GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS325=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS325_tree = (Object)adaptor.create(LESS325);
            adaptor.addChild(root_0, LESS325_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5807);
            typeArgument326=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument326.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1353:22: ( COMMA typeArgument )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1353:23: COMMA typeArgument
            	    {
            	    COMMA327=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5810); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA327_tree = (Object)adaptor.create(COMMA327);
            	    adaptor.addChild(root_0, COMMA327_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments5812);
            	    typeArgument328=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument328.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            GREATER329=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER329_tree = (Object)adaptor.create(GREATER329);
            adaptor.addChild(root_0, GREATER329_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1356:1: typeArgument : ( type | QUESTION ( ( extends_key | super_key ) type )? );
    public final DRLParser.typeArgument_return typeArgument() throws RecognitionException {
        DRLParser.typeArgument_return retval = new DRLParser.typeArgument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION331=null;
        DRLParser.type_return type330 = null;

        DRLParser.extends_key_return extends_key332 = null;

        DRLParser.super_key_return super_key333 = null;

        DRLParser.type_return type334 = null;


        Object QUESTION331_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1357:2: ( type | QUESTION ( ( extends_key | super_key ) type )? )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==ID) ) {
                alt115=1;
            }
            else if ( (LA115_0==QUESTION) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1357:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument5828);
                    type330=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type330.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1358:4: QUESTION ( ( extends_key | super_key ) type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    QUESTION331=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_typeArgument5833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION331_tree = (Object)adaptor.create(QUESTION331);
                    adaptor.addChild(root_0, QUESTION331_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1358:13: ( ( extends_key | super_key ) type )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1358:14: ( extends_key | super_key ) type
                            {
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1358:14: ( extends_key | super_key )
                            int alt113=2;
                            int LA113_0 = input.LA(1);

                            if ( (LA113_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                                int LA113_1 = input.LA(2);

                                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                                    alt113=1;
                                }
                                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                                    alt113=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 113, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 113, 0, input);

                                throw nvae;
                            }
                            switch (alt113) {
                                case 1 :
                                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1358:15: extends_key
                                    {
                                    pushFollow(FOLLOW_extends_key_in_typeArgument5837);
                                    extends_key332=extends_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key332.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1358:29: super_key
                                    {
                                    pushFollow(FOLLOW_super_key_in_typeArgument5841);
                                    super_key333=super_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key333.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument5844);
                            type334=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type334.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameters"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1361:1: parameters : LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) ;
    public final DRLParser.parameters_return parameters() throws RecognitionException {
        DRLParser.parameters_return retval = new DRLParser.parameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN335=null;
        Token COMMA337=null;
        Token RIGHT_PAREN339=null;
        DRLParser.param_definition_return param_definition336 = null;

        DRLParser.param_definition_return param_definition338 = null;


        Object LEFT_PAREN335_tree=null;
        Object COMMA337_tree=null;
        Object RIGHT_PAREN339_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_param_definition=new RewriteRuleSubtreeStream(adaptor,"rule param_definition");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1362:2: ( LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1362:4: LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN
            {
            LEFT_PAREN335=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parameters5857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN335);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN335, DroolsEditorType.SYMBOL);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1363:4: ( param_definition ( COMMA param_definition )* )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==ID) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1363:6: param_definition ( COMMA param_definition )*
                    {
                    pushFollow(FOLLOW_param_definition_in_parameters5866);
                    param_definition336=param_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_param_definition.add(param_definition336.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1363:23: ( COMMA param_definition )*
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==COMMA) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1363:24: COMMA param_definition
                    	    {
                    	    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters5869); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA337);

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(COMMA337, DroolsEditorType.SYMBOL);	
                    	    }
                    	    pushFollow(FOLLOW_param_definition_in_parameters5873);
                    	    param_definition338=param_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_param_definition.add(param_definition338.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_PAREN339=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parameters5882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN339);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN339, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, param_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1365:3: -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1365:6: ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PARAM_LIST, "VT_PARAM_LIST"), root_1);

                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1365:22: ( param_definition )*
                while ( stream_param_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_param_definition.nextTree());

                }
                stream_param_definition.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameters"

    public static class param_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "param_definition"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1368:1: param_definition : ( data_type )? argument ;
    public final DRLParser.param_definition_return param_definition() throws RecognitionException {
        DRLParser.param_definition_return retval = new DRLParser.param_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.data_type_return data_type340 = null;

        DRLParser.argument_return argument341 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1369:2: ( ( data_type )? argument )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1369:4: ( data_type )? argument
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1369:4: ( data_type )?
            int alt118=2;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1369:4: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_param_definition5908);
                    data_type340=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type340.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_argument_in_param_definition5911);
            argument341=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument341.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "param_definition"

    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1372:1: argument : ID ( dimension_definition )* ;
    public final DRLParser.argument_return argument() throws RecognitionException {
        DRLParser.argument_return retval = new DRLParser.argument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID342=null;
        DRLParser.dimension_definition_return dimension_definition343 = null;


        Object ID342_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1373:2: ( ID ( dimension_definition )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1373:4: ID ( dimension_definition )*
            {
            root_0 = (Object)adaptor.nil();

            ID342=(Token)match(input,ID,FOLLOW_ID_in_argument5922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID342_tree = (Object)adaptor.create(ID342);
            adaptor.addChild(root_0, ID342_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(ID342, DroolsEditorType.IDENTIFIER);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1374:3: ( dimension_definition )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==LEFT_SQUARE) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1374:3: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_argument5928);
            	    dimension_definition343=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dimension_definition343.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class string_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_list"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1377:1: string_list : first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] ;
    public final DRLParser.string_list_return string_list() throws RecognitionException {
        DRLParser.string_list_return retval = new DRLParser.string_list_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token first=null;
        Token next=null;
        Token COMMA344=null;

        Object first_tree=null;
        Object next_tree=null;
        Object COMMA344_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");


            StringBuilder buf = new StringBuilder();

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1381:2: (first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1381:4: first= STRING ( COMMA next= STRING )*
            {
            first=(Token)match(input,STRING,FOLLOW_STRING_in_string_list5947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING.add(first);

            if ( state.backtracking==0 ) {
               buf.append( "[ "+ (first!=null?first.getText():null) ); 
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1382:5: ( COMMA next= STRING )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    int LA120_2 = input.LA(2);

                    if ( (LA120_2==STRING) ) {
                        alt120=1;
                    }


                }


                switch (alt120) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1382:6: COMMA next= STRING
            	    {
            	    COMMA344=(Token)match(input,COMMA,FOLLOW_COMMA_in_string_list5956); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA344);

            	    next=(Token)match(input,STRING,FOLLOW_STRING_in_string_list5960); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_STRING.add(next);

            	    if ( state.backtracking==0 ) {
            	       buf.append( ", " + (next!=null?next.getText():null) ); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: STRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1383:2: -> STRING[$first,buf.toString()+\" ]\"]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STRING, first, buf.toString()+" ]"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_list"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1400:1: block : LEFT_CURLY ( blockStatement )* RIGHT_CURLY ;
    public final DRLParser.block_return block() throws RecognitionException {
        DRLParser.block_return retval = new DRLParser.block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY345=null;
        Token RIGHT_CURLY347=null;
        DRLParser.blockStatement_return blockStatement346 = null;


        Object LEFT_CURLY345_tree=null;
        Object RIGHT_CURLY347_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1401:2: ( LEFT_CURLY ( blockStatement )* RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1401:4: LEFT_CURLY ( blockStatement )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY345=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_block6000); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY345_tree = (Object)adaptor.create(LEFT_CURLY345);
            adaptor.addChild(root_0, LEFT_CURLY345_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1401:15: ( blockStatement )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=SEMICOLON && LA121_0<=ID)||LA121_0==STRING||(LA121_0>=BOOL && LA121_0<=LEFT_PAREN)||LA121_0==DECIMAL||LA121_0==LESS||LA121_0==LEFT_SQUARE||(LA121_0>=NULL && LA121_0<=FLOAT)||LA121_0==LEFT_CURLY||(LA121_0>=INCR && LA121_0<=NEGATION)) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1401:15: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block6002);
            	    blockStatement346=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement346.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            RIGHT_CURLY347=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_block6005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY347_tree = (Object)adaptor.create(RIGHT_CURLY347);
            adaptor.addChild(root_0, RIGHT_CURLY347_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1404:1: blockStatement : ( ( final_key )=> localVariableDeclaration | rhs_statement );
    public final DRLParser.blockStatement_return blockStatement() throws RecognitionException {
        DRLParser.blockStatement_return retval = new DRLParser.blockStatement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.localVariableDeclaration_return localVariableDeclaration348 = null;

        DRLParser.rhs_statement_return rhs_statement349 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1405:2: ( ( final_key )=> localVariableDeclaration | rhs_statement )
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1405:4: ( final_key )=> localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement6022);
                    localVariableDeclaration348=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration348.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1407:6: rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rhs_statement_in_blockStatement6032);
                    rhs_statement349=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1413:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators SEMICOLON ;
    public final DRLParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        DRLParser.localVariableDeclaration_return retval = new DRLParser.localVariableDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON353=null;
        DRLParser.variableModifier_return variableModifier350 = null;

        DRLParser.type_return type351 = null;

        DRLParser.variableDeclarators_return variableDeclarators352 = null;


        Object SEMICOLON353_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1414:2: ( ( variableModifier )* type variableDeclarators SEMICOLON )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1415:2: ( variableModifier )* type variableDeclarators SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1415:2: ( variableModifier )*
            loop123:
            do {
                int alt123=2;
                alt123 = dfa123.predict(input);
                switch (alt123) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1415:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration6051);
            	    variableModifier350=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier350.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration6056);
            type351=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type351.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration6058);
            variableDeclarators352=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators352.getTree());
            SEMICOLON353=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_localVariableDeclaration6060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON353_tree = (Object)adaptor.create(SEMICOLON353);
            adaptor.addChild(root_0, SEMICOLON353_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1418:1: variableModifier : final_key ;
    public final DRLParser.variableModifier_return variableModifier() throws RecognitionException {
        DRLParser.variableModifier_return retval = new DRLParser.variableModifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.final_key_return final_key354 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1419:2: ( final_key )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1419:4: final_key
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_final_key_in_variableModifier6072);
            final_key354=final_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, final_key354.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1423:1: variableDeclaratorId : ID ( LEFT_SQUARE RIGHT_SQUARE )* ;
    public final DRLParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        DRLParser.variableDeclaratorId_return retval = new DRLParser.variableDeclaratorId_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID355=null;
        Token LEFT_SQUARE356=null;
        Token RIGHT_SQUARE357=null;

        Object ID355_tree=null;
        Object LEFT_SQUARE356_tree=null;
        Object RIGHT_SQUARE357_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1424:2: ( ID ( LEFT_SQUARE RIGHT_SQUARE )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1424:4: ID ( LEFT_SQUARE RIGHT_SQUARE )*
            {
            root_0 = (Object)adaptor.nil();

            ID355=(Token)match(input,ID,FOLLOW_ID_in_variableDeclaratorId6084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID355_tree = (Object)adaptor.create(ID355);
            adaptor.addChild(root_0, ID355_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1424:7: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==LEFT_SQUARE) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1424:8: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE356=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_variableDeclaratorId6087); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE356_tree = (Object)adaptor.create(LEFT_SQUARE356);
            	    adaptor.addChild(root_0, LEFT_SQUARE356_tree);
            	    }
            	    RIGHT_SQUARE357=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_variableDeclaratorId6089); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE357_tree = (Object)adaptor.create(RIGHT_SQUARE357);
            	    adaptor.addChild(root_0, RIGHT_SQUARE357_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1427:1: variableDeclarators : variableDeclarator ( COMMA variableDeclarator )* ;
    public final DRLParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        DRLParser.variableDeclarators_return retval = new DRLParser.variableDeclarators_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA359=null;
        DRLParser.variableDeclarator_return variableDeclarator358 = null;

        DRLParser.variableDeclarator_return variableDeclarator360 = null;


        Object COMMA359_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1428:2: ( variableDeclarator ( COMMA variableDeclarator )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1428:4: variableDeclarator ( COMMA variableDeclarator )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators6102);
            variableDeclarator358=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarator358.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1428:23: ( COMMA variableDeclarator )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==COMMA) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1428:24: COMMA variableDeclarator
            	    {
            	    COMMA359=(Token)match(input,COMMA,FOLLOW_COMMA_in_variableDeclarators6105); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA359_tree = (Object)adaptor.create(COMMA359);
            	    adaptor.addChild(root_0, COMMA359_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators6107);
            	    variableDeclarator360=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarator360.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1431:1: variableDeclarator : id= ID rest= variableDeclaratorRest ;
    public final DRLParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        DRLParser.variableDeclarator_return retval = new DRLParser.variableDeclarator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        DRLParser.variableDeclaratorRest_return rest = null;


        Object id_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1432:2: (id= ID rest= variableDeclaratorRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1432:4: id= ID rest= variableDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            id=(Token)match(input,ID,FOLLOW_ID_in_variableDeclarator6122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (Object)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator6126);
            rest=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1435:1: variableDeclaratorRest : ( ( LEFT_SQUARE RIGHT_SQUARE )+ ( EQUALS_ASSIGN variableInitializer )? | EQUALS_ASSIGN variableInitializer | );
    public final DRLParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        DRLParser.variableDeclaratorRest_return retval = new DRLParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE361=null;
        Token RIGHT_SQUARE362=null;
        Token EQUALS_ASSIGN363=null;
        Token EQUALS_ASSIGN365=null;
        DRLParser.variableInitializer_return variableInitializer364 = null;

        DRLParser.variableInitializer_return variableInitializer366 = null;


        Object LEFT_SQUARE361_tree=null;
        Object RIGHT_SQUARE362_tree=null;
        Object EQUALS_ASSIGN363_tree=null;
        Object EQUALS_ASSIGN365_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1436:2: ( ( LEFT_SQUARE RIGHT_SQUARE )+ ( EQUALS_ASSIGN variableInitializer )? | EQUALS_ASSIGN variableInitializer | )
            int alt128=3;
            switch ( input.LA(1) ) {
            case LEFT_SQUARE:
                {
                alt128=1;
                }
                break;
            case EQUALS_ASSIGN:
                {
                alt128=2;
                }
                break;
            case EOF:
            case SEMICOLON:
            case COMMA:
                {
                alt128=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1436:4: ( LEFT_SQUARE RIGHT_SQUARE )+ ( EQUALS_ASSIGN variableInitializer )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1436:4: ( LEFT_SQUARE RIGHT_SQUARE )+
                    int cnt126=0;
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==LEFT_SQUARE) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1436:5: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE361=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_variableDeclaratorRest6140); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE361_tree = (Object)adaptor.create(LEFT_SQUARE361);
                    	    adaptor.addChild(root_0, LEFT_SQUARE361_tree);
                    	    }
                    	    RIGHT_SQUARE362=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_variableDeclaratorRest6142); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE362_tree = (Object)adaptor.create(RIGHT_SQUARE362);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE362_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt126 >= 1 ) break loop126;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(126, input);
                                throw eee;
                        }
                        cnt126++;
                    } while (true);

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1436:32: ( EQUALS_ASSIGN variableInitializer )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==EQUALS_ASSIGN) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1436:33: EQUALS_ASSIGN variableInitializer
                            {
                            EQUALS_ASSIGN363=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6147); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQUALS_ASSIGN363_tree = (Object)adaptor.create(EQUALS_ASSIGN363);
                            adaptor.addChild(root_0, EQUALS_ASSIGN363_tree);
                            }
                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest6149);
                            variableInitializer364=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer364.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1437:4: EQUALS_ASSIGN variableInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_ASSIGN365=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN365_tree = (Object)adaptor.create(EQUALS_ASSIGN365);
                    adaptor.addChild(root_0, EQUALS_ASSIGN365_tree);
                    }
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest6158);
                    variableInitializer366=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer366.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1439:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class rhs_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_statement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1446:1: rhs_statement options {backtrack=true; memoize=true; } : ( block | if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? | for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement | while_key parExpression rhs_statement | do_key rhs_statement while_key parExpression SEMICOLON | try_key block ( catches finally_key block | catches | finally_key block ) | switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY | synchronized_key parExpression block | return_key ( expression )? SEMICOLON | throw_key expression SEMICOLON | break_key ( ID )? SEMICOLON | continue_key ( ID )? SEMICOLON | SEMICOLON | expression SEMICOLON | ID COLON rhs_statement | modifyStatement | assert_key expression ( COLON expression )? SEMICOLON );
    public final DRLParser.rhs_statement_return rhs_statement() throws RecognitionException {
        DRLParser.rhs_statement_return retval = new DRLParser.rhs_statement_return();
        retval.start = input.LT(1);
        int rhs_statement_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN374=null;
        Token RIGHT_PAREN376=null;
        Token SEMICOLON385=null;
        Token LEFT_CURLY396=null;
        Token RIGHT_CURLY398=null;
        Token SEMICOLON404=null;
        Token SEMICOLON407=null;
        Token ID409=null;
        Token SEMICOLON410=null;
        Token ID412=null;
        Token SEMICOLON413=null;
        Token SEMICOLON414=null;
        Token SEMICOLON416=null;
        Token ID417=null;
        Token COLON418=null;
        Token COLON423=null;
        Token SEMICOLON425=null;
        DRLParser.block_return block367 = null;

        DRLParser.if_key_return if_key368 = null;

        DRLParser.parExpression_return parExpression369 = null;

        DRLParser.rhs_statement_return rhs_statement370 = null;

        DRLParser.else_key_return else_key371 = null;

        DRLParser.rhs_statement_return rhs_statement372 = null;

        DRLParser.for_key_return for_key373 = null;

        DRLParser.forControl_return forControl375 = null;

        DRLParser.rhs_statement_return rhs_statement377 = null;

        DRLParser.while_key_return while_key378 = null;

        DRLParser.parExpression_return parExpression379 = null;

        DRLParser.rhs_statement_return rhs_statement380 = null;

        DRLParser.do_key_return do_key381 = null;

        DRLParser.rhs_statement_return rhs_statement382 = null;

        DRLParser.while_key_return while_key383 = null;

        DRLParser.parExpression_return parExpression384 = null;

        DRLParser.try_key_return try_key386 = null;

        DRLParser.block_return block387 = null;

        DRLParser.catches_return catches388 = null;

        DRLParser.finally_key_return finally_key389 = null;

        DRLParser.block_return block390 = null;

        DRLParser.catches_return catches391 = null;

        DRLParser.finally_key_return finally_key392 = null;

        DRLParser.block_return block393 = null;

        DRLParser.switch_key_return switch_key394 = null;

        DRLParser.parExpression_return parExpression395 = null;

        DRLParser.switchBlockStatementGroups_return switchBlockStatementGroups397 = null;

        DRLParser.synchronized_key_return synchronized_key399 = null;

        DRLParser.parExpression_return parExpression400 = null;

        DRLParser.block_return block401 = null;

        DRLParser.return_key_return return_key402 = null;

        DRLParser.expression_return expression403 = null;

        DRLParser.throw_key_return throw_key405 = null;

        DRLParser.expression_return expression406 = null;

        DRLParser.break_key_return break_key408 = null;

        DRLParser.continue_key_return continue_key411 = null;

        DRLParser.expression_return expression415 = null;

        DRLParser.rhs_statement_return rhs_statement419 = null;

        DRLParser.modifyStatement_return modifyStatement420 = null;

        DRLParser.assert_key_return assert_key421 = null;

        DRLParser.expression_return expression422 = null;

        DRLParser.expression_return expression424 = null;


        Object LEFT_PAREN374_tree=null;
        Object RIGHT_PAREN376_tree=null;
        Object SEMICOLON385_tree=null;
        Object LEFT_CURLY396_tree=null;
        Object RIGHT_CURLY398_tree=null;
        Object SEMICOLON404_tree=null;
        Object SEMICOLON407_tree=null;
        Object ID409_tree=null;
        Object SEMICOLON410_tree=null;
        Object ID412_tree=null;
        Object SEMICOLON413_tree=null;
        Object SEMICOLON414_tree=null;
        Object SEMICOLON416_tree=null;
        Object ID417_tree=null;
        Object COLON418_tree=null;
        Object COLON423_tree=null;
        Object SEMICOLON425_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1448:2: ( block | if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? | for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement | while_key parExpression rhs_statement | do_key rhs_statement while_key parExpression SEMICOLON | try_key block ( catches finally_key block | catches | finally_key block ) | switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY | synchronized_key parExpression block | return_key ( expression )? SEMICOLON | throw_key expression SEMICOLON | break_key ( ID )? SEMICOLON | continue_key ( ID )? SEMICOLON | SEMICOLON | expression SEMICOLON | ID COLON rhs_statement | modifyStatement | assert_key expression ( COLON expression )? SEMICOLON )
            int alt135=17;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1448:4: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_rhs_statement6200);
                    block367=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block367.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1449:7: if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_if_key_in_rhs_statement6212);
                    if_key368=if_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_key368.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6214);
                    parExpression369=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression369.getTree());
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6216);
                    rhs_statement370=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement370.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1449:42: ( options {k=1; } : else_key rhs_statement )?
                    int alt129=2;
                    alt129 = dfa129.predict(input);
                    switch (alt129) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1449:59: else_key rhs_statement
                            {
                            pushFollow(FOLLOW_else_key_in_rhs_statement6227);
                            else_key371=else_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, else_key371.getTree());
                            pushFollow(FOLLOW_rhs_statement_in_rhs_statement6229);
                            rhs_statement372=rhs_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement372.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1450:7: for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_for_key_in_rhs_statement6239);
                    for_key373=for_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_key373.getTree());
                    LEFT_PAREN374=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rhs_statement6241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN374_tree = (Object)adaptor.create(LEFT_PAREN374);
                    adaptor.addChild(root_0, LEFT_PAREN374_tree);
                    }
                    pushFollow(FOLLOW_forControl_in_rhs_statement6243);
                    forControl375=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forControl375.getTree());
                    RIGHT_PAREN376=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rhs_statement6245); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN376_tree = (Object)adaptor.create(RIGHT_PAREN376);
                    adaptor.addChild(root_0, RIGHT_PAREN376_tree);
                    }
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6247);
                    rhs_statement377=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement377.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1451:7: while_key parExpression rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_while_key_in_rhs_statement6255);
                    while_key378=while_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_key378.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6257);
                    parExpression379=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression379.getTree());
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6259);
                    rhs_statement380=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement380.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1452:7: do_key rhs_statement while_key parExpression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_do_key_in_rhs_statement6267);
                    do_key381=do_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_key381.getTree());
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6269);
                    rhs_statement382=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement382.getTree());
                    pushFollow(FOLLOW_while_key_in_rhs_statement6271);
                    while_key383=while_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_key383.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6273);
                    parExpression384=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression384.getTree());
                    SEMICOLON385=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON385_tree = (Object)adaptor.create(SEMICOLON385);
                    adaptor.addChild(root_0, SEMICOLON385_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1453:7: try_key block ( catches finally_key block | catches | finally_key block )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_try_key_in_rhs_statement6283);
                    try_key386=try_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_key386.getTree());
                    pushFollow(FOLLOW_block_in_rhs_statement6285);
                    block387=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block387.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1454:7: ( catches finally_key block | catches | finally_key block )
                    int alt130=3;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))))) {
                        int LA130_1 = input.LA(2);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                            alt130=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                            alt130=2;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                            alt130=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 130, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 0, input);

                        throw nvae;
                    }
                    switch (alt130) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1454:9: catches finally_key block
                            {
                            pushFollow(FOLLOW_catches_in_rhs_statement6295);
                            catches388=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, catches388.getTree());
                            pushFollow(FOLLOW_finally_key_in_rhs_statement6297);
                            finally_key389=finally_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_key389.getTree());
                            pushFollow(FOLLOW_block_in_rhs_statement6299);
                            block390=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block390.getTree());

                            }
                            break;
                        case 2 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1455:9: catches
                            {
                            pushFollow(FOLLOW_catches_in_rhs_statement6309);
                            catches391=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, catches391.getTree());

                            }
                            break;
                        case 3 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1456:9: finally_key block
                            {
                            pushFollow(FOLLOW_finally_key_in_rhs_statement6319);
                            finally_key392=finally_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_key392.getTree());
                            pushFollow(FOLLOW_block_in_rhs_statement6321);
                            block393=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block393.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1458:7: switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_switch_key_in_rhs_statement6337);
                    switch_key394=switch_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_key394.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6339);
                    parExpression395=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression395.getTree());
                    LEFT_CURLY396=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_rhs_statement6341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_CURLY396_tree = (Object)adaptor.create(LEFT_CURLY396);
                    adaptor.addChild(root_0, LEFT_CURLY396_tree);
                    }
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_rhs_statement6343);
                    switchBlockStatementGroups397=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroups397.getTree());
                    RIGHT_CURLY398=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_rhs_statement6345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_CURLY398_tree = (Object)adaptor.create(RIGHT_CURLY398);
                    adaptor.addChild(root_0, RIGHT_CURLY398_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1459:7: synchronized_key parExpression block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_synchronized_key_in_rhs_statement6353);
                    synchronized_key399=synchronized_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_key399.getTree());
                    pushFollow(FOLLOW_parExpression_in_rhs_statement6355);
                    parExpression400=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression400.getTree());
                    pushFollow(FOLLOW_block_in_rhs_statement6357);
                    block401=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block401.getTree());

                    }
                    break;
                case 9 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1460:7: return_key ( expression )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_return_key_in_rhs_statement6365);
                    return_key402=return_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_key402.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1460:18: ( expression )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==ID||LA131_0==STRING||(LA131_0>=BOOL && LA131_0<=LEFT_PAREN)||LA131_0==DECIMAL||LA131_0==LESS||LA131_0==LEFT_SQUARE||(LA131_0>=NULL && LA131_0<=FLOAT)||(LA131_0>=INCR && LA131_0<=NEGATION)) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1460:18: expression
                            {
                            pushFollow(FOLLOW_expression_in_rhs_statement6367);
                            expression403=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression403.getTree());

                            }
                            break;

                    }

                    SEMICOLON404=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON404_tree = (Object)adaptor.create(SEMICOLON404);
                    adaptor.addChild(root_0, SEMICOLON404_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1461:7: throw_key expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_throw_key_in_rhs_statement6378);
                    throw_key405=throw_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_key405.getTree());
                    pushFollow(FOLLOW_expression_in_rhs_statement6380);
                    expression406=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression406.getTree());
                    SEMICOLON407=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON407_tree = (Object)adaptor.create(SEMICOLON407);
                    adaptor.addChild(root_0, SEMICOLON407_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1462:7: break_key ( ID )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_break_key_in_rhs_statement6390);
                    break_key408=break_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_key408.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1462:17: ( ID )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ID) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1462:17: ID
                            {
                            ID409=(Token)match(input,ID,FOLLOW_ID_in_rhs_statement6392); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ID409_tree = (Object)adaptor.create(ID409);
                            adaptor.addChild(root_0, ID409_tree);
                            }

                            }
                            break;

                    }

                    SEMICOLON410=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON410_tree = (Object)adaptor.create(SEMICOLON410);
                    adaptor.addChild(root_0, SEMICOLON410_tree);
                    }

                    }
                    break;
                case 12 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1463:7: continue_key ( ID )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_continue_key_in_rhs_statement6403);
                    continue_key411=continue_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_key411.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1463:20: ( ID )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==ID) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1463:20: ID
                            {
                            ID412=(Token)match(input,ID,FOLLOW_ID_in_rhs_statement6405); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ID412_tree = (Object)adaptor.create(ID412);
                            adaptor.addChild(root_0, ID412_tree);
                            }

                            }
                            break;

                    }

                    SEMICOLON413=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON413_tree = (Object)adaptor.create(SEMICOLON413);
                    adaptor.addChild(root_0, SEMICOLON413_tree);
                    }

                    }
                    break;
                case 13 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1464:7: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON414=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON414_tree = (Object)adaptor.create(SEMICOLON414);
                    adaptor.addChild(root_0, SEMICOLON414_tree);
                    }

                    }
                    break;
                case 14 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1466:5: expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_rhs_statement6423);
                    expression415=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression415.getTree());
                    SEMICOLON416=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON416_tree = (Object)adaptor.create(SEMICOLON416);
                    adaptor.addChild(root_0, SEMICOLON416_tree);
                    }

                    }
                    break;
                case 15 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1467:7: ID COLON rhs_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    ID417=(Token)match(input,ID,FOLLOW_ID_in_rhs_statement6437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID417_tree = (Object)adaptor.create(ID417);
                    adaptor.addChild(root_0, ID417_tree);
                    }
                    COLON418=(Token)match(input,COLON,FOLLOW_COLON_in_rhs_statement6439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON418_tree = (Object)adaptor.create(COLON418);
                    adaptor.addChild(root_0, COLON418_tree);
                    }
                    pushFollow(FOLLOW_rhs_statement_in_rhs_statement6441);
                    rhs_statement419=rhs_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs_statement419.getTree());

                    }
                    break;
                case 16 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1470:7: modifyStatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifyStatement_in_rhs_statement6459);
                    modifyStatement420=modifyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifyStatement420.getTree());

                    }
                    break;
                case 17 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1472:7: assert_key expression ( COLON expression )? SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_assert_key_in_rhs_statement6475);
                    assert_key421=assert_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assert_key421.getTree());
                    pushFollow(FOLLOW_expression_in_rhs_statement6477);
                    expression422=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression422.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1472:29: ( COLON expression )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==COLON) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1472:30: COLON expression
                            {
                            COLON423=(Token)match(input,COLON,FOLLOW_COLON_in_rhs_statement6480); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON423_tree = (Object)adaptor.create(COLON423);
                            adaptor.addChild(root_0, COLON423_tree);
                            }
                            pushFollow(FOLLOW_expression_in_rhs_statement6482);
                            expression424=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression424.getTree());

                            }
                            break;

                    }

                    SEMICOLON425=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_statement6486); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON425_tree = (Object)adaptor.create(SEMICOLON425);
                    adaptor.addChild(root_0, SEMICOLON425_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, rhs_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rhs_statement"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1479:1: forControl options {backtrack=true; memoize=true; } : ( forVarControl | ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )? );
    public final DRLParser.forControl_return forControl() throws RecognitionException {
        DRLParser.forControl_return retval = new DRLParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token SEMICOLON428=null;
        Token SEMICOLON430=null;
        DRLParser.forVarControl_return forVarControl426 = null;

        DRLParser.forInit_return forInit427 = null;

        DRLParser.expression_return expression429 = null;

        DRLParser.forUpdate_return forUpdate431 = null;


        Object SEMICOLON428_tree=null;
        Object SEMICOLON430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1481:2: ( forVarControl | ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )? )
            int alt139=2;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1481:4: forVarControl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_forVarControl_in_forControl6520);
                    forVarControl426=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forVarControl426.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1482:4: ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1482:4: ( forInit )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==ID||LA136_0==STRING||(LA136_0>=BOOL && LA136_0<=LEFT_PAREN)||LA136_0==DECIMAL||LA136_0==LESS||LA136_0==LEFT_SQUARE||(LA136_0>=NULL && LA136_0<=FLOAT)||(LA136_0>=INCR && LA136_0<=NEGATION)) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1482:4: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl6525);
                            forInit427=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, forInit427.getTree());

                            }
                            break;

                    }

                    SEMICOLON428=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6528); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON428_tree = (Object)adaptor.create(SEMICOLON428);
                    adaptor.addChild(root_0, SEMICOLON428_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1482:23: ( expression )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==ID||LA137_0==STRING||(LA137_0>=BOOL && LA137_0<=LEFT_PAREN)||LA137_0==DECIMAL||LA137_0==LESS||LA137_0==LEFT_SQUARE||(LA137_0>=NULL && LA137_0<=FLOAT)||(LA137_0>=INCR && LA137_0<=NEGATION)) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1482:23: expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl6530);
                            expression429=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression429.getTree());

                            }
                            break;

                    }

                    SEMICOLON430=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_forControl6533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON430_tree = (Object)adaptor.create(SEMICOLON430);
                    adaptor.addChild(root_0, SEMICOLON430_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1482:45: ( forUpdate )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==ID||LA138_0==STRING||(LA138_0>=BOOL && LA138_0<=LEFT_PAREN)||LA138_0==DECIMAL||LA138_0==LESS||LA138_0==LEFT_SQUARE||(LA138_0>=NULL && LA138_0<=FLOAT)||(LA138_0>=INCR && LA138_0<=NEGATION)) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1482:45: forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl6535);
                            forUpdate431=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, forUpdate431.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1485:1: forInit options {backtrack=true; memoize=true; } : ( ( variableModifier )* type variableDeclarators | expressionList );
    public final DRLParser.forInit_return forInit() throws RecognitionException {
        DRLParser.forInit_return retval = new DRLParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.variableModifier_return variableModifier432 = null;

        DRLParser.type_return type433 = null;

        DRLParser.variableDeclarators_return variableDeclarators434 = null;

        DRLParser.expressionList_return expressionList435 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:2: ( ( variableModifier )* type variableDeclarators | expressionList )
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:4: ( variableModifier )* type variableDeclarators
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:4: ( variableModifier )*
                    loop140:
                    do {
                        int alt140=2;
                        alt140 = dfa140.predict(input);
                        switch (alt140) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:4: variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit6565);
                    	    variableModifier432=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier432.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit6568);
                    type433=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type433.getTree());
                    pushFollow(FOLLOW_variableDeclarators_in_forInit6570);
                    variableDeclarators434=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators434.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1488:4: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit6575);
                    expressionList435=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forVarControl"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1491:1: forVarControl : ( variableModifier )* type ID COLON expression ;
    public final DRLParser.forVarControl_return forVarControl() throws RecognitionException {
        DRLParser.forVarControl_return retval = new DRLParser.forVarControl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID438=null;
        Token COLON439=null;
        DRLParser.variableModifier_return variableModifier436 = null;

        DRLParser.type_return type437 = null;

        DRLParser.expression_return expression440 = null;


        Object ID438_tree=null;
        Object COLON439_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1492:2: ( ( variableModifier )* type ID COLON expression )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1492:4: ( variableModifier )* type ID COLON expression
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1492:4: ( variableModifier )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==ID) ) {
                    int LA142_1 = input.LA(2);

                    if ( (LA142_1==ID) ) {
                        int LA142_3 = input.LA(3);

                        if ( ((LA142_3>=ID && LA142_3<=DOT)||LA142_3==LESS||LA142_3==LEFT_SQUARE) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {
                            alt142=1;
                        }


                    }


                }


                switch (alt142) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1492:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl6586);
            	    variableModifier436=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier436.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl6589);
            type437=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type437.getTree());
            ID438=(Token)match(input,ID,FOLLOW_ID_in_forVarControl6591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID438_tree = (Object)adaptor.create(ID438);
            adaptor.addChild(root_0, ID438_tree);
            }
            COLON439=(Token)match(input,COLON,FOLLOW_COLON_in_forVarControl6593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON439_tree = (Object)adaptor.create(COLON439);
            adaptor.addChild(root_0, COLON439_tree);
            }
            pushFollow(FOLLOW_expression_in_forVarControl6595);
            expression440=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression440.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1495:1: forUpdate : expressionList ;
    public final DRLParser.forUpdate_return forUpdate() throws RecognitionException {
        DRLParser.forUpdate_return retval = new DRLParser.forUpdate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.expressionList_return expressionList441 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1496:2: ( expressionList )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1496:4: expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate6606);
            expressionList441=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList441.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1501:1: catches : catchClause ( catchClause )* ;
    public final DRLParser.catches_return catches() throws RecognitionException {
        DRLParser.catches_return retval = new DRLParser.catches_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.catchClause_return catchClause442 = null;

        DRLParser.catchClause_return catchClause443 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1502:2: ( catchClause ( catchClause )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1502:4: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches6619);
            catchClause442=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause442.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1502:16: ( catchClause )*
            loop143:
            do {
                int alt143=2;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1502:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches6622);
            	    catchClause443=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause443.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1505:1: catchClause : catch_key LEFT_PAREN formalParameter RIGHT_PAREN block ;
    public final DRLParser.catchClause_return catchClause() throws RecognitionException {
        DRLParser.catchClause_return retval = new DRLParser.catchClause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN445=null;
        Token RIGHT_PAREN447=null;
        DRLParser.catch_key_return catch_key444 = null;

        DRLParser.formalParameter_return formalParameter446 = null;

        DRLParser.block_return block448 = null;


        Object LEFT_PAREN445_tree=null;
        Object RIGHT_PAREN447_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1506:2: ( catch_key LEFT_PAREN formalParameter RIGHT_PAREN block )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1506:4: catch_key LEFT_PAREN formalParameter RIGHT_PAREN block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catch_key_in_catchClause6636);
            catch_key444=catch_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catch_key444.getTree());
            LEFT_PAREN445=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_catchClause6638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN445_tree = (Object)adaptor.create(LEFT_PAREN445);
            adaptor.addChild(root_0, LEFT_PAREN445_tree);
            }
            pushFollow(FOLLOW_formalParameter_in_catchClause6640);
            formalParameter446=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameter446.getTree());
            RIGHT_PAREN447=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_catchClause6642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN447_tree = (Object)adaptor.create(RIGHT_PAREN447);
            adaptor.addChild(root_0, RIGHT_PAREN447_tree);
            }
            pushFollow(FOLLOW_block_in_catchClause6644);
            block448=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block448.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1509:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
    public final DRLParser.formalParameter_return formalParameter() throws RecognitionException {
        DRLParser.formalParameter_return retval = new DRLParser.formalParameter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.variableModifier_return variableModifier449 = null;

        DRLParser.type_return type450 = null;

        DRLParser.variableDeclaratorId_return variableDeclaratorId451 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1510:2: ( ( variableModifier )* type variableDeclaratorId )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1510:4: ( variableModifier )* type variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1510:4: ( variableModifier )*
            loop144:
            do {
                int alt144=2;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1510:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter6655);
            	    variableModifier449=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier449.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter6658);
            type450=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type450.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter6660);
            variableDeclaratorId451=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId451.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1515:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final DRLParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        DRLParser.switchBlockStatementGroups_return retval = new DRLParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.switchBlockStatementGroup_return switchBlockStatementGroup452 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1516:2: ( ( switchBlockStatementGroup )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1516:4: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1516:4: ( switchBlockStatementGroup )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))))) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1516:5: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6674);
            	    switchBlockStatementGroup452=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup452.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1519:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
    public final DRLParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        DRLParser.switchBlockStatementGroup_return retval = new DRLParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.switchLabel_return switchLabel453 = null;

        DRLParser.blockStatement_return blockStatement454 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1520:2: ( switchLabel ( blockStatement )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1520:4: switchLabel ( blockStatement )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup6688);
            switchLabel453=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switchLabel453.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1520:16: ( blockStatement )*
            loop146:
            do {
                int alt146=2;
                alt146 = dfa146.predict(input);
                switch (alt146) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1520:16: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup6690);
            	    blockStatement454=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement454.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1523:1: switchLabel : ( case_key expression COLON | case_key ID COLON | default_key COLON );
    public final DRLParser.switchLabel_return switchLabel() throws RecognitionException {
        DRLParser.switchLabel_return retval = new DRLParser.switchLabel_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON457=null;
        Token ID459=null;
        Token COLON460=null;
        Token COLON462=null;
        DRLParser.case_key_return case_key455 = null;

        DRLParser.expression_return expression456 = null;

        DRLParser.case_key_return case_key458 = null;

        DRLParser.default_key_return default_key461 = null;


        Object COLON457_tree=null;
        Object ID459_tree=null;
        Object COLON460_tree=null;
        Object COLON462_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1525:2: ( case_key expression COLON | case_key ID COLON | default_key COLON )
            int alt147=3;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))))) {
                int LA147_1 = input.LA(2);

                if ( (LA147_1==STRING||(LA147_1>=BOOL && LA147_1<=LEFT_PAREN)||LA147_1==DECIMAL||LA147_1==LESS||LA147_1==LEFT_SQUARE||(LA147_1>=NULL && LA147_1<=FLOAT)||(LA147_1>=INCR && LA147_1<=NEGATION)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                    alt147=1;
                }
                else if ( (LA147_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                    int LA147_3 = input.LA(3);

                    if ( (LA147_3==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                        int LA147_5 = input.LA(4);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                            alt147=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                            alt147=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 147, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA147_3>=ID && LA147_3<=DOT)||LA147_3==EQUALS_ASSIGN||LA147_3==LEFT_PAREN||(LA147_3>=DOUBLE_PIPE && LA147_3<=DOUBLE_AMPER)||(LA147_3>=EQUALS && LA147_3<=LEFT_SQUARE)||(LA147_3>=PLUS && LA147_3<=MINUS)||(LA147_3>=QUESTION && LA147_3<=DECR)||(LA147_3>=PLUS_ASSIGN && LA147_3<=MOD_ASSIGN)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.CASE))))) {
                        alt147=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA147_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
                    alt147=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1525:4: case_key expression COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_key_in_switchLabel6704);
                    case_key455=case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_key455.getTree());
                    pushFollow(FOLLOW_expression_in_switchLabel6706);
                    expression456=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression456.getTree());
                    COLON457=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON457_tree = (Object)adaptor.create(COLON457);
                    adaptor.addChild(root_0, COLON457_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1527:4: case_key ID COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_key_in_switchLabel6714);
                    case_key458=case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_key458.getTree());
                    ID459=(Token)match(input,ID,FOLLOW_ID_in_switchLabel6716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID459_tree = (Object)adaptor.create(ID459);
                    adaptor.addChild(root_0, ID459_tree);
                    }
                    COLON460=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON460_tree = (Object)adaptor.create(COLON460);
                    adaptor.addChild(root_0, COLON460_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1528:4: default_key COLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_default_key_in_switchLabel6723);
                    default_key461=default_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key461.getTree());
                    COLON462=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6725); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON462_tree = (Object)adaptor.create(COLON462);
                    adaptor.addChild(root_0, COLON462_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class modifyStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifyStatement"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1535:1: modifyStatement : s= modify_key parExpression LEFT_CURLY (e= expression ( COMMA e= expression )* )? RIGHT_CURLY ;
    public final DRLParser.modifyStatement_return modifyStatement() throws RecognitionException {
        DRLParser.modifyStatement_return retval = new DRLParser.modifyStatement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY464=null;
        Token COMMA465=null;
        Token RIGHT_CURLY466=null;
        DRLParser.modify_key_return s = null;

        DRLParser.expression_return e = null;

        DRLParser.parExpression_return parExpression463 = null;


        Object LEFT_CURLY464_tree=null;
        Object COMMA465_tree=null;
        Object RIGHT_CURLY466_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1536:2: (s= modify_key parExpression LEFT_CURLY (e= expression ( COMMA e= expression )* )? RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1536:4: s= modify_key parExpression LEFT_CURLY (e= expression ( COMMA e= expression )* )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modify_key_in_modifyStatement6747);
            s=modify_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
            pushFollow(FOLLOW_parExpression_in_modifyStatement6749);
            parExpression463=parExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression463.getTree());
            LEFT_CURLY464=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_modifyStatement6753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY464_tree = (Object)adaptor.create(LEFT_CURLY464);
            adaptor.addChild(root_0, LEFT_CURLY464_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1537:13: (e= expression ( COMMA e= expression )* )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ID||LA149_0==STRING||(LA149_0>=BOOL && LA149_0<=LEFT_PAREN)||LA149_0==DECIMAL||LA149_0==LESS||LA149_0==LEFT_SQUARE||(LA149_0>=NULL && LA149_0<=FLOAT)||(LA149_0>=INCR && LA149_0<=NEGATION)) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1537:15: e= expression ( COMMA e= expression )*
                    {
                    pushFollow(FOLLOW_expression_in_modifyStatement6761);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1537:30: ( COMMA e= expression )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==COMMA) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1537:31: COMMA e= expression
                    	    {
                    	    COMMA465=(Token)match(input,COMMA,FOLLOW_COMMA_in_modifyStatement6764); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA465_tree = (Object)adaptor.create(COMMA465);
                    	    adaptor.addChild(root_0, COMMA465_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_modifyStatement6768);
                    	    e=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_CURLY466=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_modifyStatement6777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY466_tree = (Object)adaptor.create(RIGHT_CURLY466);
            adaptor.addChild(root_0, RIGHT_CURLY466_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifyStatement"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1551:1: expression options {backtrack=true; memoize=true; } : conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? ;
    public final DRLParser.expression_return expression() throws RecognitionException {
        DRLParser.expression_return retval = new DRLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.conditionalExpression_return conditionalExpression467 = null;

        DRLParser.assignmentOperator_return assignmentOperator468 = null;

        DRLParser.expression_return expression469 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1553:2: ( conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1553:4: conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression6814);
            conditionalExpression467=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression467.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1553:26: ( ( assignmentOperator )=> assignmentOperator expression )?
            int alt150=2;
            alt150 = dfa150.predict(input);
            switch (alt150) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1553:27: ( assignmentOperator )=> assignmentOperator expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression6823);
                    assignmentOperator468=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentOperator468.getTree());
                    pushFollow(FOLLOW_expression_in_expression6825);
                    expression469=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression469.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1556:1: conditionalExpression : conditionalOrExpression ( QUESTION expression COLON expression )? ;
    public final DRLParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        DRLParser.conditionalExpression_return retval = new DRLParser.conditionalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION471=null;
        Token COLON473=null;
        DRLParser.conditionalOrExpression_return conditionalOrExpression470 = null;

        DRLParser.expression_return expression472 = null;

        DRLParser.expression_return expression474 = null;


        Object QUESTION471_tree=null;
        Object COLON473_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1557:9: ( conditionalOrExpression ( QUESTION expression COLON expression )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1557:17: conditionalOrExpression ( QUESTION expression COLON expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression6851);
            conditionalOrExpression470=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression470.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1557:41: ( QUESTION expression COLON expression )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==QUESTION) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1557:43: QUESTION expression COLON expression
                    {
                    QUESTION471=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression6855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION471_tree = (Object)adaptor.create(QUESTION471);
                    adaptor.addChild(root_0, QUESTION471_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6857);
                    expression472=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression472.getTree());
                    COLON473=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression6859); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON473_tree = (Object)adaptor.create(COLON473);
                    adaptor.addChild(root_0, COLON473_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6861);
                    expression474=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression474.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1559:1: conditionalOrExpression : conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* ;
    public final DRLParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        DRLParser.conditionalOrExpression_return retval = new DRLParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE476=null;
        DRLParser.conditionalAndExpression_return conditionalAndExpression475 = null;

        DRLParser.conditionalAndExpression_return conditionalAndExpression477 = null;


        Object DOUBLE_PIPE476_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1560:5: ( conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1560:9: conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6879);
            conditionalAndExpression475=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression475.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1560:34: ( DOUBLE_PIPE conditionalAndExpression )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==DOUBLE_PIPE) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1560:36: DOUBLE_PIPE conditionalAndExpression
            	    {
            	    DOUBLE_PIPE476=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6883); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE476_tree = (Object)adaptor.create(DOUBLE_PIPE476);
            	    adaptor.addChild(root_0, DOUBLE_PIPE476_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6885);
            	    conditionalAndExpression477=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression477.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1563:1: conditionalAndExpression : inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* ;
    public final DRLParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        DRLParser.conditionalAndExpression_return retval = new DRLParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER479=null;
        DRLParser.inclusiveOrExpression_return inclusiveOrExpression478 = null;

        DRLParser.inclusiveOrExpression_return inclusiveOrExpression480 = null;


        Object DOUBLE_AMPER479_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1564:5: ( inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1564:9: inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6904);
            inclusiveOrExpression478=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression478.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1564:31: ( DOUBLE_AMPER inclusiveOrExpression )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==DOUBLE_AMPER) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1564:33: DOUBLE_AMPER inclusiveOrExpression
            	    {
            	    DOUBLE_AMPER479=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression6908); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER479_tree = (Object)adaptor.create(DOUBLE_AMPER479);
            	    adaptor.addChild(root_0, DOUBLE_AMPER479_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6910);
            	    inclusiveOrExpression480=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression480.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1567:1: inclusiveOrExpression : exclusiveOrExpression ( PIPE exclusiveOrExpression )* ;
    public final DRLParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        DRLParser.inclusiveOrExpression_return retval = new DRLParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PIPE482=null;
        DRLParser.exclusiveOrExpression_return exclusiveOrExpression481 = null;

        DRLParser.exclusiveOrExpression_return exclusiveOrExpression483 = null;


        Object PIPE482_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1568:5: ( exclusiveOrExpression ( PIPE exclusiveOrExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1568:9: exclusiveOrExpression ( PIPE exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6929);
            exclusiveOrExpression481=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression481.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1568:31: ( PIPE exclusiveOrExpression )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==PIPE) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1568:33: PIPE exclusiveOrExpression
            	    {
            	    PIPE482=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression6933); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE482_tree = (Object)adaptor.create(PIPE482);
            	    adaptor.addChild(root_0, PIPE482_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6935);
            	    exclusiveOrExpression483=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression483.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1571:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final DRLParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        DRLParser.exclusiveOrExpression_return retval = new DRLParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token XOR485=null;
        DRLParser.andExpression_return andExpression484 = null;

        DRLParser.andExpression_return andExpression486 = null;


        Object XOR485_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1572:5: ( andExpression ( XOR andExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1572:9: andExpression ( XOR andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6954);
            andExpression484=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression484.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1572:23: ( XOR andExpression )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==XOR) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1572:25: XOR andExpression
            	    {
            	    XOR485=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression6958); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR485_tree = (Object)adaptor.create(XOR485);
            	    adaptor.addChild(root_0, XOR485_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6960);
            	    andExpression486=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression486.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1575:1: andExpression : equalityExpression ( AMPER equalityExpression )* ;
    public final DRLParser.andExpression_return andExpression() throws RecognitionException {
        DRLParser.andExpression_return retval = new DRLParser.andExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPER488=null;
        DRLParser.equalityExpression_return equalityExpression487 = null;

        DRLParser.equalityExpression_return equalityExpression489 = null;


        Object AMPER488_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1576:5: ( equalityExpression ( AMPER equalityExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1576:9: equalityExpression ( AMPER equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression6979);
            equalityExpression487=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression487.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1576:28: ( AMPER equalityExpression )*
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==AMPER) ) {
                    alt156=1;
                }


                switch (alt156) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1576:30: AMPER equalityExpression
            	    {
            	    AMPER488=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression6983); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPER488_tree = (Object)adaptor.create(AMPER488);
            	    adaptor.addChild(root_0, AMPER488_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression6985);
            	    equalityExpression489=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression489.getTree());

            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1579:1: equalityExpression : instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* ;
    public final DRLParser.equalityExpression_return equalityExpression() throws RecognitionException {
        DRLParser.equalityExpression_return retval = new DRLParser.equalityExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set491=null;
        DRLParser.instanceOfExpression_return instanceOfExpression490 = null;

        DRLParser.instanceOfExpression_return instanceOfExpression492 = null;


        Object set491_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1580:5: ( instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1580:9: instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7004);
            instanceOfExpression490=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression490.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1580:30: ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==EQUALS||LA157_0==NOT_EQUALS) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1580:32: ( EQUALS | NOT_EQUALS ) instanceOfExpression
            	    {
            	    set491=(Token)input.LT(1);
            	    if ( input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set491));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7018);
            	    instanceOfExpression492=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression492.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1583:1: instanceOfExpression : relationalExpression ( instanceof_key type )? ;
    public final DRLParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        DRLParser.instanceOfExpression_return retval = new DRLParser.instanceOfExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.relationalExpression_return relationalExpression493 = null;

        DRLParser.instanceof_key_return instanceof_key494 = null;

        DRLParser.type_return type495 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1584:5: ( relationalExpression ( instanceof_key type )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1584:9: relationalExpression ( instanceof_key type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression7037);
            relationalExpression493=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression493.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1584:30: ( instanceof_key type )?
            int alt158=2;
            alt158 = dfa158.predict(input);
            switch (alt158) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1584:31: instanceof_key type
                    {
                    pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression7040);
                    instanceof_key494=instanceof_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceof_key494.getTree());
                    pushFollow(FOLLOW_type_in_instanceOfExpression7042);
                    type495=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type495.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1587:1: relationalExpression : shiftExpression ( ( LESS )=> relationalOp shiftExpression )* ;
    public final DRLParser.relationalExpression_return relationalExpression() throws RecognitionException {
        DRLParser.relationalExpression_return retval = new DRLParser.relationalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.shiftExpression_return shiftExpression496 = null;

        DRLParser.relationalOp_return relationalOp497 = null;

        DRLParser.shiftExpression_return shiftExpression498 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1588:5: ( shiftExpression ( ( LESS )=> relationalOp shiftExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1588:9: shiftExpression ( ( LESS )=> relationalOp shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression7060);
            shiftExpression496=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression496.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1588:25: ( ( LESS )=> relationalOp shiftExpression )*
            loop159:
            do {
                int alt159=2;
                alt159 = dfa159.predict(input);
                switch (alt159) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1588:27: ( LESS )=> relationalOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression7069);
            	    relationalOp497=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalOp497.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression7071);
            	    shiftExpression498=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression498.getTree());

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1594:1: relationalOp : ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) ;
    public final DRLParser.relationalOp_return relationalOp() throws RecognitionException {
        DRLParser.relationalOp_return retval = new DRLParser.relationalOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set499=null;

        Object set499_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1595:2: ( ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1595:4: ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER )
            {
            root_0 = (Object)adaptor.nil();

            set499=(Token)input.LT(1);
            if ( (input.LA(1)>=GREATER && input.LA(1)<=LESS_EQUALS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set499));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1598:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
    public final DRLParser.shiftExpression_return shiftExpression() throws RecognitionException {
        DRLParser.shiftExpression_return retval = new DRLParser.shiftExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.additiveExpression_return additiveExpression500 = null;

        DRLParser.shiftOp_return shiftOp501 = null;

        DRLParser.additiveExpression_return additiveExpression502 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1599:5: ( additiveExpression ( shiftOp additiveExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1599:9: additiveExpression ( shiftOp additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression7133);
            additiveExpression500=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression500.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1599:28: ( shiftOp additiveExpression )*
            loop160:
            do {
                int alt160=2;
                switch ( input.LA(1) ) {
                case SHIFT_LEFT:
                    {
                    int LA160_2 = input.LA(2);

                    if ( (LA160_2==ID||LA160_2==STRING||(LA160_2>=BOOL && LA160_2<=LEFT_PAREN)||LA160_2==DECIMAL||LA160_2==LESS||LA160_2==LEFT_SQUARE||(LA160_2>=NULL && LA160_2<=FLOAT)||(LA160_2>=INCR && LA160_2<=NEGATION)) ) {
                        alt160=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT:
                    {
                    int LA160_3 = input.LA(2);

                    if ( (LA160_3==ID||LA160_3==STRING||(LA160_3>=BOOL && LA160_3<=LEFT_PAREN)||LA160_3==DECIMAL||LA160_3==LESS||LA160_3==LEFT_SQUARE||(LA160_3>=NULL && LA160_3<=FLOAT)||(LA160_3>=INCR && LA160_3<=NEGATION)) ) {
                        alt160=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT_UNSIG:
                    {
                    int LA160_4 = input.LA(2);

                    if ( (LA160_4==ID||LA160_4==STRING||(LA160_4>=BOOL && LA160_4<=LEFT_PAREN)||LA160_4==DECIMAL||LA160_4==LESS||LA160_4==LEFT_SQUARE||(LA160_4>=NULL && LA160_4<=FLOAT)||(LA160_4>=INCR && LA160_4<=NEGATION)) ) {
                        alt160=1;
                    }


                    }
                    break;

                }

                switch (alt160) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1599:30: shiftOp additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression7137);
            	    shiftOp501=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftOp501.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression7139);
            	    additiveExpression502=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression502.getTree());

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1602:1: shiftOp : ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) ;
    public final DRLParser.shiftOp_return shiftOp() throws RecognitionException {
        DRLParser.shiftOp_return retval = new DRLParser.shiftOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set503=null;

        Object set503_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1603:2: ( ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1603:4: ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT )
            {
            root_0 = (Object)adaptor.nil();

            set503=(Token)input.LT(1);
            if ( (input.LA(1)>=SHIFT_LEFT && input.LA(1)<=SHIFT_RIGHT) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set503));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1606:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final DRLParser.additiveExpression_return additiveExpression() throws RecognitionException {
        DRLParser.additiveExpression_return retval = new DRLParser.additiveExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set505=null;
        DRLParser.multiplicativeExpression_return multiplicativeExpression504 = null;

        DRLParser.multiplicativeExpression_return multiplicativeExpression506 = null;


        Object set505_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1607:5: ( multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1607:9: multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression7180);
            multiplicativeExpression504=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression504.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1607:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            loop161:
            do {
                int alt161=2;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1607:36: ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    set505=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set505));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression7199);
            	    multiplicativeExpression506=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression506.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1610:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final DRLParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        DRLParser.multiplicativeExpression_return retval = new DRLParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set508=null;
        DRLParser.unaryExpression_return unaryExpression507 = null;

        DRLParser.unaryExpression_return unaryExpression509 = null;


        Object set508_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1611:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1611:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression7218);
            unaryExpression507=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression507.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1611:25: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( ((LA162_0>=STAR && LA162_0<=MOD)) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1611:27: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    set508=(Token)input.LT(1);
            	    if ( (input.LA(1)>=STAR && input.LA(1)<=MOD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set508));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression7236);
            	    unaryExpression509=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression509.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1614:1: unaryExpression : ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus );
    public final DRLParser.unaryExpression_return unaryExpression() throws RecognitionException {
        DRLParser.unaryExpression_return retval = new DRLParser.unaryExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS510=null;
        Token MINUS512=null;
        Token INCR514=null;
        Token DECR516=null;
        DRLParser.unaryExpression_return unaryExpression511 = null;

        DRLParser.unaryExpression_return unaryExpression513 = null;

        DRLParser.primary_return primary515 = null;

        DRLParser.primary_return primary517 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus518 = null;


        Object PLUS510_tree=null;
        Object MINUS512_tree=null;
        Object INCR514_tree=null;
        Object DECR516_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1615:5: ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus )
            int alt163=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt163=1;
                }
                break;
            case MINUS:
                {
                alt163=2;
                }
                break;
            case INCR:
                {
                alt163=3;
                }
                break;
            case DECR:
                {
                alt163=4;
                }
                break;
            case ID:
            case STRING:
            case BOOL:
            case LEFT_PAREN:
            case DECIMAL:
            case LESS:
            case LEFT_SQUARE:
            case NULL:
            case HEX:
            case FLOAT:
            case TILDE:
            case NEGATION:
                {
                alt163=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1615:9: PLUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS510=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression7256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS510_tree = (Object)adaptor.create(PLUS510);
                    adaptor.addChild(root_0, PLUS510_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression7258);
                    unaryExpression511=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression511.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1616:7: MINUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS512=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS512_tree = (Object)adaptor.create(MINUS512);
                    adaptor.addChild(root_0, MINUS512_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression7268);
                    unaryExpression513=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression513.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1617:9: INCR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    INCR514=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression7278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INCR514_tree = (Object)adaptor.create(INCR514);
                    adaptor.addChild(root_0, INCR514_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression7280);
                    primary515=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary515.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1618:9: DECR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    DECR516=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression7290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECR516_tree = (Object)adaptor.create(DECR516);
                    adaptor.addChild(root_0, DECR516_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression7292);
                    primary517=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary517.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1619:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression7302);
                    unaryExpressionNotPlusMinus518=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus518.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1622:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );
    public final DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        DRLParser.unaryExpressionNotPlusMinus_return retval = new DRLParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token TILDE519=null;
        Token NEGATION521=null;
        Token set526=null;
        DRLParser.unaryExpression_return unaryExpression520 = null;

        DRLParser.unaryExpression_return unaryExpression522 = null;

        DRLParser.castExpression_return castExpression523 = null;

        DRLParser.primary_return primary524 = null;

        DRLParser.selector_return selector525 = null;


        Object TILDE519_tree=null;
        Object NEGATION521_tree=null;
        Object set526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1624:5: ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? )
            int alt166=4;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1624:9: TILDE unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    TILDE519=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus7335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE519_tree = (Object)adaptor.create(TILDE519);
                    adaptor.addChild(root_0, TILDE519_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7337);
                    unaryExpression520=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression520.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1625:8: NEGATION unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    NEGATION521=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus7346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEGATION521_tree = (Object)adaptor.create(NEGATION521);
                    adaptor.addChild(root_0, NEGATION521_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7348);
                    unaryExpression522=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression522.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1626:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus7358);
                    castExpression523=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression523.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:9: primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus7368);
                    primary524=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary524.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:17: ( ( selector )=> selector )*
                    loop164:
                    do {
                        int alt164=2;
                        alt164 = dfa164.predict(input);
                        switch (alt164) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:18: ( selector )=> selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus7375);
                    	    selector525=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector525.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    int alt165=2;
                    alt165 = dfa165.predict(input);
                    switch (alt165) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:42: ( INCR | DECR )=> ( INCR | DECR )
                            {
                            set526=(Token)input.LT(1);
                            if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set526));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1630:1: castExpression options {backtrack=true; memoize=true; } : ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus );
    public final DRLParser.castExpression_return castExpression() throws RecognitionException {
        DRLParser.castExpression_return retval = new DRLParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN527=null;
        Token RIGHT_PAREN529=null;
        Token LEFT_PAREN531=null;
        Token RIGHT_PAREN533=null;
        Token LEFT_PAREN535=null;
        Token RIGHT_PAREN537=null;
        DRLParser.primitiveType_return primitiveType528 = null;

        DRLParser.unaryExpression_return unaryExpression530 = null;

        DRLParser.type_return type532 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus534 = null;

        DRLParser.expression_return expression536 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus538 = null;


        Object LEFT_PAREN527_tree=null;
        Object RIGHT_PAREN529_tree=null;
        Object LEFT_PAREN531_tree=null;
        Object RIGHT_PAREN533_tree=null;
        Object LEFT_PAREN535_tree=null;
        Object RIGHT_PAREN537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1632:5: ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus )
            int alt167=3;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==LEFT_PAREN) ) {
                int LA167_1 = input.LA(2);

                if ( (synpred43_DRL()) ) {
                    alt167=1;
                }
                else if ( (synpred44_DRL()) ) {
                    alt167=2;
                }
                else if ( (true) ) {
                    alt167=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 167, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1632:8: ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN527=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN527_tree = (Object)adaptor.create(LEFT_PAREN527);
                    adaptor.addChild(root_0, LEFT_PAREN527_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression7439);
                    primitiveType528=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType528.getTree());
                    RIGHT_PAREN529=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN529_tree = (Object)adaptor.create(RIGHT_PAREN529);
                    adaptor.addChild(root_0, RIGHT_PAREN529_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression7443);
                    unaryExpression530=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression530.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1633:8: ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN531=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN531_tree = (Object)adaptor.create(LEFT_PAREN531);
                    adaptor.addChild(root_0, LEFT_PAREN531_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression7462);
                    type532=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type532.getTree());
                    RIGHT_PAREN533=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN533_tree = (Object)adaptor.create(RIGHT_PAREN533);
                    adaptor.addChild(root_0, RIGHT_PAREN533_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7466);
                    unaryExpressionNotPlusMinus534=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus534.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1634:8: LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN535=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression7475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN535_tree = (Object)adaptor.create(LEFT_PAREN535);
                    adaptor.addChild(root_0, LEFT_PAREN535_tree);
                    }
                    pushFollow(FOLLOW_expression_in_castExpression7477);
                    expression536=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression536.getTree());
                    RIGHT_PAREN537=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression7479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN537_tree = (Object)adaptor.create(RIGHT_PAREN537);
                    adaptor.addChild(root_0, RIGHT_PAREN537_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7481);
                    unaryExpressionNotPlusMinus538=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus538.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1637:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );
    public final DRLParser.primitiveType_return primitiveType() throws RecognitionException {
        DRLParser.primitiveType_return retval = new DRLParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.boolean_key_return boolean_key539 = null;

        DRLParser.char_key_return char_key540 = null;

        DRLParser.byte_key_return byte_key541 = null;

        DRLParser.short_key_return short_key542 = null;

        DRLParser.int_key_return int_key543 = null;

        DRLParser.long_key_return long_key544 = null;

        DRLParser.float_key_return float_key545 = null;

        DRLParser.double_key_return double_key546 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1639:5: ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key )
            int alt168=8;
            alt168 = dfa168.predict(input);
            switch (alt168) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1639:9: boolean_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolean_key_in_primitiveType7518);
                    boolean_key539=boolean_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_key539.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1640:7: char_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_char_key_in_primitiveType7526);
                    char_key540=char_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_key540.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1641:7: byte_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_byte_key_in_primitiveType7534);
                    byte_key541=byte_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, byte_key541.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1642:7: short_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_short_key_in_primitiveType7542);
                    short_key542=short_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, short_key542.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1643:7: int_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_int_key_in_primitiveType7550);
                    int_key543=int_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, int_key543.getTree());

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1644:7: long_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_long_key_in_primitiveType7558);
                    long_key544=long_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, long_key544.getTree());

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1645:7: float_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_float_key_in_primitiveType7566);
                    float_key545=float_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, float_key545.getTree());

                    }
                    break;
                case 8 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1646:7: double_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_double_key_in_primitiveType7574);
                    double_key546=double_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_key546.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1649:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );
    public final DRLParser.primary_return primary() throws RecognitionException {
        DRLParser.primary_return retval = new DRLParser.primary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE558=null;
        Token RIGHT_SQUARE559=null;
        Token DOT560=null;
        Token ID564=null;
        Token DOT565=null;
        Token ID566=null;
        DRLParser.parExpression_return parExpression547 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments548 = null;

        DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix549 = null;

        DRLParser.this_key_return this_key550 = null;

        DRLParser.arguments_return arguments551 = null;

        DRLParser.literal_return literal552 = null;

        DRLParser.super_key_return super_key553 = null;

        DRLParser.superSuffix_return superSuffix554 = null;

        DRLParser.new_key_return new_key555 = null;

        DRLParser.creator_return creator556 = null;

        DRLParser.primitiveType_return primitiveType557 = null;

        DRLParser.class_key_return class_key561 = null;

        DRLParser.inlineMapExpression_return inlineMapExpression562 = null;

        DRLParser.inlineListExpression_return inlineListExpression563 = null;

        DRLParser.identifierSuffix_return identifierSuffix567 = null;


        Object LEFT_SQUARE558_tree=null;
        Object RIGHT_SQUARE559_tree=null;
        Object DOT560_tree=null;
        Object ID564_tree=null;
        Object DOT565_tree=null;
        Object ID566_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1651:5: ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? )
            int alt173=9;
            alt173 = dfa173.predict(input);
            switch (alt173) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1651:7: ( parExpression )=> parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary7597);
                    parExpression547=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression547.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1652:9: ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary7612);
                    nonWildcardTypeArguments548=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments548.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1652:63: ( explicitGenericInvocationSuffix | this_key arguments )
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==ID) ) {
                        int LA169_1 = input.LA(2);

                        if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))))) ) {
                            alt169=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                            alt169=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 169, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 169, 0, input);

                        throw nvae;
                    }
                    switch (alt169) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1652:64: explicitGenericInvocationSuffix
                            {
                            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary7615);
                            explicitGenericInvocationSuffix549=explicitGenericInvocationSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix549.getTree());

                            }
                            break;
                        case 2 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1652:98: this_key arguments
                            {
                            pushFollow(FOLLOW_this_key_in_primary7619);
                            this_key550=this_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, this_key550.getTree());
                            pushFollow(FOLLOW_arguments_in_primary7621);
                            arguments551=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments551.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1653:9: ( literal )=> literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary7637);
                    literal552=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal552.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1655:9: ( super_key )=> super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_primary7657);
                    super_key553=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key553.getTree());
                    pushFollow(FOLLOW_superSuffix_in_primary7659);
                    superSuffix554=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix554.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1656:9: ( new_key )=> new_key creator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_new_key_in_primary7674);
                    new_key555=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key555.getTree());
                    pushFollow(FOLLOW_creator_in_primary7676);
                    creator556=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, creator556.getTree());

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1657:9: ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_primary7691);
                    primitiveType557=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType557.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1657:41: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop170:
                    do {
                        int alt170=2;
                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==LEFT_SQUARE) ) {
                            alt170=1;
                        }


                        switch (alt170) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1657:42: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE558=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary7694); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE558_tree = (Object)adaptor.create(LEFT_SQUARE558);
                    	    adaptor.addChild(root_0, LEFT_SQUARE558_tree);
                    	    }
                    	    RIGHT_SQUARE559=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary7696); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE559_tree = (Object)adaptor.create(RIGHT_SQUARE559);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE559_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);

                    DOT560=(Token)match(input,DOT,FOLLOW_DOT_in_primary7700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT560_tree = (Object)adaptor.create(DOT560);
                    adaptor.addChild(root_0, DOT560_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_primary7702);
                    class_key561=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key561.getTree());

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1659:9: ( inlineMapExpression )=> inlineMapExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineMapExpression_in_primary7722);
                    inlineMapExpression562=inlineMapExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineMapExpression562.getTree());

                    }
                    break;
                case 8 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1660:9: ( inlineListExpression )=> inlineListExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineListExpression_in_primary7737);
                    inlineListExpression563=inlineListExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineListExpression563.getTree());

                    }
                    break;
                case 9 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:9: ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ID564=(Token)match(input,ID,FOLLOW_ID_in_primary7751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID564_tree = (Object)adaptor.create(ID564);
                    adaptor.addChild(root_0, ID564_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:18: ( ( DOT ID )=> DOT ID )*
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==DOT) ) {
                            int LA171_2 = input.LA(2);

                            if ( (LA171_2==ID) ) {
                                int LA171_3 = input.LA(3);

                                if ( (synpred61_DRL()) ) {
                                    alt171=1;
                                }


                            }


                        }


                        switch (alt171) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:19: ( DOT ID )=> DOT ID
                    	    {
                    	    DOT565=(Token)match(input,DOT,FOLLOW_DOT_in_primary7760); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT565_tree = (Object)adaptor.create(DOT565);
                    	    adaptor.addChild(root_0, DOT565_tree);
                    	    }
                    	    ID566=(Token)match(input,ID,FOLLOW_ID_in_primary7762); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID566_tree = (Object)adaptor.create(ID566);
                    	    adaptor.addChild(root_0, ID566_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:38: ( ( identifierSuffix )=> identifierSuffix )?
                    int alt172=2;
                    alt172 = dfa172.predict(input);
                    switch (alt172) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:39: ( identifierSuffix )=> identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary7771);
                            identifierSuffix567=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierSuffix567.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class inlineListExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineListExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1664:1: inlineListExpression : LEFT_SQUARE ( expressionList )? RIGHT_SQUARE ;
    public final DRLParser.inlineListExpression_return inlineListExpression() throws RecognitionException {
        DRLParser.inlineListExpression_return retval = new DRLParser.inlineListExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE568=null;
        Token RIGHT_SQUARE570=null;
        DRLParser.expressionList_return expressionList569 = null;


        Object LEFT_SQUARE568_tree=null;
        Object RIGHT_SQUARE570_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1665:5: ( LEFT_SQUARE ( expressionList )? RIGHT_SQUARE )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1665:9: LEFT_SQUARE ( expressionList )? RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE568=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression7792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE568_tree = (Object)adaptor.create(LEFT_SQUARE568);
            adaptor.addChild(root_0, LEFT_SQUARE568_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1665:21: ( expressionList )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==ID||LA174_0==STRING||(LA174_0>=BOOL && LA174_0<=LEFT_PAREN)||LA174_0==DECIMAL||LA174_0==LESS||LA174_0==LEFT_SQUARE||(LA174_0>=NULL && LA174_0<=FLOAT)||(LA174_0>=INCR && LA174_0<=NEGATION)) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1665:21: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_inlineListExpression7794);
                    expressionList569=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList569.getTree());

                    }
                    break;

            }

            RIGHT_SQUARE570=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression7797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE570_tree = (Object)adaptor.create(RIGHT_SQUARE570);
            adaptor.addChild(root_0, RIGHT_SQUARE570_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineListExpression"

    public static class inlineMapExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineMapExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1668:1: inlineMapExpression : LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE ;
    public final DRLParser.inlineMapExpression_return inlineMapExpression() throws RecognitionException {
        DRLParser.inlineMapExpression_return retval = new DRLParser.inlineMapExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE571=null;
        Token RIGHT_SQUARE573=null;
        DRLParser.mapExpressionList_return mapExpressionList572 = null;


        Object LEFT_SQUARE571_tree=null;
        Object RIGHT_SQUARE573_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1669:5: ( LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1669:7: LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE571=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression7819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE571_tree = (Object)adaptor.create(LEFT_SQUARE571);
            adaptor.addChild(root_0, LEFT_SQUARE571_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1669:19: ( mapExpressionList )+
            int cnt175=0;
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==ID||LA175_0==STRING||(LA175_0>=BOOL && LA175_0<=LEFT_PAREN)||LA175_0==DECIMAL||LA175_0==LESS||LA175_0==LEFT_SQUARE||(LA175_0>=NULL && LA175_0<=FLOAT)||(LA175_0>=INCR && LA175_0<=NEGATION)) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1669:19: mapExpressionList
            	    {
            	    pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression7821);
            	    mapExpressionList572=mapExpressionList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapExpressionList572.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt175 >= 1 ) break loop175;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(175, input);
                        throw eee;
                }
                cnt175++;
            } while (true);

            RIGHT_SQUARE573=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE573_tree = (Object)adaptor.create(RIGHT_SQUARE573);
            adaptor.addChild(root_0, RIGHT_SQUARE573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineMapExpression"

    public static class mapExpressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapExpressionList"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1672:1: mapExpressionList : mapEntry ( COMMA mapEntry )* ;
    public final DRLParser.mapExpressionList_return mapExpressionList() throws RecognitionException {
        DRLParser.mapExpressionList_return retval = new DRLParser.mapExpressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA575=null;
        DRLParser.mapEntry_return mapEntry574 = null;

        DRLParser.mapEntry_return mapEntry576 = null;


        Object COMMA575_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1673:5: ( mapEntry ( COMMA mapEntry )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1673:7: mapEntry ( COMMA mapEntry )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mapEntry_in_mapExpressionList7841);
            mapEntry574=mapEntry();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry574.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1673:16: ( COMMA mapEntry )*
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==COMMA) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1673:17: COMMA mapEntry
            	    {
            	    COMMA575=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapExpressionList7844); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA575_tree = (Object)adaptor.create(COMMA575);
            	    adaptor.addChild(root_0, COMMA575_tree);
            	    }
            	    pushFollow(FOLLOW_mapEntry_in_mapExpressionList7846);
            	    mapEntry576=mapEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry576.getTree());

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapExpressionList"

    public static class mapEntry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapEntry"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1676:1: mapEntry : expression COLON expression ;
    public final DRLParser.mapEntry_return mapEntry() throws RecognitionException {
        DRLParser.mapEntry_return retval = new DRLParser.mapEntry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON578=null;
        DRLParser.expression_return expression577 = null;

        DRLParser.expression_return expression579 = null;


        Object COLON578_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1677:5: ( expression COLON expression )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1677:7: expression COLON expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_mapEntry7869);
            expression577=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression577.getTree());
            COLON578=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry7871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON578_tree = (Object)adaptor.create(COLON578);
            adaptor.addChild(root_0, COLON578_tree);
            }
            pushFollow(FOLLOW_expression_in_mapEntry7873);
            expression579=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression579.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapEntry"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1680:1: parExpression : LEFT_PAREN expression RIGHT_PAREN ;
    public final DRLParser.parExpression_return parExpression() throws RecognitionException {
        DRLParser.parExpression_return retval = new DRLParser.parExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN580=null;
        Token RIGHT_PAREN582=null;
        DRLParser.expression_return expression581 = null;


        Object LEFT_PAREN580_tree=null;
        Object RIGHT_PAREN582_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1681:2: ( LEFT_PAREN expression RIGHT_PAREN )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1681:4: LEFT_PAREN expression RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN580=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression7887); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN580_tree = (Object)adaptor.create(LEFT_PAREN580);
            adaptor.addChild(root_0, LEFT_PAREN580_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression7889);
            expression581=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression581.getTree());
            RIGHT_PAREN582=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression7891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN582_tree = (Object)adaptor.create(RIGHT_PAREN582);
            adaptor.addChild(root_0, RIGHT_PAREN582_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffix"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1684:1: identifierSuffix options {backtrack=true; memoize=true; } : ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments );
    public final DRLParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        DRLParser.identifierSuffix_return retval = new DRLParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE583=null;
        Token RIGHT_SQUARE584=null;
        Token DOT585=null;
        Token LEFT_SQUARE587=null;
        Token RIGHT_SQUARE589=null;
        DRLParser.class_key_return class_key586 = null;

        DRLParser.expression_return expression588 = null;

        DRLParser.arguments_return arguments590 = null;


        Object LEFT_SQUARE583_tree=null;
        Object RIGHT_SQUARE584_tree=null;
        Object DOT585_tree=null;
        Object LEFT_SQUARE587_tree=null;
        Object RIGHT_SQUARE589_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1686:5: ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments )
            int alt179=3;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==LEFT_SQUARE) ) {
                int LA179_1 = input.LA(2);

                if ( (LA179_1==RIGHT_SQUARE) ) {
                    alt179=1;
                }
                else if ( (LA179_1==ID||LA179_1==STRING||(LA179_1>=BOOL && LA179_1<=LEFT_PAREN)||LA179_1==DECIMAL||LA179_1==LESS||LA179_1==LEFT_SQUARE||(LA179_1>=NULL && LA179_1<=FLOAT)||(LA179_1>=INCR && LA179_1<=NEGATION)) ) {
                    alt179=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 179, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA179_0==LEFT_PAREN) ) {
                alt179=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1686:7: ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1686:7: ( LEFT_SQUARE RIGHT_SQUARE )+
                    int cnt177=0;
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==LEFT_SQUARE) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1686:8: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE583=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7921); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE583_tree = (Object)adaptor.create(LEFT_SQUARE583);
                    	    adaptor.addChild(root_0, LEFT_SQUARE583_tree);
                    	    }
                    	    RIGHT_SQUARE584=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7923); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE584_tree = (Object)adaptor.create(RIGHT_SQUARE584);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE584_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt177 >= 1 ) break loop177;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(177, input);
                                throw eee;
                        }
                        cnt177++;
                    } while (true);

                    DOT585=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix7927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT585_tree = (Object)adaptor.create(DOT585);
                    adaptor.addChild(root_0, DOT585_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_identifierSuffix7929);
                    class_key586=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key586.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1687:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1687:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    int cnt178=0;
                    loop178:
                    do {
                        int alt178=2;
                        alt178 = dfa178.predict(input);
                        switch (alt178) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1687:8: ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE587=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7944); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE587_tree = (Object)adaptor.create(LEFT_SQUARE587);
                    	    adaptor.addChild(root_0, LEFT_SQUARE587_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix7946);
                    	    expression588=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression588.getTree());
                    	    RIGHT_SQUARE589=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7948); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE589_tree = (Object)adaptor.create(RIGHT_SQUARE589);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE589_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt178 >= 1 ) break loop178;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(178, input);
                                throw eee;
                        }
                        cnt178++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1688:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_identifierSuffix7961);
                    arguments590=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments590.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1696:1: creator : ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) ;
    public final DRLParser.creator_return creator() throws RecognitionException {
        DRLParser.creator_return retval = new DRLParser.creator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments591 = null;

        DRLParser.createdName_return createdName592 = null;

        DRLParser.arrayCreatorRest_return arrayCreatorRest593 = null;

        DRLParser.classCreatorRest_return classCreatorRest594 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1697:2: ( ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1697:4: ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest )
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1697:4: ( nonWildcardTypeArguments )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==LESS) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1697:4: nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator7979);
                    nonWildcardTypeArguments591=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments591.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_createdName_in_creator7982);
            createdName592=createdName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName592.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1698:9: ( arrayCreatorRest | classCreatorRest )
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LEFT_SQUARE) ) {
                alt181=1;
            }
            else if ( (LA181_0==LEFT_PAREN) ) {
                alt181=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }
            switch (alt181) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1698:10: arrayCreatorRest
                    {
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator7993);
                    arrayCreatorRest593=arrayCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayCreatorRest593.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1698:29: classCreatorRest
                    {
                    pushFollow(FOLLOW_classCreatorRest_in_creator7997);
                    classCreatorRest594=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest594.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1701:1: createdName : ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType );
    public final DRLParser.createdName_return createdName() throws RecognitionException {
        DRLParser.createdName_return retval = new DRLParser.createdName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID595=null;
        Token DOT597=null;
        Token ID598=null;
        DRLParser.typeArguments_return typeArguments596 = null;

        DRLParser.typeArguments_return typeArguments599 = null;

        DRLParser.primitiveType_return primitiveType600 = null;


        Object ID595_tree=null;
        Object DOT597_tree=null;
        Object ID598_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1702:2: ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))))) {
                int LA185_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))) ) {
                    alt185=1;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {
                    alt185=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1702:4: ID ( typeArguments )? ( DOT ID ( typeArguments )? )*
                    {
                    root_0 = (Object)adaptor.nil();

                    ID595=(Token)match(input,ID,FOLLOW_ID_in_createdName8009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID595_tree = (Object)adaptor.create(ID595);
                    adaptor.addChild(root_0, ID595_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1702:7: ( typeArguments )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==LESS) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1702:7: typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_createdName8011);
                            typeArguments596=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments596.getTree());

                            }
                            break;

                    }

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1703:9: ( DOT ID ( typeArguments )? )*
                    loop184:
                    do {
                        int alt184=2;
                        int LA184_0 = input.LA(1);

                        if ( (LA184_0==DOT) ) {
                            alt184=1;
                        }


                        switch (alt184) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1703:11: DOT ID ( typeArguments )?
                    	    {
                    	    DOT597=(Token)match(input,DOT,FOLLOW_DOT_in_createdName8024); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT597_tree = (Object)adaptor.create(DOT597);
                    	    adaptor.addChild(root_0, DOT597_tree);
                    	    }
                    	    ID598=(Token)match(input,ID,FOLLOW_ID_in_createdName8026); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID598_tree = (Object)adaptor.create(ID598);
                    	    adaptor.addChild(root_0, ID598_tree);
                    	    }
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1703:18: ( typeArguments )?
                    	    int alt183=2;
                    	    int LA183_0 = input.LA(1);

                    	    if ( (LA183_0==LESS) ) {
                    	        alt183=1;
                    	    }
                    	    switch (alt183) {
                    	        case 1 :
                    	            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1703:18: typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_createdName8028);
                    	            typeArguments599=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments599.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop184;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1704:11: primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName8043);
                    primitiveType600=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType600.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1707:1: innerCreator : {...}? => ID classCreatorRest ;
    public final DRLParser.innerCreator_return innerCreator() throws RecognitionException {
        DRLParser.innerCreator_return retval = new DRLParser.innerCreator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID601=null;
        DRLParser.classCreatorRest_return classCreatorRest602 = null;


        Object ID601_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1708:2: ({...}? => ID classCreatorRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1708:4: {...}? => ID classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "innerCreator", "!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            ID601=(Token)match(input,ID,FOLLOW_ID_in_innerCreator8058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID601_tree = (Object)adaptor.create(ID601);
            adaptor.addChild(root_0, ID601_tree);
            }
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator8060);
            classCreatorRest602=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest602.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayCreatorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1711:1: arrayCreatorRest : LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) ;
    public final DRLParser.arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        DRLParser.arrayCreatorRest_return retval = new DRLParser.arrayCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE603=null;
        Token RIGHT_SQUARE604=null;
        Token LEFT_SQUARE605=null;
        Token RIGHT_SQUARE606=null;
        Token RIGHT_SQUARE609=null;
        Token LEFT_SQUARE610=null;
        Token RIGHT_SQUARE612=null;
        Token LEFT_SQUARE613=null;
        Token RIGHT_SQUARE614=null;
        DRLParser.arrayInitializer_return arrayInitializer607 = null;

        DRLParser.expression_return expression608 = null;

        DRLParser.expression_return expression611 = null;


        Object LEFT_SQUARE603_tree=null;
        Object RIGHT_SQUARE604_tree=null;
        Object LEFT_SQUARE605_tree=null;
        Object RIGHT_SQUARE606_tree=null;
        Object RIGHT_SQUARE609_tree=null;
        Object LEFT_SQUARE610_tree=null;
        Object RIGHT_SQUARE612_tree=null;
        Object LEFT_SQUARE613_tree=null;
        Object RIGHT_SQUARE614_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1712:2: ( LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1712:6: LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE603=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE603_tree = (Object)adaptor.create(LEFT_SQUARE603);
            adaptor.addChild(root_0, LEFT_SQUARE603_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1713:2: ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==RIGHT_SQUARE) ) {
                alt189=1;
            }
            else if ( (LA189_0==ID||LA189_0==STRING||(LA189_0>=BOOL && LA189_0<=LEFT_PAREN)||LA189_0==DECIMAL||LA189_0==LESS||LA189_0==LEFT_SQUARE||(LA189_0>=NULL && LA189_0<=FLOAT)||(LA189_0>=INCR && LA189_0<=NEGATION)) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1713:6: RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer
                    {
                    RIGHT_SQUARE604=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE604_tree = (Object)adaptor.create(RIGHT_SQUARE604);
                    adaptor.addChild(root_0, RIGHT_SQUARE604_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1713:19: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==LEFT_SQUARE) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1713:20: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE605=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8084); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE605_tree = (Object)adaptor.create(LEFT_SQUARE605);
                    	    adaptor.addChild(root_0, LEFT_SQUARE605_tree);
                    	    }
                    	    RIGHT_SQUARE606=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8086); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE606_tree = (Object)adaptor.create(RIGHT_SQUARE606);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE606_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest8090);
                    arrayInitializer607=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer607.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1714:13: expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest8104);
                    expression608=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression608.getTree());
                    RIGHT_SQUARE609=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE609_tree = (Object)adaptor.create(RIGHT_SQUARE609);
                    adaptor.addChild(root_0, RIGHT_SQUARE609_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1714:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*
                    loop187:
                    do {
                        int alt187=2;
                        alt187 = dfa187.predict(input);
                        switch (alt187) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1714:38: {...}? => LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    if ( !((!helper.validateLT(2,"]"))) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "arrayCreatorRest", "!helper.validateLT(2,\"]\")");
                    	    }
                    	    LEFT_SQUARE610=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8111); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE610_tree = (Object)adaptor.create(LEFT_SQUARE610);
                    	    adaptor.addChild(root_0, LEFT_SQUARE610_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest8113);
                    	    expression611=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression611.getTree());
                    	    RIGHT_SQUARE612=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8115); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE612_tree = (Object)adaptor.create(RIGHT_SQUARE612);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE612_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop187;
                        }
                    } while (true);

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1714:106: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop188:
                    do {
                        int alt188=2;
                        int LA188_0 = input.LA(1);

                        if ( (LA188_0==LEFT_SQUARE) ) {
                            int LA188_2 = input.LA(2);

                            if ( (LA188_2==RIGHT_SQUARE) ) {
                                int LA188_3 = input.LA(3);

                                if ( (synpred66_DRL()) ) {
                                    alt188=1;
                                }


                            }


                        }


                        switch (alt188) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1714:107: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE613=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8127); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE613_tree = (Object)adaptor.create(LEFT_SQUARE613);
                    	    adaptor.addChild(root_0, LEFT_SQUARE613_tree);
                    	    }
                    	    RIGHT_SQUARE614=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8129); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE614_tree = (Object)adaptor.create(RIGHT_SQUARE614);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE614_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop188;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayCreatorRest"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1718:1: variableInitializer : ( arrayInitializer | expression );
    public final DRLParser.variableInitializer_return variableInitializer() throws RecognitionException {
        DRLParser.variableInitializer_return retval = new DRLParser.variableInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arrayInitializer_return arrayInitializer615 = null;

        DRLParser.expression_return expression616 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1719:2: ( arrayInitializer | expression )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==LEFT_CURLY) ) {
                alt190=1;
            }
            else if ( (LA190_0==ID||LA190_0==STRING||(LA190_0>=BOOL && LA190_0<=LEFT_PAREN)||LA190_0==DECIMAL||LA190_0==LESS||LA190_0==LEFT_SQUARE||(LA190_0>=NULL && LA190_0<=FLOAT)||(LA190_0>=INCR && LA190_0<=NEGATION)) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }
            switch (alt190) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1719:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer8152);
                    arrayInitializer615=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer615.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1720:10: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer8163);
                    expression616=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression616.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1723:1: arrayInitializer : LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY ;
    public final DRLParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        DRLParser.arrayInitializer_return retval = new DRLParser.arrayInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY617=null;
        Token COMMA619=null;
        Token COMMA621=null;
        Token RIGHT_CURLY622=null;
        DRLParser.variableInitializer_return variableInitializer618 = null;

        DRLParser.variableInitializer_return variableInitializer620 = null;


        Object LEFT_CURLY617_tree=null;
        Object COMMA619_tree=null;
        Object COMMA621_tree=null;
        Object RIGHT_CURLY622_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:2: ( LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:4: LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY617=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer8175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY617_tree = (Object)adaptor.create(LEFT_CURLY617);
            adaptor.addChild(root_0, LEFT_CURLY617_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:15: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==ID||LA193_0==STRING||(LA193_0>=BOOL && LA193_0<=LEFT_PAREN)||LA193_0==DECIMAL||LA193_0==LESS||LA193_0==LEFT_SQUARE||(LA193_0>=NULL && LA193_0<=FLOAT)||LA193_0==LEFT_CURLY||(LA193_0>=INCR && LA193_0<=NEGATION)) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:16: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer8178);
                    variableInitializer618=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer618.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:36: ( COMMA variableInitializer )*
                    loop191:
                    do {
                        int alt191=2;
                        int LA191_0 = input.LA(1);

                        if ( (LA191_0==COMMA) ) {
                            int LA191_1 = input.LA(2);

                            if ( (LA191_1==ID||LA191_1==STRING||(LA191_1>=BOOL && LA191_1<=LEFT_PAREN)||LA191_1==DECIMAL||LA191_1==LESS||LA191_1==LEFT_SQUARE||(LA191_1>=NULL && LA191_1<=FLOAT)||LA191_1==LEFT_CURLY||(LA191_1>=INCR && LA191_1<=NEGATION)) ) {
                                alt191=1;
                            }


                        }


                        switch (alt191) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:37: COMMA variableInitializer
                    	    {
                    	    COMMA619=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer8181); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA619_tree = (Object)adaptor.create(COMMA619);
                    	    adaptor.addChild(root_0, COMMA619_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer8183);
                    	    variableInitializer620=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer620.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop191;
                        }
                    } while (true);

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:65: ( COMMA )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==COMMA) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1724:66: COMMA
                            {
                            COMMA621=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer8188); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA621_tree = (Object)adaptor.create(COMMA621);
                            adaptor.addChild(root_0, COMMA621_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RIGHT_CURLY622=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer8195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY622_tree = (Object)adaptor.create(RIGHT_CURLY622);
            adaptor.addChild(root_0, RIGHT_CURLY622_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1727:1: classCreatorRest : arguments ( classBody )? ;
    public final DRLParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        DRLParser.classCreatorRest_return retval = new DRLParser.classCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arguments_return arguments623 = null;

        DRLParser.classBody_return classBody624 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1728:2: ( arguments ( classBody )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1728:4: arguments ( classBody )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest8206);
            arguments623=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments623.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1728:14: ( classBody )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==LEFT_CURLY) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1728:14: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest8208);
                    classBody624=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody624.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1731:1: explicitGenericInvocation : nonWildcardTypeArguments arguments ;
    public final DRLParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        DRLParser.explicitGenericInvocation_return retval = new DRLParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments625 = null;

        DRLParser.arguments_return arguments626 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1732:2: ( nonWildcardTypeArguments arguments )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1732:4: nonWildcardTypeArguments arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation8223);
            nonWildcardTypeArguments625=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments625.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation8225);
            arguments626=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments626.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1735:1: nonWildcardTypeArguments : LESS typeList GREATER ;
    public final DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        DRLParser.nonWildcardTypeArguments_return retval = new DRLParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS627=null;
        Token GREATER629=null;
        DRLParser.typeList_return typeList628 = null;


        Object LESS627_tree=null;
        Object GREATER629_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1736:2: ( LESS typeList GREATER )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1736:4: LESS typeList GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS627=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments8237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS627_tree = (Object)adaptor.create(LESS627);
            adaptor.addChild(root_0, LESS627_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments8239);
            typeList628=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList628.getTree());
            GREATER629=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments8241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER629_tree = (Object)adaptor.create(GREATER629);
            adaptor.addChild(root_0, GREATER629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1739:1: explicitGenericInvocationSuffix : ( super_key superSuffix | ID arguments );
    public final DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        DRLParser.explicitGenericInvocationSuffix_return retval = new DRLParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID632=null;
        DRLParser.super_key_return super_key630 = null;

        DRLParser.superSuffix_return superSuffix631 = null;

        DRLParser.arguments_return arguments633 = null;


        Object ID632_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1740:2: ( super_key superSuffix | ID arguments )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID) ) {
                int LA195_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                    alt195=1;
                }
                else if ( (true) ) {
                    alt195=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1740:4: super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_explicitGenericInvocationSuffix8253);
                    super_key630=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key630.getTree());
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix8255);
                    superSuffix631=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix631.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1741:7: ID arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    ID632=(Token)match(input,ID,FOLLOW_ID_in_explicitGenericInvocationSuffix8263); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID632_tree = (Object)adaptor.create(ID632);
                    adaptor.addChild(root_0, ID632_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix8265);
                    arguments633=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments633.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1744:1: selector options {backtrack=true; memoize=true; } : ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE );
    public final DRLParser.selector_return selector() throws RecognitionException {
        DRLParser.selector_return retval = new DRLParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token DOT634=null;
        Token ID635=null;
        Token DOT637=null;
        Token DOT640=null;
        Token LEFT_SQUARE644=null;
        Token RIGHT_SQUARE646=null;
        DRLParser.arguments_return arguments636 = null;

        DRLParser.super_key_return super_key638 = null;

        DRLParser.superSuffix_return superSuffix639 = null;

        DRLParser.new_key_return new_key641 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments642 = null;

        DRLParser.innerCreator_return innerCreator643 = null;

        DRLParser.expression_return expression645 = null;


        Object DOT634_tree=null;
        Object ID635_tree=null;
        Object DOT637_tree=null;
        Object DOT640_tree=null;
        Object LEFT_SQUARE644_tree=null;
        Object RIGHT_SQUARE646_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:2: ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE )
            int alt198=4;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==DOT) ) {
                int LA198_1 = input.LA(2);

                if ( (synpred68_DRL()) ) {
                    alt198=1;
                }
                else if ( (synpred69_DRL()) ) {
                    alt198=2;
                }
                else if ( (synpred70_DRL()) ) {
                    alt198=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 198, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA198_0==LEFT_SQUARE) ) {
                alt198=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT634=(Token)match(input,DOT,FOLLOW_DOT_in_selector8292); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT634_tree = (Object)adaptor.create(DOT634);
                    adaptor.addChild(root_0, DOT634_tree);
                    }
                    ID635=(Token)match(input,ID,FOLLOW_ID_in_selector8294); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID635_tree = (Object)adaptor.create(ID635);
                    adaptor.addChild(root_0, ID635_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:13: ( ( LEFT_PAREN )=> arguments )?
                    int alt196=2;
                    alt196 = dfa196.predict(input);
                    switch (alt196) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:14: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector8303);
                            arguments636=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments636.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1748:6: DOT super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT637=(Token)match(input,DOT,FOLLOW_DOT_in_selector8314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT637_tree = (Object)adaptor.create(DOT637);
                    adaptor.addChild(root_0, DOT637_tree);
                    }
                    pushFollow(FOLLOW_super_key_in_selector8316);
                    super_key638=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key638.getTree());
                    pushFollow(FOLLOW_superSuffix_in_selector8318);
                    superSuffix639=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix639.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1749:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT640=(Token)match(input,DOT,FOLLOW_DOT_in_selector8325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT640_tree = (Object)adaptor.create(DOT640);
                    adaptor.addChild(root_0, DOT640_tree);
                    }
                    pushFollow(FOLLOW_new_key_in_selector8327);
                    new_key641=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key641.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1749:18: ( nonWildcardTypeArguments )?
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==LESS) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1749:19: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector8330);
                            nonWildcardTypeArguments642=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments642.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector8334);
                    innerCreator643=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator643.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1750:6: LEFT_SQUARE expression RIGHT_SQUARE
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_SQUARE644=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector8341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_SQUARE644_tree = (Object)adaptor.create(LEFT_SQUARE644);
                    adaptor.addChild(root_0, LEFT_SQUARE644_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector8343);
                    expression645=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression645.getTree());
                    RIGHT_SQUARE646=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector8345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE646_tree = (Object)adaptor.create(RIGHT_SQUARE646);
                    adaptor.addChild(root_0, RIGHT_SQUARE646_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1753:1: superSuffix : ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? );
    public final DRLParser.superSuffix_return superSuffix() throws RecognitionException {
        DRLParser.superSuffix_return retval = new DRLParser.superSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT648=null;
        Token ID649=null;
        DRLParser.arguments_return arguments647 = null;

        DRLParser.arguments_return arguments650 = null;


        Object DOT648_tree=null;
        Object ID649_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1754:2: ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==LEFT_PAREN) ) {
                alt200=1;
            }
            else if ( (LA200_0==DOT) ) {
                alt200=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1754:4: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_superSuffix8357);
                    arguments647=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments647.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1755:7: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT648=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix8365); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT648_tree = (Object)adaptor.create(DOT648);
                    adaptor.addChild(root_0, DOT648_tree);
                    }
                    ID649=(Token)match(input,ID,FOLLOW_ID_in_superSuffix8367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID649_tree = (Object)adaptor.create(ID649);
                    adaptor.addChild(root_0, ID649_tree);
                    }
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1755:14: ( ( LEFT_PAREN )=> arguments )?
                    int alt199=2;
                    alt199 = dfa199.predict(input);
                    switch (alt199) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1755:15: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix8376);
                            arguments650=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments650.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1758:1: arguments options {backtrack=true; memoize=true; } : LEFT_PAREN ( expressionList )? RIGHT_PAREN ;
    public final DRLParser.arguments_return arguments() throws RecognitionException {
        DRLParser.arguments_return retval = new DRLParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN651=null;
        Token RIGHT_PAREN653=null;
        DRLParser.expressionList_return expressionList652 = null;


        Object LEFT_PAREN651_tree=null;
        Object RIGHT_PAREN653_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1760:2: ( LEFT_PAREN ( expressionList )? RIGHT_PAREN )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1760:4: LEFT_PAREN ( expressionList )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN651=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments8410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN651_tree = (Object)adaptor.create(LEFT_PAREN651);
            adaptor.addChild(root_0, LEFT_PAREN651_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1760:15: ( expressionList )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==ID||LA201_0==STRING||(LA201_0>=BOOL && LA201_0<=LEFT_PAREN)||LA201_0==DECIMAL||LA201_0==LESS||LA201_0==LEFT_SQUARE||(LA201_0>=NULL && LA201_0<=FLOAT)||(LA201_0>=INCR && LA201_0<=NEGATION)) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1760:15: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments8412);
                    expressionList652=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList652.getTree());

                    }
                    break;

            }

            RIGHT_PAREN653=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments8415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN653_tree = (Object)adaptor.create(RIGHT_PAREN653);
            adaptor.addChild(root_0, RIGHT_PAREN653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1763:1: expressionList : expression ( COMMA expression )* ;
    public final DRLParser.expressionList_return expressionList() throws RecognitionException {
        DRLParser.expressionList_return retval = new DRLParser.expressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA655=null;
        DRLParser.expression_return expression654 = null;

        DRLParser.expression_return expression656 = null;


        Object COMMA655_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1765:5: ( expression ( COMMA expression )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1765:9: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList8432);
            expression654=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression654.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1765:20: ( COMMA expression )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==COMMA) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1765:21: COMMA expression
            	    {
            	    COMMA655=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList8435); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA655_tree = (Object)adaptor.create(COMMA655);
            	    adaptor.addChild(root_0, COMMA655_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList8437);
            	    expression656=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression656.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1768:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );
    public final DRLParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        DRLParser.assignmentOperator_return retval = new DRLParser.assignmentOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN657=null;
        Token PLUS_ASSIGN658=null;
        Token MINUS_ASSIGN659=null;
        Token MULT_ASSIGN660=null;
        Token DIV_ASSIGN661=null;
        Token AND_ASSIGN662=null;
        Token OR_ASSIGN663=null;
        Token XOR_ASSIGN664=null;
        Token MOD_ASSIGN665=null;
        Token SHIFT_LEFT666=null;
        Token EQUALS_ASSIGN667=null;
        Token SHIFT_RIGHT668=null;
        Token EQUALS_ASSIGN669=null;
        Token SHIFT_RIGHT_UNSIG670=null;
        Token EQUALS_ASSIGN671=null;

        Object EQUALS_ASSIGN657_tree=null;
        Object PLUS_ASSIGN658_tree=null;
        Object MINUS_ASSIGN659_tree=null;
        Object MULT_ASSIGN660_tree=null;
        Object DIV_ASSIGN661_tree=null;
        Object AND_ASSIGN662_tree=null;
        Object OR_ASSIGN663_tree=null;
        Object XOR_ASSIGN664_tree=null;
        Object MOD_ASSIGN665_tree=null;
        Object SHIFT_LEFT666_tree=null;
        Object EQUALS_ASSIGN667_tree=null;
        Object SHIFT_RIGHT668_tree=null;
        Object EQUALS_ASSIGN669_tree=null;
        Object SHIFT_RIGHT_UNSIG670_tree=null;
        Object EQUALS_ASSIGN671_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1770:2: ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN )
            int alt203=12;
            alt203 = dfa203.predict(input);
            switch (alt203) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1770:6: EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_ASSIGN657=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN657_tree = (Object)adaptor.create(EQUALS_ASSIGN657);
                    adaptor.addChild(root_0, EQUALS_ASSIGN657_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1771:13: PLUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS_ASSIGN658=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator8478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS_ASSIGN658_tree = (Object)adaptor.create(PLUS_ASSIGN658);
                    adaptor.addChild(root_0, PLUS_ASSIGN658_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1772:13: MINUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS_ASSIGN659=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator8492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS_ASSIGN659_tree = (Object)adaptor.create(MINUS_ASSIGN659);
                    adaptor.addChild(root_0, MINUS_ASSIGN659_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1773:13: MULT_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MULT_ASSIGN660=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator8506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MULT_ASSIGN660_tree = (Object)adaptor.create(MULT_ASSIGN660);
                    adaptor.addChild(root_0, MULT_ASSIGN660_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1774:13: DIV_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DIV_ASSIGN661=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator8520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV_ASSIGN661_tree = (Object)adaptor.create(DIV_ASSIGN661);
                    adaptor.addChild(root_0, DIV_ASSIGN661_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1775:13: AND_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_ASSIGN662=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator8534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_ASSIGN662_tree = (Object)adaptor.create(AND_ASSIGN662);
                    adaptor.addChild(root_0, AND_ASSIGN662_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1776:13: OR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_ASSIGN663=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator8548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_ASSIGN663_tree = (Object)adaptor.create(OR_ASSIGN663);
                    adaptor.addChild(root_0, OR_ASSIGN663_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1777:13: XOR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    XOR_ASSIGN664=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator8562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    XOR_ASSIGN664_tree = (Object)adaptor.create(XOR_ASSIGN664);
                    adaptor.addChild(root_0, XOR_ASSIGN664_tree);
                    }

                    }
                    break;
                case 9 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1778:13: MOD_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MOD_ASSIGN665=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator8576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOD_ASSIGN665_tree = (Object)adaptor.create(MOD_ASSIGN665);
                    adaptor.addChild(root_0, MOD_ASSIGN665_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1779:13: SHIFT_LEFT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_LEFT666=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator8590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_LEFT666_tree = (Object)adaptor.create(SHIFT_LEFT666);
                    adaptor.addChild(root_0, SHIFT_LEFT666_tree);
                    }
                    EQUALS_ASSIGN667=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN667_tree = (Object)adaptor.create(EQUALS_ASSIGN667);
                    adaptor.addChild(root_0, EQUALS_ASSIGN667_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1780:13: SHIFT_RIGHT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT668=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator8606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT668_tree = (Object)adaptor.create(SHIFT_RIGHT668);
                    adaptor.addChild(root_0, SHIFT_RIGHT668_tree);
                    }
                    EQUALS_ASSIGN669=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN669_tree = (Object)adaptor.create(EQUALS_ASSIGN669);
                    adaptor.addChild(root_0, EQUALS_ASSIGN669_tree);
                    }

                    }
                    break;
                case 12 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1781:13: SHIFT_RIGHT_UNSIG EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT_UNSIG670=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator8622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT_UNSIG670_tree = (Object)adaptor.create(SHIFT_RIGHT_UNSIG670);
                    adaptor.addChild(root_0, SHIFT_RIGHT_UNSIG670_tree);
                    }
                    EQUALS_ASSIGN671=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN671_tree = (Object)adaptor.create(EQUALS_ASSIGN671);
                    adaptor.addChild(root_0, EQUALS_ASSIGN671_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1795:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
    public final DRLParser.classDeclaration_return classDeclaration() throws RecognitionException {
        DRLParser.classDeclaration_return retval = new DRLParser.classDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.normalClassDeclaration_return normalClassDeclaration672 = null;

        DRLParser.enumDeclaration_return enumDeclaration673 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1796:2: ( normalClassDeclaration | enumDeclaration )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))))) {
                int LA204_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))) ) {
                    alt204=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))) ) {
                    alt204=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 204, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1796:4: normalClassDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration8647);
                    normalClassDeclaration672=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalClassDeclaration672.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1797:9: enumDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration8657);
                    enumDeclaration673=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration673.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalClassDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1800:1: normalClassDeclaration : class_key ID ( typeParameters )? ( extends_key type )? ( implements_key typeList )? classBody ;
    public final DRLParser.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        DRLParser.normalClassDeclaration_return retval = new DRLParser.normalClassDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID675=null;
        DRLParser.class_key_return class_key674 = null;

        DRLParser.typeParameters_return typeParameters676 = null;

        DRLParser.extends_key_return extends_key677 = null;

        DRLParser.type_return type678 = null;

        DRLParser.implements_key_return implements_key679 = null;

        DRLParser.typeList_return typeList680 = null;

        DRLParser.classBody_return classBody681 = null;


        Object ID675_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1801:2: ( class_key ID ( typeParameters )? ( extends_key type )? ( implements_key typeList )? classBody )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1801:4: class_key ID ( typeParameters )? ( extends_key type )? ( implements_key typeList )? classBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_class_key_in_normalClassDeclaration8669);
            class_key674=class_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key674.getTree());
            ID675=(Token)match(input,ID,FOLLOW_ID_in_normalClassDeclaration8671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID675_tree = (Object)adaptor.create(ID675);
            adaptor.addChild(root_0, ID675_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1801:17: ( typeParameters )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==LESS) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1801:18: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration8674);
                    typeParameters676=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters676.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1802:9: ( extends_key type )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                int LA206_1 = input.LA(2);

                if ( (LA206_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                    int LA206_3 = input.LA(3);

                    if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                        alt206=1;
                    }
                }
            }
            switch (alt206) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1802:10: extends_key type
                    {
                    pushFollow(FOLLOW_extends_key_in_normalClassDeclaration8687);
                    extends_key677=extends_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key677.getTree());
                    pushFollow(FOLLOW_type_in_normalClassDeclaration8689);
                    type678=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type678.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1803:9: ( implements_key typeList )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1803:10: implements_key typeList
                    {
                    pushFollow(FOLLOW_implements_key_in_normalClassDeclaration8702);
                    implements_key679=implements_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_key679.getTree());
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration8704);
                    typeList680=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList680.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration8716);
            classBody681=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody681.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1807:1: classBody : LEFT_CURLY ( classBodyDeclaration )* RIGHT_CURLY ;
    public final DRLParser.classBody_return classBody() throws RecognitionException {
        DRLParser.classBody_return retval = new DRLParser.classBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY682=null;
        Token RIGHT_CURLY684=null;
        DRLParser.classBodyDeclaration_return classBodyDeclaration683 = null;


        Object LEFT_CURLY682_tree=null;
        Object RIGHT_CURLY684_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1808:2: ( LEFT_CURLY ( classBodyDeclaration )* RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1808:4: LEFT_CURLY ( classBodyDeclaration )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY682=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_classBody8727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY682_tree = (Object)adaptor.create(LEFT_CURLY682);
            adaptor.addChild(root_0, LEFT_CURLY682_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1808:15: ( classBodyDeclaration )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( ((LA208_0>=SEMICOLON && LA208_0<=ID)||LA208_0==LESS||LA208_0==LEFT_CURLY||LA208_0==AT) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1808:15: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody8729);
            	    classBodyDeclaration683=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration683.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);

            RIGHT_CURLY684=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_classBody8732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY684_tree = (Object)adaptor.create(RIGHT_CURLY684);
            adaptor.addChild(root_0, RIGHT_CURLY684_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1811:1: classBodyDeclaration : ( SEMICOLON | block | modifiedClassMember );
    public final DRLParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        DRLParser.classBodyDeclaration_return retval = new DRLParser.classBodyDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON685=null;
        DRLParser.block_return block686 = null;

        DRLParser.modifiedClassMember_return modifiedClassMember687 = null;


        Object SEMICOLON685_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1812:2: ( SEMICOLON | block | modifiedClassMember )
            int alt209=3;
            switch ( input.LA(1) ) {
            case SEMICOLON:
                {
                alt209=1;
                }
                break;
            case LEFT_CURLY:
                {
                alt209=2;
                }
                break;
            case ID:
            case LESS:
            case AT:
                {
                alt209=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1812:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON685=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_classBodyDeclaration8746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON685_tree = (Object)adaptor.create(SEMICOLON685);
                    adaptor.addChild(root_0, SEMICOLON685_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1814:3: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_classBodyDeclaration8754);
                    block686=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block686.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1815:4: modifiedClassMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiedClassMember_in_classBodyDeclaration8761);
                    modifiedClassMember687=modifiedClassMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedClassMember687.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class modifiedClassMember_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiedClassMember"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1819:1: modifiedClassMember options {backtrack=true; } : ( modifier modifiedClassMember | memberDecl );
    public final DRLParser.modifiedClassMember_return modifiedClassMember() throws RecognitionException {
        DRLParser.modifiedClassMember_return retval = new DRLParser.modifiedClassMember_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.modifier_return modifier688 = null;

        DRLParser.modifiedClassMember_return modifiedClassMember689 = null;

        DRLParser.memberDecl_return memberDecl690 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1821:2: ( modifier modifiedClassMember | memberDecl )
            int alt210=2;
            switch ( input.LA(1) ) {
            case AT:
                {
                int LA210_1 = input.LA(2);

                if ( (synpred72_DRL()) ) {
                    alt210=1;
                }
                else if ( (true) ) {
                    alt210=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 1, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA210_2 = input.LA(2);

                if ( (((synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))))||(synpred72_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))))) ) {
                    alt210=1;
                }
                else if ( (true) ) {
                    alt210=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 2, input);

                    throw nvae;
                }
                }
                break;
            case LESS:
                {
                alt210=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1821:4: modifier modifiedClassMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifier_in_modifiedClassMember8782);
                    modifier688=modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier688.getTree());
                    pushFollow(FOLLOW_modifiedClassMember_in_modifiedClassMember8784);
                    modifiedClassMember689=modifiedClassMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedClassMember689.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1822:4: memberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_memberDecl_in_modifiedClassMember8789);
                    memberDecl690=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberDecl690.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifiedClassMember"

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1826:1: modifier : ( annotation | public_key | protected_key | private_key | static_key | abstract_key | final_key | native_key | synchronized_key | transient_key | volatile_key | strictfp_key );
    public final DRLParser.modifier_return modifier() throws RecognitionException {
        DRLParser.modifier_return retval = new DRLParser.modifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotation_return annotation691 = null;

        DRLParser.public_key_return public_key692 = null;

        DRLParser.protected_key_return protected_key693 = null;

        DRLParser.private_key_return private_key694 = null;

        DRLParser.static_key_return static_key695 = null;

        DRLParser.abstract_key_return abstract_key696 = null;

        DRLParser.final_key_return final_key697 = null;

        DRLParser.native_key_return native_key698 = null;

        DRLParser.synchronized_key_return synchronized_key699 = null;

        DRLParser.transient_key_return transient_key700 = null;

        DRLParser.volatile_key_return volatile_key701 = null;

        DRLParser.strictfp_key_return strictfp_key702 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1827:5: ( annotation | public_key | protected_key | private_key | static_key | abstract_key | final_key | native_key | synchronized_key | transient_key | volatile_key | strictfp_key )
            int alt211=12;
            alt211 = dfa211.predict(input);
            switch (alt211) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1827:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_modifier8807);
                    annotation691=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation691.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1828:9: public_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_public_key_in_modifier8817);
                    public_key692=public_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, public_key692.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1829:9: protected_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_protected_key_in_modifier8827);
                    protected_key693=protected_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_key693.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1830:9: private_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_private_key_in_modifier8837);
                    private_key694=private_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, private_key694.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1831:9: static_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_static_key_in_modifier8847);
                    static_key695=static_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_key695.getTree());

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1832:9: abstract_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_abstract_key_in_modifier8857);
                    abstract_key696=abstract_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abstract_key696.getTree());

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1833:9: final_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_final_key_in_modifier8867);
                    final_key697=final_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, final_key697.getTree());

                    }
                    break;
                case 8 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1834:9: native_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_native_key_in_modifier8877);
                    native_key698=native_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, native_key698.getTree());

                    }
                    break;
                case 9 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1835:9: synchronized_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_synchronized_key_in_modifier8887);
                    synchronized_key699=synchronized_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_key699.getTree());

                    }
                    break;
                case 10 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1836:9: transient_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_transient_key_in_modifier8897);
                    transient_key700=transient_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, transient_key700.getTree());

                    }
                    break;
                case 11 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1837:9: volatile_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volatile_key_in_modifier8907);
                    volatile_key701=volatile_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volatile_key701.getTree());

                    }
                    break;
                case 12 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1838:9: strictfp_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_strictfp_key_in_modifier8917);
                    strictfp_key702=strictfp_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, strictfp_key702.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class memberDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDecl"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1841:1: memberDecl options {backtrack=true; } : ( genericMethodOrConstructorDecl | methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest | fieldDeclaration | interfaceDeclaration | classDeclaration );
    public final DRLParser.memberDecl_return memberDecl() throws RecognitionException {
        DRLParser.memberDecl_return retval = new DRLParser.memberDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID706=null;
        Token ID708=null;
        DRLParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl703 = null;

        DRLParser.methodDeclaration_return methodDeclaration704 = null;

        DRLParser.void_key_return void_key705 = null;

        DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest707 = null;

        DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest709 = null;

        DRLParser.fieldDeclaration_return fieldDeclaration710 = null;

        DRLParser.interfaceDeclaration_return interfaceDeclaration711 = null;

        DRLParser.classDeclaration_return classDeclaration712 = null;


        Object ID706_tree=null;
        Object ID708_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1843:2: ( genericMethodOrConstructorDecl | methodDeclaration | void_key ID voidMethodDeclaratorRest | ID constructorDeclaratorRest | fieldDeclaration | interfaceDeclaration | classDeclaration )
            int alt212=7;
            switch ( input.LA(1) ) {
            case LESS:
                {
                alt212=1;
                }
                break;
            case ID:
                {
                int LA212_2 = input.LA(2);

                if ( (((synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||synpred74_DRL()||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred74_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))))) ) {
                    alt212=2;
                }
                else if ( ((synpred75_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOID))))) ) {
                    alt212=3;
                }
                else if ( (synpred76_DRL()) ) {
                    alt212=4;
                }
                else if ( (((synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||synpred77_DRL()||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred77_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))))) ) {
                    alt212=5;
                }
                else if ( ((synpred78_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))) ) {
                    alt212=6;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))) ) {
                    alt212=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 2, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                alt212=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }

            switch (alt212) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1843:4: genericMethodOrConstructorDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl8940);
                    genericMethodOrConstructorDecl703=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorDecl703.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1845:4: methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_memberDecl8950);
                    methodDeclaration704=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaration704.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1846:4: void_key ID voidMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_void_key_in_memberDecl8955);
                    void_key705=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key705.getTree());
                    ID706=(Token)match(input,ID,FOLLOW_ID_in_memberDecl8957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID706_tree = (Object)adaptor.create(ID706);
                    adaptor.addChild(root_0, ID706_tree);
                    }
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl8959);
                    voidMethodDeclaratorRest707=voidMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, voidMethodDeclaratorRest707.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1847:4: ID constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    ID708=(Token)match(input,ID,FOLLOW_ID_in_memberDecl8964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID708_tree = (Object)adaptor.create(ID708);
                    adaptor.addChild(root_0, ID708_tree);
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl8966);
                    constructorDeclaratorRest709=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest709.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1849:4: fieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fieldDeclaration_in_memberDecl8973);
                    fieldDeclaration710=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldDeclaration710.getTree());

                    }
                    break;
                case 6 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1851:4: interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl8981);
                    interfaceDeclaration711=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration711.getTree());

                    }
                    break;
                case 7 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1852:4: classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_memberDecl8986);
                    classDeclaration712=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration712.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1856:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest ;
    public final DRLParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        DRLParser.genericMethodOrConstructorDecl_return retval = new DRLParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.typeParameters_return typeParameters713 = null;

        DRLParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest714 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1857:2: ( typeParameters genericMethodOrConstructorRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1857:4: typeParameters genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl9000);
            typeParameters713=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters713.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl9002);
            genericMethodOrConstructorRest714=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, genericMethodOrConstructorRest714.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1860:1: genericMethodOrConstructorRest : ( ( type | void_key ) ID methodDeclaratorRest | ID constructorDeclaratorRest );
    public final DRLParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        DRLParser.genericMethodOrConstructorRest_return retval = new DRLParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID717=null;
        Token ID719=null;
        DRLParser.type_return type715 = null;

        DRLParser.void_key_return void_key716 = null;

        DRLParser.methodDeclaratorRest_return methodDeclaratorRest718 = null;

        DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest720 = null;


        Object ID717_tree=null;
        Object ID719_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1861:2: ( ( type | void_key ) ID methodDeclaratorRest | ID constructorDeclaratorRest )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==ID) ) {
                int LA214_1 = input.LA(2);

                if ( ((LA214_1>=ID && LA214_1<=DOT)||LA214_1==LESS||LA214_1==LEFT_SQUARE) ) {
                    alt214=1;
                }
                else if ( (LA214_1==LEFT_PAREN) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1861:4: ( type | void_key ) ID methodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1861:4: ( type | void_key )
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==ID) ) {
                        int LA213_1 = input.LA(2);

                        if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))))) ) {
                            alt213=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                            alt213=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 213, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 0, input);

                        throw nvae;
                    }
                    switch (alt213) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1861:5: type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest9015);
                            type715=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type715.getTree());

                            }
                            break;
                        case 2 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1861:12: void_key
                            {
                            pushFollow(FOLLOW_void_key_in_genericMethodOrConstructorRest9019);
                            void_key716=void_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key716.getTree());

                            }
                            break;

                    }

                    ID717=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID717_tree = (Object)adaptor.create(ID717);
                    adaptor.addChild(root_0, ID717_tree);
                    }
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest9024);
                    methodDeclaratorRest718=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest718.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1862:4: ID constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    ID719=(Token)match(input,ID,FOLLOW_ID_in_genericMethodOrConstructorRest9029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID719_tree = (Object)adaptor.create(ID719);
                    adaptor.addChild(root_0, ID719_tree);
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest9031);
                    constructorDeclaratorRest720=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest720.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1866:1: methodDeclaration : type ID methodDeclaratorRest ;
    public final DRLParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        DRLParser.methodDeclaration_return retval = new DRLParser.methodDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID722=null;
        DRLParser.type_return type721 = null;

        DRLParser.methodDeclaratorRest_return methodDeclaratorRest723 = null;


        Object ID722_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1867:2: ( type ID methodDeclaratorRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1867:4: type ID methodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_methodDeclaration9046);
            type721=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type721.getTree());
            ID722=(Token)match(input,ID,FOLLOW_ID_in_methodDeclaration9048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID722_tree = (Object)adaptor.create(ID722);
            adaptor.addChild(root_0, ID722_tree);
            }
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration9050);
            methodDeclaratorRest723=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest723.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1870:1: methodDeclaratorRest : formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? ( block | SEMICOLON ) ;
    public final DRLParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        DRLParser.methodDeclaratorRest_return retval = new DRLParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE725=null;
        Token RIGHT_SQUARE726=null;
        Token SEMICOLON730=null;
        DRLParser.formalParameters_return formalParameters724 = null;

        DRLParser.throws_key_return throws_key727 = null;

        DRLParser.typeNameList_return typeNameList728 = null;

        DRLParser.block_return block729 = null;


        Object LEFT_SQUARE725_tree=null;
        Object RIGHT_SQUARE726_tree=null;
        Object SEMICOLON730_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1871:2: ( formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? ( block | SEMICOLON ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1871:4: formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? ( block | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest9062);
            formalParameters724=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters724.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1871:21: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);

                if ( (LA215_0==LEFT_SQUARE) ) {
                    alt215=1;
                }


                switch (alt215) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1871:22: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE725=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_methodDeclaratorRest9065); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE725_tree = (Object)adaptor.create(LEFT_SQUARE725);
            	    adaptor.addChild(root_0, LEFT_SQUARE725_tree);
            	    }
            	    RIGHT_SQUARE726=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_methodDeclaratorRest9067); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE726_tree = (Object)adaptor.create(RIGHT_SQUARE726);
            	    adaptor.addChild(root_0, RIGHT_SQUARE726_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop215;
                }
            } while (true);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1872:9: ( throws_key typeNameList )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1872:10: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_methodDeclaratorRest9080);
                    throws_key727=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key727.getTree());
                    pushFollow(FOLLOW_typeNameList_in_methodDeclaratorRest9082);
                    typeNameList728=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList728.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1873:9: ( block | SEMICOLON )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==LEFT_CURLY) ) {
                alt217=1;
            }
            else if ( (LA217_0==SEMICOLON) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1873:13: block
                    {
                    pushFollow(FOLLOW_block_in_methodDeclaratorRest9098);
                    block729=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block729.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1874:13: SEMICOLON
                    {
                    SEMICOLON730=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_methodDeclaratorRest9113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON730_tree = (Object)adaptor.create(SEMICOLON730);
                    adaptor.addChild(root_0, SEMICOLON730_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1878:1: voidMethodDeclaratorRest : formalParameters ( throws_key typeNameList )? ( block | SEMICOLON ) ;
    public final DRLParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        DRLParser.voidMethodDeclaratorRest_return retval = new DRLParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON735=null;
        DRLParser.formalParameters_return formalParameters731 = null;

        DRLParser.throws_key_return throws_key732 = null;

        DRLParser.typeNameList_return typeNameList733 = null;

        DRLParser.block_return block734 = null;


        Object SEMICOLON735_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1879:2: ( formalParameters ( throws_key typeNameList )? ( block | SEMICOLON ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1879:4: formalParameters ( throws_key typeNameList )? ( block | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest9135);
            formalParameters731=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters731.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1879:21: ( throws_key typeNameList )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1879:22: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_voidMethodDeclaratorRest9138);
                    throws_key732=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key732.getTree());
                    pushFollow(FOLLOW_typeNameList_in_voidMethodDeclaratorRest9140);
                    typeNameList733=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList733.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1880:9: ( block | SEMICOLON )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==LEFT_CURLY) ) {
                alt219=1;
            }
            else if ( (LA219_0==SEMICOLON) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1880:13: block
                    {
                    pushFollow(FOLLOW_block_in_voidMethodDeclaratorRest9156);
                    block734=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block734.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1881:13: SEMICOLON
                    {
                    SEMICOLON735=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidMethodDeclaratorRest9170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON735_tree = (Object)adaptor.create(SEMICOLON735);
                    adaptor.addChild(root_0, SEMICOLON735_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1885:1: constructorDeclaratorRest : formalParameters ( throws_key typeNameList )? block ;
    public final DRLParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        DRLParser.constructorDeclaratorRest_return retval = new DRLParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.formalParameters_return formalParameters736 = null;

        DRLParser.throws_key_return throws_key737 = null;

        DRLParser.typeNameList_return typeNameList738 = null;

        DRLParser.block_return block739 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1886:2: ( formalParameters ( throws_key typeNameList )? block )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1886:4: formalParameters ( throws_key typeNameList )? block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest9191);
            formalParameters736=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters736.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1886:21: ( throws_key typeNameList )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1886:22: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_constructorDeclaratorRest9194);
                    throws_key737=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key737.getTree());
                    pushFollow(FOLLOW_typeNameList_in_constructorDeclaratorRest9196);
                    typeNameList738=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList738.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_constructorDeclaratorRest9200);
            block739=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block739.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1890:1: fieldDeclaration : type variableDeclarators SEMICOLON ;
    public final DRLParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        DRLParser.fieldDeclaration_return retval = new DRLParser.fieldDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON742=null;
        DRLParser.type_return type740 = null;

        DRLParser.variableDeclarators_return variableDeclarators741 = null;


        Object SEMICOLON742_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1891:2: ( type variableDeclarators SEMICOLON )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1891:4: type variableDeclarators SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_fieldDeclaration9212);
            type740=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type740.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration9214);
            variableDeclarators741=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators741.getTree());
            SEMICOLON742=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_fieldDeclaration9216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON742_tree = (Object)adaptor.create(SEMICOLON742);
            adaptor.addChild(root_0, SEMICOLON742_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1894:1: formalParameters : LEFT_PAREN ( formalParameterDecls )? RIGHT_PAREN ;
    public final DRLParser.formalParameters_return formalParameters() throws RecognitionException {
        DRLParser.formalParameters_return retval = new DRLParser.formalParameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN743=null;
        Token RIGHT_PAREN745=null;
        DRLParser.formalParameterDecls_return formalParameterDecls744 = null;


        Object LEFT_PAREN743_tree=null;
        Object RIGHT_PAREN745_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1895:2: ( LEFT_PAREN ( formalParameterDecls )? RIGHT_PAREN )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1895:4: LEFT_PAREN ( formalParameterDecls )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN743=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_formalParameters9228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN743_tree = (Object)adaptor.create(LEFT_PAREN743);
            adaptor.addChild(root_0, LEFT_PAREN743_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1895:15: ( formalParameterDecls )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==ID) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1895:15: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters9230);
                    formalParameterDecls744=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterDecls744.getTree());

                    }
                    break;

            }

            RIGHT_PAREN745=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_formalParameters9233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN745_tree = (Object)adaptor.create(RIGHT_PAREN745);
            adaptor.addChild(root_0, RIGHT_PAREN745_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1898:1: formalParameterDecls : ( variableModifier )* type ( formalParameterDeclsRest )? ;
    public final DRLParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        DRLParser.formalParameterDecls_return retval = new DRLParser.formalParameterDecls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.variableModifier_return variableModifier746 = null;

        DRLParser.type_return type747 = null;

        DRLParser.formalParameterDeclsRest_return formalParameterDeclsRest748 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1899:2: ( ( variableModifier )* type ( formalParameterDeclsRest )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1899:4: ( variableModifier )* type ( formalParameterDeclsRest )?
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1899:4: ( variableModifier )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==ID) ) {
                    int LA222_1 = input.LA(2);

                    if ( (LA222_1==ID) ) {
                        int LA222_2 = input.LA(3);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {
                            alt222=1;
                        }


                    }


                }


                switch (alt222) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1899:4: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls9245);
            	    variableModifier746=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier746.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls9248);
            type747=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type747.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1899:27: ( formalParameterDeclsRest )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( ((LA223_0>=ID && LA223_0<=DOT)) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1899:27: formalParameterDeclsRest
                    {
                    pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls9250);
                    formalParameterDeclsRest748=formalParameterDeclsRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterDeclsRest748.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class formalParameterDeclsRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDeclsRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1902:1: formalParameterDeclsRest : ( variableDeclaratorId ( COMMA formalParameterDecls )? | DOT DOT DOT variableDeclaratorId );
    public final DRLParser.formalParameterDeclsRest_return formalParameterDeclsRest() throws RecognitionException {
        DRLParser.formalParameterDeclsRest_return retval = new DRLParser.formalParameterDeclsRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA750=null;
        Token DOT752=null;
        Token DOT753=null;
        Token DOT754=null;
        DRLParser.variableDeclaratorId_return variableDeclaratorId749 = null;

        DRLParser.formalParameterDecls_return formalParameterDecls751 = null;

        DRLParser.variableDeclaratorId_return variableDeclaratorId755 = null;


        Object COMMA750_tree=null;
        Object DOT752_tree=null;
        Object DOT753_tree=null;
        Object DOT754_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1903:2: ( variableDeclaratorId ( COMMA formalParameterDecls )? | DOT DOT DOT variableDeclaratorId )
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==ID) ) {
                alt225=1;
            }
            else if ( (LA225_0==DOT) ) {
                alt225=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1903:4: variableDeclaratorId ( COMMA formalParameterDecls )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9263);
                    variableDeclaratorId749=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId749.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1903:25: ( COMMA formalParameterDecls )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==COMMA) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1903:26: COMMA formalParameterDecls
                            {
                            COMMA750=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterDeclsRest9266); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA750_tree = (Object)adaptor.create(COMMA750);
                            adaptor.addChild(root_0, COMMA750_tree);
                            }
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDeclsRest9268);
                            formalParameterDecls751=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterDecls751.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1904:6: DOT DOT DOT variableDeclaratorId
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT752=(Token)match(input,DOT,FOLLOW_DOT_in_formalParameterDeclsRest9277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT752_tree = (Object)adaptor.create(DOT752);
                    adaptor.addChild(root_0, DOT752_tree);
                    }
                    DOT753=(Token)match(input,DOT,FOLLOW_DOT_in_formalParameterDeclsRest9279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT753_tree = (Object)adaptor.create(DOT753);
                    adaptor.addChild(root_0, DOT753_tree);
                    }
                    DOT754=(Token)match(input,DOT,FOLLOW_DOT_in_formalParameterDeclsRest9281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT754_tree = (Object)adaptor.create(DOT754);
                    adaptor.addChild(root_0, DOT754_tree);
                    }
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9283);
                    variableDeclaratorId755=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId755.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formalParameterDeclsRest"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1907:1: typeParameters : LESS typeParameter ( COMMA typeParameter )* GREATER ;
    public final DRLParser.typeParameters_return typeParameters() throws RecognitionException {
        DRLParser.typeParameters_return retval = new DRLParser.typeParameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS756=null;
        Token COMMA758=null;
        Token GREATER760=null;
        DRLParser.typeParameter_return typeParameter757 = null;

        DRLParser.typeParameter_return typeParameter759 = null;


        Object LESS756_tree=null;
        Object COMMA758_tree=null;
        Object GREATER760_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1908:2: ( LESS typeParameter ( COMMA typeParameter )* GREATER )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1908:4: LESS typeParameter ( COMMA typeParameter )* GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS756=(Token)match(input,LESS,FOLLOW_LESS_in_typeParameters9294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS756_tree = (Object)adaptor.create(LESS756);
            adaptor.addChild(root_0, LESS756_tree);
            }
            pushFollow(FOLLOW_typeParameter_in_typeParameters9296);
            typeParameter757=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameter757.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1908:23: ( COMMA typeParameter )*
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==COMMA) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1908:24: COMMA typeParameter
            	    {
            	    COMMA758=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters9299); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA758_tree = (Object)adaptor.create(COMMA758);
            	    adaptor.addChild(root_0, COMMA758_tree);
            	    }
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters9301);
            	    typeParameter759=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameter759.getTree());

            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);

            GREATER760=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeParameters9305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER760_tree = (Object)adaptor.create(GREATER760);
            adaptor.addChild(root_0, GREATER760_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1911:1: typeParameter : ID ( extends_key bound )? ;
    public final DRLParser.typeParameter_return typeParameter() throws RecognitionException {
        DRLParser.typeParameter_return retval = new DRLParser.typeParameter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID761=null;
        DRLParser.extends_key_return extends_key762 = null;

        DRLParser.bound_return bound763 = null;


        Object ID761_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1912:2: ( ID ( extends_key bound )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1912:4: ID ( extends_key bound )?
            {
            root_0 = (Object)adaptor.nil();

            ID761=(Token)match(input,ID,FOLLOW_ID_in_typeParameter9316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID761_tree = (Object)adaptor.create(ID761);
            adaptor.addChild(root_0, ID761_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1912:7: ( extends_key bound )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))))) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1912:8: extends_key bound
                    {
                    pushFollow(FOLLOW_extends_key_in_typeParameter9319);
                    extends_key762=extends_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key762.getTree());
                    pushFollow(FOLLOW_bound_in_typeParameter9321);
                    bound763=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bound763.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1915:1: bound : type ( AMPER type )* ;
    public final DRLParser.bound_return bound() throws RecognitionException {
        DRLParser.bound_return retval = new DRLParser.bound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPER765=null;
        DRLParser.type_return type764 = null;

        DRLParser.type_return type766 = null;


        Object AMPER765_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1916:2: ( type ( AMPER type )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1916:4: type ( AMPER type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_bound9335);
            type764=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type764.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1916:9: ( AMPER type )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==AMPER) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1916:10: AMPER type
            	    {
            	    AMPER765=(Token)match(input,AMPER,FOLLOW_AMPER_in_bound9338); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPER765_tree = (Object)adaptor.create(AMPER765);
            	    adaptor.addChild(root_0, AMPER765_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_bound9340);
            	    type766=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type766.getTree());

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1925:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final DRLParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        DRLParser.interfaceDeclaration_return retval = new DRLParser.interfaceDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.normalInterfaceDeclaration_return normalInterfaceDeclaration767 = null;

        DRLParser.annotationTypeDeclaration_return annotationTypeDeclaration768 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1926:2: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))) {
                alt229=1;
            }
            else if ( (LA229_0==AT) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1926:4: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration9360);
                    normalInterfaceDeclaration767=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration767.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1927:5: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration9366);
                    annotationTypeDeclaration768=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration768.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1930:1: normalInterfaceDeclaration : interface_key ID ( typeParameters )? ( extends_key typeList )? interfaceBody ;
    public final DRLParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        DRLParser.normalInterfaceDeclaration_return retval = new DRLParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID770=null;
        DRLParser.interface_key_return interface_key769 = null;

        DRLParser.typeParameters_return typeParameters771 = null;

        DRLParser.extends_key_return extends_key772 = null;

        DRLParser.typeList_return typeList773 = null;

        DRLParser.interfaceBody_return interfaceBody774 = null;


        Object ID770_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1931:2: ( interface_key ID ( typeParameters )? ( extends_key typeList )? interfaceBody )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1931:4: interface_key ID ( typeParameters )? ( extends_key typeList )? interfaceBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_interface_key_in_normalInterfaceDeclaration9380);
            interface_key769=interface_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_key769.getTree());
            ID770=(Token)match(input,ID,FOLLOW_ID_in_normalInterfaceDeclaration9382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID770_tree = (Object)adaptor.create(ID770);
            adaptor.addChild(root_0, ID770_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1931:21: ( typeParameters )?
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==LESS) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1931:21: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration9384);
                    typeParameters771=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters771.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1931:37: ( extends_key typeList )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))))) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1931:38: extends_key typeList
                    {
                    pushFollow(FOLLOW_extends_key_in_normalInterfaceDeclaration9388);
                    extends_key772=extends_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key772.getTree());
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration9390);
                    typeList773=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList773.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration9394);
            interfaceBody774=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBody774.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1934:1: interfaceBody : LEFT_CURLY ( interfaceBodyDeclaration )* RIGHT_CURLY ;
    public final DRLParser.interfaceBody_return interfaceBody() throws RecognitionException {
        DRLParser.interfaceBody_return retval = new DRLParser.interfaceBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY775=null;
        Token RIGHT_CURLY777=null;
        DRLParser.interfaceBodyDeclaration_return interfaceBodyDeclaration776 = null;


        Object LEFT_CURLY775_tree=null;
        Object RIGHT_CURLY777_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1935:2: ( LEFT_CURLY ( interfaceBodyDeclaration )* RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1935:4: LEFT_CURLY ( interfaceBodyDeclaration )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY775=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_interfaceBody9405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY775_tree = (Object)adaptor.create(LEFT_CURLY775);
            adaptor.addChild(root_0, LEFT_CURLY775_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1935:15: ( interfaceBodyDeclaration )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( ((LA232_0>=SEMICOLON && LA232_0<=ID)||LA232_0==LESS||LA232_0==AT) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1935:15: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody9407);
            	    interfaceBodyDeclaration776=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration776.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);

            RIGHT_CURLY777=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_interfaceBody9410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY777_tree = (Object)adaptor.create(RIGHT_CURLY777);
            adaptor.addChild(root_0, RIGHT_CURLY777_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1939:1: interfaceBodyDeclaration : ( modifiedInterfaceMember | SEMICOLON );
    public final DRLParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        DRLParser.interfaceBodyDeclaration_return retval = new DRLParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON779=null;
        DRLParser.modifiedInterfaceMember_return modifiedInterfaceMember778 = null;


        Object SEMICOLON779_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1940:2: ( modifiedInterfaceMember | SEMICOLON )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==ID||LA233_0==LESS||LA233_0==AT) ) {
                alt233=1;
            }
            else if ( (LA233_0==SEMICOLON) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1940:4: modifiedInterfaceMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiedInterfaceMember_in_interfaceBodyDeclaration9422);
                    modifiedInterfaceMember778=modifiedInterfaceMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedInterfaceMember778.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1941:6: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON779=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceBodyDeclaration9429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON779_tree = (Object)adaptor.create(SEMICOLON779);
                    adaptor.addChild(root_0, SEMICOLON779_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class modifiedInterfaceMember_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiedInterfaceMember"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1944:1: modifiedInterfaceMember options {backtrack=true; } : ( modifier modifiedInterfaceMember | interfaceMemberDecl );
    public final DRLParser.modifiedInterfaceMember_return modifiedInterfaceMember() throws RecognitionException {
        DRLParser.modifiedInterfaceMember_return retval = new DRLParser.modifiedInterfaceMember_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.modifier_return modifier780 = null;

        DRLParser.modifiedInterfaceMember_return modifiedInterfaceMember781 = null;

        DRLParser.interfaceMemberDecl_return interfaceMemberDecl782 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1946:2: ( modifier modifiedInterfaceMember | interfaceMemberDecl )
            int alt234=2;
            switch ( input.LA(1) ) {
            case AT:
                {
                int LA234_1 = input.LA(2);

                if ( (synpred79_DRL()) ) {
                    alt234=1;
                }
                else if ( (true) ) {
                    alt234=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 234, 1, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA234_2 = input.LA(2);

                if ( (((synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))))||(synpred79_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))))) ) {
                    alt234=1;
                }
                else if ( (true) ) {
                    alt234=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 234, 2, input);

                    throw nvae;
                }
                }
                break;
            case LESS:
                {
                alt234=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }

            switch (alt234) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1946:4: modifier modifiedInterfaceMember
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifier_in_modifiedInterfaceMember9450);
                    modifier780=modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier780.getTree());
                    pushFollow(FOLLOW_modifiedInterfaceMember_in_modifiedInterfaceMember9452);
                    modifiedInterfaceMember781=modifiedInterfaceMember();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiedInterfaceMember781.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1947:4: interfaceMemberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMemberDecl_in_modifiedInterfaceMember9457);
                    interfaceMemberDecl782=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMemberDecl782.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifiedInterfaceMember"

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMemberDecl"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1950:1: interfaceMemberDecl : ( interfaceMethodOrFieldDecl | interfaceGenericMethodDecl | void_key ID voidInterfaceMethodDeclaratorRest | interfaceDeclaration | classDeclaration );
    public final DRLParser.interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        DRLParser.interfaceMemberDecl_return retval = new DRLParser.interfaceMemberDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID786=null;
        DRLParser.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl783 = null;

        DRLParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl784 = null;

        DRLParser.void_key_return void_key785 = null;

        DRLParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest787 = null;

        DRLParser.interfaceDeclaration_return interfaceDeclaration788 = null;

        DRLParser.classDeclaration_return classDeclaration789 = null;


        Object ID786_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1951:2: ( interfaceMethodOrFieldDecl | interfaceGenericMethodDecl | void_key ID voidInterfaceMethodDeclaratorRest | interfaceDeclaration | classDeclaration )
            int alt235=5;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))))) {
                int LA235_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))) ) {
                    alt235=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                    alt235=3;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                    alt235=4;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))) ) {
                    alt235=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 235, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA235_0==LESS) ) {
                alt235=2;
            }
            else if ( (LA235_0==AT) ) {
                alt235=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }
            switch (alt235) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1951:4: interfaceMethodOrFieldDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl9469);
                    interfaceMethodOrFieldDecl783=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodOrFieldDecl783.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1952:6: interfaceGenericMethodDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl9476);
                    interfaceGenericMethodDecl784=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceGenericMethodDecl784.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1953:9: void_key ID voidInterfaceMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_void_key_in_interfaceMemberDecl9486);
                    void_key785=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key785.getTree());
                    ID786=(Token)match(input,ID,FOLLOW_ID_in_interfaceMemberDecl9488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID786_tree = (Object)adaptor.create(ID786);
                    adaptor.addChild(root_0, ID786_tree);
                    }
                    pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl9490);
                    voidInterfaceMethodDeclaratorRest787=voidInterfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, voidInterfaceMethodDeclaratorRest787.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1954:9: interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl9500);
                    interfaceDeclaration788=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration788.getTree());

                    }
                    break;
                case 5 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1955:9: classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl9510);
                    classDeclaration789=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration789.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMemberDecl"

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodOrFieldDecl"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1958:1: interfaceMethodOrFieldDecl : type ID interfaceMethodOrFieldRest ;
    public final DRLParser.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        DRLParser.interfaceMethodOrFieldDecl_return retval = new DRLParser.interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID791=null;
        DRLParser.type_return type790 = null;

        DRLParser.interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest792 = null;


        Object ID791_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1959:2: ( type ID interfaceMethodOrFieldRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1959:4: type ID interfaceMethodOrFieldRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceMethodOrFieldDecl9522);
            type790=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type790.getTree());
            ID791=(Token)match(input,ID,FOLLOW_ID_in_interfaceMethodOrFieldDecl9524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID791_tree = (Object)adaptor.create(ID791);
            adaptor.addChild(root_0, ID791_tree);
            }
            pushFollow(FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl9526);
            interfaceMethodOrFieldRest792=interfaceMethodOrFieldRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodOrFieldRest792.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"

    public static class interfaceMethodOrFieldRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodOrFieldRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1962:1: interfaceMethodOrFieldRest : ( constantDeclaratorsRest SEMICOLON | interfaceMethodDeclaratorRest );
    public final DRLParser.interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest() throws RecognitionException {
        DRLParser.interfaceMethodOrFieldRest_return retval = new DRLParser.interfaceMethodOrFieldRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON794=null;
        DRLParser.constantDeclaratorsRest_return constantDeclaratorsRest793 = null;

        DRLParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest795 = null;


        Object SEMICOLON794_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1963:2: ( constantDeclaratorsRest SEMICOLON | interfaceMethodDeclaratorRest )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==EQUALS||LA236_0==LEFT_SQUARE) ) {
                alt236=1;
            }
            else if ( (LA236_0==LEFT_PAREN) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1963:4: constantDeclaratorsRest SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest9538);
                    constantDeclaratorsRest793=constantDeclaratorsRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclaratorsRest793.getTree());
                    SEMICOLON794=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceMethodOrFieldRest9540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON794_tree = (Object)adaptor.create(SEMICOLON794);
                    adaptor.addChild(root_0, SEMICOLON794_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1964:4: interfaceMethodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest9545);
                    interfaceMethodDeclaratorRest795=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest795.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1968:1: interfaceMethodDeclaratorRest : formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? SEMICOLON ;
    public final DRLParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        DRLParser.interfaceMethodDeclaratorRest_return retval = new DRLParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE797=null;
        Token RIGHT_SQUARE798=null;
        Token SEMICOLON801=null;
        DRLParser.formalParameters_return formalParameters796 = null;

        DRLParser.throws_key_return throws_key799 = null;

        DRLParser.typeNameList_return typeNameList800 = null;


        Object LEFT_SQUARE797_tree=null;
        Object RIGHT_SQUARE798_tree=null;
        Object SEMICOLON801_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1969:2: ( formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? SEMICOLON )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1969:4: formalParameters ( LEFT_SQUARE RIGHT_SQUARE )* ( throws_key typeNameList )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest9557);
            formalParameters796=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters796.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1969:21: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==LEFT_SQUARE) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1969:22: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE797=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_interfaceMethodDeclaratorRest9560); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE797_tree = (Object)adaptor.create(LEFT_SQUARE797);
            	    adaptor.addChild(root_0, LEFT_SQUARE797_tree);
            	    }
            	    RIGHT_SQUARE798=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_interfaceMethodDeclaratorRest9562); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE798_tree = (Object)adaptor.create(RIGHT_SQUARE798);
            	    adaptor.addChild(root_0, RIGHT_SQUARE798_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1969:49: ( throws_key typeNameList )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1969:50: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_interfaceMethodDeclaratorRest9567);
                    throws_key799=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key799.getTree());
                    pushFollow(FOLLOW_typeNameList_in_interfaceMethodDeclaratorRest9569);
                    typeNameList800=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList800.getTree());

                    }
                    break;

            }

            SEMICOLON801=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interfaceMethodDeclaratorRest9573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON801_tree = (Object)adaptor.create(SEMICOLON801);
            adaptor.addChild(root_0, SEMICOLON801_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1972:1: interfaceGenericMethodDecl : typeParameters ( type | void_key ) ID interfaceMethodDeclaratorRest ;
    public final DRLParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        DRLParser.interfaceGenericMethodDecl_return retval = new DRLParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID805=null;
        DRLParser.typeParameters_return typeParameters802 = null;

        DRLParser.type_return type803 = null;

        DRLParser.void_key_return void_key804 = null;

        DRLParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest806 = null;


        Object ID805_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1973:2: ( typeParameters ( type | void_key ) ID interfaceMethodDeclaratorRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1973:4: typeParameters ( type | void_key ) ID interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl9585);
            typeParameters802=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters802.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1973:19: ( type | void_key )
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==ID) ) {
                int LA239_1 = input.LA(2);

                if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))))) ) {
                    alt239=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                    alt239=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }
            switch (alt239) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1973:20: type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl9588);
                    type803=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type803.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1973:27: void_key
                    {
                    pushFollow(FOLLOW_void_key_in_interfaceGenericMethodDecl9592);
                    void_key804=void_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, void_key804.getTree());

                    }
                    break;

            }

            ID805=(Token)match(input,ID,FOLLOW_ID_in_interfaceGenericMethodDecl9595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID805_tree = (Object)adaptor.create(ID805);
            adaptor.addChild(root_0, ID805_tree);
            }
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl9605);
            interfaceMethodDeclaratorRest806=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest806.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1977:1: voidInterfaceMethodDeclaratorRest : formalParameters ( throws_key typeNameList )? SEMICOLON ;
    public final DRLParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        DRLParser.voidInterfaceMethodDeclaratorRest_return retval = new DRLParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON810=null;
        DRLParser.formalParameters_return formalParameters807 = null;

        DRLParser.throws_key_return throws_key808 = null;

        DRLParser.typeNameList_return typeNameList809 = null;


        Object SEMICOLON810_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1978:2: ( formalParameters ( throws_key typeNameList )? SEMICOLON )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1978:4: formalParameters ( throws_key typeNameList )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest9617);
            formalParameters807=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameters807.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1978:21: ( throws_key typeNameList )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))))) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1978:22: throws_key typeNameList
                    {
                    pushFollow(FOLLOW_throws_key_in_voidInterfaceMethodDeclaratorRest9620);
                    throws_key808=throws_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throws_key808.getTree());
                    pushFollow(FOLLOW_typeNameList_in_voidInterfaceMethodDeclaratorRest9622);
                    typeNameList809=typeNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList809.getTree());

                    }
                    break;

            }

            SEMICOLON810=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_voidInterfaceMethodDeclaratorRest9626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON810_tree = (Object)adaptor.create(SEMICOLON810);
            adaptor.addChild(root_0, SEMICOLON810_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1983:1: constantDeclarator : ID constantDeclaratorRest ;
    public final DRLParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        DRLParser.constantDeclarator_return retval = new DRLParser.constantDeclarator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID811=null;
        DRLParser.constantDeclaratorRest_return constantDeclaratorRest812 = null;


        Object ID811_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1984:2: ( ID constantDeclaratorRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1984:4: ID constantDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            ID811=(Token)match(input,ID,FOLLOW_ID_in_constantDeclarator9639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID811_tree = (Object)adaptor.create(ID811);
            adaptor.addChild(root_0, ID811_tree);
            }
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator9641);
            constantDeclaratorRest812=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclaratorRest812.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class constantDeclaratorsRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorsRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1987:1: constantDeclaratorsRest : constantDeclaratorRest ( COMMA constantDeclarator )* ;
    public final DRLParser.constantDeclaratorsRest_return constantDeclaratorsRest() throws RecognitionException {
        DRLParser.constantDeclaratorsRest_return retval = new DRLParser.constantDeclaratorsRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA814=null;
        DRLParser.constantDeclaratorRest_return constantDeclaratorRest813 = null;

        DRLParser.constantDeclarator_return constantDeclarator815 = null;


        Object COMMA814_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1988:5: ( constantDeclaratorRest ( COMMA constantDeclarator )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1988:9: constantDeclaratorRest ( COMMA constantDeclarator )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest9657);
            constantDeclaratorRest813=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclaratorRest813.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1988:32: ( COMMA constantDeclarator )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==COMMA) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1988:33: COMMA constantDeclarator
            	    {
            	    COMMA814=(Token)match(input,COMMA,FOLLOW_COMMA_in_constantDeclaratorsRest9660); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA814_tree = (Object)adaptor.create(COMMA814);
            	    adaptor.addChild(root_0, COMMA814_tree);
            	    }
            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest9662);
            	    constantDeclarator815=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constantDeclarator815.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorsRest"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1991:1: constantDeclaratorRest : ( LEFT_SQUARE RIGHT_SQUARE )* EQUALS variableInitializer ;
    public final DRLParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        DRLParser.constantDeclaratorRest_return retval = new DRLParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE816=null;
        Token RIGHT_SQUARE817=null;
        Token EQUALS818=null;
        DRLParser.variableInitializer_return variableInitializer819 = null;


        Object LEFT_SQUARE816_tree=null;
        Object RIGHT_SQUARE817_tree=null;
        Object EQUALS818_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1992:2: ( ( LEFT_SQUARE RIGHT_SQUARE )* EQUALS variableInitializer )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1992:4: ( LEFT_SQUARE RIGHT_SQUARE )* EQUALS variableInitializer
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1992:4: ( LEFT_SQUARE RIGHT_SQUARE )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==LEFT_SQUARE) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1992:5: LEFT_SQUARE RIGHT_SQUARE
            	    {
            	    LEFT_SQUARE816=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_constantDeclaratorRest9679); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LEFT_SQUARE816_tree = (Object)adaptor.create(LEFT_SQUARE816);
            	    adaptor.addChild(root_0, LEFT_SQUARE816_tree);
            	    }
            	    RIGHT_SQUARE817=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_constantDeclaratorRest9681); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RIGHT_SQUARE817_tree = (Object)adaptor.create(RIGHT_SQUARE817);
            	    adaptor.addChild(root_0, RIGHT_SQUARE817_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);

            EQUALS818=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_constantDeclaratorRest9685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQUALS818_tree = (Object)adaptor.create(EQUALS818);
            adaptor.addChild(root_0, EQUALS818_tree);
            }
            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest9687);
            variableInitializer819=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer819.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2002:1: enumDeclaration : enum_key ID ( implements_key typeList )? enumBody ;
    public final DRLParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        DRLParser.enumDeclaration_return retval = new DRLParser.enumDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID821=null;
        DRLParser.enum_key_return enum_key820 = null;

        DRLParser.implements_key_return implements_key822 = null;

        DRLParser.typeList_return typeList823 = null;

        DRLParser.enumBody_return enumBody824 = null;


        Object ID821_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2003:2: ( enum_key ID ( implements_key typeList )? enumBody )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2003:4: enum_key ID ( implements_key typeList )? enumBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enum_key_in_enumDeclaration9705);
            enum_key820=enum_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_key820.getTree());
            ID821=(Token)match(input,ID,FOLLOW_ID_in_enumDeclaration9707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID821_tree = (Object)adaptor.create(ID821);
            adaptor.addChild(root_0, ID821_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2003:16: ( implements_key typeList )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2003:17: implements_key typeList
                    {
                    pushFollow(FOLLOW_implements_key_in_enumDeclaration9710);
                    implements_key822=implements_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_key822.getTree());
                    pushFollow(FOLLOW_typeList_in_enumDeclaration9712);
                    typeList823=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList823.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration9716);
            enumBody824=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBody824.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2006:1: enumBody : LEFT_CURLY ( enumConstants )? ( COMMA )? ( enumBodyDeclarations )? RIGHT_CURLY ;
    public final DRLParser.enumBody_return enumBody() throws RecognitionException {
        DRLParser.enumBody_return retval = new DRLParser.enumBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY825=null;
        Token COMMA827=null;
        Token RIGHT_CURLY829=null;
        DRLParser.enumConstants_return enumConstants826 = null;

        DRLParser.enumBodyDeclarations_return enumBodyDeclarations828 = null;


        Object LEFT_CURLY825_tree=null;
        Object COMMA827_tree=null;
        Object RIGHT_CURLY829_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:2: ( LEFT_CURLY ( enumConstants )? ( COMMA )? ( enumBodyDeclarations )? RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:4: LEFT_CURLY ( enumConstants )? ( COMMA )? ( enumBodyDeclarations )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY825=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_enumBody9728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY825_tree = (Object)adaptor.create(LEFT_CURLY825);
            adaptor.addChild(root_0, LEFT_CURLY825_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:15: ( enumConstants )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==ID||LA244_0==AT) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:15: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody9730);
                    enumConstants826=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants826.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:30: ( COMMA )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==COMMA) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:30: COMMA
                    {
                    COMMA827=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumBody9733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA827_tree = (Object)adaptor.create(COMMA827);
                    adaptor.addChild(root_0, COMMA827_tree);
                    }

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:37: ( enumBodyDeclarations )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==SEMICOLON) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2007:37: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody9736);
                    enumBodyDeclarations828=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumBodyDeclarations828.getTree());

                    }
                    break;

            }

            RIGHT_CURLY829=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_enumBody9739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY829_tree = (Object)adaptor.create(RIGHT_CURLY829);
            adaptor.addChild(root_0, RIGHT_CURLY829_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2010:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final DRLParser.enumConstants_return enumConstants() throws RecognitionException {
        DRLParser.enumConstants_return retval = new DRLParser.enumConstants_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA831=null;
        DRLParser.enumConstant_return enumConstant830 = null;

        DRLParser.enumConstant_return enumConstant832 = null;


        Object COMMA831_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2011:2: ( enumConstant ( COMMA enumConstant )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2011:4: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants9750);
            enumConstant830=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant830.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2011:17: ( COMMA enumConstant )*
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);

                if ( (LA247_0==COMMA) ) {
                    int LA247_1 = input.LA(2);

                    if ( (LA247_1==ID||LA247_1==AT) ) {
                        alt247=1;
                    }


                }


                switch (alt247) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2011:18: COMMA enumConstant
            	    {
            	    COMMA831=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants9753); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA831_tree = (Object)adaptor.create(COMMA831);
            	    adaptor.addChild(root_0, COMMA831_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants9755);
            	    enumConstant832=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant832.getTree());

            	    }
            	    break;

            	default :
            	    break loop247;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2014:1: enumConstant : ( annotations )? ID ( arguments )? ( classBody )? ;
    public final DRLParser.enumConstant_return enumConstant() throws RecognitionException {
        DRLParser.enumConstant_return retval = new DRLParser.enumConstant_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID834=null;
        DRLParser.annotations_return annotations833 = null;

        DRLParser.arguments_return arguments835 = null;

        DRLParser.classBody_return classBody836 = null;


        Object ID834_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:2: ( ( annotations )? ID ( arguments )? ( classBody )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:4: ( annotations )? ID ( arguments )? ( classBody )?
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:4: ( annotations )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==AT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:4: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant9769);
                    annotations833=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations833.getTree());

                    }
                    break;

            }

            ID834=(Token)match(input,ID,FOLLOW_ID_in_enumConstant9772); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID834_tree = (Object)adaptor.create(ID834);
            adaptor.addChild(root_0, ID834_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:20: ( arguments )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==LEFT_PAREN) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:21: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant9775);
                    arguments835=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments835.getTree());

                    }
                    break;

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:33: ( classBody )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==LEFT_CURLY) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2015:34: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant9780);
                    classBody836=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody836.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2018:1: enumBodyDeclarations : SEMICOLON ( classBodyDeclaration )* ;
    public final DRLParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        DRLParser.enumBodyDeclarations_return retval = new DRLParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON837=null;
        DRLParser.classBodyDeclaration_return classBodyDeclaration838 = null;


        Object SEMICOLON837_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2019:2: ( SEMICOLON ( classBodyDeclaration )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2019:4: SEMICOLON ( classBodyDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            SEMICOLON837=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enumBodyDeclarations9794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON837_tree = (Object)adaptor.create(SEMICOLON837);
            adaptor.addChild(root_0, SEMICOLON837_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2019:14: ( classBodyDeclaration )*
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( ((LA251_0>=SEMICOLON && LA251_0<=ID)||LA251_0==LESS||LA251_0==LEFT_CURLY||LA251_0==AT) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2019:15: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations9797);
            	    classBodyDeclaration838=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration838.getTree());

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2029:1: annotations : ( annotation )+ ;
    public final DRLParser.annotations_return annotations() throws RecognitionException {
        DRLParser.annotations_return retval = new DRLParser.annotations_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotation_return annotation839 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2030:2: ( ( annotation )+ )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2030:4: ( annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2030:4: ( annotation )+
            int cnt252=0;
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==AT) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2030:4: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations9817);
            	    annotation839=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation839.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt252 >= 1 ) break loop252;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(252, input);
                        throw eee;
                }
                cnt252++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2033:1: annotation : AT ann= annotationName ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | ) -> ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? ) ;
    public final DRLParser.annotation_return annotation() throws RecognitionException {
        DRLParser.annotation_return retval = new DRLParser.annotation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT840=null;
        Token LEFT_PAREN841=null;
        Token RIGHT_PAREN842=null;
        Token LEFT_PAREN843=null;
        Token RIGHT_PAREN845=null;
        DRLParser.annotationName_return ann = null;

        DRLParser.elementValuePairs_return elementValuePairs844 = null;


        Object AT840_tree=null;
        Object LEFT_PAREN841_tree=null;
        Object RIGHT_PAREN842_tree=null;
        Object LEFT_PAREN843_tree=null;
        Object RIGHT_PAREN845_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2034:2: ( AT ann= annotationName ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | ) -> ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? ) )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2034:4: AT ann= annotationName ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | )
            {
            AT840=(Token)match(input,AT,FOLLOW_AT_in_annotation9829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT840);

            if ( state.backtracking==0 ) {
              	helper.emit(AT840, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_annotationName_in_annotation9837);
            ann=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationName.add(ann.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2036:4: ( LEFT_PAREN RIGHT_PAREN | LEFT_PAREN elementValuePairs RIGHT_PAREN | )
            int alt253=3;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==LEFT_PAREN) ) {
                int LA253_1 = input.LA(2);

                if ( (LA253_1==RIGHT_PAREN) ) {
                    alt253=1;
                }
                else if ( (LA253_1==ID||LA253_1==STRING||(LA253_1>=BOOL && LA253_1<=LEFT_PAREN)||(LA253_1>=TimePeriod && LA253_1<=DECIMAL)||LA253_1==LESS||LA253_1==LEFT_SQUARE||(LA253_1>=NULL && LA253_1<=FLOAT)||LA253_1==LEFT_CURLY||(LA253_1>=INCR && LA253_1<=NEGATION)||LA253_1==AT) ) {
                    alt253=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA253_0>=SEMICOLON && LA253_0<=ID)||(LA253_0>=WHEN && LA253_0<=COMMA)||LA253_0==RIGHT_PAREN||LA253_0==LESS||LA253_0==THEN||LA253_0==RIGHT_CURLY||LA253_0==AT) ) {
                alt253=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2037:5: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN841=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN841);

                    RIGHT_PAREN842=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN842);


                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2038:7: LEFT_PAREN elementValuePairs RIGHT_PAREN
                    {
                    LEFT_PAREN843=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotation9859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN843);

                    pushFollow(FOLLOW_elementValuePairs_in_annotation9861);
                    elementValuePairs844=elementValuePairs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs844.getTree());
                    RIGHT_PAREN845=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotation9863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN845);


                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2040:4: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairs, AT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2041:3: -> ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? )
            {
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2041:6: ^( AT VT_TYPE_NAME[$ann.name] ( elementValuePairs )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, (Object)adaptor.create(VT_TYPE_NAME, (ann!=null?ann.name:null)));
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2041:35: ( elementValuePairs )?
                if ( stream_elementValuePairs.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairs.nextTree());

                }
                stream_elementValuePairs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        public String name;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2045:1: annotationName returns [String name] : id= ID ( DOT mid= ID )* ;
    public final DRLParser.annotationName_return annotationName() throws RecognitionException {
        DRLParser.annotationName_return retval = new DRLParser.annotationName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        Token mid=null;
        Token DOT846=null;

        Object id_tree=null;
        Object mid_tree=null;
        Object DOT846_tree=null;

         retval.name =""; 
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2047:2: (id= ID ( DOT mid= ID )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2047:4: id= ID ( DOT mid= ID )*
            {
            root_0 = (Object)adaptor.nil();

            id=(Token)match(input,ID,FOLLOW_ID_in_annotationName9912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (Object)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            if ( state.backtracking==0 ) {
              	retval.name += (id!=null?id.getText():null); helper.emit(id, DroolsEditorType.IDENTIFIER);	
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2048:3: ( DOT mid= ID )*
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==DOT) ) {
                    alt254=1;
                }


                switch (alt254) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2048:4: DOT mid= ID
            	    {
            	    DOT846=(Token)match(input,DOT,FOLLOW_DOT_in_annotationName9920); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT846_tree = (Object)adaptor.create(DOT846);
            	    adaptor.addChild(root_0, DOT846_tree);
            	    }
            	    mid=(Token)match(input,ID,FOLLOW_ID_in_annotationName9924); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    mid_tree = (Object)adaptor.create(mid);
            	    adaptor.addChild(root_0, mid_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       retval.name += (mid!=null?mid.getText():null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop254;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2051:1: elementValuePairs : elementValuePair ( COMMA elementValuePair )* ;
    public final DRLParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        DRLParser.elementValuePairs_return retval = new DRLParser.elementValuePairs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA848=null;
        DRLParser.elementValuePair_return elementValuePair847 = null;

        DRLParser.elementValuePair_return elementValuePair849 = null;


        Object COMMA848_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2052:2: ( elementValuePair ( COMMA elementValuePair )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2052:4: elementValuePair ( COMMA elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs9941);
            elementValuePair847=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair847.getTree());
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2052:21: ( COMMA elementValuePair )*
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==COMMA) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2052:22: COMMA elementValuePair
            	    {
            	    COMMA848=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairs9944); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs9947);
            	    elementValuePair849=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair849.getTree());

            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2055:1: elementValuePair : ( ( ID EQUALS_ASSIGN )=>key= ID EQUALS_ASSIGN val= elementValue -> ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] ) | value= elementValue -> ^( VT_PROP_KEY[$value.text] ) );
    public final DRLParser.elementValuePair_return elementValuePair() throws RecognitionException {
        DRLParser.elementValuePair_return retval = new DRLParser.elementValuePair_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token key=null;
        Token EQUALS_ASSIGN850=null;
        DRLParser.elementValue_return val = null;

        DRLParser.elementValue_return value = null;


        Object key_tree=null;
        Object EQUALS_ASSIGN850_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2056:2: ( ( ID EQUALS_ASSIGN )=>key= ID EQUALS_ASSIGN val= elementValue -> ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] ) | value= elementValue -> ^( VT_PROP_KEY[$value.text] ) )
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==ID) ) {
                int LA256_1 = input.LA(2);

                if ( (LA256_1==EQUALS_ASSIGN) && (synpred80_DRL())) {
                    alt256=1;
                }
                else if ( ((LA256_1>=ID && LA256_1<=DOT)||LA256_1==COMMA||(LA256_1>=LEFT_PAREN && LA256_1<=RIGHT_PAREN)||(LA256_1>=DOUBLE_PIPE && LA256_1<=DOUBLE_AMPER)||(LA256_1>=EQUALS && LA256_1<=LEFT_SQUARE)||(LA256_1>=PLUS && LA256_1<=MINUS)||(LA256_1>=QUESTION && LA256_1<=DECR)) ) {
                    alt256=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA256_0==STRING||(LA256_0>=BOOL && LA256_0<=LEFT_PAREN)||(LA256_0>=TimePeriod && LA256_0<=DECIMAL)||LA256_0==LESS||LA256_0==LEFT_SQUARE||(LA256_0>=NULL && LA256_0<=FLOAT)||LA256_0==LEFT_CURLY||(LA256_0>=INCR && LA256_0<=NEGATION)||LA256_0==AT) ) {
                alt256=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2056:4: ( ID EQUALS_ASSIGN )=>key= ID EQUALS_ASSIGN val= elementValue
                    {
                    key=(Token)match(input,ID,FOLLOW_ID_in_elementValuePair9970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(key);

                    EQUALS_ASSIGN850=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_elementValuePair9972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN850);

                    pushFollow(FOLLOW_elementValue_in_elementValuePair9976);
                    val=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(val.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 2056:63: -> ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2056:66: ^( VT_PROP_KEY[$key] VT_PROP_VALUE[$val.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PROP_KEY, key), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VT_PROP_VALUE, (val!=null?input.toString(val.start,val.stop):null)));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2057:4: value= elementValue
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValuePair9993);
                    value=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(value.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 2057:23: -> ^( VT_PROP_KEY[$value.text] )
                    {
                        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2057:26: ^( VT_PROP_KEY[$value.text] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PROP_KEY, (value!=null?input.toString(value.start,value.stop):null)), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2060:1: elementValue : ( TimePeriod | conditionalExpression | annotation | elementValueArrayInitializer );
    public final DRLParser.elementValue_return elementValue() throws RecognitionException {
        DRLParser.elementValue_return retval = new DRLParser.elementValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TimePeriod851=null;
        DRLParser.conditionalExpression_return conditionalExpression852 = null;

        DRLParser.annotation_return annotation853 = null;

        DRLParser.elementValueArrayInitializer_return elementValueArrayInitializer854 = null;


        Object TimePeriod851_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2061:2: ( TimePeriod | conditionalExpression | annotation | elementValueArrayInitializer )
            int alt257=4;
            switch ( input.LA(1) ) {
            case TimePeriod:
                {
                alt257=1;
                }
                break;
            case ID:
            case STRING:
            case BOOL:
            case LEFT_PAREN:
            case DECIMAL:
            case LESS:
            case LEFT_SQUARE:
            case NULL:
            case PLUS:
            case MINUS:
            case HEX:
            case FLOAT:
            case INCR:
            case DECR:
            case TILDE:
            case NEGATION:
                {
                alt257=2;
                }
                break;
            case AT:
                {
                alt257=3;
                }
                break;
            case LEFT_CURLY:
                {
                alt257=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }

            switch (alt257) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2061:4: TimePeriod
                    {
                    root_0 = (Object)adaptor.nil();

                    TimePeriod851=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_elementValue10012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TimePeriod851_tree = (Object)adaptor.create(TimePeriod851);
                    adaptor.addChild(root_0, TimePeriod851_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2062:4: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue10017);
                    conditionalExpression852=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression852.getTree());

                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2063:6: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue10024);
                    annotation853=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation853.getTree());

                    }
                    break;
                case 4 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2064:6: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue10031);
                    elementValueArrayInitializer854=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer854.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2067:1: elementValueArrayInitializer : LEFT_CURLY ( elementValue ( COMMA elementValue )* )? RIGHT_CURLY ;
    public final DRLParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        DRLParser.elementValueArrayInitializer_return retval = new DRLParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY855=null;
        Token COMMA857=null;
        Token RIGHT_CURLY859=null;
        DRLParser.elementValue_return elementValue856 = null;

        DRLParser.elementValue_return elementValue858 = null;


        Object LEFT_CURLY855_tree=null;
        Object COMMA857_tree=null;
        Object RIGHT_CURLY859_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2068:2: ( LEFT_CURLY ( elementValue ( COMMA elementValue )* )? RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2068:4: LEFT_CURLY ( elementValue ( COMMA elementValue )* )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY855=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_elementValueArrayInitializer10042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY855_tree = (Object)adaptor.create(LEFT_CURLY855);
            adaptor.addChild(root_0, LEFT_CURLY855_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2068:15: ( elementValue ( COMMA elementValue )* )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==ID||LA259_0==STRING||(LA259_0>=BOOL && LA259_0<=LEFT_PAREN)||(LA259_0>=TimePeriod && LA259_0<=DECIMAL)||LA259_0==LESS||LA259_0==LEFT_SQUARE||(LA259_0>=NULL && LA259_0<=FLOAT)||LA259_0==LEFT_CURLY||(LA259_0>=INCR && LA259_0<=NEGATION)||LA259_0==AT) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2068:16: elementValue ( COMMA elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer10045);
                    elementValue856=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue856.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2068:29: ( COMMA elementValue )*
                    loop258:
                    do {
                        int alt258=2;
                        int LA258_0 = input.LA(1);

                        if ( (LA258_0==COMMA) ) {
                            alt258=1;
                        }


                        switch (alt258) {
                    	case 1 :
                    	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2068:30: COMMA elementValue
                    	    {
                    	    COMMA857=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer10048); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA857_tree = (Object)adaptor.create(COMMA857);
                    	    adaptor.addChild(root_0, COMMA857_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer10050);
                    	    elementValue858=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue858.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop258;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_CURLY859=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_elementValueArrayInitializer10057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY859_tree = (Object)adaptor.create(RIGHT_CURLY859);
            adaptor.addChild(root_0, RIGHT_CURLY859_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2072:1: annotationTypeDeclaration : AT interface_key ID annotationTypeBody ;
    public final DRLParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        DRLParser.annotationTypeDeclaration_return retval = new DRLParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT860=null;
        Token ID862=null;
        DRLParser.interface_key_return interface_key861 = null;

        DRLParser.annotationTypeBody_return annotationTypeBody863 = null;


        Object AT860_tree=null;
        Object ID862_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2073:2: ( AT interface_key ID annotationTypeBody )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2073:4: AT interface_key ID annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            AT860=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration10070); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT860_tree = (Object)adaptor.create(AT860);
            adaptor.addChild(root_0, AT860_tree);
            }
            pushFollow(FOLLOW_interface_key_in_annotationTypeDeclaration10072);
            interface_key861=interface_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_key861.getTree());
            ID862=(Token)match(input,ID,FOLLOW_ID_in_annotationTypeDeclaration10074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID862_tree = (Object)adaptor.create(ID862);
            adaptor.addChild(root_0, ID862_tree);
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration10076);
            annotationTypeBody863=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeBody863.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2076:1: annotationTypeBody : LEFT_CURLY ( annotationTypeElementDeclarations )? RIGHT_CURLY ;
    public final DRLParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        DRLParser.annotationTypeBody_return retval = new DRLParser.annotationTypeBody_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY864=null;
        Token RIGHT_CURLY866=null;
        DRLParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations865 = null;


        Object LEFT_CURLY864_tree=null;
        Object RIGHT_CURLY866_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2077:2: ( LEFT_CURLY ( annotationTypeElementDeclarations )? RIGHT_CURLY )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2077:4: LEFT_CURLY ( annotationTypeElementDeclarations )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY864=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_annotationTypeBody10088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY864_tree = (Object)adaptor.create(LEFT_CURLY864);
            adaptor.addChild(root_0, LEFT_CURLY864_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2077:15: ( annotationTypeElementDeclarations )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==ID||LA260_0==AT) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2077:16: annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody10091);
                    annotationTypeElementDeclarations865=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclarations865.getTree());

                    }
                    break;

            }

            RIGHT_CURLY866=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_annotationTypeBody10095); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY866_tree = (Object)adaptor.create(RIGHT_CURLY866);
            adaptor.addChild(root_0, RIGHT_CURLY866_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2080:1: annotationTypeElementDeclarations : ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* ;
    public final DRLParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        DRLParser.annotationTypeElementDeclarations_return retval = new DRLParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration867 = null;

        DRLParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration868 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2081:2: ( ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )* )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2081:4: ( annotationTypeElementDeclaration ) ( annotationTypeElementDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2081:4: ( annotationTypeElementDeclaration )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2081:5: annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10108);
            annotationTypeElementDeclaration867=annotationTypeElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration867.getTree());

            }

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2081:39: ( annotationTypeElementDeclaration )*
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==ID||LA261_0==AT) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2081:40: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10112);
            	    annotationTypeElementDeclaration868=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration868.getTree());

            	    }
            	    break;

            	default :
            	    break loop261;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2084:1: annotationTypeElementDeclaration : ( modifier )* annotationTypeElementRest ;
    public final DRLParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        DRLParser.annotationTypeElementDeclaration_return retval = new DRLParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.modifier_return modifier869 = null;

        DRLParser.annotationTypeElementRest_return annotationTypeElementRest870 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2085:2: ( ( modifier )* annotationTypeElementRest )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2085:4: ( modifier )* annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2085:4: ( modifier )*
            loop262:
            do {
                int alt262=2;
                alt262 = dfa262.predict(input);
                switch (alt262) {
            	case 1 :
            	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2085:5: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration10127);
            	    modifier869=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier869.getTree());

            	    }
            	    break;

            	default :
            	    break loop262;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration10131);
            annotationTypeElementRest870=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementRest870.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2088:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest SEMICOLON | classDeclaration ( SEMICOLON )? | interfaceDeclaration ( SEMICOLON )? );
    public final DRLParser.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        DRLParser.annotationTypeElementRest_return retval = new DRLParser.annotationTypeElementRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON873=null;
        Token SEMICOLON875=null;
        Token SEMICOLON877=null;
        DRLParser.type_return type871 = null;

        DRLParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest872 = null;

        DRLParser.classDeclaration_return classDeclaration874 = null;

        DRLParser.interfaceDeclaration_return interfaceDeclaration876 = null;


        Object SEMICOLON873_tree=null;
        Object SEMICOLON875_tree=null;
        Object SEMICOLON877_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2089:2: ( type annotationMethodOrConstantRest SEMICOLON | classDeclaration ( SEMICOLON )? | interfaceDeclaration ( SEMICOLON )? )
            int alt265=3;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))))))) {
                int LA265_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))))) ) {
                    alt265=1;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))))) ) {
                    alt265=2;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                    alt265=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 265, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA265_0==AT) ) {
                alt265=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2089:4: type annotationMethodOrConstantRest SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest10143);
                    type871=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type871.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest10145);
                    annotationMethodOrConstantRest872=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodOrConstantRest872.getTree());
                    SEMICOLON873=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_annotationTypeElementRest10147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON873_tree = (Object)adaptor.create(SEMICOLON873);
                    adaptor.addChild(root_0, SEMICOLON873_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2090:6: classDeclaration ( SEMICOLON )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest10154);
                    classDeclaration874=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration874.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2090:23: ( SEMICOLON )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==SEMICOLON) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2090:23: SEMICOLON
                            {
                            SEMICOLON875=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_annotationTypeElementRest10156); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON875_tree = (Object)adaptor.create(SEMICOLON875);
                            adaptor.addChild(root_0, SEMICOLON875_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2091:6: interfaceDeclaration ( SEMICOLON )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest10164);
                    interfaceDeclaration876=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration876.getTree());
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2091:27: ( SEMICOLON )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==SEMICOLON) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2091:27: SEMICOLON
                            {
                            SEMICOLON877=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_annotationTypeElementRest10166); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON877_tree = (Object)adaptor.create(SEMICOLON877);
                            adaptor.addChild(root_0, SEMICOLON877_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2096:1: annotationMethodOrConstantRest : ( annotationMethodRest | annotationConstantRest );
    public final DRLParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        DRLParser.annotationMethodOrConstantRest_return retval = new DRLParser.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.annotationMethodRest_return annotationMethodRest878 = null;

        DRLParser.annotationConstantRest_return annotationConstantRest879 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2097:2: ( annotationMethodRest | annotationConstantRest )
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==ID) ) {
                int LA266_1 = input.LA(2);

                if ( (LA266_1==LEFT_PAREN) ) {
                    alt266=1;
                }
                else if ( (LA266_1==SEMICOLON||LA266_1==EQUALS_ASSIGN||LA266_1==COMMA||LA266_1==LEFT_SQUARE) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }
            switch (alt266) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2097:4: annotationMethodRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest10181);
                    annotationMethodRest878=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodRest878.getTree());

                    }
                    break;
                case 2 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2098:6: annotationConstantRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest10188);
                    annotationConstantRest879=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationConstantRest879.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2101:1: annotationMethodRest : ID LEFT_PAREN RIGHT_PAREN ( defaultValue )? ;
    public final DRLParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        DRLParser.annotationMethodRest_return retval = new DRLParser.annotationMethodRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID880=null;
        Token LEFT_PAREN881=null;
        Token RIGHT_PAREN882=null;
        DRLParser.defaultValue_return defaultValue883 = null;


        Object ID880_tree=null;
        Object LEFT_PAREN881_tree=null;
        Object RIGHT_PAREN882_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2102:3: ( ID LEFT_PAREN RIGHT_PAREN ( defaultValue )? )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2102:5: ID LEFT_PAREN RIGHT_PAREN ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            ID880=(Token)match(input,ID,FOLLOW_ID_in_annotationMethodRest10201); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID880_tree = (Object)adaptor.create(ID880);
            adaptor.addChild(root_0, ID880_tree);
            }
            LEFT_PAREN881=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_annotationMethodRest10203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN881_tree = (Object)adaptor.create(LEFT_PAREN881);
            adaptor.addChild(root_0, LEFT_PAREN881_tree);
            }
            RIGHT_PAREN882=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_annotationMethodRest10205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN882_tree = (Object)adaptor.create(RIGHT_PAREN882);
            adaptor.addChild(root_0, RIGHT_PAREN882_tree);
            }
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2102:31: ( defaultValue )?
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) {
                alt267=1;
            }
            switch (alt267) {
                case 1 :
                    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2102:32: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest10208);
                    defaultValue883=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue883.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2105:1: annotationConstantRest : variableDeclarators ;
    public final DRLParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        DRLParser.annotationConstantRest_return retval = new DRLParser.annotationConstantRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.variableDeclarators_return variableDeclarators884 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2106:3: ( variableDeclarators )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2106:5: variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest10225);
            variableDeclarators884=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators884.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2109:1: defaultValue : default_key elementValue ;
    public final DRLParser.defaultValue_return defaultValue() throws RecognitionException {
        DRLParser.defaultValue_return retval = new DRLParser.defaultValue_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.default_key_return default_key885 = null;

        DRLParser.elementValue_return elementValue886 = null;



        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2110:3: ( default_key elementValue )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2110:5: default_key elementValue
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_default_key_in_defaultValue10240);
            default_key885=default_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key885.getTree());
            pushFollow(FOLLOW_elementValue_in_defaultValue10242);
            elementValue886=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue886.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2124:1: operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.operator_key_return operator_key() throws RecognitionException {
        DRLParser.operator_key_return retval = new DRLParser.operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2125:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2125:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(false)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "operator_key", "(helper.isPluggableEvaluator(false))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_operator_key10275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2127:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_key"

    public static class neg_operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg_operator_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2130:1: neg_operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.neg_operator_key_return neg_operator_key() throws RecognitionException {
        DRLParser.neg_operator_key_return retval = new DRLParser.neg_operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2131:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2131:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(true)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "neg_operator_key", "(helper.isPluggableEvaluator(true))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_neg_operator_key10319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2133:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg_operator_key"

    public static class lock_on_active_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2136:1: lock_on_active_key : {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] ;
    public final DRLParser.lock_on_active_key_return lock_on_active_key() throws RecognitionException {
        DRLParser.lock_on_active_key_return retval = new DRLParser.lock_on_active_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;
        Token mis2=null;
        Token id3=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        Object mis2_tree=null;
        Object id3_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2139:3: ({...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2139:5: {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lock_on_active_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, \"-\") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key10364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key10368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key10372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            mis2=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key10376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis2);

            id3=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key10380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id3);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);
              		helper.emit(mis2, DroolsEditorType.KEYWORD);
              		helper.emit(id3, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2145:3: -> VK_LOCK_ON_ACTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_LOCK_ON_ACTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active_key"

    public static class date_effective_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2148:1: date_effective_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] ;
    public final DRLParser.date_effective_key_return date_effective_key() throws RecognitionException {
        DRLParser.date_effective_key_return retval = new DRLParser.date_effective_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2151:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2151:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_effective_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key10412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_effective_key10416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key10420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2155:3: -> VK_DATE_EFFECTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EFFECTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective_key"

    public static class date_expires_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2158:1: date_expires_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] ;
    public final DRLParser.date_expires_key_return date_expires_key() throws RecognitionException {
        DRLParser.date_expires_key_return retval = new DRLParser.date_expires_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2161:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2161:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_expires_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key10452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_expires_key10456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key10460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2165:3: -> VK_DATE_EXPIRES[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EXPIRES, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires_key"

    public static class no_loop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2168:1: no_loop_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] ;
    public final DRLParser.no_loop_key_return no_loop_key() throws RecognitionException {
        DRLParser.no_loop_key_return retval = new DRLParser.no_loop_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2171:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2171:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "no_loop_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.LOOP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key10492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_no_loop_key10496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key10500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2175:3: -> VK_NO_LOOP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NO_LOOP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop_key"

    public static class auto_focus_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2178:1: auto_focus_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] ;
    public final DRLParser.auto_focus_key_return auto_focus_key() throws RecognitionException {
        DRLParser.auto_focus_key_return retval = new DRLParser.auto_focus_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2181:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2181:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "auto_focus_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.FOCUS))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key10532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_auto_focus_key10536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key10540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2185:3: -> VK_AUTO_FOCUS[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AUTO_FOCUS, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus_key"

    public static class activation_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2188:1: activation_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] ;
    public final DRLParser.activation_group_key_return activation_group_key() throws RecognitionException {
        DRLParser.activation_group_key_return retval = new DRLParser.activation_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2191:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2191:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "activation_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key10572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_activation_group_key10576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key10580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2195:3: -> VK_ACTIVATION_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTIVATION_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group_key"

    public static class agenda_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2198:1: agenda_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] ;
    public final DRLParser.agenda_group_key_return agenda_group_key() throws RecognitionException {
        DRLParser.agenda_group_key_return retval = new DRLParser.agenda_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2201:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2201:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "agenda_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key10612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_agenda_group_key10616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key10620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2205:3: -> VK_AGENDA_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AGENDA_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group_key"

    public static class ruleflow_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2208:1: ruleflow_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] ;
    public final DRLParser.ruleflow_group_key_return ruleflow_group_key() throws RecognitionException {
        DRLParser.ruleflow_group_key_return retval = new DRLParser.ruleflow_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2211:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2211:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ruleflow_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key10652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_ruleflow_group_key10656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key10660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2215:3: -> VK_RULEFLOW_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULEFLOW_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group_key"

    public static class entry_point_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entry_point_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2218:1: entry_point_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] ;
    public final DRLParser.entry_point_key_return entry_point_key() throws RecognitionException {
        DRLParser.entry_point_key_return retval = new DRLParser.entry_point_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2221:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2221:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "entry_point_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.POINT))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key10692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_entry_point_key10696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key10700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2225:3: -> VK_ENTRY_POINT[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENTRY_POINT, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entry_point_key"

    public static class timer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2228:1: timer_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.timer_key_return timer_key() throws RecognitionException {
        DRLParser.timer_key_return retval = new DRLParser.timer_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2229:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2229:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timer_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_timer_key10729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2231:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer_key"

    public static class duration_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "duration_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2234:1: duration_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.duration_key_return duration_key() throws RecognitionException {
        DRLParser.duration_key_return retval = new DRLParser.duration_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2235:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2235:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "duration_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_duration_key10756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2237:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_key"

    public static class calendars_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2240:1: calendars_key : {...}? =>id= ID -> VK_CALENDARS[$id] ;
    public final DRLParser.calendars_key_return calendars_key() throws RecognitionException {
        DRLParser.calendars_key_return retval = new DRLParser.calendars_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2241:2: ({...}? =>id= ID -> VK_CALENDARS[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2241:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "calendars_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_calendars_key10783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2243:3: -> VK_CALENDARS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CALENDARS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars_key"

    public static class package_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2246:1: package_key : {...}? =>id= ID -> VK_PACKAGE[$id] ;
    public final DRLParser.package_key_return package_key() throws RecognitionException {
        DRLParser.package_key_return retval = new DRLParser.package_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2247:2: ({...}? =>id= ID -> VK_PACKAGE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2247:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "package_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_package_key10810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2249:3: -> VK_PACKAGE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PACKAGE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_key"

    public static class import_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2252:1: import_key : {...}? =>id= ID -> VK_IMPORT[$id] ;
    public final DRLParser.import_key_return import_key() throws RecognitionException {
        DRLParser.import_key_return retval = new DRLParser.import_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2253:2: ({...}? =>id= ID -> VK_IMPORT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2253:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "import_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_import_key10837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2255:3: -> VK_IMPORT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPORT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_key"

    public static class dialect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2258:1: dialect_key : {...}? =>id= ID -> VK_DIALECT[$id] ;
    public final DRLParser.dialect_key_return dialect_key() throws RecognitionException {
        DRLParser.dialect_key_return retval = new DRLParser.dialect_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2259:2: ({...}? =>id= ID -> VK_DIALECT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2259:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dialect_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_dialect_key10864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2261:3: -> VK_DIALECT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DIALECT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect_key"

    public static class salience_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2264:1: salience_key : {...}? =>id= ID -> VK_SALIENCE[$id] ;
    public final DRLParser.salience_key_return salience_key() throws RecognitionException {
        DRLParser.salience_key_return retval = new DRLParser.salience_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2265:2: ({...}? =>id= ID -> VK_SALIENCE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2265:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "salience_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_salience_key10891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2267:3: -> VK_SALIENCE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SALIENCE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience_key"

    public static class enabled_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2270:1: enabled_key : {...}? =>id= ID -> VK_ENABLED[$id] ;
    public final DRLParser.enabled_key_return enabled_key() throws RecognitionException {
        DRLParser.enabled_key_return retval = new DRLParser.enabled_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2271:2: ({...}? =>id= ID -> VK_ENABLED[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2271:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enabled_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enabled_key10918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2273:3: -> VK_ENABLED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENABLED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled_key"

    public static class attributes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributes_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2276:1: attributes_key : {...}? =>id= ID -> VK_ATTRIBUTES[$id] ;
    public final DRLParser.attributes_key_return attributes_key() throws RecognitionException {
        DRLParser.attributes_key_return retval = new DRLParser.attributes_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2277:2: ({...}? =>id= ID -> VK_ATTRIBUTES[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2277:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "attributes_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_attributes_key10945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2279:3: -> VK_ATTRIBUTES[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ATTRIBUTES, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributes_key"

    public static class rule_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2282:1: rule_key : {...}? =>id= ID -> VK_RULE[$id] ;
    public final DRLParser.rule_key_return rule_key() throws RecognitionException {
        DRLParser.rule_key_return retval = new DRLParser.rule_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2283:2: ({...}? =>id= ID -> VK_RULE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2283:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rule_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_rule_key10972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2285:3: -> VK_RULE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_key"

    public static class extend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extend_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2288:1: extend_key : {...}? =>id= ID -> VK_EXTEND[$id] ;
    public final DRLParser.extend_key_return extend_key() throws RecognitionException {
        DRLParser.extend_key_return retval = new DRLParser.extend_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2289:2: ({...}? =>id= ID -> VK_EXTEND[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2289:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extend_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extend_key10999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2291:3: -> VK_EXTEND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTEND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extend_key"

    public static class query_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2294:1: query_key : {...}? =>id= ID -> VK_QUERY[$id] ;
    public final DRLParser.query_key_return query_key() throws RecognitionException {
        DRLParser.query_key_return retval = new DRLParser.query_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2295:2: ({...}? =>id= ID -> VK_QUERY[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2295:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "query_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_query_key11026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2297:3: -> VK_QUERY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_QUERY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_key"

    public static class declare_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2300:1: declare_key : {...}? =>id= ID -> VK_DECLARE[$id] ;
    public final DRLParser.declare_key_return declare_key() throws RecognitionException {
        DRLParser.declare_key_return retval = new DRLParser.declare_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2301:2: ({...}? =>id= ID -> VK_DECLARE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2301:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "declare_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_declare_key11053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2303:3: -> VK_DECLARE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DECLARE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "declare_key"

    public static class function_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2306:1: function_key : {...}? =>id= ID -> VK_FUNCTION[$id] ;
    public final DRLParser.function_key_return function_key() throws RecognitionException {
        DRLParser.function_key_return retval = new DRLParser.function_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2307:2: ({...}? =>id= ID -> VK_FUNCTION[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2307:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_function_key11080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2309:3: -> VK_FUNCTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FUNCTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_key"

    public static class global_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2312:1: global_key : {...}? =>id= ID -> VK_GLOBAL[$id] ;
    public final DRLParser.global_key_return global_key() throws RecognitionException {
        DRLParser.global_key_return retval = new DRLParser.global_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2313:2: ({...}? =>id= ID -> VK_GLOBAL[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2313:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "global_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_global_key11107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2315:3: -> VK_GLOBAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_GLOBAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_key"

    public static class eval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eval_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2318:1: eval_key : {...}? =>id= ID -> VK_EVAL[$id] ;
    public final DRLParser.eval_key_return eval_key() throws RecognitionException {
        DRLParser.eval_key_return retval = new DRLParser.eval_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2319:2: ({...}? =>id= ID -> VK_EVAL[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2319:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "eval_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_eval_key11134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2321:3: -> VK_EVAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EVAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eval_key"

    public static class not_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2324:1: not_key : {...}? =>id= ID -> VK_NOT[$id] ;
    public final DRLParser.not_key_return not_key() throws RecognitionException {
        DRLParser.not_key_return retval = new DRLParser.not_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2325:2: ({...}? =>id= ID -> VK_NOT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2325:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NOT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_not_key11161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2327:3: -> VK_NOT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NOT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_key"

    public static class in_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2330:1: in_key : {...}? =>id= ID -> VK_IN[$id] ;
    public final DRLParser.in_key_return in_key() throws RecognitionException {
        DRLParser.in_key_return retval = new DRLParser.in_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2331:2: ({...}? =>id= ID -> VK_IN[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2331:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "in_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_in_key11188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2333:3: -> VK_IN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_key"

    public static class or_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2336:1: or_key : {...}? =>id= ID -> VK_OR[$id] ;
    public final DRLParser.or_key_return or_key() throws RecognitionException {
        DRLParser.or_key_return retval = new DRLParser.or_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2337:2: ({...}? =>id= ID -> VK_OR[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2337:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "or_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.OR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_or_key11215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2339:3: -> VK_OR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_key"

    public static class and_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2342:1: and_key : {...}? =>id= ID -> VK_AND[$id] ;
    public final DRLParser.and_key_return and_key() throws RecognitionException {
        DRLParser.and_key_return retval = new DRLParser.and_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2343:2: ({...}? =>id= ID -> VK_AND[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2343:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "and_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_and_key11242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2345:3: -> VK_AND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_key"

    public static class exists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exists_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2348:1: exists_key : {...}? =>id= ID -> VK_EXISTS[$id] ;
    public final DRLParser.exists_key_return exists_key() throws RecognitionException {
        DRLParser.exists_key_return retval = new DRLParser.exists_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2349:2: ({...}? =>id= ID -> VK_EXISTS[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2349:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exists_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_exists_key11269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2351:3: -> VK_EXISTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXISTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exists_key"

    public static class forall_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2354:1: forall_key : {...}? =>id= ID -> VK_FORALL[$id] ;
    public final DRLParser.forall_key_return forall_key() throws RecognitionException {
        DRLParser.forall_key_return retval = new DRLParser.forall_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2355:2: ({...}? =>id= ID -> VK_FORALL[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2355:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "forall_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_forall_key11296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2357:3: -> VK_FORALL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FORALL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forall_key"

    public static class action_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "action_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2360:1: action_key : {...}? =>id= ID -> VK_ACTION[$id] ;
    public final DRLParser.action_key_return action_key() throws RecognitionException {
        DRLParser.action_key_return retval = new DRLParser.action_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2361:2: ({...}? =>id= ID -> VK_ACTION[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2361:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "action_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_action_key11323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2363:3: -> VK_ACTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "action_key"

    public static class reverse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverse_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2366:1: reverse_key : {...}? =>id= ID -> VK_REVERSE[$id] ;
    public final DRLParser.reverse_key_return reverse_key() throws RecognitionException {
        DRLParser.reverse_key_return retval = new DRLParser.reverse_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2367:2: ({...}? =>id= ID -> VK_REVERSE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2367:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reverse_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_reverse_key11350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2369:3: -> VK_REVERSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_REVERSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reverse_key"

    public static class result_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "result_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2372:1: result_key : {...}? =>id= ID -> VK_RESULT[$id] ;
    public final DRLParser.result_key_return result_key() throws RecognitionException {
        DRLParser.result_key_return retval = new DRLParser.result_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2373:2: ({...}? =>id= ID -> VK_RESULT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2373:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RESULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RESULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_result_key11377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2375:3: -> VK_RESULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RESULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "result_key"

    public static class end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "end_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2378:1: end_key : {...}? =>id= ID -> VK_END[$id] ;
    public final DRLParser.end_key_return end_key() throws RecognitionException {
        DRLParser.end_key_return retval = new DRLParser.end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2379:2: ({...}? =>id= ID -> VK_END[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2379:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "end_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_end_key11404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2381:3: -> VK_END[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_END, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "end_key"

    public static class not_end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_end_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2384:1: not_end_key : {...}? =>any= . ;
    public final DRLParser.not_end_key_return not_end_key() throws RecognitionException {
        DRLParser.not_end_key_return retval = new DRLParser.not_end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token any=null;

        Object any_tree=null;

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2385:2: ({...}? =>any= . )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2385:4: {...}? =>any= .
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_end_key", "!(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            any=(Token)input.LT(1);
            matchAny(input); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            any_tree = (Object)adaptor.create(any);
            adaptor.addChild(root_0, any_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(any, DroolsEditorType.CODE_CHUNK);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_end_key"

    public static class init_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2389:1: init_key : {...}? =>id= ID -> VK_INIT[$id] ;
    public final DRLParser.init_key_return init_key() throws RecognitionException {
        DRLParser.init_key_return retval = new DRLParser.init_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2390:2: ({...}? =>id= ID -> VK_INIT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2390:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "init_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INIT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_init_key11451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2392:3: -> VK_INIT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INIT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "init_key"

    public static class instanceof_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceof_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2395:1: instanceof_key : {...}? =>id= ID -> VK_INSTANCEOF[$id] ;
    public final DRLParser.instanceof_key_return instanceof_key() throws RecognitionException {
        DRLParser.instanceof_key_return retval = new DRLParser.instanceof_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2396:2: ({...}? =>id= ID -> VK_INSTANCEOF[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2396:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instanceof_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_instanceof_key11478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2398:3: -> VK_INSTANCEOF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INSTANCEOF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceof_key"

    public static class extends_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extends_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2401:1: extends_key : {...}? =>id= ID -> VK_EXTENDS[$id] ;
    public final DRLParser.extends_key_return extends_key() throws RecognitionException {
        DRLParser.extends_key_return retval = new DRLParser.extends_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2402:2: ({...}? =>id= ID -> VK_EXTENDS[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2402:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extends_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extends_key11505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2404:3: -> VK_EXTENDS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTENDS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extends_key"

    public static class implements_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implements_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2407:1: implements_key : {...}? =>id= ID -> VK_IMPLEMENTS[$id] ;
    public final DRLParser.implements_key_return implements_key() throws RecognitionException {
        DRLParser.implements_key_return retval = new DRLParser.implements_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2408:2: ({...}? =>id= ID -> VK_IMPLEMENTS[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2408:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "implements_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_implements_key11532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2410:3: -> VK_IMPLEMENTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPLEMENTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implements_key"

    public static class super_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "super_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2413:1: super_key : {...}? =>id= ID -> VK_SUPER[$id] ;
    public final DRLParser.super_key_return super_key() throws RecognitionException {
        DRLParser.super_key_return retval = new DRLParser.super_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2414:2: ({...}? =>id= ID -> VK_SUPER[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2414:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "super_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_super_key11559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2416:3: -> VK_SUPER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SUPER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "super_key"

    public static class boolean_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2419:1: boolean_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.boolean_key_return boolean_key() throws RecognitionException {
        DRLParser.boolean_key_return retval = new DRLParser.boolean_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2420:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2420:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "boolean_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_boolean_key11587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2422:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "boolean_key"

    public static class char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2425:1: char_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.char_key_return char_key() throws RecognitionException {
        DRLParser.char_key_return retval = new DRLParser.char_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2426:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2426:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_char_key11615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2428:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "char_key"

    public static class byte_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "byte_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2431:1: byte_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.byte_key_return byte_key() throws RecognitionException {
        DRLParser.byte_key_return retval = new DRLParser.byte_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2432:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2432:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "byte_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_byte_key11643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2434:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "byte_key"

    public static class short_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "short_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2437:1: short_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.short_key_return short_key() throws RecognitionException {
        DRLParser.short_key_return retval = new DRLParser.short_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2438:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2438:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "short_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_short_key11671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2440:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_key"

    public static class int_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "int_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2443:1: int_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.int_key_return int_key() throws RecognitionException {
        DRLParser.int_key_return retval = new DRLParser.int_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2444:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2444:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "int_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_int_key11699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2446:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "int_key"

    public static class long_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "long_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2449:1: long_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.long_key_return long_key() throws RecognitionException {
        DRLParser.long_key_return retval = new DRLParser.long_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2450:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2450:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "long_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LONG))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_long_key11727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2452:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "long_key"

    public static class float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "float_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2455:1: float_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.float_key_return float_key() throws RecognitionException {
        DRLParser.float_key_return retval = new DRLParser.float_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2456:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2456:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "float_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_float_key11755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2458:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "float_key"

    public static class double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2461:1: double_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.double_key_return double_key() throws RecognitionException {
        DRLParser.double_key_return retval = new DRLParser.double_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2462:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2462:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "double_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_double_key11783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2464:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_key"

    public static class this_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "this_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2467:1: this_key : {...}? =>id= ID -> VK_THIS[$id] ;
    public final DRLParser.this_key_return this_key() throws RecognitionException {
        DRLParser.this_key_return retval = new DRLParser.this_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2468:2: ({...}? =>id= ID -> VK_THIS[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2468:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "this_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THIS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_this_key11811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2470:3: -> VK_THIS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THIS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "this_key"

    public static class void_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "void_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2473:1: void_key : {...}? =>id= ID -> VK_VOID[$id] ;
    public final DRLParser.void_key_return void_key() throws RecognitionException {
        DRLParser.void_key_return retval = new DRLParser.void_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2474:2: ({...}? =>id= ID -> VK_VOID[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2474:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "void_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOID))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_void_key11839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2476:3: -> VK_VOID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "void_key"

    public static class class_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2479:1: class_key : {...}? =>id= ID -> VK_CLASS[$id] ;
    public final DRLParser.class_key_return class_key() throws RecognitionException {
        DRLParser.class_key_return retval = new DRLParser.class_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2480:2: ({...}? =>id= ID -> VK_CLASS[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2480:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "class_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_class_key11867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2482:3: -> VK_CLASS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CLASS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "class_key"

    public static class new_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "new_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2485:1: new_key : {...}? =>id= ID -> VK_NEW[$id] ;
    public final DRLParser.new_key_return new_key() throws RecognitionException {
        DRLParser.new_key_return retval = new DRLParser.new_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2486:2: ({...}? =>id= ID -> VK_NEW[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2486:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "new_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NEW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_new_key11895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2488:3: -> VK_NEW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NEW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "new_key"

    public static class final_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "final_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2492:1: final_key : {...}? =>id= ID -> VK_FINAL[$id] ;
    public final DRLParser.final_key_return final_key() throws RecognitionException {
        DRLParser.final_key_return retval = new DRLParser.final_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2493:2: ({...}? =>id= ID -> VK_FINAL[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2493:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "final_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_final_key11924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2495:2: -> VK_FINAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "final_key"

    public static class if_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2499:1: if_key : {...}? =>id= ID -> VK_IF[$id] ;
    public final DRLParser.if_key_return if_key() throws RecognitionException {
        DRLParser.if_key_return retval = new DRLParser.if_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2500:2: ({...}? =>id= ID -> VK_IF[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2500:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "if_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_if_key11950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2502:2: -> VK_IF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_key"

    public static class else_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2506:1: else_key : {...}? =>id= ID -> VK_ELSE[$id] ;
    public final DRLParser.else_key_return else_key() throws RecognitionException {
        DRLParser.else_key_return retval = new DRLParser.else_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2507:2: ({...}? =>id= ID -> VK_ELSE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2507:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "else_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ELSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_else_key11976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2509:2: -> VK_ELSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ELSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_key"

    public static class for_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2513:1: for_key : {...}? =>id= ID -> VK_FOR[$id] ;
    public final DRLParser.for_key_return for_key() throws RecognitionException {
        DRLParser.for_key_return retval = new DRLParser.for_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2514:2: ({...}? =>id= ID -> VK_FOR[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2514:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "for_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FOR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_for_key12002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2516:2: -> VK_FOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_key"

    public static class while_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2520:1: while_key : {...}? =>id= ID -> VK_WHILE[$id] ;
    public final DRLParser.while_key_return while_key() throws RecognitionException {
        DRLParser.while_key_return retval = new DRLParser.while_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2521:2: ({...}? =>id= ID -> VK_WHILE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2521:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.WHILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "while_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.WHILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_while_key12028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2523:2: -> VK_WHILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_WHILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_key"

    public static class do_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "do_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2527:1: do_key : {...}? =>id= ID -> VK_DO[$id] ;
    public final DRLParser.do_key_return do_key() throws RecognitionException {
        DRLParser.do_key_return retval = new DRLParser.do_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2528:2: ({...}? =>id= ID -> VK_DO[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2528:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DO)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "do_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DO))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_do_key12054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2530:2: -> VK_DO[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DO, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "do_key"

    public static class case_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2534:1: case_key : {...}? =>id= ID -> VK_CASE[$id] ;
    public final DRLParser.case_key_return case_key() throws RecognitionException {
        DRLParser.case_key_return retval = new DRLParser.case_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2535:2: ({...}? =>id= ID -> VK_CASE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2535:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "case_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CASE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_case_key12080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2537:2: -> VK_CASE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CASE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_key"

    public static class default_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2541:1: default_key : {...}? =>id= ID -> VK_DEFAULT[$id] ;
    public final DRLParser.default_key_return default_key() throws RecognitionException {
        DRLParser.default_key_return retval = new DRLParser.default_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2542:2: ({...}? =>id= ID -> VK_DEFAULT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2542:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "default_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_default_key12106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2544:2: -> VK_DEFAULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DEFAULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "default_key"

    public static class try_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2548:1: try_key : {...}? =>id= ID -> VK_TRY[$id] ;
    public final DRLParser.try_key_return try_key() throws RecognitionException {
        DRLParser.try_key_return retval = new DRLParser.try_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2549:2: ({...}? =>id= ID -> VK_TRY[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2549:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "try_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_try_key12132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2551:2: -> VK_TRY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_key"

    public static class catch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catch_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2555:1: catch_key : {...}? =>id= ID -> VK_CATCH[$id] ;
    public final DRLParser.catch_key_return catch_key() throws RecognitionException {
        DRLParser.catch_key_return retval = new DRLParser.catch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2556:2: ({...}? =>id= ID -> VK_CATCH[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2556:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "catch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CATCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_catch_key12158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2558:2: -> VK_CATCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CATCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catch_key"

    public static class finally_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finally_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2562:1: finally_key : {...}? =>id= ID -> VK_FINALLY[$id] ;
    public final DRLParser.finally_key_return finally_key() throws RecognitionException {
        DRLParser.finally_key_return retval = new DRLParser.finally_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2563:2: ({...}? =>id= ID -> VK_FINALLY[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2563:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "finally_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_finally_key12184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2565:2: -> VK_FINALLY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINALLY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "finally_key"

    public static class switch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2569:1: switch_key : {...}? =>id= ID -> VK_SWITCH[$id] ;
    public final DRLParser.switch_key_return switch_key() throws RecognitionException {
        DRLParser.switch_key_return retval = new DRLParser.switch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2570:2: ({...}? =>id= ID -> VK_SWITCH[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2570:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "switch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_switch_key12210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2572:2: -> VK_SWITCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SWITCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switch_key"

    public static class synchronized_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "synchronized_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2576:1: synchronized_key : {...}? =>id= ID -> VK_SYNCHRONIZED[$id] ;
    public final DRLParser.synchronized_key_return synchronized_key() throws RecognitionException {
        DRLParser.synchronized_key_return retval = new DRLParser.synchronized_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2577:2: ({...}? =>id= ID -> VK_SYNCHRONIZED[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2577:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "synchronized_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_synchronized_key12236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2579:2: -> VK_SYNCHRONIZED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SYNCHRONIZED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "synchronized_key"

    public static class return_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2583:1: return_key : {...}? =>id= ID -> VK_RETURN[$id] ;
    public final DRLParser.return_key_return return_key() throws RecognitionException {
        DRLParser.return_key_return retval = new DRLParser.return_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2584:2: ({...}? =>id= ID -> VK_RETURN[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2584:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RETURN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "return_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RETURN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_return_key12262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2586:2: -> VK_RETURN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RETURN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "return_key"

    public static class throw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throw_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2590:1: throw_key : {...}? =>id= ID -> VK_THROW[$id] ;
    public final DRLParser.throw_key_return throw_key() throws RecognitionException {
        DRLParser.throw_key_return retval = new DRLParser.throw_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2591:2: ({...}? =>id= ID -> VK_THROW[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2591:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throw_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throw_key12288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2593:2: -> VK_THROW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throw_key"

    public static class break_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "break_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2597:1: break_key : {...}? =>id= ID -> VK_BREAK[$id] ;
    public final DRLParser.break_key_return break_key() throws RecognitionException {
        DRLParser.break_key_return retval = new DRLParser.break_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2598:2: ({...}? =>id= ID -> VK_BREAK[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2598:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BREAK)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "break_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BREAK))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_break_key12314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2600:2: -> VK_BREAK[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_BREAK, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "break_key"

    public static class continue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2604:1: continue_key : {...}? =>id= ID -> VK_CONTINUE[$id] ;
    public final DRLParser.continue_key_return continue_key() throws RecognitionException {
        DRLParser.continue_key_return retval = new DRLParser.continue_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2605:2: ({...}? =>id= ID -> VK_CONTINUE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2605:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "continue_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_continue_key12340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2607:2: -> VK_CONTINUE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CONTINUE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "continue_key"

    public static class assert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assert_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2610:1: assert_key : {...}? =>id= ID -> VK_ASSERT[$id] ;
    public final DRLParser.assert_key_return assert_key() throws RecognitionException {
        DRLParser.assert_key_return retval = new DRLParser.assert_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2611:2: ({...}? =>id= ID -> VK_ASSERT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2611:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "assert_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_assert_key12365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2613:2: -> VK_ASSERT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ASSERT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assert_key"

    public static class static_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "static_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2616:1: static_key : {...}? =>id= ID -> VK_STATIC[$id] ;
    public final DRLParser.static_key_return static_key() throws RecognitionException {
        DRLParser.static_key_return retval = new DRLParser.static_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2617:2: ({...}? =>id= ID -> VK_STATIC[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2617:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "static_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_static_key12390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2619:2: -> VK_STATIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STATIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "static_key"

    public static class modify_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2622:1: modify_key : {...}? =>id= ID -> VK_MODIFY[$id] ;
    public final DRLParser.modify_key_return modify_key() throws RecognitionException {
        DRLParser.modify_key_return retval = new DRLParser.modify_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2623:2: ({...}? =>id= ID -> VK_MODIFY[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2623:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "modify_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_modify_key12415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2625:2: -> VK_MODIFY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_MODIFY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modify_key"

    public static class public_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "public_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2628:1: public_key : {...}? =>id= ID -> VK_PUBLIC[$id] ;
    public final DRLParser.public_key_return public_key() throws RecognitionException {
        DRLParser.public_key_return retval = new DRLParser.public_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2629:2: ({...}? =>id= ID -> VK_PUBLIC[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2629:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "public_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_public_key12441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2631:2: -> VK_PUBLIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PUBLIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "public_key"

    public static class protected_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2635:1: protected_key : {...}? =>id= ID -> VK_PROTECTED[$id] ;
    public final DRLParser.protected_key_return protected_key() throws RecognitionException {
        DRLParser.protected_key_return retval = new DRLParser.protected_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2636:2: ({...}? =>id= ID -> VK_PROTECTED[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2636:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "protected_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_protected_key12467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2638:2: -> VK_PROTECTED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PROTECTED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_key"

    public static class private_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2642:1: private_key : {...}? =>id= ID -> VK_PRIVATE[$id] ;
    public final DRLParser.private_key_return private_key() throws RecognitionException {
        DRLParser.private_key_return retval = new DRLParser.private_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2643:2: ({...}? =>id= ID -> VK_PRIVATE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2643:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "private_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_private_key12493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2645:2: -> VK_PRIVATE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIVATE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_key"

    public static class abstract_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2649:1: abstract_key : {...}? =>id= ID -> VK_ABSTRACT[$id] ;
    public final DRLParser.abstract_key_return abstract_key() throws RecognitionException {
        DRLParser.abstract_key_return retval = new DRLParser.abstract_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2650:2: ({...}? =>id= ID -> VK_ABSTRACT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2650:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "abstract_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_abstract_key12519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2652:2: -> VK_ABSTRACT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ABSTRACT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstract_key"

    public static class native_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "native_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2656:1: native_key : {...}? =>id= ID -> VK_NATIVE[$id] ;
    public final DRLParser.native_key_return native_key() throws RecognitionException {
        DRLParser.native_key_return retval = new DRLParser.native_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2657:2: ({...}? =>id= ID -> VK_NATIVE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2657:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "native_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_native_key12545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2659:2: -> VK_NATIVE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NATIVE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "native_key"

    public static class transient_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "transient_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2663:1: transient_key : {...}? =>id= ID -> VK_TRANSIENT[$id] ;
    public final DRLParser.transient_key_return transient_key() throws RecognitionException {
        DRLParser.transient_key_return retval = new DRLParser.transient_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2664:2: ({...}? =>id= ID -> VK_TRANSIENT[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2664:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "transient_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_transient_key12571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2666:2: -> VK_TRANSIENT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRANSIENT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "transient_key"

    public static class volatile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volatile_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2670:1: volatile_key : {...}? =>id= ID -> VK_VOLATILE[$id] ;
    public final DRLParser.volatile_key_return volatile_key() throws RecognitionException {
        DRLParser.volatile_key_return retval = new DRLParser.volatile_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2671:2: ({...}? =>id= ID -> VK_VOLATILE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2671:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "volatile_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_volatile_key12597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2673:2: -> VK_VOLATILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOLATILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volatile_key"

    public static class strictfp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "strictfp_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2677:1: strictfp_key : {...}? =>id= ID -> VK_STRICTFP[$id] ;
    public final DRLParser.strictfp_key_return strictfp_key() throws RecognitionException {
        DRLParser.strictfp_key_return retval = new DRLParser.strictfp_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2678:2: ({...}? =>id= ID -> VK_STRICTFP[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2678:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "strictfp_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_strictfp_key12623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2680:2: -> VK_STRICTFP[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STRICTFP, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "strictfp_key"

    public static class throws_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throws_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2684:1: throws_key : {...}? =>id= ID -> VK_THROWS[$id] ;
    public final DRLParser.throws_key_return throws_key() throws RecognitionException {
        DRLParser.throws_key_return retval = new DRLParser.throws_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2685:2: ({...}? =>id= ID -> VK_THROWS[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2685:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throws_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throws_key12649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2687:2: -> VK_THROWS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROWS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throws_key"

    public static class interface_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2691:1: interface_key : {...}? =>id= ID -> VK_INTERFACE[$id] ;
    public final DRLParser.interface_key_return interface_key() throws RecognitionException {
        DRLParser.interface_key_return retval = new DRLParser.interface_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2692:2: ({...}? =>id= ID -> VK_INTERFACE[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2692:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "interface_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_interface_key12675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2694:2: -> VK_INTERFACE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INTERFACE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interface_key"

    public static class enum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_key"
    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2698:1: enum_key : {...}? =>id= ID -> VK_ENUM[$id] ;
    public final DRLParser.enum_key_return enum_key() throws RecognitionException {
        DRLParser.enum_key_return retval = new DRLParser.enum_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2699:2: ({...}? =>id= ID -> VK_ENUM[$id] )
            // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2699:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enum_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enum_key12701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2701:2: -> VK_ENUM[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENUM, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enum_key"

    // $ANTLR start synpred1_DRL
    public final void synpred1_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:460:4: ( methodDeclaration )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:460:4: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred1_DRL1520);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_DRL

    // $ANTLR start synpred2_DRL
    public final void synpred2_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:461:4: ( void_key ID voidMethodDeclaratorRest )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:461:4: void_key ID voidMethodDeclaratorRest
        {
        pushFollow(FOLLOW_void_key_in_synpred2_DRL1525);
        void_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred2_DRL1527); if (state.failed) return ;
        pushFollow(FOLLOW_voidMethodDeclaratorRest_in_synpred2_DRL1529);
        voidMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_DRL

    // $ANTLR start synpred3_DRL
    public final void synpred3_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:654:5: ( LEFT_PAREN or_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:654:6: LEFT_PAREN or_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred3_DRL2231); if (state.failed) return ;
        pushFollow(FOLLOW_or_key_in_synpred3_DRL2233);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_DRL

    // $ANTLR start synpred4_DRL
    public final void synpred4_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:662:5: ( or_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:662:6: or_key
        {
        pushFollow(FOLLOW_or_key_in_synpred4_DRL2300);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_DRL

    // $ANTLR start synpred5_DRL
    public final void synpred5_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:671:5: ( LEFT_PAREN and_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:671:6: LEFT_PAREN and_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred5_DRL2351); if (state.failed) return ;
        pushFollow(FOLLOW_and_key_in_synpred5_DRL2353);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_DRL

    // $ANTLR start synpred6_DRL
    public final void synpred6_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:679:5: ( and_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:679:6: and_key
        {
        pushFollow(FOLLOW_and_key_in_synpred6_DRL2421);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_DRL

    // $ANTLR start synpred7_DRL
    public final void synpred7_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:696:4: ( SEMICOLON )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:696:5: SEMICOLON
        {
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred7_DRL2538); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_DRL

    // $ANTLR start synpred8_DRL
    public final void synpred8_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:702:12: ( LEFT_PAREN ( or_key | and_key ) )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:702:13: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred8_DRL2575); if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:702:24: ( or_key | and_key )
        int alt268=2;
        int LA268_0 = input.LA(1);

        if ( (LA268_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))))) {
            int LA268_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt268=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt268=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 268, 0, input);

            throw nvae;
        }
        switch (alt268) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:702:25: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred8_DRL2578);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:702:32: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred8_DRL2580);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred8_DRL

    // $ANTLR start synpred9_DRL
    public final void synpred9_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:718:5: ( LEFT_PAREN ( or_key | and_key ) )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:718:6: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred9_DRL2703); if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:718:17: ( or_key | and_key )
        int alt269=2;
        int LA269_0 = input.LA(1);

        if ( (LA269_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))))) {
            int LA269_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt269=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt269=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 269, 0, input);

            throw nvae;
        }
        switch (alt269) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:718:18: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred9_DRL2706);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:718:25: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred9_DRL2708);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred9_DRL

    // $ANTLR start synpred10_DRL
    public final void synpred10_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1103:4: ( operator_args )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1103:5: operator_args
        {
        pushFollow(FOLLOW_operator_args_in_synpred10_DRL4331);
        operator_args();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_DRL

    // $ANTLR start synpred11_DRL
    public final void synpred11_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:5: ( primitiveType )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:6: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred11_DRL5649);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_DRL

    // $ANTLR start synpred12_DRL
    public final void synpred12_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:41: ( LEFT_SQUARE RIGHT_SQUARE )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1335:42: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred12_DRL5660); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5662); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_DRL

    // $ANTLR start synpred13_DRL
    public final void synpred13_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:10: ( typeArguments )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:11: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred13_DRL5683);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_DRL

    // $ANTLR start synpred14_DRL
    public final void synpred14_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:52: ( typeArguments )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:53: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred14_DRL5697);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_DRL

    // $ANTLR start synpred15_DRL
    public final void synpred15_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:89: ( LEFT_SQUARE RIGHT_SQUARE )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1336:90: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred15_DRL5709); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred15_DRL5711); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_DRL

    // $ANTLR start synpred16_DRL
    public final void synpred16_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1405:4: ( final_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1405:5: final_key
        {
        pushFollow(FOLLOW_final_key_in_synpred16_DRL6018);
        final_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_DRL

    // $ANTLR start synpred18_DRL
    public final void synpred18_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1449:7: ( if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1449:7: if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )?
        {
        pushFollow(FOLLOW_if_key_in_synpred18_DRL6212);
        if_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred18_DRL6214);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred18_DRL6216);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1449:42: ( options {k=1; } : else_key rhs_statement )?
        int alt270=2;
        int LA270_0 = input.LA(1);

        if ( (LA270_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE))))) {
            alt270=1;
        }
        switch (alt270) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1449:59: else_key rhs_statement
                {
                pushFollow(FOLLOW_else_key_in_synpred18_DRL6227);
                else_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_rhs_statement_in_synpred18_DRL6229);
                rhs_statement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred18_DRL

    // $ANTLR start synpred19_DRL
    public final void synpred19_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1450:7: ( for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1450:7: for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement
        {
        pushFollow(FOLLOW_for_key_in_synpred19_DRL6239);
        for_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred19_DRL6241); if (state.failed) return ;
        pushFollow(FOLLOW_forControl_in_synpred19_DRL6243);
        forControl();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred19_DRL6245); if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred19_DRL6247);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_DRL

    // $ANTLR start synpred20_DRL
    public final void synpred20_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1451:7: ( while_key parExpression rhs_statement )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1451:7: while_key parExpression rhs_statement
        {
        pushFollow(FOLLOW_while_key_in_synpred20_DRL6255);
        while_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred20_DRL6257);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred20_DRL6259);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_DRL

    // $ANTLR start synpred21_DRL
    public final void synpred21_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1452:7: ( do_key rhs_statement while_key parExpression SEMICOLON )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1452:7: do_key rhs_statement while_key parExpression SEMICOLON
        {
        pushFollow(FOLLOW_do_key_in_synpred21_DRL6267);
        do_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred21_DRL6269);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_while_key_in_synpred21_DRL6271);
        while_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred21_DRL6273);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred21_DRL6275); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_DRL

    // $ANTLR start synpred22_DRL
    public final void synpred22_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1453:7: ( try_key block ( catches finally_key block | catches | finally_key block ) )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1453:7: try_key block ( catches finally_key block | catches | finally_key block )
        {
        pushFollow(FOLLOW_try_key_in_synpred22_DRL6283);
        try_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred22_DRL6285);
        block();

        state._fsp--;
        if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1454:7: ( catches finally_key block | catches | finally_key block )
        int alt271=3;
        int LA271_0 = input.LA(1);

        if ( (LA271_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))))) {
            int LA271_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                alt271=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                alt271=2;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                alt271=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 271, 0, input);

            throw nvae;
        }
        switch (alt271) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1454:9: catches finally_key block
                {
                pushFollow(FOLLOW_catches_in_synpred22_DRL6295);
                catches();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_finally_key_in_synpred22_DRL6297);
                finally_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_block_in_synpred22_DRL6299);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1455:9: catches
                {
                pushFollow(FOLLOW_catches_in_synpred22_DRL6309);
                catches();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1456:9: finally_key block
                {
                pushFollow(FOLLOW_finally_key_in_synpred22_DRL6319);
                finally_key();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_block_in_synpred22_DRL6321);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred22_DRL

    // $ANTLR start synpred23_DRL
    public final void synpred23_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1458:7: ( switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1458:7: switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY
        {
        pushFollow(FOLLOW_switch_key_in_synpred23_DRL6337);
        switch_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred23_DRL6339);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_synpred23_DRL6341); if (state.failed) return ;
        pushFollow(FOLLOW_switchBlockStatementGroups_in_synpred23_DRL6343);
        switchBlockStatementGroups();

        state._fsp--;
        if (state.failed) return ;
        match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_synpred23_DRL6345); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_DRL

    // $ANTLR start synpred24_DRL
    public final void synpred24_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1459:7: ( synchronized_key parExpression block )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1459:7: synchronized_key parExpression block
        {
        pushFollow(FOLLOW_synchronized_key_in_synpred24_DRL6353);
        synchronized_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_parExpression_in_synpred24_DRL6355);
        parExpression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred24_DRL6357);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_DRL

    // $ANTLR start synpred25_DRL
    public final void synpred25_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1460:7: ( return_key ( expression )? SEMICOLON )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1460:7: return_key ( expression )? SEMICOLON
        {
        pushFollow(FOLLOW_return_key_in_synpred25_DRL6365);
        return_key();

        state._fsp--;
        if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1460:18: ( expression )?
        int alt272=2;
        int LA272_0 = input.LA(1);

        if ( (LA272_0==ID||LA272_0==STRING||(LA272_0>=BOOL && LA272_0<=LEFT_PAREN)||LA272_0==DECIMAL||LA272_0==LESS||LA272_0==LEFT_SQUARE||(LA272_0>=NULL && LA272_0<=FLOAT)||(LA272_0>=INCR && LA272_0<=NEGATION)) ) {
            alt272=1;
        }
        switch (alt272) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1460:18: expression
                {
                pushFollow(FOLLOW_expression_in_synpred25_DRL6367);
                expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred25_DRL6370); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_DRL

    // $ANTLR start synpred26_DRL
    public final void synpred26_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1461:7: ( throw_key expression SEMICOLON )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1461:7: throw_key expression SEMICOLON
        {
        pushFollow(FOLLOW_throw_key_in_synpred26_DRL6378);
        throw_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred26_DRL6380);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred26_DRL6382); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_DRL

    // $ANTLR start synpred27_DRL
    public final void synpred27_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1462:7: ( break_key ( ID )? SEMICOLON )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1462:7: break_key ( ID )? SEMICOLON
        {
        pushFollow(FOLLOW_break_key_in_synpred27_DRL6390);
        break_key();

        state._fsp--;
        if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1462:17: ( ID )?
        int alt273=2;
        int LA273_0 = input.LA(1);

        if ( (LA273_0==ID) ) {
            alt273=1;
        }
        switch (alt273) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1462:17: ID
                {
                match(input,ID,FOLLOW_ID_in_synpred27_DRL6392); if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred27_DRL6395); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_DRL

    // $ANTLR start synpred28_DRL
    public final void synpred28_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1463:7: ( continue_key ( ID )? SEMICOLON )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1463:7: continue_key ( ID )? SEMICOLON
        {
        pushFollow(FOLLOW_continue_key_in_synpred28_DRL6403);
        continue_key();

        state._fsp--;
        if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1463:20: ( ID )?
        int alt274=2;
        int LA274_0 = input.LA(1);

        if ( (LA274_0==ID) ) {
            alt274=1;
        }
        switch (alt274) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1463:20: ID
                {
                match(input,ID,FOLLOW_ID_in_synpred28_DRL6405); if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred28_DRL6408); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_DRL

    // $ANTLR start synpred30_DRL
    public final void synpred30_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1466:5: ( expression SEMICOLON )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1466:5: expression SEMICOLON
        {
        pushFollow(FOLLOW_expression_in_synpred30_DRL6423);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred30_DRL6425); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_DRL

    // $ANTLR start synpred31_DRL
    public final void synpred31_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1467:7: ( ID COLON rhs_statement )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1467:7: ID COLON rhs_statement
        {
        match(input,ID,FOLLOW_ID_in_synpred31_DRL6437); if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred31_DRL6439); if (state.failed) return ;
        pushFollow(FOLLOW_rhs_statement_in_synpred31_DRL6441);
        rhs_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_DRL

    // $ANTLR start synpred32_DRL
    public final void synpred32_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1470:7: ( modifyStatement )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1470:7: modifyStatement
        {
        pushFollow(FOLLOW_modifyStatement_in_synpred32_DRL6459);
        modifyStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_DRL

    // $ANTLR start synpred33_DRL
    public final void synpred33_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1481:4: ( forVarControl )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1481:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred33_DRL6520);
        forVarControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_DRL

    // $ANTLR start synpred34_DRL
    public final void synpred34_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:4: ( ( variableModifier )* type variableDeclarators )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:4: ( variableModifier )* type variableDeclarators
        {
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:4: ( variableModifier )*
        loop275:
        do {
            int alt275=2;
            alt275 = dfa275.predict(input);
            switch (alt275) {
        	case 1 :
        	    // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1487:4: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred34_DRL6565);
        	    variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop275;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred34_DRL6568);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred34_DRL6570);
        variableDeclarators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_DRL

    // $ANTLR start synpred35_DRL
    public final void synpred35_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1553:27: ( assignmentOperator )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1553:28: assignmentOperator
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred35_DRL6818);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_DRL

    // $ANTLR start synpred36_DRL
    public final void synpred36_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1588:27: ( LESS )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1588:28: LESS
        {
        match(input,LESS,FOLLOW_LESS_in_synpred36_DRL7065); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_DRL

    // $ANTLR start synpred37_DRL
    public final void synpred37_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1607:36: ( PLUS | MINUS )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred37_DRL

    // $ANTLR start synpred40_DRL
    public final void synpred40_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1626:9: ( castExpression )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1626:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred40_DRL7358);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_DRL

    // $ANTLR start synpred41_DRL
    public final void synpred41_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:18: ( selector )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:19: selector
        {
        pushFollow(FOLLOW_selector_in_synpred41_DRL7372);
        selector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_DRL

    // $ANTLR start synpred42_DRL
    public final void synpred42_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1627:42: ( INCR | DECR )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred42_DRL

    // $ANTLR start synpred43_DRL
    public final void synpred43_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1632:8: ( LEFT_PAREN primitiveType )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1632:9: LEFT_PAREN primitiveType
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred43_DRL7430); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred43_DRL7432);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_DRL

    // $ANTLR start synpred44_DRL
    public final void synpred44_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1633:8: ( LEFT_PAREN type )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1633:9: LEFT_PAREN type
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred44_DRL7453); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred44_DRL7455);
        type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_DRL

    // $ANTLR start synpred45_DRL
    public final void synpred45_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1639:9: ( boolean_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1639:9: boolean_key
        {
        pushFollow(FOLLOW_boolean_key_in_synpred45_DRL7518);
        boolean_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_DRL

    // $ANTLR start synpred46_DRL
    public final void synpred46_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1640:7: ( char_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1640:7: char_key
        {
        pushFollow(FOLLOW_char_key_in_synpred46_DRL7526);
        char_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_DRL

    // $ANTLR start synpred47_DRL
    public final void synpred47_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1641:7: ( byte_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1641:7: byte_key
        {
        pushFollow(FOLLOW_byte_key_in_synpred47_DRL7534);
        byte_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_DRL

    // $ANTLR start synpred48_DRL
    public final void synpred48_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1642:7: ( short_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1642:7: short_key
        {
        pushFollow(FOLLOW_short_key_in_synpred48_DRL7542);
        short_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_DRL

    // $ANTLR start synpred49_DRL
    public final void synpred49_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1643:7: ( int_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1643:7: int_key
        {
        pushFollow(FOLLOW_int_key_in_synpred49_DRL7550);
        int_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_DRL

    // $ANTLR start synpred50_DRL
    public final void synpred50_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1644:7: ( long_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1644:7: long_key
        {
        pushFollow(FOLLOW_long_key_in_synpred50_DRL7558);
        long_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_DRL

    // $ANTLR start synpred51_DRL
    public final void synpred51_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1645:7: ( float_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1645:7: float_key
        {
        pushFollow(FOLLOW_float_key_in_synpred51_DRL7566);
        float_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_DRL

    // $ANTLR start synpred52_DRL
    public final void synpred52_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1651:7: ( parExpression )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1651:8: parExpression
        {
        pushFollow(FOLLOW_parExpression_in_synpred52_DRL7593);
        parExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_DRL

    // $ANTLR start synpred53_DRL
    public final void synpred53_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1652:9: ( nonWildcardTypeArguments )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1652:10: nonWildcardTypeArguments
        {
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred53_DRL7608);
        nonWildcardTypeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_DRL

    // $ANTLR start synpred54_DRL
    public final void synpred54_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1653:9: ( literal )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1653:10: literal
        {
        pushFollow(FOLLOW_literal_in_synpred54_DRL7633);
        literal();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_DRL

    // $ANTLR start synpred55_DRL
    public final void synpred55_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1655:9: ( super_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1655:10: super_key
        {
        pushFollow(FOLLOW_super_key_in_synpred55_DRL7653);
        super_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_DRL

    // $ANTLR start synpred56_DRL
    public final void synpred56_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1656:9: ( new_key )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1656:10: new_key
        {
        pushFollow(FOLLOW_new_key_in_synpred56_DRL7670);
        new_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_DRL

    // $ANTLR start synpred57_DRL
    public final void synpred57_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1657:9: ( primitiveType )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1657:10: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred57_DRL7687);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_DRL

    // $ANTLR start synpred58_DRL
    public final void synpred58_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1659:9: ( inlineMapExpression )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1659:10: inlineMapExpression
        {
        pushFollow(FOLLOW_inlineMapExpression_in_synpred58_DRL7718);
        inlineMapExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_DRL

    // $ANTLR start synpred59_DRL
    public final void synpred59_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1660:9: ( inlineListExpression )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1660:10: inlineListExpression
        {
        pushFollow(FOLLOW_inlineListExpression_in_synpred59_DRL7733);
        inlineListExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_DRL

    // $ANTLR start synpred60_DRL
    public final void synpred60_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:9: ( ID )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:10: ID
        {
        match(input,ID,FOLLOW_ID_in_synpred60_DRL7748); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_DRL

    // $ANTLR start synpred61_DRL
    public final void synpred61_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:19: ( DOT ID )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:20: DOT ID
        {
        match(input,DOT,FOLLOW_DOT_in_synpred61_DRL7755); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred61_DRL7757); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_DRL

    // $ANTLR start synpred62_DRL
    public final void synpred62_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:39: ( identifierSuffix )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1661:40: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred62_DRL7768);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_DRL

    // $ANTLR start synpred64_DRL
    public final void synpred64_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1687:8: ( LEFT_SQUARE )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1687:9: LEFT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred64_DRL7939); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_DRL

    // $ANTLR start synpred66_DRL
    public final void synpred66_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1714:107: ( LEFT_SQUARE RIGHT_SQUARE )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1714:108: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred66_DRL8121); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred66_DRL8123); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_DRL

    // $ANTLR start synpred67_DRL
    public final void synpred67_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:14: ( LEFT_PAREN )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:15: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred67_DRL8298); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred67_DRL

    // $ANTLR start synpred68_DRL
    public final void synpred68_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:6: ( DOT ID ( ( LEFT_PAREN )=> arguments )? )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
        {
        match(input,DOT,FOLLOW_DOT_in_synpred68_DRL8292); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred68_DRL8294); if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:13: ( ( LEFT_PAREN )=> arguments )?
        int alt278=2;
        int LA278_0 = input.LA(1);

        if ( (LA278_0==LEFT_PAREN) && (synpred67_DRL())) {
            alt278=1;
        }
        switch (alt278) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1746:14: ( LEFT_PAREN )=> arguments
                {
                pushFollow(FOLLOW_arguments_in_synpred68_DRL8303);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred68_DRL

    // $ANTLR start synpred69_DRL
    public final void synpred69_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1748:6: ( DOT super_key superSuffix )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1748:6: DOT super_key superSuffix
        {
        match(input,DOT,FOLLOW_DOT_in_synpred69_DRL8314); if (state.failed) return ;
        pushFollow(FOLLOW_super_key_in_synpred69_DRL8316);
        super_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred69_DRL8318);
        superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_DRL

    // $ANTLR start synpred70_DRL
    public final void synpred70_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1749:6: ( DOT new_key ( nonWildcardTypeArguments )? innerCreator )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1749:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
        {
        match(input,DOT,FOLLOW_DOT_in_synpred70_DRL8325); if (state.failed) return ;
        pushFollow(FOLLOW_new_key_in_synpred70_DRL8327);
        new_key();

        state._fsp--;
        if (state.failed) return ;
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1749:18: ( nonWildcardTypeArguments )?
        int alt279=2;
        int LA279_0 = input.LA(1);

        if ( (LA279_0==LESS) ) {
            alt279=1;
        }
        switch (alt279) {
            case 1 :
                // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1749:19: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred70_DRL8330);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_innerCreator_in_synpred70_DRL8334);
        innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_DRL

    // $ANTLR start synpred71_DRL
    public final void synpred71_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1755:15: ( LEFT_PAREN )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1755:16: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred71_DRL8371); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_DRL

    // $ANTLR start synpred72_DRL
    public final void synpred72_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1821:4: ( modifier modifiedClassMember )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1821:4: modifier modifiedClassMember
        {
        pushFollow(FOLLOW_modifier_in_synpred72_DRL8782);
        modifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_modifiedClassMember_in_synpred72_DRL8784);
        modifiedClassMember();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_DRL

    // $ANTLR start synpred74_DRL
    public final void synpred74_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1845:4: ( methodDeclaration )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1845:4: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred74_DRL8950);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_DRL

    // $ANTLR start synpred75_DRL
    public final void synpred75_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1846:4: ( void_key ID voidMethodDeclaratorRest )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1846:4: void_key ID voidMethodDeclaratorRest
        {
        pushFollow(FOLLOW_void_key_in_synpred75_DRL8955);
        void_key();

        state._fsp--;
        if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred75_DRL8957); if (state.failed) return ;
        pushFollow(FOLLOW_voidMethodDeclaratorRest_in_synpred75_DRL8959);
        voidMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_DRL

    // $ANTLR start synpred76_DRL
    public final void synpred76_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1847:4: ( ID constructorDeclaratorRest )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1847:4: ID constructorDeclaratorRest
        {
        match(input,ID,FOLLOW_ID_in_synpred76_DRL8964); if (state.failed) return ;
        pushFollow(FOLLOW_constructorDeclaratorRest_in_synpred76_DRL8966);
        constructorDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_DRL

    // $ANTLR start synpred77_DRL
    public final void synpred77_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1849:4: ( fieldDeclaration )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1849:4: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred77_DRL8973);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_DRL

    // $ANTLR start synpred78_DRL
    public final void synpred78_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1851:4: ( interfaceDeclaration )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1851:4: interfaceDeclaration
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred78_DRL8981);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred78_DRL

    // $ANTLR start synpred79_DRL
    public final void synpred79_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1946:4: ( modifier modifiedInterfaceMember )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:1946:4: modifier modifiedInterfaceMember
        {
        pushFollow(FOLLOW_modifier_in_synpred79_DRL9450);
        modifier();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_modifiedInterfaceMember_in_synpred79_DRL9452);
        modifiedInterfaceMember();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred79_DRL

    // $ANTLR start synpred80_DRL
    public final void synpred80_DRL_fragment() throws RecognitionException {   
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2056:4: ( ID EQUALS_ASSIGN )
        // /home/davide/Projects/Eclipse/drools-trunk/trunk/drools-compiler/src/main/resources/org/drools/lang/DRL.g:2056:5: ID EQUALS_ASSIGN
        {
        match(input,ID,FOLLOW_ID_in_synpred80_DRL9962); if (state.failed) return ;
        match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_synpred80_DRL9964); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_DRL

    // Delegated rules

    public final boolean synpred36_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA196 dfa196 = new DFA196(this);
    protected DFA199 dfa199 = new DFA199(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA262 dfa262 = new DFA262(this);
    protected DFA275 dfa275 = new DFA275(this);
    static final String DFA1_eotS =
        "\13\uffff";
    static final String DFA1_eofS =
        "\1\2\12\uffff";
    static final String DFA1_minS =
        "\2\176\2\uffff\1\0\6\uffff";
    static final String DFA1_maxS =
        "\1\176\1\u009c\2\uffff\1\0\6\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\2\2\1\uffff\5\2\1\1";
    static final String DFA1_specialS =
        "\1\2\1\0\2\uffff\1\1\6\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1",
            "\1\4\2\uffff\1\11\4\uffff\1\10\1\7\4\uffff\1\6\16\uffff\1\5"+
            "\1\3",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "217:4: ( package_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_1 = input.LA(1);

                         
                        int index1_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 3;}

                        else if ( (LA1_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 4;}

                        else if ( (LA1_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 5;}

                        else if ( (LA1_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 6;}

                        else if ( (LA1_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 7;}

                        else if ( (LA1_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 8;}

                        else if ( (LA1_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 9;}

                         
                        input.seek(index1_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_4 = input.LA(1);

                         
                        int index1_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {s = 10;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))))) ) {s = 9;}

                         
                        input.seek(index1_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA1_0 = input.LA(1);

                         
                        int index1_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))))) {s = 1;}

                        else if ( (LA1_0==EOF) ) {s = 2;}

                         
                        input.seek(index1_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\20\uffff";
    static final String DFA4_eofS =
        "\20\uffff";
    static final String DFA4_minS =
        "\2\176\1\uffff\1\0\3\uffff\1\0\10\uffff";
    static final String DFA4_maxS =
        "\1\176\1\u009c\1\uffff\1\0\3\uffff\1\0\10\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\1\1\uffff\3\1\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA4_specialS =
        "\1\0\1\1\1\uffff\1\2\3\uffff\1\3\10\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1",
            "\1\3\2\uffff\1\7\4\uffff\1\10\1\6\4\uffff\1\5\16\uffff\1\4"+
            "\1\2",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "296:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_0 = input.LA(1);

                         
                        int index4_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))))) {s = 1;}

                         
                        input.seek(index4_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 2;}

                        else if ( (LA4_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))))) {s = 3;}

                        else if ( (LA4_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 4;}

                        else if ( (LA4_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 5;}

                        else if ( (LA4_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 6;}

                        else if ( (LA4_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 7;}

                        else if ( (LA4_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 8;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 14;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 15;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 14;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 15;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\16\uffff";
    static final String DFA11_eofS =
        "\16\uffff";
    static final String DFA11_minS =
        "\2\176\1\uffff\1\176\1\uffff\2\176\2\u0099\2\176\1\u0085\1\u0099"+
        "\1\176";
    static final String DFA11_maxS =
        "\1\u0087\1\u0088\1\uffff\1\u0098\1\uffff\1\u0098\1\176\2\u0099\3"+
        "\u0098\1\u0099\1\u0098";
    static final String DFA11_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\11\uffff";
    static final String DFA11_specialS =
        "\16\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\2\10\uffff\1\1",
            "\1\3\10\uffff\1\2\1\4",
            "",
            "\1\5\1\6\2\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1"+
            "\7",
            "",
            "\2\2\2\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\4\1\6\7\uffff\1\2\20\uffff\1\14",
            "\1\4\6\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\7",
            "\1\4\1\uffff\1\2\1\4\17\uffff\1\10",
            "\1\15",
            "\1\4\10\uffff\1\2\20\uffff\1\14"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "379:3: ( parameters )?";
        }
    }
    static final String DFA15_eotS =
        "\13\uffff";
    static final String DFA15_eofS =
        "\1\uffff\1\3\11\uffff";
    static final String DFA15_minS =
        "\2\176\2\uffff\1\176\4\uffff\1\0\1\uffff";
    static final String DFA15_maxS =
        "\1\u00b8\1\u0098\2\uffff\1\u00b8\4\uffff\1\0\1\uffff";
    static final String DFA15_acceptS =
        "\2\uffff\2\2\1\uffff\4\2\1\uffff\1\1";
    static final String DFA15_specialS =
        "\1\uffff\1\0\2\uffff\1\1\4\uffff\1\2\1\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\1\71\uffff\1\2",
            "\1\4\1\5\2\uffff\2\5\3\uffff\1\5\15\uffff\1\5\2\uffff\1\5",
            "",
            "",
            "\1\11\1\12\1\uffff\1\10\3\uffff\1\12\1\10\1\7\4\uffff\1\10"+
            "\16\uffff\1\10\1\6\33\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "402:52: ( type_decl_implements )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA15_1==EOF) && (((helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {s = 3;}

                        else if ( (LA15_1==ID) ) {s = 4;}

                        else if ( (LA15_1==DOT||(LA15_1>=COLON && LA15_1<=EQUALS_ASSIGN)||LA15_1==LEFT_PAREN||LA15_1==LESS||LA15_1==LEFT_SQUARE) ) {s = 5;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA15_4==MINUS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {s = 6;}

                        else if ( (LA15_4==LEFT_PAREN) ) {s = 7;}

                        else if ( (LA15_4==STRING||LA15_4==BOOL||LA15_4==DECIMAL||LA15_4==PLUS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {s = 8;}

                        else if ( (LA15_4==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {s = 9;}

                        else if ( (LA15_4==DOT||LA15_4==COMMA||LA15_4==AT) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {s = 10;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {s = 8;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA22_eotS =
        "\13\uffff";
    static final String DFA22_eofS =
        "\13\uffff";
    static final String DFA22_minS =
        "\2\176\5\uffff\1\0\3\uffff";
    static final String DFA22_maxS =
        "\1\u00b8\1\u009c\5\uffff\1\0\3\uffff";
    static final String DFA22_acceptS =
        "\2\uffff\5\2\1\uffff\2\2\1\1";
    static final String DFA22_specialS =
        "\1\0\1\1\5\uffff\1\2\3\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\1\5\uffff\1\2\32\uffff\1\2\30\uffff\1\2",
            "\1\12\2\uffff\1\7\1\10\3\uffff\1\11\1\6\4\uffff\1\5\16\uffff"+
            "\1\4\1\3",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "475:3: ( extend_key rule_id )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA22_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 1;}

                        else if ( (LA22_0==WHEN||LA22_0==THEN||LA22_0==AT) ) {s = 2;}

                         
                        input.seek(index22_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA22_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 3;}

                        else if ( (LA22_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 4;}

                        else if ( (LA22_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 5;}

                        else if ( (LA22_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 6;}

                        else if ( (LA22_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))))) {s = 7;}

                        else if ( (LA22_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {s = 8;}

                        else if ( (LA22_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 9;}

                        else if ( (LA22_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {s = 10;}

                         
                        input.seek(index22_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_7 = input.LA(1);

                         
                        int index22_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {s = 10;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))))) ) {s = 9;}

                         
                        input.seek(index22_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\17\uffff";
    static final String DFA31_eofS =
        "\17\uffff";
    static final String DFA31_minS =
        "\1\176\1\0\15\uffff";
    static final String DFA31_maxS =
        "\1\176\1\0\15\uffff";
    static final String DFA31_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA31_specialS =
        "\1\0\1\1\15\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "545:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_0 = input.LA(1);

                         
                        int index31_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA31_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 1;}

                         
                        input.seek(index31_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {s = 2;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {s = 3;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {s = 14;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\24\uffff";
    static final String DFA52_eofS =
        "\24\uffff";
    static final String DFA52_minS =
        "\1\176\2\uffff\1\0\20\uffff";
    static final String DFA52_maxS =
        "\1\u00af\2\uffff\1\0\20\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\16\uffff\1\3";
    static final String DFA52_specialS =
        "\3\uffff\1\0\20\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\3\2\uffff\1\4\4\uffff\2\4\4\uffff\1\4\1\1\1\2\6\uffff\1\4"+
            "\2\uffff\1\4\1\uffff\5\4\15\uffff\4\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "756:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA72_eotS =
        "\17\uffff";
    static final String DFA72_eofS =
        "\17\uffff";
    static final String DFA72_minS =
        "\2\176\1\uffff\1\0\13\uffff";
    static final String DFA72_maxS =
        "\1\u0087\1\u0098\1\uffff\1\0\13\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\3\1\uffff\1\2\11\uffff\1\1";
    static final String DFA72_specialS =
        "\3\uffff\1\0\13\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\10\uffff\1\2",
            "\2\4\2\uffff\1\4\4\uffff\1\3\12\uffff\7\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "971:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_3 = input.LA(1);

                         
                        int index72_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 14;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index72_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA77_eotS =
        "\61\uffff";
    static final String DFA77_eofS =
        "\61\uffff";
    static final String DFA77_minS =
        "\2\176\7\uffff\1\176\1\4\30\uffff\13\0\3\uffff";
    static final String DFA77_maxS =
        "\1\u0097\1\u009e\7\uffff\1\u009e\1\u00c7\30\uffff\13\0\3\uffff";
    static final String DFA77_acceptS =
        "\2\uffff\1\2\5\uffff\1\3\2\uffff\1\2\10\uffff\2\2\4\uffff\1\2\23"+
        "\uffff\1\2\1\uffff\1\1";
    static final String DFA77_specialS =
        "\1\0\1\1\7\uffff\1\2\1\3\30\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\3\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\1\10\uffff\1\10\12\uffff\6\2",
            "\1\11\2\uffff\1\13\4\uffff\1\13\1\12\4\uffff\1\13\13\uffff"+
            "\1\13\1\uffff\5\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\32\1\25\1\uffff\1\32\3\uffff\1\25\1\32\1\43\1\25\3\uffff"+
            "\1\32\2\uffff\2\25\7\uffff\1\24\1\uffff\5\32",
            "\172\56\1\44\2\56\1\45\4\56\1\53\1\55\4\56\1\50\15\56\1\54"+
            "\1\46\1\47\1\51\1\52\51\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "1035:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_0 = input.LA(1);

                         
                        int index77_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 1;}

                        else if ( ((LA77_0>=EQUALS && LA77_0<=NOT_EQUALS)) ) {s = 2;}

                        else if ( (LA77_0==LEFT_PAREN) ) {s = 8;}

                         
                        input.seek(index77_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_1 = input.LA(1);

                         
                        int index77_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {s = 9;}

                        else if ( (LA77_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 10;}

                        else if ( (LA77_1==STRING||LA77_1==BOOL||LA77_1==DECIMAL||LA77_1==LEFT_SQUARE||(LA77_1>=NULL && LA77_1<=FLOAT)) && (((helper.isPluggableEvaluator(false))))) {s = 11;}

                         
                        input.seek(index77_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA77_9 = input.LA(1);

                         
                        int index77_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_9==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {s = 20;}

                        else if ( (LA77_9==DOT||LA77_9==COMMA||LA77_9==RIGHT_PAREN||(LA77_9>=DOUBLE_PIPE && LA77_9<=DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {s = 21;}

                        else if ( (LA77_9==ID||LA77_9==STRING||LA77_9==BOOL||LA77_9==DECIMAL||(LA77_9>=NULL && LA77_9<=FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 26;}

                        else if ( (LA77_9==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 35;}

                         
                        input.seek(index77_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA77_10 = input.LA(1);

                         
                        int index77_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_10==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 36;}

                        else if ( (LA77_10==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 37;}

                        else if ( (LA77_10==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 38;}

                        else if ( (LA77_10==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 39;}

                        else if ( (LA77_10==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 40;}

                        else if ( (LA77_10==HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 41;}

                        else if ( (LA77_10==FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 42;}

                        else if ( (LA77_10==BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 43;}

                        else if ( (LA77_10==NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 44;}

                        else if ( (LA77_10==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 45;}

                        else if ( ((LA77_10>=VT_COMPILATION_UNIT && LA77_10<=SEMICOLON)||(LA77_10>=DOT && LA77_10<=DOT_STAR)||(LA77_10>=COLON && LA77_10<=COMMA)||(LA77_10>=RIGHT_PAREN && LA77_10<=TimePeriod)||(LA77_10>=ACCUMULATE && LA77_10<=RIGHT_SQUARE)||(LA77_10>=THEN && LA77_10<=MISC)) && (((helper.isPluggableEvaluator(false))))) {s = 46;}

                         
                        input.seek(index77_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA77_35 = input.LA(1);

                         
                        int index77_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 48;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 46;}

                         
                        input.seek(index77_35);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA77_36 = input.LA(1);

                         
                        int index77_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_36);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA77_37 = input.LA(1);

                         
                        int index77_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_37);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA77_38 = input.LA(1);

                         
                        int index77_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_38);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA77_39 = input.LA(1);

                         
                        int index77_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_39);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA77_40 = input.LA(1);

                         
                        int index77_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_40);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA77_41 = input.LA(1);

                         
                        int index77_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_41);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA77_42 = input.LA(1);

                         
                        int index77_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_42);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA77_43 = input.LA(1);

                         
                        int index77_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_43);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA77_44 = input.LA(1);

                         
                        int index77_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA77_45 = input.LA(1);

                         
                        int index77_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 46;}

                         
                        input.seek(index77_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA81_eotS =
        "\10\uffff";
    static final String DFA81_eofS =
        "\10\uffff";
    static final String DFA81_minS =
        "\1\u0098\2\4\1\uffff\1\0\1\4\1\uffff\1\4";
    static final String DFA81_maxS =
        "\1\u0098\2\u00c7\1\uffff\1\0\1\u00c7\1\uffff\1\u00c7";
    static final String DFA81_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA81_specialS =
        "\4\uffff\1\0\3\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1",
            "\u0087\3\1\2\74\3",
            "\u0081\3\1\5\23\3\1\4\56\3",
            "",
            "\1\uffff",
            "\u0087\3\1\7\74\3",
            "",
            "\u0081\3\1\5\23\3\1\4\56\3"
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "1102:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_4 = input.LA(1);

                         
                        int index81_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_DRL()) ) {s = 6;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index81_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA105_eotS =
        "\60\uffff";
    static final String DFA105_eofS =
        "\1\2\57\uffff";
    static final String DFA105_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA105_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA105_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA105_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA105_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\1\1\1\uffff\22\2\3\uffff\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "1336:9: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA106_eotS =
        "\60\uffff";
    static final String DFA106_eofS =
        "\1\2\57\uffff";
    static final String DFA106_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA106_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA106_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA106_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA106_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\1\1\1\uffff\22\2\3\uffff\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "1336:51: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_1 = input.LA(1);

                         
                        int index106_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA118_eotS =
        "\6\uffff";
    static final String DFA118_eofS =
        "\6\uffff";
    static final String DFA118_minS =
        "\2\176\1\uffff\1\u0099\1\uffff\1\176";
    static final String DFA118_maxS =
        "\1\176\1\u0098\1\uffff\1\u0099\1\uffff\1\u0098";
    static final String DFA118_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA118_specialS =
        "\6\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\1",
            "\2\2\5\uffff\1\4\2\uffff\1\4\17\uffff\1\3",
            "",
            "\1\5",
            "",
            "\1\2\6\uffff\1\4\2\uffff\1\4\17\uffff\1\3"
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "1369:4: ( data_type )?";
        }
    }
    static final String DFA122_eotS =
        "\24\uffff";
    static final String DFA122_eofS =
        "\24\uffff";
    static final String DFA122_minS =
        "\1\175\1\0\22\uffff";
    static final String DFA122_maxS =
        "\1\u00af\1\0\22\uffff";
    static final String DFA122_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA122_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\1\uffff\1\2\13\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "1404:1: blockStatement : ( ( final_key )=> localVariableDeclaration | rhs_statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||synpred16_DRL()||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred16_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))))) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\7\uffff";
    static final String DFA123_eofS =
        "\7\uffff";
    static final String DFA123_minS =
        "\2\176\1\uffff\1\175\1\u0099\1\uffff\1\175";
    static final String DFA123_maxS =
        "\1\176\1\u0098\1\uffff\1\u0098\1\u0099\1\uffff\1\u0098";
    static final String DFA123_acceptS =
        "\2\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA123_specialS =
        "\3\uffff\1\1\2\uffff\1\0}>";
    static final String[] DFA123_transitionS = {
            "\1\1",
            "\1\3\1\2\25\uffff\1\2\2\uffff\1\2",
            "",
            "\1\2\2\5\3\uffff\1\2\1\uffff\1\2\17\uffff\1\5\2\uffff\1\4",
            "\1\6",
            "",
            "\1\2\1\5\4\uffff\1\2\1\uffff\1\2\22\uffff\1\4"
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "()* loopback of 1415:2: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_6 = input.LA(1);

                         
                        int index123_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA123_6==SEMICOLON||LA123_6==EQUALS_ASSIGN||LA123_6==COMMA) ) {s = 2;}

                        else if ( (LA123_6==LEFT_SQUARE) ) {s = 4;}

                        else if ( (LA123_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                         
                        input.seek(index123_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA123_3==LEFT_SQUARE) ) {s = 4;}

                        else if ( ((LA123_3>=ID && LA123_3<=DOT)||LA123_3==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                        else if ( (LA123_3==SEMICOLON||LA123_3==EQUALS_ASSIGN||LA123_3==COMMA) ) {s = 2;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\41\uffff";
    static final String DFA135_eofS =
        "\41\uffff";
    static final String DFA135_minS =
        "\1\175\1\uffff\1\0\36\uffff";
    static final String DFA135_maxS =
        "\1\u00af\1\uffff\1\0\36\uffff";
    static final String DFA135_acceptS =
        "\1\uffff\1\1\1\uffff\1\15\1\16\16\uffff\1\2\1\3\1\4\1\5\1\6\1\7"+
        "\1\10\1\11\1\12\1\13\1\14\1\17\1\20\1\21";
    static final String DFA135_specialS =
        "\2\uffff\1\0\36\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\3\1\2\2\uffff\1\4\4\uffff\2\4\4\uffff\1\4\10\uffff\1\4\2"+
            "\uffff\1\4\1\uffff\5\4\1\uffff\1\1\13\uffff\4\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "1446:1: rhs_statement options {backtrack=true; memoize=true; } : ( block | if_key parExpression rhs_statement ( options {k=1; } : else_key rhs_statement )? | for_key LEFT_PAREN forControl RIGHT_PAREN rhs_statement | while_key parExpression rhs_statement | do_key rhs_statement while_key parExpression SEMICOLON | try_key block ( catches finally_key block | catches | finally_key block ) | switch_key parExpression LEFT_CURLY switchBlockStatementGroups RIGHT_CURLY | synchronized_key parExpression block | return_key ( expression )? SEMICOLON | throw_key expression SEMICOLON | break_key ( ID )? SEMICOLON | continue_key ( ID )? SEMICOLON | SEMICOLON | expression SEMICOLON | ID COLON rhs_statement | modifyStatement | assert_key expression ( COLON expression )? SEMICOLON );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_2 = input.LA(1);

                         
                        int index135_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred18_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.IF))))) ) {s = 19;}

                        else if ( ((synpred19_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FOR))))) ) {s = 20;}

                        else if ( ((synpred20_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.WHILE))))) ) {s = 21;}

                        else if ( ((synpred21_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DO))))) ) {s = 22;}

                        else if ( ((synpred22_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.TRY))))) ) {s = 23;}

                        else if ( ((synpred23_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH))))) ) {s = 24;}

                        else if ( ((synpred24_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))))) ) {s = 25;}

                        else if ( ((synpred25_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.RETURN))))) ) {s = 26;}

                        else if ( ((synpred26_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.THROW))))) ) {s = 27;}

                        else if ( ((synpred27_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BREAK))))) ) {s = 28;}

                        else if ( ((synpred28_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE))))) ) {s = 29;}

                        else if ( (((synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NEW))))||synpred30_DRL()||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))||(synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))))) ) {s = 4;}

                        else if ( (synpred31_DRL()) ) {s = 30;}

                        else if ( ((synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY))))) ) {s = 31;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT)))) ) {s = 32;}

                         
                        input.seek(index135_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA129_eotS =
        "\26\uffff";
    static final String DFA129_eofS =
        "\1\2\25\uffff";
    static final String DFA129_minS =
        "\1\175\1\0\24\uffff";
    static final String DFA129_maxS =
        "\1\u00af\1\0\24\uffff";
    static final String DFA129_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA129_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\1\uffff\2\2\12\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "1449:42: ( options {k=1; } : else_key rhs_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE)))) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA139_eotS =
        "\23\uffff";
    static final String DFA139_eofS =
        "\23\uffff";
    static final String DFA139_minS =
        "\1\175\1\0\21\uffff";
    static final String DFA139_maxS =
        "\1\u00af\1\0\21\uffff";
    static final String DFA139_acceptS =
        "\2\uffff\1\2\17\uffff\1\1";
    static final String DFA139_specialS =
        "\1\uffff\1\0\21\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\15\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "1479:1: forControl options {backtrack=true; memoize=true; } : ( forVarControl | ( forInit )? SEMICOLON ( expression )? SEMICOLON ( forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_1 = input.LA(1);

                         
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||synpred33_DRL()||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))))) ) {s = 18;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\22\uffff";
    static final String DFA141_eofS =
        "\22\uffff";
    static final String DFA141_minS =
        "\1\176\1\0\20\uffff";
    static final String DFA141_maxS =
        "\1\u00af\1\0\20\uffff";
    static final String DFA141_acceptS =
        "\2\uffff\1\2\16\uffff\1\1";
    static final String DFA141_specialS =
        "\1\uffff\1\0\20\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\5\2\15\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "1485:1: forInit options {backtrack=true; memoize=true; } : ( ( variableModifier )* type variableDeclarators | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||synpred34_DRL()||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))))) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA140_eotS =
        "\7\uffff";
    static final String DFA140_eofS =
        "\7\uffff";
    static final String DFA140_minS =
        "\2\176\1\175\2\uffff\1\u0099\1\175";
    static final String DFA140_maxS =
        "\1\176\2\u0098\2\uffff\1\u0099\1\u0098";
    static final String DFA140_acceptS =
        "\3\uffff\1\2\1\1\2\uffff";
    static final String DFA140_specialS =
        "\2\uffff\1\0\3\uffff\1\1}>";
    static final String[] DFA140_transitionS = {
            "\1\1",
            "\1\2\1\3\25\uffff\1\3\2\uffff\1\3",
            "\1\3\2\4\3\uffff\1\3\1\uffff\1\3\17\uffff\1\4\2\uffff\1\5",
            "",
            "",
            "\1\6",
            "\1\3\1\4\4\uffff\1\3\1\uffff\1\3\22\uffff\1\5"
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()* loopback of 1487:4: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA140_2>=ID && LA140_2<=DOT)||LA140_2==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                        else if ( (LA140_2==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA140_2==SEMICOLON||LA140_2==EQUALS_ASSIGN||LA140_2==COMMA) ) {s = 3;}

                         
                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA140_6 = input.LA(1);

                         
                        int index140_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA140_6==SEMICOLON||LA140_6==EQUALS_ASSIGN||LA140_6==COMMA) ) {s = 3;}

                        else if ( (LA140_6==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA140_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                         
                        input.seek(index140_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\26\uffff";
    static final String DFA143_eofS =
        "\1\2\25\uffff";
    static final String DFA143_minS =
        "\1\175\1\0\24\uffff";
    static final String DFA143_maxS =
        "\1\u00af\1\0\24\uffff";
    static final String DFA143_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA143_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\2\1\1\2\uffff\1\2\4\uffff\2\2\4\uffff\1\2\10\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\5\2\1\uffff\2\2\12\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()* loopback of 1502:16: ( catchClause )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\7\uffff";
    static final String DFA144_eofS =
        "\7\uffff";
    static final String DFA144_minS =
        "\2\176\1\uffff\1\176\1\u0099\1\uffff\1\176";
    static final String DFA144_maxS =
        "\1\176\1\u0098\1\uffff\1\u0098\1\u0099\1\uffff\1\u0098";
    static final String DFA144_acceptS =
        "\2\uffff\1\2\2\uffff\1\1\1\uffff";
    static final String DFA144_specialS =
        "\3\uffff\1\1\2\uffff\1\0}>";
    static final String[] DFA144_transitionS = {
            "\1\1",
            "\1\3\1\2\25\uffff\1\2\2\uffff\1\2",
            "",
            "\2\5\10\uffff\1\2\14\uffff\1\5\2\uffff\1\4",
            "\1\6",
            "",
            "\1\5\11\uffff\1\2\17\uffff\1\4"
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 1510:4: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_6 = input.LA(1);

                         
                        int index144_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA144_6==RIGHT_PAREN) ) {s = 2;}

                        else if ( (LA144_6==LEFT_SQUARE) ) {s = 4;}

                        else if ( (LA144_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                         
                        input.seek(index144_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA144_3==LEFT_SQUARE) ) {s = 4;}

                        else if ( ((LA144_3>=ID && LA144_3<=DOT)||LA144_3==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 5;}

                        else if ( (LA144_3==RIGHT_PAREN) ) {s = 2;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\24\uffff";
    static final String DFA146_eofS =
        "\24\uffff";
    static final String DFA146_minS =
        "\1\175\1\uffff\1\0\21\uffff";
    static final String DFA146_maxS =
        "\1\u00af\1\uffff\1\0\21\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\20\uffff";
    static final String DFA146_specialS =
        "\1\0\1\uffff\1\1\21\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\3\1\2\2\uffff\1\3\4\uffff\2\3\4\uffff\1\3\10\uffff\1\3\2"+
            "\uffff\1\3\1\uffff\5\3\1\uffff\1\3\1\1\12\uffff\4\3",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "()* loopback of 1520:16: ( blockStatement )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_0==RIGHT_CURLY) ) {s = 1;}

                        else if ( (LA146_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))))) {s = 2;}

                        else if ( (LA146_0==SEMICOLON||LA146_0==STRING||(LA146_0>=BOOL && LA146_0<=LEFT_PAREN)||LA146_0==DECIMAL||LA146_0==LESS||LA146_0==LEFT_SQUARE||(LA146_0>=NULL && LA146_0<=FLOAT)||LA146_0==LEFT_CURLY||(LA146_0>=INCR && LA146_0<=NEGATION)) ) {s = 3;}

                         
                        input.seek(index146_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))))) ) {s = 3;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))))) ) {s = 1;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\17\uffff";
    static final String DFA150_eofS =
        "\1\15\16\uffff";
    static final String DFA150_minS =
        "\1\175\14\0\2\uffff";
    static final String DFA150_maxS =
        "\1\u00b7\14\0\2\uffff";
    static final String DFA150_acceptS =
        "\15\uffff\1\2\1\1";
    static final String DFA150_specialS =
        "\1\uffff\1\1\1\3\1\4\1\6\1\10\1\11\1\13\1\0\1\2\1\5\1\7\1\12\2\uffff}>";
    static final String[] DFA150_transitionS = {
            "\2\15\2\uffff\2\15\1\1\1\uffff\4\15\3\uffff\1\15\10\uffff\1"+
            "\15\2\uffff\10\15\1\uffff\1\15\4\uffff\1\12\1\14\1\13\3\uffff"+
            "\4\15\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "1553:26: ( ( assignmentOperator )=> assignmentOperator expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_8 = input.LA(1);

                         
                        int index150_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA150_9 = input.LA(1);

                         
                        int index150_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA150_2 = input.LA(1);

                         
                        int index150_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA150_3 = input.LA(1);

                         
                        int index150_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA150_10 = input.LA(1);

                         
                        int index150_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA150_4 = input.LA(1);

                         
                        int index150_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA150_11 = input.LA(1);

                         
                        int index150_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA150_5 = input.LA(1);

                         
                        int index150_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA150_6 = input.LA(1);

                         
                        int index150_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA150_12 = input.LA(1);

                         
                        int index150_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA150_7 = input.LA(1);

                         
                        int index150_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index150_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\55\uffff";
    static final String DFA158_eofS =
        "\1\2\54\uffff";
    static final String DFA158_minS =
        "\1\175\1\0\53\uffff";
    static final String DFA158_maxS =
        "\1\u00b7\1\0\53\uffff";
    static final String DFA158_acceptS =
        "\2\uffff\1\2\51\uffff\1\1";
    static final String DFA158_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\2\1\1\2\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\11\2\1\uffff\10\2\3\uffff\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "1584:30: ( instanceof_key type )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_1 = input.LA(1);

                         
                        int index158_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {s = 44;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index158_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\55\uffff";
    static final String DFA159_eofS =
        "\1\1\54\uffff";
    static final String DFA159_minS =
        "\1\175\43\uffff\1\0\10\uffff";
    static final String DFA159_maxS =
        "\1\u00b7\43\uffff\1\0\10\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA159_specialS =
        "\1\0\43\uffff\1\1\10\uffff}>";
    static final String[] DFA159_transitionS = {
            "\2\1\2\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1\uffff"+
            "\1\1\2\54\1\44\1\54\11\1\1\uffff\10\1\3\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "()* loopback of 1588:25: ( ( LESS )=> relationalOp shiftExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_0 = input.LA(1);

                         
                        int index159_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_0==EOF||(LA159_0>=SEMICOLON && LA159_0<=ID)||(LA159_0>=STRING && LA159_0<=EQUALS_ASSIGN)||(LA159_0>=COMMA && LA159_0<=RIGHT_PAREN)||LA159_0==DECIMAL||(LA159_0>=DOUBLE_PIPE && LA159_0<=DOUBLE_AMPER)||LA159_0==EQUALS||(LA159_0>=NOT_EQUALS && LA159_0<=THEN)||(LA159_0>=RIGHT_CURLY && LA159_0<=SHIFT_RIGHT)||(LA159_0>=INCR && LA159_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA159_0==LESS) ) {s = 36;}

                        else if ( ((LA159_0>=GREATER && LA159_0<=GREATER_EQUALS)||LA159_0==LESS_EQUALS) && (synpred36_DRL())) {s = 44;}

                         
                        input.seek(index159_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_36 = input.LA(1);

                         
                        int index159_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_DRL()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index159_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\56\uffff";
    static final String DFA161_eofS =
        "\1\1\55\uffff";
    static final String DFA161_minS =
        "\1\175\36\uffff\2\0\15\uffff";
    static final String DFA161_maxS =
        "\1\u00b7\36\uffff\2\0\15\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\2\53\uffff\1\1";
    static final String DFA161_specialS =
        "\37\uffff\1\0\1\1\15\uffff}>";
    static final String[] DFA161_transitionS = {
            "\2\1\2\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1\uffff"+
            "\11\1\1\37\1\40\3\1\1\uffff\10\1\3\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "()* loopback of 1607:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_31 = input.LA(1);

                         
                        int index161_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_DRL()) ) {s = 45;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index161_31);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_32 = input.LA(1);

                         
                        int index161_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_DRL()) ) {s = 45;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index161_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\16\uffff";
    static final String DFA166_eofS =
        "\16\uffff";
    static final String DFA166_minS =
        "\1\176\2\uffff\1\0\12\uffff";
    static final String DFA166_maxS =
        "\1\u00af\2\uffff\1\0\12\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\10\uffff\1\3";
    static final String DFA166_specialS =
        "\3\uffff\1\0\12\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\4\2\uffff\1\4\4\uffff\1\4\1\3\4\uffff\1\4\10\uffff\1\4\2"+
            "\uffff\1\4\1\uffff\1\4\2\uffff\2\4\17\uffff\1\1\1\2",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "1622:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_3 = input.LA(1);

                         
                        int index166_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_DRL()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index166_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\57\uffff";
    static final String DFA164_eofS =
        "\1\1\56\uffff";
    static final String DFA164_minS =
        "\1\175\54\uffff\1\0\1\uffff";
    static final String DFA164_maxS =
        "\1\u00b7\54\uffff\1\0\1\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA164_specialS =
        "\1\0\54\uffff\1\1\1\uffff}>";
    static final String[] DFA164_transitionS = {
            "\2\1\1\56\1\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\6\1\1\55\7\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "()* loopback of 1627:17: ( ( selector )=> selector )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_0 = input.LA(1);

                         
                        int index164_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA164_0==EOF||(LA164_0>=SEMICOLON && LA164_0<=ID)||(LA164_0>=STRING && LA164_0<=EQUALS_ASSIGN)||(LA164_0>=COMMA && LA164_0<=RIGHT_PAREN)||LA164_0==DECIMAL||(LA164_0>=DOUBLE_PIPE && LA164_0<=DOUBLE_AMPER)||(LA164_0>=EQUALS && LA164_0<=NOT_EQUALS)||(LA164_0>=RIGHT_SQUARE && LA164_0<=THEN)||(LA164_0>=RIGHT_CURLY && LA164_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA164_0==LEFT_SQUARE) ) {s = 45;}

                        else if ( (LA164_0==DOT) && (synpred41_DRL())) {s = 46;}

                         
                        input.seek(index164_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA164_45 = input.LA(1);

                         
                        int index164_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\57\uffff";
    static final String DFA165_eofS =
        "\1\2\56\uffff";
    static final String DFA165_minS =
        "\1\175\1\0\41\uffff\1\0\13\uffff";
    static final String DFA165_maxS =
        "\1\u00b7\1\0\41\uffff\1\0\13\uffff";
    static final String DFA165_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA165_specialS =
        "\1\uffff\1\0\41\uffff\1\1\13\uffff}>";
    static final String[] DFA165_transitionS = {
            "\2\2\2\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\16\2\1\uffff\13\2\1\1\1\43\12\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "1627:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_1 = input.LA(1);

                         
                        int index165_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA165_35 = input.LA(1);

                         
                        int index165_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\12\uffff";
    static final String DFA168_eofS =
        "\12\uffff";
    static final String DFA168_minS =
        "\1\176\1\0\10\uffff";
    static final String DFA168_maxS =
        "\1\176\1\0\10\uffff";
    static final String DFA168_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA168_specialS =
        "\1\0\1\1\10\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "1637:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_0 = input.LA(1);

                         
                        int index168_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA168_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {s = 1;}

                         
                        input.seek(index168_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA168_1 = input.LA(1);

                         
                        int index168_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred45_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) ) {s = 2;}

                        else if ( ((synpred46_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {s = 3;}

                        else if ( ((synpred47_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))) ) {s = 4;}

                        else if ( ((synpred48_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))) ) {s = 5;}

                        else if ( ((synpred49_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) ) {s = 6;}

                        else if ( ((synpred50_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))) ) {s = 7;}

                        else if ( ((synpred51_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {s = 9;}

                         
                        input.seek(index168_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA173_eotS =
        "\21\uffff";
    static final String DFA173_eofS =
        "\21\uffff";
    static final String DFA173_minS =
        "\1\176\10\uffff\2\0\6\uffff";
    static final String DFA173_maxS =
        "\1\u009e\10\uffff\2\0\6\uffff";
    static final String DFA173_acceptS =
        "\1\uffff\1\1\1\2\6\3\2\uffff\1\4\1\5\1\6\1\11\1\7\1\10";
    static final String DFA173_specialS =
        "\1\0\10\uffff\1\1\1\2\6\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\11\2\uffff\1\3\4\uffff\1\7\1\1\4\uffff\1\4\10\uffff\1\2\2"+
            "\uffff\1\12\1\uffff\1\10\2\uffff\1\5\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "1649:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA173_0 = input.LA(1);

                         
                        int index173_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA173_0==LEFT_PAREN) && (synpred52_DRL())) {s = 1;}

                        else if ( (LA173_0==LESS) && (synpred53_DRL())) {s = 2;}

                        else if ( (LA173_0==STRING) && (synpred54_DRL())) {s = 3;}

                        else if ( (LA173_0==DECIMAL) && (synpred54_DRL())) {s = 4;}

                        else if ( (LA173_0==HEX) && (synpred54_DRL())) {s = 5;}

                        else if ( (LA173_0==FLOAT) && (synpred54_DRL())) {s = 6;}

                        else if ( (LA173_0==BOOL) && (synpred54_DRL())) {s = 7;}

                        else if ( (LA173_0==NULL) && (synpred54_DRL())) {s = 8;}

                        else if ( (LA173_0==ID) ) {s = 9;}

                        else if ( (LA173_0==LEFT_SQUARE) ) {s = 10;}

                         
                        input.seek(index173_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA173_9 = input.LA(1);

                         
                        int index173_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred55_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) ) {s = 11;}

                        else if ( ((synpred56_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NEW))))) ) {s = 12;}

                        else if ( (((synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred57_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))))) ) {s = 13;}

                        else if ( (synpred60_DRL()) ) {s = 14;}

                         
                        input.seek(index173_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA173_10 = input.LA(1);

                         
                        int index173_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_DRL()) ) {s = 15;}

                        else if ( (synpred59_DRL()) ) {s = 16;}

                         
                        input.seek(index173_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA172_eotS =
        "\60\uffff";
    static final String DFA172_eofS =
        "\1\3\57\uffff";
    static final String DFA172_minS =
        "\1\175\2\0\55\uffff";
    static final String DFA172_maxS =
        "\1\u00b7\2\0\55\uffff";
    static final String DFA172_acceptS =
        "\3\uffff\1\2\53\uffff\1\1";
    static final String DFA172_specialS =
        "\1\uffff\1\0\1\1\55\uffff}>";
    static final String[] DFA172_transitionS = {
            "\3\3\1\uffff\3\3\1\uffff\2\3\1\2\1\3\3\uffff\1\3\2\uffff\2\3"+
            "\1\uffff\6\3\1\1\7\3\1\uffff\27\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "1661:38: ( ( identifierSuffix )=> identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_1 = input.LA(1);

                         
                        int index172_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index172_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA172_2 = input.LA(1);

                         
                        int index172_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index172_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA178_eotS =
        "\60\uffff";
    static final String DFA178_eofS =
        "\1\1\57\uffff";
    static final String DFA178_minS =
        "\1\175\54\uffff\1\0\2\uffff";
    static final String DFA178_maxS =
        "\1\u00b7\54\uffff\1\0\2\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\2\55\uffff\1\1";
    static final String DFA178_specialS =
        "\55\uffff\1\0\2\uffff}>";
    static final String[] DFA178_transitionS = {
            "\3\1\1\uffff\3\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1\uffff"+
            "\6\1\1\55\7\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1687:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA178_45 = input.LA(1);

                         
                        int index178_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA187_eotS =
        "\60\uffff";
    static final String DFA187_eofS =
        "\1\2\57\uffff";
    static final String DFA187_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA187_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA187_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA187_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA187_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\6\2\1\1\7\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
    static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
    static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
    static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
    static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
    static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
    static final short[][] DFA187_transition;

    static {
        int numStates = DFA187_transitionS.length;
        DFA187_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = DFA187_eot;
            this.eof = DFA187_eof;
            this.min = DFA187_min;
            this.max = DFA187_max;
            this.accept = DFA187_accept;
            this.special = DFA187_special;
            this.transition = DFA187_transition;
        }
        public String getDescription() {
            return "()* loopback of 1714:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_1 = input.LA(1);

                         
                        int index187_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!helper.validateLT(2,"]"))) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index187_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA196_eotS =
        "\60\uffff";
    static final String DFA196_eofS =
        "\1\2\57\uffff";
    static final String DFA196_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA196_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA196_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA196_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA196_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2\2\uffff\2\2"+
            "\1\uffff\16\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
    static final short[][] DFA196_transition;

    static {
        int numStates = DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
        }
    }

    class DFA196 extends DFA {

        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "1746:13: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA196_1 = input.LA(1);

                         
                        int index196_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index196_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA199_eotS =
        "\60\uffff";
    static final String DFA199_eofS =
        "\1\2\57\uffff";
    static final String DFA199_minS =
        "\1\175\1\0\56\uffff";
    static final String DFA199_maxS =
        "\1\u00b7\1\0\56\uffff";
    static final String DFA199_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA199_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA199_transitionS = {
            "\3\2\1\uffff\3\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2\2\uffff\2\2"+
            "\1\uffff\16\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "1755:14: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA199_1 = input.LA(1);

                         
                        int index199_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index199_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 199, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA203_eotS =
        "\15\uffff";
    static final String DFA203_eofS =
        "\15\uffff";
    static final String DFA203_minS =
        "\1\u0083\14\uffff";
    static final String DFA203_maxS =
        "\1\u00b7\14\uffff";
    static final String DFA203_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA203_specialS =
        "\15\uffff}>";
    static final String[] DFA203_transitionS = {
            "\1\1\42\uffff\1\12\1\14\1\13\7\uffff\1\2\1\3\1\4\1\5\1\6\1\7"+
            "\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "1768:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );";
        }
    }
    static final String DFA211_eotS =
        "\16\uffff";
    static final String DFA211_eofS =
        "\16\uffff";
    static final String DFA211_minS =
        "\1\176\1\uffff\1\0\13\uffff";
    static final String DFA211_maxS =
        "\1\u00b8\1\uffff\1\0\13\uffff";
    static final String DFA211_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14";
    static final String DFA211_specialS =
        "\1\0\1\uffff\1\1\13\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\2\71\uffff\1\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "1826:1: modifier : ( annotation | public_key | protected_key | private_key | static_key | abstract_key | final_key | native_key | synchronized_key | transient_key | volatile_key | strictfp_key );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA211_0 = input.LA(1);

                         
                        int index211_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA211_0==AT) ) {s = 1;}

                        else if ( (LA211_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 2;}

                         
                        input.seek(index211_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA211_2 = input.LA(1);

                         
                        int index211_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))) ) {s = 3;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))) ) {s = 4;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))) ) {s = 13;}

                         
                        input.seek(index211_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 211, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA262_eotS =
        "\56\uffff";
    static final String DFA262_eofS =
        "\56\uffff";
    static final String DFA262_minS =
        "\3\176\1\uffff\1\175\1\uffff\1\176\1\175\1\176\2\uffff\1\u0099\2"+
        "\uffff\1\176\1\uffff\1\0\6\uffff\1\176\1\uffff\1\175\2\uffff\2\176"+
        "\5\uffff\1\176\2\uffff\1\175\7\uffff";
    static final String DFA262_maxS =
        "\2\u00b8\1\176\1\uffff\1\u00b8\1\uffff\2\u00b8\1\u00a2\2\uffff\1"+
        "\u0099\2\uffff\1\u00b8\1\uffff\1\0\6\uffff\1\u0098\1\uffff\1\u0098"+
        "\2\uffff\1\u00a2\1\u00a0\5\uffff\1\u0098\2\uffff\1\u0098\7\uffff";
    static final String DFA262_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\3\uffff\1\2\1\1\1\uffff\1\2\1\1\1\uffff"+
        "\1\1\1\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\2\2\uffff\4\1\1\2\1\uffff"+
        "\2\1\1\uffff\1\2\1\1\1\2\3\1\1\2";
    static final String DFA262_specialS =
        "\1\uffff\1\1\2\uffff\1\7\2\uffff\1\4\1\12\7\uffff\1\0\6\uffff\1"+
        "\10\1\uffff\1\6\2\uffff\1\3\1\5\5\uffff\1\2\2\uffff\1\11\7\uffff}>";
    static final String[] DFA262_transitionS = {
            "\1\1\71\uffff\1\2",
            "\1\4\1\3\25\uffff\1\3\2\uffff\1\3\37\uffff\1\5",
            "\1\6",
            "",
            "\1\14\1\7\1\12\3\uffff\1\14\1\uffff\1\14\1\uffff\1\3\15\uffff"+
            "\1\10\2\uffff\1\13\7\uffff\1\11\27\uffff\1\5",
            "",
            "\1\16\1\15\7\uffff\1\15\60\uffff\1\15",
            "\1\26\1\20\1\12\3\uffff\1\24\1\uffff\1\25\1\uffff\1\17\15\uffff"+
            "\1\21\2\uffff\1\23\7\uffff\1\22\27\uffff\1\5",
            "\1\27\43\uffff\1\30",
            "",
            "",
            "\1\31",
            "",
            "",
            "\2\32\25\uffff\1\32\2\uffff\1\32\7\uffff\1\14\27\uffff\1\32",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\33\1\40\5\uffff\1\34\15\uffff\1\35\1\uffff\1\37\2\uffff"+
            "\1\36",
            "",
            "\1\42\1\41\4\uffff\1\42\1\uffff\1\42\22\uffff\1\13",
            "",
            "",
            "\1\43\43\uffff\1\44",
            "\1\46\1\12\30\uffff\1\45\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "\1\51\1\53\5\uffff\1\34\15\uffff\1\35\1\uffff\1\52\2\uffff"+
            "\1\50",
            "",
            "",
            "\1\26\1\55\4\uffff\1\24\1\uffff\1\25\1\uffff\1\17\20\uffff"+
            "\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA262_eot = DFA.unpackEncodedString(DFA262_eotS);
    static final short[] DFA262_eof = DFA.unpackEncodedString(DFA262_eofS);
    static final char[] DFA262_min = DFA.unpackEncodedStringToUnsignedChars(DFA262_minS);
    static final char[] DFA262_max = DFA.unpackEncodedStringToUnsignedChars(DFA262_maxS);
    static final short[] DFA262_accept = DFA.unpackEncodedString(DFA262_acceptS);
    static final short[] DFA262_special = DFA.unpackEncodedString(DFA262_specialS);
    static final short[][] DFA262_transition;

    static {
        int numStates = DFA262_transitionS.length;
        DFA262_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA262_transition[i] = DFA.unpackEncodedString(DFA262_transitionS[i]);
        }
    }

    class DFA262 extends DFA {

        public DFA262(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 262;
            this.eot = DFA262_eot;
            this.eof = DFA262_eof;
            this.min = DFA262_min;
            this.max = DFA262_max;
            this.accept = DFA262_accept;
            this.special = DFA262_special;
            this.transition = DFA262_transition;
        }
        public String getDescription() {
            return "()* loopback of 2085:4: ( modifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA262_16 = input.LA(1);

                         
                        int index262_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))))) ) {s = 26;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))))) ) {s = 12;}

                         
                        input.seek(index262_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA262_1 = input.LA(1);

                         
                        int index262_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_1==DOT||LA262_1==LESS||LA262_1==LEFT_SQUARE) ) {s = 3;}

                        else if ( (LA262_1==ID) ) {s = 4;}

                        else if ( (LA262_1==AT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 5;}

                         
                        input.seek(index262_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA262_35 = input.LA(1);

                         
                        int index262_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_35==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 40;}

                        else if ( (LA262_35==GREATER) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 29;}

                        else if ( (LA262_35==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 28;}

                        else if ( (LA262_35==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))))) {s = 41;}

                        else if ( (LA262_35==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 42;}

                        else if ( (LA262_35==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 43;}

                         
                        input.seek(index262_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA262_28 = input.LA(1);

                         
                        int index262_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_28==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 35;}

                        else if ( (LA262_28==QUESTION) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 36;}

                         
                        input.seek(index262_28);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA262_7 = input.LA(1);

                         
                        int index262_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_7==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 15;}

                        else if ( (LA262_7==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))))) {s = 16;}

                        else if ( (LA262_7==AT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 5;}

                        else if ( (LA262_7==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 17;}

                        else if ( (LA262_7==LEFT_CURLY) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 18;}

                        else if ( (LA262_7==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 10;}

                        else if ( (LA262_7==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 19;}

                        else if ( (LA262_7==EQUALS_ASSIGN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 20;}

                        else if ( (LA262_7==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 21;}

                        else if ( (LA262_7==SEMICOLON) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 22;}

                         
                        input.seek(index262_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA262_29 = input.LA(1);

                         
                        int index262_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_29==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 10;}

                        else if ( (LA262_29==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 37;}

                        else if ( (LA262_29==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 38;}

                        else if ( (LA262_29==LEFT_CURLY) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))))) {s = 39;}

                         
                        input.seek(index262_29);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA262_25 = input.LA(1);

                         
                        int index262_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_25==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 33;}

                        else if ( (LA262_25==LEFT_SQUARE) ) {s = 11;}

                        else if ( (LA262_25==SEMICOLON||LA262_25==EQUALS_ASSIGN||LA262_25==COMMA) ) {s = 34;}

                         
                        input.seek(index262_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA262_4 = input.LA(1);

                         
                        int index262_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_4==LEFT_PAREN) ) {s = 3;}

                        else if ( (LA262_4==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))))) {s = 7;}

                        else if ( (LA262_4==AT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 5;}

                        else if ( (LA262_4==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 8;}

                        else if ( (LA262_4==LEFT_CURLY) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))))) {s = 9;}

                        else if ( (LA262_4==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 10;}

                        else if ( (LA262_4==LEFT_SQUARE) ) {s = 11;}

                        else if ( (LA262_4==SEMICOLON||LA262_4==EQUALS_ASSIGN||LA262_4==COMMA) ) {s = 12;}

                         
                        input.seek(index262_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA262_23 = input.LA(1);

                         
                        int index262_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_23==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))))) {s = 27;}

                        else if ( (LA262_23==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 28;}

                        else if ( (LA262_23==GREATER) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 29;}

                        else if ( (LA262_23==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 30;}

                        else if ( (LA262_23==LESS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 31;}

                        else if ( (LA262_23==DOT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 32;}

                         
                        input.seek(index262_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA262_38 = input.LA(1);

                         
                        int index262_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_38==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 15;}

                        else if ( (LA262_38==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 44;}

                        else if ( (LA262_38==EQUALS_ASSIGN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 20;}

                        else if ( (LA262_38==COMMA) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 21;}

                        else if ( (LA262_38==SEMICOLON) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 22;}

                        else if ( (LA262_38==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))))) {s = 45;}

                         
                        input.seek(index262_38);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA262_8 = input.LA(1);

                         
                        int index262_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_8==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))))) {s = 23;}

                        else if ( (LA262_8==QUESTION) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))))) {s = 24;}

                         
                        input.seek(index262_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 262, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA275_eotS =
        "\7\uffff";
    static final String DFA275_eofS =
        "\2\uffff\1\3\3\uffff\1\3";
    static final String DFA275_minS =
        "\3\176\2\uffff\1\u0099\1\176";
    static final String DFA275_maxS =
        "\1\176\2\u0098\2\uffff\1\u0099\1\u0098";
    static final String DFA275_acceptS =
        "\3\uffff\1\2\1\1\2\uffff";
    static final String DFA275_specialS =
        "\2\uffff\1\1\3\uffff\1\0}>";
    static final String[] DFA275_transitionS = {
            "\1\1",
            "\1\2\1\3\25\uffff\1\3\2\uffff\1\3",
            "\2\4\3\uffff\1\3\1\uffff\1\3\17\uffff\1\4\2\uffff\1\5",
            "",
            "",
            "\1\6",
            "\1\4\4\uffff\1\3\1\uffff\1\3\22\uffff\1\5"
    };

    static final short[] DFA275_eot = DFA.unpackEncodedString(DFA275_eotS);
    static final short[] DFA275_eof = DFA.unpackEncodedString(DFA275_eofS);
    static final char[] DFA275_min = DFA.unpackEncodedStringToUnsignedChars(DFA275_minS);
    static final char[] DFA275_max = DFA.unpackEncodedStringToUnsignedChars(DFA275_maxS);
    static final short[] DFA275_accept = DFA.unpackEncodedString(DFA275_acceptS);
    static final short[] DFA275_special = DFA.unpackEncodedString(DFA275_specialS);
    static final short[][] DFA275_transition;

    static {
        int numStates = DFA275_transitionS.length;
        DFA275_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA275_transition[i] = DFA.unpackEncodedString(DFA275_transitionS[i]);
        }
    }

    class DFA275 extends DFA {

        public DFA275(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 275;
            this.eot = DFA275_eot;
            this.eof = DFA275_eof;
            this.min = DFA275_min;
            this.max = DFA275_max;
            this.accept = DFA275_accept;
            this.special = DFA275_special;
            this.transition = DFA275_transition;
        }
        public String getDescription() {
            return "()* loopback of 1487:4: ( variableModifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA275_6 = input.LA(1);

                         
                        int index275_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA275_6==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                        else if ( (LA275_6==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA275_6==EOF||LA275_6==EQUALS_ASSIGN||LA275_6==COMMA) ) {s = 3;}

                         
                        input.seek(index275_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA275_2 = input.LA(1);

                         
                        int index275_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA275_2>=ID && LA275_2<=DOT)||LA275_2==LESS) && (((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))))) {s = 4;}

                        else if ( (LA275_2==LEFT_SQUARE) ) {s = 5;}

                        else if ( (LA275_2==EOF||LA275_2==EQUALS_ASSIGN||LA275_2==COMMA) ) {s = 3;}

                         
                        input.seek(index275_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 275, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_package_statement_in_compilation_unit630 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_resync_in_compilation_unit649 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_statement_in_compilation_unit656 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_resync_in_compilation_unit658 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_key_in_package_statement759 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_packageOrTypeName_in_package_statement763 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_statement765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_attribute_in_statement805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_import_statement_in_statement810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_in_statement829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_statement835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_statement840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_statement845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_in_statement850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_import_statement876 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_import_name_in_import_statement878 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_import_statement881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_function_import_statement921 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_function_key_in_function_import_statement923 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_import_name_in_function_import_statement935 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_import_statement938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_name972 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DOT_in_import_name978 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_import_name982 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DOT_STAR_in_import_name989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_key_in_global1032 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_data_type_in_global1034 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_global_id_in_global1036 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_global1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_id1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_function1102 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_data_type_in_function1104 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_function_id_in_function1107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parameters_in_function1109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_curly_chunk_in_function1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_id1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_key_in_query1176 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_query_id_in_query1178 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parameters_in_query1186 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_normal_lhs_block_in_query1195 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_end_key_in_query1202 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_query1204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_id1239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_query_id1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_type_declaration1288 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_declare_id_in_type_declaration1291 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_type_decl_extends_in_type_declaration1293 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_type_decl_implements_in_type_declaration1296 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_decl_metadata_in_type_declaration1301 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_decl_field_in_type_declaration1306 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_decl_method_in_type_declaration1311 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_end_key_in_type_declaration1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_declare_id1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extends_key_in_type_decl_extends1377 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeName_in_type_decl_extends1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_key_in_type_decl_implements1392 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_type_decl_implements1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_decl_metadata1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_decl_field1430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_decl_field_initialization_in_decl_field1436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_decl_field1442 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_data_type_in_decl_field1448 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_decl_metadata_in_decl_field1452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_field_initialization1486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_decl_method1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_decl_method1525 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_decl_method1527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_decl_method1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_decl_method1534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_decl_method1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_key_in_rule1563 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_rule_id_in_rule1581 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_extend_key_in_rule1590 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_rule_id_in_rule1592 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_decl_metadata_in_rule1596 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_rule_attributes_in_rule1599 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_when_part_in_rule1602 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000080000010L});
    public static final BitSet FOLLOW_rhs_chunk_in_rule1605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_when_part1649 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_COLON_in_when_part1655 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_normal_lhs_block_in_when_part1665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_id1686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_rule_id1702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_key_in_rule_attributes1723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_rule_attributes1725 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1735 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_rule_attributes1739 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1746 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_salience_in_rule_attribute1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_in_rule_attribute1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_in_rule_attribute1796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timer_in_rule_attribute1803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_in_rule_attribute1810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_in_rule_attribute1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_in_rule_attribute1822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_in_rule_attribute1828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_in_rule_attribute1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_in_rule_attribute1840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_in_rule_attribute1846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_in_rule_attribute1851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_in_rule_attribute1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_key_in_date_effective1873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_date_effective1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_key_in_date_expires1892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_date_expires1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_key_in_enabled1912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_BOOL_in_enabled1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_enabled1936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_salience_key_in_salience1956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018001080L});
    public static final BitSet FOLLOW_signed_decimal_in_salience1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_salience1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_key_in_no_loop1987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BOOL_in_no_loop1992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_key_in_auto_focus2007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BOOL_in_auto_focus2012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_key_in_activation_group2029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_activation_group2034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_key_in_ruleflow_group2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_ruleflow_group2053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_key_in_agenda_group2067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_agenda_group2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_key_in_timer2087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018001080L});
    public static final BitSet FOLLOW_timer_key_in_timer2090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018001080L});
    public static final BitSet FOLLOW_signed_decimal_in_timer2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_timer2112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_key_in_calendars2133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_string_list_in_calendars2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_key_in_dialect2149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_dialect2154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_key_in_lock_on_active2172 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BOOL_in_lock_on_active2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_in_normal_lhs_block2195 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs2216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_or2240 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2250 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2258 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_or2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2287 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2307 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2319 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_and2360 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2370 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2378 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_and2384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2408 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2428 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2440 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_lhs_exist_in_lhs_unary2471 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_not_binding_in_lhs_unary2479 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_not_in_lhs_unary2485 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_eval_in_lhs_unary2491 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_lhs_forall_in_lhs_unary2497 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_unary2503 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_unary2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_unary2520 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_unary2528 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_unary2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exists_key_in_lhs_exist2558 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_exist2592 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_exist2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_exist2622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not_binding2668 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_not_binding2670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not2693 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_not2722 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_not2737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_not2747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eval_key_in_lhs_eval2786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_lhs_eval2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_key_in_lhs_forall2822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_forall2827 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_forall2835 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_forall2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_pattern_source2877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_over_clause_in_pattern_source2881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_FROM_in_pattern_source2891 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_accumulate_statement_in_pattern_source2911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_statement_in_pattern_source2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entrypoint_statement_in_pattern_source2944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_source_in_pattern_source2960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVER_in_over_clause2992 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_over_elements_in_over_clause2997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_over_clause3004 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_over_elements_in_over_clause3009 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ID_in_over_elements3024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_over_elements3031 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_over_elements3040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_over_elements3047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_TimePeriod_in_over_elements3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DECIMAL_in_over_elements3068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_over_elements3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ACCUMULATE_in_accumulate_statement3105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_statement3114 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_lhs_or_in_accumulate_statement3122 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_statement3127 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_accumulate_init_clause_in_accumulate_statement3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_accumulate_id_clause_in_accumulate_statement3143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_statement3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_key_in_accumulate_init_clause3197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3207 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3212 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_action_key_in_accumulate_init_clause3223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3227 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3232 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_reverse_key_in_accumulate_init_clause3244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3248 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3253 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_result_key_in_accumulate_init_clause3269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3357 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_accumulate_paren_chunk_data3369 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3385 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_accumulate_id_clause3412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_accumulate_id_clause3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_in_collect_statement3440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_collect_statement3449 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_pattern_source_in_collect_statement3456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_collect_statement3461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entry_point_key_in_entrypoint_statement3488 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_entrypoint_id_in_entrypoint_statement3496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entrypoint_id3522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_entrypoint_id3539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_source3576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_pattern3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_lhs_pattern3620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_fact_binding3640 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fact_in_fact_binding3646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact_binding3653 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fact_binding_expression_in_fact_binding3661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact_binding3669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3710 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_or_key_in_fact_binding_expression3722 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3728 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3733 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_pattern_type_in_fact3773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact3778 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_constraints_in_fact3789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_constraints3827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_constraints3831 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constraint_in_constraints3838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_or_constr_in_constraint3852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_constr3867 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr3889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_constr3893 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr3900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_eval_key_in_unary_constr3933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_unary_constr3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_constraint_in_unary_constr3941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_constr3947 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_or_constr_in_unary_constr3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_constr3962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_field_constraint3982 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint3984 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000FE0080L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint3991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROW_in_field_constraint3997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_paren_chunk_in_field_constraint4001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint4055 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint4057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_label4082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_label4089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_restr_connective4116 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_restr_connective4151 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_compound_operator_in_constraint_expression4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_operator_in_constraint_expression4193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_constraint_expression4198 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0080L});
    public static final BitSet FOLLOW_or_restr_connective_in_constraint_expression4207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_constraint_expression4212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_simple_operator4247 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_GREATER_in_simple_operator4255 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_GREATER_EQUALS_in_simple_operator4263 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_LESS_in_simple_operator4271 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_LESS_EQUALS_in_simple_operator4279 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_NOT_EQUALS_in_simple_operator4287 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_not_key_in_simple_operator4295 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000FC0000L});
    public static final BitSet FOLLOW_operator_key_in_simple_operator4302 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007D0010C2L});
    public static final BitSet FOLLOW_operator_params_in_simple_operator4306 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_expression_value_in_simple_operator4319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_operator_params4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_in_operator_params4350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_operator_args4361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_COMMA_in_operator_args4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_operator_args4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TimePeriod_in_operator_arg4387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_not_key_in_compound_operator4415 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_compound_operator4428 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_COMMA_in_compound_operator4440 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x000000007C0010C2L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_compound_operator4453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_expression_value4474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_literal_in_expression_value4479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_expression_value4485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_signed_literal4517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_in_signed_literal4554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_in_signed_literal4572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_in_signed_literal4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_signed_literal4608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_signed_literal4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_match_in_signed_decimal4701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_decimal_match4738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_MINUS_in_signed_decimal_match4744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DECIMAL_in_signed_decimal_match4766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_match_in_signed_hex4801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_hex_match4838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_hex_match4844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_HEX_in_signed_hex_match4866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_match_in_signed_float4901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_float_match4938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_float_match4944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_FLOAT_in_signed_float_match4966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_pattern_type4987 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_pattern_type4993 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_pattern_type4997 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_dimension_definition_in_pattern_type5012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ID_in_data_type5040 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_data_type5046 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_data_type5050 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_dimension_definition_in_data_type5055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_dimension_definition5084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_dimension_definition5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5105 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_accessor_path5109 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5113 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_ID_in_accessor_element5137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_square_chunk_in_accessor_element5143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_rhs_chunk_data_in_rhs_chunk5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_rhs_chunk_data5194 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_not_end_key_in_rhs_chunk_data5203 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_end_key_in_rhs_chunk_data5209 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_chunk_data5214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_chunk_data5256 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_curly_chunk_data5268 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk_data5284 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_chunk_data5295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk5316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_chunk_data5340 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_paren_chunk_data5352 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk_data5368 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_paren_chunk_data5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk5400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_square_chunk_data5423 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_set_in_square_chunk_data5435 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk_data5450 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_square_chunk_data5461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_literal5479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_literal5502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_in_literal5511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_literal5524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_literal5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_typeList5594 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_typeList5596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_typeNameList5613 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_primitiveType_in_type5656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ID_in_type5679 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001200000L});
    public static final BitSet FOLLOW_typeArguments_in_type5686 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_type5691 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_type5693 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001200000L});
    public static final BitSet FOLLOW_typeArguments_in_type5700 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ID_in_typeName5734 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_typeName5737 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_typeName5739 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5767 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_packageOrTypeName5773 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5777 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_LESS_in_typeArguments5805 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments5810 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_GREATER_in_typeArguments5816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument5828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_typeArgument5833 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_extends_key_in_typeArgument5837 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_super_key_in_typeArgument5841 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_typeArgument5844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parameters5857 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_param_definition_in_parameters5866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_COMMA_in_parameters5869 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_param_definition_in_parameters5873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parameters5882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_data_type_in_param_definition5908 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_argument_in_param_definition5911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_argument5922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_dimension_definition_in_argument5928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STRING_in_string_list5947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_string_list5956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_string_list5960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_block6000 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0037D2070C2L});
    public static final BitSet FOLLOW_blockStatement_in_block6002 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0037D2070C2L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_block6005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement6022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rhs_statement_in_blockStatement6032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration6051 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration6056 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration6058 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_localVariableDeclaration6060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_variableModifier6072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_variableDeclaratorId6084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_variableDeclaratorId6087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_variableDeclaratorId6089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators6102 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclarators6105 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators6107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ID_in_variableDeclarator6122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000008L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator6126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_variableDeclaratorRest6140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_variableDeclaratorRest6142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6147 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest6149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_variableDeclaratorRest6156 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest6158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_rhs_statement6200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_key_in_rhs_statement6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6214 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6216 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_else_key_in_rhs_statement6227 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_rhs_statement6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_rhs_statement6241 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_forControl_in_rhs_statement6243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_rhs_statement6245 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_key_in_rhs_statement6255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6257 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_key_in_rhs_statement6267 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6269 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_while_key_in_rhs_statement6271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6273 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_key_in_rhs_statement6283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6285 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_catches_in_rhs_statement6295 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_finally_key_in_rhs_statement6297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_rhs_statement6309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finally_key_in_rhs_statement6319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_key_in_rhs_statement6337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_rhs_statement6341 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_rhs_statement6343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_rhs_statement6345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_key_in_rhs_statement6353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_rhs_statement6355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_rhs_statement6357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_key_in_rhs_statement6365 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6367 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_key_in_rhs_statement6378 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6380 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_key_in_rhs_statement6390 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_rhs_statement6392 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_key_in_rhs_statement6403 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_rhs_statement6405 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6423 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rhs_statement6437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_rhs_statement6439 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_rhs_statement6441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifyStatement_in_rhs_statement6459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_key_in_rhs_statement6475 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6477 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_rhs_statement6480 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_rhs_statement6482 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_statement6486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_forControl6520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl6525 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_forControl6528 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_forControl6530 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_forControl6533 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_forUpdate_in_forControl6535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit6565 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_forInit6568 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit6570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit6575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl6586 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_forVarControl6589 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_forVarControl6591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_forVarControl6593 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_forVarControl6595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate6606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches6619 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches6622 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_catch_key_in_catchClause6636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_catchClause6638 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause6640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_catchClause6642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_catchClause6644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter6655 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_formalParameter6658 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter6660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6674 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup6688 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup6690 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_case_key_in_switchLabel6704 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_switchLabel6706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_key_in_switchLabel6714 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_switchLabel6716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_switchLabel6723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_key_in_modifyStatement6747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_modifyStatement6749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_modifyStatement6753 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0027D2070C2L});
    public static final BitSet FOLLOW_expression_in_modifyStatement6761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_modifyStatement6764 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_modifyStatement6768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_modifyStatement6777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression6814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00FF01C000000008L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression6823 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_expression6825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression6851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression6855 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression6859 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6883 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6885 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression6908 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6929 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_PIPE_in_inclusiveOrExpression6933 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6935 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression6954 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression6958 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression6960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression6979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_AMPER_in_andExpression6983 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression6985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000840000L});
    public static final BitSet FOLLOW_set_in_equalityExpression7008 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000840000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression7037 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_instanceof_key_in_instanceOfExpression7040 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression7042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000780000L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression7069 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000780000L});
    public static final BitSet FOLLOW_set_in_relationalOp7104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7133 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000001C000000000L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression7137 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000001C000000000L});
    public static final BitSet FOLLOW_set_in_shiftOp7153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression7180 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_set_in_additiveExpression7191 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression7199 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression7218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression7222 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression7236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression7256 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression7258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7266 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression7268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCR_in_unaryExpression7278 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_primary_in_unaryExpression7280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECR_in_unaryExpression7290 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_primary_in_unaryExpression7292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression7302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unaryExpressionNotPlusMinus7335 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus7346 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus7348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus7368 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000300001000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus7375 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000300001000000L});
    public static final BitSet FOLLOW_set_in_unaryExpressionNotPlusMinus7387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression7437 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression7439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression7441 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression7443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression7460 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_castExpression7462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression7464 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression7475 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_castExpression7477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression7479 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression7481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_primitiveType7518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_primitiveType7526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_primitiveType7534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_primitiveType7542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_primitiveType7550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_primitiveType7558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_primitiveType7566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_double_key_in_primitiveType7574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary7597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary7612 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary7615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_key_in_primary7619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_primary7621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary7637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_primary7657 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_primary7659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_primary7674 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_creator_in_primary7676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary7691 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_primary7694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_primary7696 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_primary7700 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_class_key_in_primary7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_primary7722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_primary7737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_primary7751 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_DOT_in_primary7760 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_primary7762 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary7771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineListExpression7792 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007F2070C2L});
    public static final BitSet FOLLOW_expressionList_in_inlineListExpression7794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineListExpression7797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineMapExpression7819 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_mapExpressionList_in_inlineMapExpression7821 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007F2070C2L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_mapExpressionList7844 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_expression_in_mapEntry7869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_mapEntry7871 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_mapEntry7873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parExpression7887 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_parExpression7889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parExpression7891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix7921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix7923 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix7927 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_class_key_in_identifierSuffix7929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix7944 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix7946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix7948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix7961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator7979 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createdName_in_creator7982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator7993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator7997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_createdName8009 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typeArguments_in_createdName8011 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_createdName8024 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_createdName8026 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_typeArguments_in_createdName8028 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_createdName8043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_innerCreator8058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000080L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator8060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8073 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007F2070C2L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest8090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest8104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8111 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest8113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest8127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest8129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer8152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer8163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_arrayInitializer8175 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0037D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer8181 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer8183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer8188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_arrayInitializer8195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest8206 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest8208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation8223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation8225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_nonWildcardTypeArguments8237 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments8239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_GREATER_in_nonWildcardTypeArguments8241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_explicitGenericInvocationSuffix8253 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix8255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_explicitGenericInvocationSuffix8263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix8265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector8292 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_selector8294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_selector8303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector8314 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_super_key_in_selector8316 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_selector8318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector8325 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_new_key_in_selector8327 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector8330 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_innerCreator_in_selector8334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_selector8341 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_selector8343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_selector8345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix8357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_superSuffix8365 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_superSuffix8367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_superSuffix8376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_arguments8410 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2071C2L});
    public static final BitSet FOLLOW_expressionList_in_arguments8412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_arguments8415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList8432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_expressionList8435 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_expressionList8437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentOperator8478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentOperator8492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULT_ASSIGN_in_assignmentOperator8506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentOperator8520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentOperator8534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentOperator8548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentOperator8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentOperator8576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_assignmentOperator8590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_assignmentOperator8606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator8622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator8624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration8647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration8657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_key_in_normalClassDeclaration8669 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_normalClassDeclaration8671 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration8674 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_extends_key_in_normalClassDeclaration8687 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration8689 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_implements_key_in_normalClassDeclaration8702 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration8704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration8716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_classBody8727 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody8729 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_classBody8732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_classBodyDeclaration8746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration8754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiedClassMember_in_classBodyDeclaration8761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiedClassMember8782 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedClassMember_in_modifiedClassMember8784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDecl_in_modifiedClassMember8789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier8807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_key_in_modifier8817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_key_in_modifier8827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_private_key_in_modifier8837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_key_in_modifier8847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_key_in_modifier8857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_modifier8867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_native_key_in_modifier8877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_key_in_modifier8887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_transient_key_in_modifier8897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volatile_key_in_modifier8907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strictfp_key_in_modifier8917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl8940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDecl8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_memberDecl8955 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_memberDecl8957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_memberDecl8959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_memberDecl8964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_memberDecl8966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDecl8973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl8981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl8986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl9000 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl9002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest9015 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_void_key_in_genericMethodOrConstructorRest9019 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_genericMethodOrConstructorRest9022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_genericMethodOrConstructorRest9029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest9031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration9046 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_methodDeclaration9048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration9050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest9062 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_methodDeclaratorRest9065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_methodDeclaratorRest9067 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_throws_key_in_methodDeclaratorRest9080 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_methodDeclaratorRest9082 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_methodDeclaratorRest9098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_methodDeclaratorRest9113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest9135 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_throws_key_in_voidMethodDeclaratorRest9138 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_voidMethodDeclaratorRest9140 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_voidMethodDeclaratorRest9156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidMethodDeclaratorRest9170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest9191 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_throws_key_in_constructorDeclaratorRest9194 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_constructorDeclaratorRest9196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_constructorDeclaratorRest9200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration9212 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration9214 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_fieldDeclaration9216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_formalParameters9228 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters9230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_formalParameters9233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls9245 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls9248 = new BitSet(new long[]{0x0000000000000002L,0xC000000000000000L});
    public static final BitSet FOLLOW_formalParameterDeclsRest_in_formalParameterDecls9250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterDeclsRest9266 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDeclsRest9268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_formalParameterDeclsRest9277 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_formalParameterDeclsRest9279 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_formalParameterDeclsRest9281 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest9283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_typeParameters9294 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters9296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_COMMA_in_typeParameters9299 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters9301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080020L});
    public static final BitSet FOLLOW_GREATER_in_typeParameters9305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typeParameter9316 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_extends_key_in_typeParameter9319 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_bound_in_typeParameter9321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound9335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_AMPER_in_bound9338 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_bound9340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration9360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration9366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_key_in_normalInterfaceDeclaration9380 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_normalInterfaceDeclaration9382 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration9384 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_extends_key_in_normalInterfaceDeclaration9388 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration9390 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration9394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_interfaceBody9405 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody9407 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_interfaceBody9410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiedInterfaceMember_in_interfaceBodyDeclaration9422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceBodyDeclaration9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiedInterfaceMember9450 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedInterfaceMember_in_modifiedInterfaceMember9452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_modifiedInterfaceMember9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl9469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl9476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_interfaceMemberDecl9486 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_interfaceMemberDecl9488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl9490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl9500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl9510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethodOrFieldDecl9522 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_interfaceMethodOrFieldDecl9524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040080L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest9538 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceMethodOrFieldRest9540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest9557 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_interfaceMethodDeclaratorRest9560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_interfaceMethodDeclaratorRest9562 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_throws_key_in_interfaceMethodDeclaratorRest9567 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_interfaceMethodDeclaratorRest9569 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interfaceMethodDeclaratorRest9573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl9585 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl9588 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_void_key_in_interfaceGenericMethodDecl9592 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_interfaceGenericMethodDecl9595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040080L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl9605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest9617 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_throws_key_in_voidInterfaceMethodDeclaratorRest9620 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeNameList_in_voidInterfaceMethodDeclaratorRest9622 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_voidInterfaceMethodDeclaratorRest9626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_constantDeclarator9639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040000L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator9641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest9657 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_constantDeclaratorsRest9660 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclaratorsRest9662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_constantDeclaratorRest9679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_constantDeclaratorRest9681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001040000L});
    public static final BitSet FOLLOW_EQUALS_in_constantDeclaratorRest9685 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest9687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_key_in_enumDeclaration9705 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_enumDeclaration9707 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_implements_key_in_enumDeclaration9710 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration9712 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration9716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_enumBody9728 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000200000020L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody9730 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_enumBody9733 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody9736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_enumBody9739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants9750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants9753 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants9755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotations_in_enumConstant9769 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_enumConstant9772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000080L});
    public static final BitSet FOLLOW_arguments_in_enumConstant9775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_classBody_in_enumConstant9780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_enumBodyDeclarations9794 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations9797 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_annotation_in_annotations9817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_AT_in_annotation9829 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation9837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_annotation9849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_annotation9851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_annotation9859 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation9861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_annotation9863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_annotationName9912 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_DOT_in_annotationName9920 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_annotationName9924 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs9941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairs9944 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs9947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_ID_in_elementValuePair9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_elementValuePair9972 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair9976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair9993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TimePeriod_in_elementValue10012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue10017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue10024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue10031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_elementValueArrayInitializer10042 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0037D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer10045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer10048 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer10050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_elementValueArrayInitializer10057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration10070 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_interface_key_in_annotationTypeDeclaration10072 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_annotationTypeDeclaration10074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration10076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_annotationTypeBody10088 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000300200000L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody10091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_annotationTypeBody10095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10108 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations10112 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration10127 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration10131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest10143 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest10145 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_annotationTypeElementRest10147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest10154 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_annotationTypeElementRest10156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest10164 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_annotationTypeElementRest10166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest10181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest10188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_annotationMethodRest10201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_annotationMethodRest10203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_annotationMethodRest10205 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest10208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest10225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_defaultValue10240 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0100F0017D2078C2L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue10242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_operator_key10275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_neg_operator_key10319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key10364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key10368 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key10372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key10376 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_effective_key10412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_date_effective_key10416 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_date_effective_key10420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_expires_key10452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_date_expires_key10456 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_date_expires_key10460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_no_loop_key10492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_no_loop_key10496 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_no_loop_key10500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key10532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_auto_focus_key10536 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key10540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_activation_group_key10572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_activation_group_key10576 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_activation_group_key10580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key10612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_agenda_group_key10616 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key10620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key10652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_ruleflow_group_key10656 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key10660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entry_point_key10692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_MINUS_in_entry_point_key10696 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_entry_point_key10700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_timer_key10729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_duration_key10756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_calendars_key10783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_package_key10810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_key10837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_dialect_key10864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_salience_key10891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enabled_key10918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_attributes_key10945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_key10972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extend_key10999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_key11026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_declare_key11053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_key11080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_key11107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_eval_key11134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_not_key11161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_in_key11188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_or_key11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_and_key11242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_exists_key11269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_forall_key11296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_action_key11323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_reverse_key11350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_result_key11377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_end_key11404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_init_key11451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_instanceof_key11478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extends_key11505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_implements_key11532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_super_key11559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_boolean_key11587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_char_key11615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_byte_key11643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_short_key11671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_int_key11699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_long_key11727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_float_key11755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_double_key11783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_this_key11811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_void_key11839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_key11867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_new_key11895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_final_key11924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_if_key11950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_else_key11976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_for_key12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_while_key12028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_do_key12054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_key12080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_default_key12106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_try_key12132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_catch_key12158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_finally_key12184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_switch_key12210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synchronized_key12236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_return_key12262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throw_key12288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_break_key12314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_continue_key12340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_assert_key12365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_static_key12390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_modify_key12415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_public_key12441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protected_key12467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_private_key12493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_abstract_key12519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_native_key12545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_transient_key12571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_volatile_key12597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_strictfp_key12623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throws_key12649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_key12675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enum_key12701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred1_DRL1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_synpred2_DRL1525 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred2_DRL1527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_synpred2_DRL1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred3_DRL2231 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_synpred3_DRL2233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_key_in_synpred4_DRL2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred5_DRL2351 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_and_key_in_synpred5_DRL2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred6_DRL2421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred7_DRL2538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred8_DRL2575 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_synpred8_DRL2578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred8_DRL2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred9_DRL2703 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_or_key_in_synpred9_DRL2706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred9_DRL2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_synpred10_DRL4331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred11_DRL5649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred12_DRL5660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred13_DRL5683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred14_DRL5697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred15_DRL5709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred15_DRL5711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_synpred16_DRL6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_key_in_synpred18_DRL6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred18_DRL6214 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred18_DRL6216 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_else_key_in_synpred18_DRL6227 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred18_DRL6229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_synpred19_DRL6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred19_DRL6241 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_forControl_in_synpred19_DRL6243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred19_DRL6245 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred19_DRL6247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_key_in_synpred20_DRL6255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred20_DRL6257 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred20_DRL6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_key_in_synpred21_DRL6267 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred21_DRL6269 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_while_key_in_synpred21_DRL6271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred21_DRL6273 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred21_DRL6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_key_in_synpred22_DRL6283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred22_DRL6285 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_catches_in_synpred22_DRL6295 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_finally_key_in_synpred22_DRL6297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred22_DRL6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred22_DRL6309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finally_key_in_synpred22_DRL6319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred22_DRL6321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_key_in_synpred23_DRL6337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred23_DRL6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_synpred23_DRL6341 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_synpred23_DRL6343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_synpred23_DRL6345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_key_in_synpred24_DRL6353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parExpression_in_synpred24_DRL6355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_synpred24_DRL6357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_key_in_synpred25_DRL6365 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_synpred25_DRL6367 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred25_DRL6370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_key_in_synpred26_DRL6378 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000F0007D2070C2L});
    public static final BitSet FOLLOW_expression_in_synpred26_DRL6380 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred26_DRL6382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_key_in_synpred27_DRL6390 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred27_DRL6392 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred27_DRL6395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_key_in_synpred28_DRL6403 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred28_DRL6405 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred28_DRL6408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred30_DRL6423 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred30_DRL6425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred31_DRL6437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_synpred31_DRL6439 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0000F0017D2070C2L});
    public static final BitSet FOLLOW_rhs_statement_in_synpred31_DRL6441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifyStatement_in_synpred32_DRL6459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred33_DRL6520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred34_DRL6565 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_synpred34_DRL6568 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred34_DRL6570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred35_DRL6818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_synpred36_DRL7065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred37_DRL7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred40_DRL7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_synpred41_DRL7372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred42_DRL7380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred43_DRL7430 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred43_DRL7432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred44_DRL7453 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_type_in_synpred44_DRL7455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_synpred45_DRL7518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_synpred46_DRL7526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_synpred47_DRL7534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_synpred48_DRL7542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_synpred49_DRL7550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_synpred50_DRL7558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_synpred51_DRL7566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred52_DRL7593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred53_DRL7608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred54_DRL7633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_synpred55_DRL7653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_synpred56_DRL7670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred57_DRL7687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_synpred58_DRL7718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_synpred59_DRL7733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred60_DRL7748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred61_DRL7755 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred61_DRL7757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred62_DRL7768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred64_DRL7939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred66_DRL8121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred66_DRL8123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred67_DRL8298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred68_DRL8292 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred68_DRL8294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_arguments_in_synpred68_DRL8303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred69_DRL8314 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_super_key_in_synpred69_DRL8316 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_superSuffix_in_synpred69_DRL8318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred70_DRL8325 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_new_key_in_synpred70_DRL8327 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred70_DRL8330 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred70_DRL8334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred71_DRL8371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_synpred72_DRL8782 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedClassMember_in_synpred72_DRL8784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred74_DRL8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_void_key_in_synpred75_DRL8955 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred75_DRL8957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_synpred75_DRL8959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred76_DRL8964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_synpred76_DRL8966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred77_DRL8973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred78_DRL8981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_synpred79_DRL9450 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L,0x0100000100200000L});
    public static final BitSet FOLLOW_modifiedInterfaceMember_in_synpred79_DRL9452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred80_DRL9962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_synpred80_DRL9964 = new BitSet(new long[]{0x0000000000000002L});

}