// $ANTLR 3.2 Sep 23, 2009 14:05:07 src/main/resources/org/drools/lang/DRL.g 2010-10-25 14:22:30

	package org.drools.lang;
	
	import java.util.List;
	import java.util.LinkedList;
	import org.drools.compiler.DroolsParserException;
	import org.drools.lang.ParserHelper;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class DRLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "VT_COMPILATION_UNIT", "VT_FUNCTION_IMPORT", "VT_FACT", "VT_CONSTRAINTS", "VT_LABEL", "VT_QUERY_ID", "VT_TYPE_DECLARE_ID", "VT_RULE_ID", "VT_ENTRYPOINT_ID", "VT_RULE_ATTRIBUTES", "VT_PKG_ATTRIBUTES", "VT_RHS_CHUNK", "VT_CURLY_CHUNK", "VT_SQUARE_CHUNK", "VT_PAREN_CHUNK", "VT_BEHAVIOR", "VT_AND_IMPLICIT", "VT_AND_PREFIX", "VT_OR_PREFIX", "VT_AND_INFIX", "VT_OR_INFIX", "VT_ACCUMULATE_INIT_CLAUSE", "VT_ACCUMULATE_ID_CLAUSE", "VT_FROM_SOURCE", "VT_EXPRESSION_CHAIN", "VT_PATTERN", "VT_FACT_BINDING", "VT_FACT_OR", "VT_BIND_FIELD", "VT_FIELD", "VT_ACCESSOR_PATH", "VT_ACCESSOR_ELEMENT", "VT_DATA_TYPE", "VT_PATTERN_TYPE", "VT_PACKAGE_ID", "VT_IMPORT_ID", "VT_GLOBAL_ID", "VT_FUNCTION_ID", "VT_PARAM_LIST", "VK_DATE_EFFECTIVE", "VK_DATE_EXPIRES", "VK_LOCK_ON_ACTIVE", "VK_NO_LOOP", "VK_AUTO_FOCUS", "VK_ACTIVATION_GROUP", "VK_AGENDA_GROUP", "VK_RULEFLOW_GROUP", "VK_TIMER", "VK_CALENDARS", "VK_DIALECT", "VK_SALIENCE", "VK_ENABLED", "VK_ATTRIBUTES", "VK_RULE", "VK_EXTEND", "VK_IMPORT", "VK_PACKAGE", "VK_QUERY", "VK_DECLARE", "VK_FUNCTION", "VK_GLOBAL", "VK_EVAL", "VK_ENTRY_POINT", "VK_NOT", "VK_IN", "VK_OR", "VK_AND", "VK_EXISTS", "VK_FORALL", "VK_ACTION", "VK_REVERSE", "VK_RESULT", "VK_OPERATOR", "VK_END", "VK_INIT", "VK_INSTANCEOF", "VK_EXTENDS", "VK_SUPER", "VK_PRIMITIVE_TYPE", "VK_THIS", "VK_VOID", "VK_CLASS", "VK_NEW", "SIGNED_DECIMAL", "SIGNED_HEX", "SIGNED_FLOAT", "SEMICOLON", "ID", "DOT", "DOT_STAR", "STRING", "AT", "COLON", "EQUALS_ASSIGN", "WHEN", "COMMA", "BOOL", "LEFT_PAREN", "RIGHT_PAREN", "FROM", "OVER", "ACCUMULATE", "COLLECT", "DOUBLE_PIPE", "DOUBLE_AMPER", "ARROW", "EQUALS", "GREATER", "GREATER_EQUALS", "LESS", "LESS_EQUALS", "NOT_EQUALS", "NULL", "PLUS", "MINUS", "DECIMAL", "HEX", "FLOAT", "LEFT_SQUARE", "RIGHT_SQUARE", "THEN", "LEFT_CURLY", "RIGHT_CURLY", "QUESTION", "PIPE", "XOR", "AMPER", "SHIFT_LEFT", "SHIFT_RIGHT_UNSIG", "SHIFT_RIGHT", "STAR", "DIV", "MOD", "INCR", "DECR", "TILDE", "NEGATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "EOL", "WS", "Exponent", "FloatTypeSuffix", "HexDigit", "IntegerTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "SH_STYLE_SINGLE_LINE_COMMENT", "C_STYLE_SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "IdentifierStart", "IdentifierPart", "MISC"
    };
    public static final int COMMA=99;
    public static final int VT_PATTERN_TYPE=37;
    public static final int MINUS=118;
    public static final int VT_ACCUMULATE_ID_CLAUSE=26;
    public static final int VK_DIALECT=53;
    public static final int VK_FUNCTION=63;
    public static final int HexDigit=153;
    public static final int VK_ATTRIBUTES=56;
    public static final int XOR_ASSIGN=147;
    public static final int OR_ASSIGN=146;
    public static final int VT_EXPRESSION_CHAIN=28;
    public static final int MISC=163;
    public static final int VT_AND_PREFIX=21;
    public static final int VK_QUERY=61;
    public static final int VK_INSTANCEOF=79;
    public static final int THEN=124;
    public static final int VK_AUTO_FOCUS=47;
    public static final int AND_ASSIGN=145;
    public static final int TILDE=139;
    public static final int PIPE=128;
    public static final int DOT=92;
    public static final int NOT_EQUALS=115;
    public static final int VK_IMPORT=59;
    public static final int MULT_ASSIGN=143;
    public static final int VT_PACKAGE_ID=38;
    public static final int LEFT_SQUARE=122;
    public static final int SH_STYLE_SINGLE_LINE_COMMENT=158;
    public static final int VK_TIMER=51;
    public static final int PLUS=117;
    public static final int VT_DATA_TYPE=36;
    public static final int VT_FACT=6;
    public static final int LEFT_CURLY=125;
    public static final int FloatTypeSuffix=152;
    public static final int MINUS_ASSIGN=142;
    public static final int AT=95;
    public static final int VK_VOID=84;
    public static final int DOUBLE_AMPER=108;
    public static final int LEFT_PAREN=101;
    public static final int IdentifierPart=162;
    public static final int VT_QUERY_ID=9;
    public static final int IntegerTypeSuffix=154;
    public static final int NEGATION=140;
    public static final int VT_ACCESSOR_PATH=34;
    public static final int VT_LABEL=8;
    public static final int WHEN=98;
    public static final int MOD_ASSIGN=148;
    public static final int VT_ENTRYPOINT_ID=12;
    public static final int WS=150;
    public static final int VT_FIELD=33;
    public static final int VK_SALIENCE=54;
    public static final int OVER=104;
    public static final int STRING=94;
    public static final int VK_AND=70;
    public static final int LESS_EQUALS=114;
    public static final int VT_ACCESSOR_ELEMENT=35;
    public static final int VT_ACCUMULATE_INIT_CLAUSE=25;
    public static final int VK_GLOBAL=64;
    public static final int VK_REVERSE=74;
    public static final int VT_BEHAVIOR=19;
    public static final int VT_SQUARE_CHUNK=17;
    public static final int VK_FORALL=72;
    public static final int VT_COMPILATION_UNIT=4;
    public static final int VT_PAREN_CHUNK=18;
    public static final int COLLECT=106;
    public static final int VK_ENABLED=55;
    public static final int EQUALS=110;
    public static final int VK_RESULT=75;
    public static final int UnicodeEscape=156;
    public static final int DIV_ASSIGN=144;
    public static final int VK_PACKAGE=60;
    public static final int VT_RULE_ID=11;
    public static final int SIGNED_FLOAT=89;
    public static final int VK_NO_LOOP=46;
    public static final int IdentifierStart=161;
    public static final int SEMICOLON=90;
    public static final int EQUALS_ASSIGN=97;
    public static final int VT_AND_IMPLICIT=20;
    public static final int VK_THIS=83;
    public static final int XOR=129;
    public static final int NULL=116;
    public static final int COLON=96;
    public static final int AMPER=130;
    public static final int MULTI_LINE_COMMENT=160;
    public static final int DIV=135;
    public static final int VT_RULE_ATTRIBUTES=13;
    public static final int HEX=120;
    public static final int RIGHT_SQUARE=123;
    public static final int SHIFT_LEFT=131;
    public static final int VK_AGENDA_GROUP=49;
    public static final int INCR=137;
    public static final int VT_FACT_OR=31;
    public static final int VK_NOT=67;
    public static final int VK_DATE_EXPIRES=44;
    public static final int DECR=138;
    public static final int ARROW=109;
    public static final int FLOAT=121;
    public static final int MOD=136;
    public static final int VK_EXTEND=58;
    public static final int PLUS_ASSIGN=141;
    public static final int VT_CURLY_CHUNK=16;
    public static final int QUESTION=127;
    public static final int DECIMAL=119;
    public static final int VK_NEW=86;
    public static final int VT_OR_PREFIX=22;
    public static final int DOUBLE_PIPE=107;
    public static final int VK_END=77;
    public static final int LESS=113;
    public static final int VT_TYPE_DECLARE_ID=10;
    public static final int VT_PATTERN=29;
    public static final int VK_DATE_EFFECTIVE=43;
    public static final int EscapeSequence=155;
    public static final int VK_EXISTS=71;
    public static final int VT_BIND_FIELD=32;
    public static final int VK_RULE=57;
    public static final int VK_EVAL=65;
    public static final int GREATER=111;
    public static final int VT_FACT_BINDING=30;
    public static final int VT_PKG_ATTRIBUTES=14;
    public static final int FROM=103;
    public static final int ID=91;
    public static final int VK_PRIMITIVE_TYPE=82;
    public static final int RIGHT_CURLY=126;
    public static final int Exponent=151;
    public static final int VK_OPERATOR=76;
    public static final int BOOL=100;
    public static final int VT_PARAM_LIST=42;
    public static final int VT_AND_INFIX=23;
    public static final int VK_ENTRY_POINT=66;
    public static final int VT_FROM_SOURCE=27;
    public static final int VK_LOCK_ON_ACTIVE=45;
    public static final int VT_FUNCTION_IMPORT=5;
    public static final int VK_SUPER=81;
    public static final int VK_IN=68;
    public static final int VT_RHS_CHUNK=15;
    public static final int VT_OR_INFIX=24;
    public static final int VK_CLASS=85;
    public static final int DOT_STAR=93;
    public static final int VK_OR=69;
    public static final int VT_GLOBAL_ID=40;
    public static final int ACCUMULATE=105;
    public static final int GREATER_EQUALS=112;
    public static final int VK_RULEFLOW_GROUP=50;
    public static final int SIGNED_DECIMAL=87;
    public static final int VT_FUNCTION_ID=41;
    public static final int SHIFT_RIGHT=133;
    public static final int EOF=-1;
    public static final int VT_CONSTRAINTS=7;
    public static final int EOL=149;
    public static final int VT_IMPORT_ID=39;
    public static final int VK_ACTIVATION_GROUP=48;
    public static final int VK_INIT=78;
    public static final int VK_EXTENDS=80;
    public static final int OctalEscape=157;
    public static final int VK_ACTION=73;
    public static final int SIGNED_HEX=88;
    public static final int STAR=134;
    public static final int RIGHT_PAREN=102;
    public static final int SHIFT_RIGHT_UNSIG=132;
    public static final int VK_CALENDARS=52;
    public static final int C_STYLE_SINGLE_LINE_COMMENT=159;
    public static final int VK_DECLARE=62;

    // delegates
    // delegators


        public DRLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public DRLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[247+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return DRLParser.tokenNames; }
    public String getGrammarFileName() { return "src/main/resources/org/drools/lang/DRL.g"; }


        private ParserHelper helper = new ParserHelper( this,
                                                        tokenNames,
                                                        input,
                                                        state );
                                                        
        public ParserHelper getHelper()                           { return helper; }
        public boolean hasErrors()                                { return helper.hasErrors(); }
        public List<DroolsParserException> getErrors()            { return helper.getErrors(); }
        public List<String> getErrorMessages()                    { return helper.getErrorMessages(); }
        public void enableEditorInterface()                       {        helper.enableEditorInterface(); }
        public void disableEditorInterface()                      {        helper.disableEditorInterface(); }
        public LinkedList<DroolsSentence> getEditorInterface()    { return helper.getEditorInterface(); }
        public void reportError(RecognitionException ex)          {        helper.reportError( ex ); }
        /** Overrided this method to not output mesages */
        public void emitErrorMessage(String msg)                  {}



    public static class compilation_unit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilation_unit"
    // src/main/resources/org/drools/lang/DRL.g:177:1: compilation_unit : ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) ;
    public final DRLParser.compilation_unit_return compilation_unit() throws RecognitionException {
        DRLParser.compilation_unit_return retval = new DRLParser.compilation_unit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF5=null;
        DRLParser.package_statement_return package_statement1 = null;

        DRLParser.resync_return resync2 = null;

        DRLParser.statement_return statement3 = null;

        DRLParser.resync_return resync4 = null;


        Object EOF5_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_package_statement=new RewriteRuleSubtreeStream(adaptor,"rule package_statement");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_resync=new RewriteRuleSubtreeStream(adaptor,"rule resync");
        try {
            // src/main/resources/org/drools/lang/DRL.g:178:2: ( ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) )
            // src/main/resources/org/drools/lang/DRL.g:178:4: ( package_statement )? resync ( statement resync )* EOF
            {
            // src/main/resources/org/drools/lang/DRL.g:178:4: ( package_statement )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:178:4: package_statement
                    {
                    pushFollow(FOLLOW_package_statement_in_compilation_unit426);
                    package_statement1=package_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_statement.add(package_statement1.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_resync_in_compilation_unit445);
            resync2=resync();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resync.add(resync2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:180:3: ( statement resync )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))))) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:180:5: statement resync
            	    {
            	    pushFollow(FOLLOW_statement_in_compilation_unit452);
            	    statement3=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement3.getTree());
            	    pushFollow(FOLLOW_resync_in_compilation_unit454);
            	    resync4=resync();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_resync.add(resync4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            EOF5=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF5);



            // AST REWRITE
            // elements: package_statement, statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 182:3: -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:182:6: ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:182:28: ( package_statement )?
                if ( stream_package_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_package_statement.nextTree());

                }
                stream_package_statement.reset();
                // src/main/resources/org/drools/lang/DRL.g:182:47: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException e ) {

            		helper.reportError( e );
            	
        }
        catch ( RewriteEmptyStreamException e ) {

            	
        }
        finally {

            	if (helper.isEditorInterfaceEnabled && retval.tree == null) {
            		retval.tree = root_0;
            		root_0 = (Object) adaptor.nil();
            		Object root_1 = (Object) adaptor.nil();
            		root_1 = (Object) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);
            		if (stream_package_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_package_statement.nextTree());
            		}
            		while (stream_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_statement.nextTree());
            		}
            		adaptor.addChild(root_0, root_1);
            		retval.stop = input.LT(-1);
            		retval.tree = (Object) adaptor.rulePostProcessing(root_0);
            		adaptor.setTokenBoundaries(retval.tree, retval.start,
            				retval.stop);
            	}
            	if (helper.isEditorInterfaceEnabled && helper.hasErrors()) {
            		Tree rootNode = (Tree) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), adaptor.nil());
            		for (int i = 0; i < ((Tree)retval.tree).getChildCount(); i++) {
            			Tree childNode = (Tree) ((Tree)retval.tree).getChild(i);
            			if (!(childNode instanceof CommonErrorNode)) {
            				rootNode.addChild(childNode);
            			}
            		}
            		retval.tree = rootNode; 
            	}

        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public static class resync_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resync"
    // src/main/resources/org/drools/lang/DRL.g:225:1: resync : ;
    public final DRLParser.resync_return resync() throws RecognitionException {
        DRLParser.resync_return retval = new DRLParser.resync_return();
        retval.start = input.LT(1);

        Object root_0 = null;


            // Consume any garbled tokens that come before the next statement
            // or the end of the block. The only slight risk here is that the
            // block becomes MORE inclusive than it should but as the script is
            // in error, this is a better course than throwing out the block
            // when the error occurs and screwing up the whole meaning of
            // the rest of the token stream.
            //
            helper.syncToSet();
        try {
            // src/main/resources/org/drools/lang/DRL.g:236:5: ()
            // src/main/resources/org/drools/lang/DRL.g:238:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "resync"

    public static class package_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_statement"
    // src/main/resources/org/drools/lang/DRL.g:243:1: package_statement : package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) ;
    public final DRLParser.package_statement_return package_statement() throws RecognitionException {
        DRLParser.package_statement_return retval = new DRLParser.package_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON8=null;
        DRLParser.package_key_return package_key6 = null;

        DRLParser.packageOrTypeName_return packageOrTypeName7 = null;


        Object SEMICOLON8_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_packageOrTypeName=new RewriteRuleSubtreeStream(adaptor,"rule packageOrTypeName");
         helper.pushParaphrases(DroolsParaphraseTypes.PACKAGE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.PACKAGE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:246:2: ( package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) )
            // src/main/resources/org/drools/lang/DRL.g:246:4: package_key packageOrTypeName ( SEMICOLON )?
            {
            pushFollow(FOLLOW_package_key_in_package_statement555);
            package_key6=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key6.getTree());
            pushFollow(FOLLOW_packageOrTypeName_in_package_statement559);
            packageOrTypeName7=packageOrTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_packageOrTypeName.add(packageOrTypeName7.getTree());
            // src/main/resources/org/drools/lang/DRL.g:247:21: ( SEMICOLON )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SEMICOLON) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:247:21: SEMICOLON
                    {
                    SEMICOLON8=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_statement561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON8);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON8, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: package_key, packageOrTypeName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 249:3: -> ^( package_key packageOrTypeName )
            {
                // src/main/resources/org/drools/lang/DRL.g:249:6: ^( package_key packageOrTypeName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_package_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_packageOrTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_statement"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // src/main/resources/org/drools/lang/DRL.g:257:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );
    public final DRLParser.statement_return statement() throws RecognitionException {
        DRLParser.statement_return retval = new DRLParser.statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_attribute_return rule_attribute9 = null;

        DRLParser.function_import_statement_return function_import_statement10 = null;

        DRLParser.import_statement_return import_statement11 = null;

        DRLParser.global_return global12 = null;

        DRLParser.function_return function13 = null;

        DRLParser.type_declaration_return type_declaration14 = null;

        DRLParser.rule_return rule15 = null;

        DRLParser.query_return query16 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:260:3: ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query )
            int alt4=8;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:260:5: rule_attribute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_attribute_in_statement601);
                    rule_attribute9=rule_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule_attribute9.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:261:4: function_import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_import_statement_in_statement606);
                    function_import_statement10=function_import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_import_statement10.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:262:10: import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_import_statement_in_statement619);
                    import_statement11=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement11.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:263:4: global
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_global_in_statement625);
                    global12=global();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global12.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:264:4: function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_in_statement631);
                    function13=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function13.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:265:4: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_statement636);
                    type_declaration14=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration14.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:266:4: rule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_in_statement641);
                    rule15=rule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule15.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:267:4: query
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_query_in_statement646);
                    query16=query();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query16.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_statement"
    // src/main/resources/org/drools/lang/DRL.g:273:1: import_statement : import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) ;
    public final DRLParser.import_statement_return import_statement() throws RecognitionException {
        DRLParser.import_statement_return retval = new DRLParser.import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON19=null;
        DRLParser.import_key_return import_key17 = null;

        DRLParser.import_name_return import_name18 = null;


        Object SEMICOLON19_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.IMPORT_STATEMENT);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:276:2: ( import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:276:4: import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )?
            {
            pushFollow(FOLLOW_import_key_in_import_statement672);
            import_key17=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(import_key17.getTree());
            pushFollow(FOLLOW_import_name_in_import_statement674);
            import_name18=import_name(DroolsParaphraseTypes.IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name18.getTree());
            // src/main/resources/org/drools/lang/DRL.g:276:57: ( SEMICOLON )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==SEMICOLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:276:57: SEMICOLON
                    {
                    SEMICOLON19=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_import_statement677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON19);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON19, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_name, import_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:3: -> ^( import_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:278:6: ^( import_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_import_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_statement"

    public static class function_import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_import_statement"
    // src/main/resources/org/drools/lang/DRL.g:281:1: function_import_statement : {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) ;
    public final DRLParser.function_import_statement_return function_import_statement() throws RecognitionException {
        DRLParser.function_import_statement_return retval = new DRLParser.function_import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON22=null;
        DRLParser.import_key_return imp = null;

        DRLParser.function_key_return function_key20 = null;

        DRLParser.import_name_return import_name21 = null;


        Object SEMICOLON22_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION_IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION_IMPORT_STATEMENT); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:284:2: ({...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:284:4: {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )?
            {
            if ( !((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_import_statement", "helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION)");
            }
            pushFollow(FOLLOW_import_key_in_function_import_statement717);
            imp=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(imp.getTree());
            pushFollow(FOLLOW_function_key_in_function_import_statement719);
            function_key20=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key20.getTree());
            pushFollow(FOLLOW_import_name_in_function_import_statement731);
            import_name21=import_name(DroolsParaphraseTypes.FUNCTION_IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name21.getTree());
            // src/main/resources/org/drools/lang/DRL.g:285:61: ( SEMICOLON )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==SEMICOLON) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:285:61: SEMICOLON
                    {
                    SEMICOLON22=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_import_statement734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON22);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON22, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_name, function_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:3: -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:287:6: ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FUNCTION_IMPORT, (imp!=null?((Token)imp.start):null)), root_1);

                adaptor.addChild(root_1, stream_function_key.nextTree());
                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_import_statement"

    public static class import_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_name"
    // src/main/resources/org/drools/lang/DRL.g:290:1: import_name[DroolsParaphraseTypes importType] : id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) ;
    public final DRLParser.import_name_return import_name(DroolsParaphraseTypes importType) throws RecognitionException {
        DRLParser.import_name_return retval = new DRLParser.import_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_DOT_STAR=new RewriteRuleTokenStream(adaptor,"token DOT_STAR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:291:2: (id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? ) )
            // src/main/resources/org/drools/lang/DRL.g:291:4: id+= ID (id+= DOT id+= ID )* (id+= DOT_STAR )?
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_import_name768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:291:11: (id+= DOT id+= ID )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DOT) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:291:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_import_name774); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_import_name778); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:291:33: (id+= DOT_STAR )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DOT_STAR) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:291:33: id+= DOT_STAR
                    {
                    id=(Token)match(input,DOT_STAR,FOLLOW_DOT_STAR_in_import_name785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT_STAR.add(id);

                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(importType, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: DOT_STAR, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:3: -> ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:294:6: ^( VT_IMPORT_ID ( ID )+ ( DOT_STAR )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_IMPORT_ID, "VT_IMPORT_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:294:25: ( DOT_STAR )?
                if ( stream_DOT_STAR.hasNext() ) {
                    adaptor.addChild(root_1, stream_DOT_STAR.nextNode());

                }
                stream_DOT_STAR.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_name"

    public static class global_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global"
    // src/main/resources/org/drools/lang/DRL.g:300:1: global : global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) ;
    public final DRLParser.global_return global() throws RecognitionException {
        DRLParser.global_return retval = new DRLParser.global_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON26=null;
        DRLParser.global_key_return global_key23 = null;

        DRLParser.data_type_return data_type24 = null;

        DRLParser.global_id_return global_id25 = null;


        Object SEMICOLON26_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_global_id=new RewriteRuleSubtreeStream(adaptor,"rule global_id");
        RewriteRuleSubtreeStream stream_global_key=new RewriteRuleSubtreeStream(adaptor,"rule global_key");
         helper.pushParaphrases(DroolsParaphraseTypes.GLOBAL);  if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.GLOBAL); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:303:2: ( global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) )
            // src/main/resources/org/drools/lang/DRL.g:303:4: global_key data_type global_id ( SEMICOLON )?
            {
            pushFollow(FOLLOW_global_key_in_global828);
            global_key23=global_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_key.add(global_key23.getTree());
            pushFollow(FOLLOW_data_type_in_global830);
            data_type24=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type24.getTree());
            pushFollow(FOLLOW_global_id_in_global832);
            global_id25=global_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_id.add(global_id25.getTree());
            // src/main/resources/org/drools/lang/DRL.g:303:35: ( SEMICOLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMICOLON) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:303:35: SEMICOLON
                    {
                    SEMICOLON26=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_global834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON26, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: data_type, global_key, global_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:3: -> ^( global_key data_type global_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:305:6: ^( global_key data_type global_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_global_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_data_type.nextTree());
                adaptor.addChild(root_1, stream_global_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global"

    public static class global_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_id"
    // src/main/resources/org/drools/lang/DRL.g:308:1: global_id : id= ID -> VT_GLOBAL_ID[$id] ;
    public final DRLParser.global_id_return global_id() throws RecognitionException {
        DRLParser.global_id_return retval = new DRLParser.global_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:309:2: (id= ID -> VT_GLOBAL_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:309:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_global_id863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.GLOBAL, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:3: -> VT_GLOBAL_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_GLOBAL_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_id"

    public static class function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function"
    // src/main/resources/org/drools/lang/DRL.g:318:1: function : function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) ;
    public final DRLParser.function_return function() throws RecognitionException {
        DRLParser.function_return retval = new DRLParser.function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.function_key_return function_key27 = null;

        DRLParser.data_type_return data_type28 = null;

        DRLParser.function_id_return function_id29 = null;

        DRLParser.parameters_return parameters30 = null;

        DRLParser.curly_chunk_return curly_chunk31 = null;


        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_curly_chunk=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:321:2: ( function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:321:4: function_key ( data_type )? function_id parameters curly_chunk
            {
            pushFollow(FOLLOW_function_key_in_function898);
            function_key27=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key27.getTree());
            // src/main/resources/org/drools/lang/DRL.g:321:17: ( data_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID) ) {
                int LA10_1 = input.LA(2);

                if ( ((LA10_1>=ID && LA10_1<=DOT)||LA10_1==LEFT_SQUARE) ) {
                    alt10=1;
                }
            }
            switch (alt10) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:321:17: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_function900);
                    data_type28=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_data_type.add(data_type28.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_id_in_function903);
            function_id29=function_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_id.add(function_id29.getTree());
            pushFollow(FOLLOW_parameters_in_function905);
            parameters30=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters.add(parameters30.getTree());
            pushFollow(FOLLOW_curly_chunk_in_function907);
            curly_chunk31=curly_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk.add(curly_chunk31.getTree());


            // AST REWRITE
            // elements: curly_chunk, function_id, function_key, parameters, data_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 322:3: -> ^( function_key ( data_type )? function_id parameters curly_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:322:6: ^( function_key ( data_type )? function_id parameters curly_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_function_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:322:21: ( data_type )?
                if ( stream_data_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_data_type.nextTree());

                }
                stream_data_type.reset();
                adaptor.addChild(root_1, stream_function_id.nextTree());
                adaptor.addChild(root_1, stream_parameters.nextTree());
                adaptor.addChild(root_1, stream_curly_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function"

    public static class function_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_id"
    // src/main/resources/org/drools/lang/DRL.g:325:1: function_id : id= ID -> VT_FUNCTION_ID[$id] ;
    public final DRLParser.function_id_return function_id() throws RecognitionException {
        DRLParser.function_id_return retval = new DRLParser.function_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:326:2: (id= ID -> VT_FUNCTION_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:326:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_function_id937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.FUNCTION, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:3: -> VT_FUNCTION_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FUNCTION_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_id"

    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // src/main/resources/org/drools/lang/DRL.g:335:1: query : query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) ;
    public final DRLParser.query_return query() throws RecognitionException {
        DRLParser.query_return retval = new DRLParser.query_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON36=null;
        DRLParser.end_key_return end = null;

        DRLParser.query_key_return query_key32 = null;

        DRLParser.query_id_return query_id33 = null;

        DRLParser.parameters_return parameters34 = null;

        DRLParser.normal_lhs_block_return normal_lhs_block35 = null;


        Object SEMICOLON36_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_query_key=new RewriteRuleSubtreeStream(adaptor,"rule query_key");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        RewriteRuleSubtreeStream stream_query_id=new RewriteRuleSubtreeStream(adaptor,"rule query_id");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
         helper.pushParaphrases(DroolsParaphraseTypes.QUERY); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.QUERY); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:338:2: ( query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:338:4: query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )?
            {
            pushFollow(FOLLOW_query_key_in_query972);
            query_key32=query_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_key.add(query_key32.getTree());
            pushFollow(FOLLOW_query_id_in_query974);
            query_id33=query_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_id.add(query_id33.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:340:3: ( parameters )?
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:340:3: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_query982);
                    parameters34=parameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameters.add(parameters34.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_query991);
            normal_lhs_block35=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block35.getTree());
            pushFollow(FOLLOW_end_key_in_query998);
            end=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end.getTree());
            // src/main/resources/org/drools/lang/DRL.g:343:15: ( SEMICOLON )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==SEMICOLON) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:343:15: SEMICOLON
                    {
                    SEMICOLON36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_query1000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON36);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON36, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: parameters, normal_lhs_block, query_key, end_key, query_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:3: -> ^( query_key query_id ( parameters )? normal_lhs_block end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:345:6: ^( query_key query_id ( parameters )? normal_lhs_block end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_query_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_query_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:345:27: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();
                adaptor.addChild(root_1, stream_normal_lhs_block.nextTree());
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query"

    public static class query_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_id"
    // src/main/resources/org/drools/lang/DRL.g:348:1: query_id : (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] );
    public final DRLParser.query_id_return query_id() throws RecognitionException {
        DRLParser.query_id_return retval = new DRLParser.query_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:349:2: (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ID) ) {
                alt13=1;
            }
            else if ( (LA13_0==STRING) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:349:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_query_id1035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 351:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:352:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_query_id1051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 354:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_id"

    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // src/main/resources/org/drools/lang/DRL.g:360:1: type_declaration : declare_key type_declare_id ( decl_metadata )* ( decl_field )* end_key -> ^( declare_key type_declare_id ( decl_metadata )* ( decl_field )* end_key ) ;
    public final DRLParser.type_declaration_return type_declaration() throws RecognitionException {
        DRLParser.type_declaration_return retval = new DRLParser.type_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.declare_key_return declare_key37 = null;

        DRLParser.type_declare_id_return type_declare_id38 = null;

        DRLParser.decl_metadata_return decl_metadata39 = null;

        DRLParser.decl_field_return decl_field40 = null;

        DRLParser.end_key_return end_key41 = null;


        RewriteRuleSubtreeStream stream_decl_field=new RewriteRuleSubtreeStream(adaptor,"rule decl_field");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_type_declare_id=new RewriteRuleSubtreeStream(adaptor,"rule type_declare_id");
         helper.pushParaphrases(DroolsParaphraseTypes.TYPE_DECLARE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.TYPE_DECLARATION); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:363:2: ( declare_key type_declare_id ( decl_metadata )* ( decl_field )* end_key -> ^( declare_key type_declare_id ( decl_metadata )* ( decl_field )* end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:363:4: declare_key type_declare_id ( decl_metadata )* ( decl_field )* end_key
            {
            pushFollow(FOLLOW_declare_key_in_type_declaration1084);
            declare_key37=declare_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declare_key.add(declare_key37.getTree());
            pushFollow(FOLLOW_type_declare_id_in_type_declaration1087);
            type_declare_id38=type_declare_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declare_id.add(type_declare_id38.getTree());
            // src/main/resources/org/drools/lang/DRL.g:364:3: ( decl_metadata )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==AT) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:364:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_type_declaration1091);
            	    decl_metadata39=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata39.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:365:3: ( decl_field )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==ID) ) {
                    int LA15_1 = input.LA(2);

                    if ( ((LA15_1>=COLON && LA15_1<=EQUALS_ASSIGN)) ) {
                        alt15=1;
                    }


                }


                switch (alt15) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:365:3: decl_field
            	    {
            	    pushFollow(FOLLOW_decl_field_in_type_declaration1096);
            	    decl_field40=decl_field();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_field.add(decl_field40.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_type_declaration1101);
            end_key41=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key41.getTree());


            // AST REWRITE
            // elements: end_key, declare_key, decl_metadata, type_declare_id, decl_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:3: -> ^( declare_key type_declare_id ( decl_metadata )* ( decl_field )* end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:367:6: ^( declare_key type_declare_id ( decl_metadata )* ( decl_field )* end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_declare_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_type_declare_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:367:36: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:367:51: ( decl_field )*
                while ( stream_decl_field.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field.nextTree());

                }
                stream_decl_field.reset();
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_declare_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declare_id"
    // src/main/resources/org/drools/lang/DRL.g:370:1: type_declare_id : id= ID -> VT_TYPE_DECLARE_ID[$id] ;
    public final DRLParser.type_declare_id_return type_declare_id() throws RecognitionException {
        DRLParser.type_declare_id_return retval = new DRLParser.type_declare_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:371:2: (id= ID -> VT_TYPE_DECLARE_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:371:5: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_type_declare_id1133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.TYPE_DECLARE, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:79: -> VT_TYPE_DECLARE_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_DECLARE_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declare_id"

    public static class decl_metadata_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_metadata"
    // src/main/resources/org/drools/lang/DRL.g:376:1: decl_metadata : AT ID ( paren_chunk )? -> ^( AT ID ( paren_chunk )? ) ;
    public final DRLParser.decl_metadata_return decl_metadata() throws RecognitionException {
        DRLParser.decl_metadata_return retval = new DRLParser.decl_metadata_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT42=null;
        Token ID43=null;
        DRLParser.paren_chunk_return paren_chunk44 = null;


        Object AT42_tree=null;
        Object ID43_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:377:2: ( AT ID ( paren_chunk )? -> ^( AT ID ( paren_chunk )? ) )
            // src/main/resources/org/drools/lang/DRL.g:377:4: AT ID ( paren_chunk )?
            {
            AT42=(Token)match(input,AT,FOLLOW_AT_in_decl_metadata1152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT42);

            if ( state.backtracking==0 ) {
              	helper.emit(AT42, DroolsEditorType.SYMBOL);	
            }
            ID43=(Token)match(input,ID,FOLLOW_ID_in_decl_metadata1160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID43);

            if ( state.backtracking==0 ) {
              	helper.emit(ID43, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:381:3: ( paren_chunk )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==LEFT_PAREN) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:381:3: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_decl_metadata1167);
                    paren_chunk44=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk44.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: paren_chunk, ID, AT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:3: -> ^( AT ID ( paren_chunk )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:382:6: ^( AT ID ( paren_chunk )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // src/main/resources/org/drools/lang/DRL.g:382:14: ( paren_chunk )?
                if ( stream_paren_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                }
                stream_paren_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_metadata"

    public static class decl_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field"
    // src/main/resources/org/drools/lang/DRL.g:385:1: decl_field : ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) ;
    public final DRLParser.decl_field_return decl_field() throws RecognitionException {
        DRLParser.decl_field_return retval = new DRLParser.decl_field_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID45=null;
        Token COLON47=null;
        DRLParser.decl_field_initialization_return decl_field_initialization46 = null;

        DRLParser.data_type_return data_type48 = null;

        DRLParser.decl_metadata_return decl_metadata49 = null;


        Object ID45_tree=null;
        Object COLON47_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_decl_field_initialization=new RewriteRuleSubtreeStream(adaptor,"rule decl_field_initialization");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        try {
            // src/main/resources/org/drools/lang/DRL.g:386:2: ( ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) )
            // src/main/resources/org/drools/lang/DRL.g:386:4: ID ( decl_field_initialization )? COLON data_type ( decl_metadata )*
            {
            ID45=(Token)match(input,ID,FOLLOW_ID_in_decl_field1192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID45);

            if ( state.backtracking==0 ) {
              	helper.emit(ID45, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:387:3: ( decl_field_initialization )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==EQUALS_ASSIGN) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:387:3: decl_field_initialization
                    {
                    pushFollow(FOLLOW_decl_field_initialization_in_decl_field1198);
                    decl_field_initialization46=decl_field_initialization();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decl_field_initialization.add(decl_field_initialization46.getTree());

                    }
                    break;

            }

            COLON47=(Token)match(input,COLON,FOLLOW_COLON_in_decl_field1204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON47);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON47, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_data_type_in_decl_field1210);
            data_type48=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type48.getTree());
            // src/main/resources/org/drools/lang/DRL.g:390:3: ( decl_metadata )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==AT) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:390:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_decl_field1214);
            	    decl_metadata49=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata49.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);



            // AST REWRITE
            // elements: ID, decl_field_initialization, data_type, decl_metadata
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:3: -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:391:6: ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ID.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:391:11: ( decl_field_initialization )?
                if ( stream_decl_field_initialization.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field_initialization.nextTree());

                }
                stream_decl_field_initialization.reset();
                adaptor.addChild(root_1, stream_data_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:391:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field"

    public static class decl_field_initialization_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field_initialization"
    // src/main/resources/org/drools/lang/DRL.g:394:1: decl_field_initialization : EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) ;
    public final DRLParser.decl_field_initialization_return decl_field_initialization() throws RecognitionException {
        DRLParser.decl_field_initialization_return retval = new DRLParser.decl_field_initialization_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN50=null;
        DRLParser.paren_chunk_return paren_chunk51 = null;


        Object EQUALS_ASSIGN50_tree=null;
        RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:395:2: ( EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:395:4: EQUALS_ASSIGN paren_chunk
            {
            EQUALS_ASSIGN50=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN50);

            if ( state.backtracking==0 ) {
              	helper.emit(EQUALS_ASSIGN50, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_decl_field_initialization1248);
            paren_chunk51=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk51.getTree());


            // AST REWRITE
            // elements: EQUALS_ASSIGN, paren_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:2: -> ^( EQUALS_ASSIGN paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:397:5: ^( EQUALS_ASSIGN paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_EQUALS_ASSIGN.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field_initialization"

    public static class rule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // src/main/resources/org/drools/lang/DRL.g:403:1: rule : rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) ;
    public final DRLParser.rule_return rule() throws RecognitionException {
        DRLParser.rule_return retval = new DRLParser.rule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_key_return rule_key52 = null;

        DRLParser.rule_id_return rule_id53 = null;

        DRLParser.extend_key_return extend_key54 = null;

        DRLParser.rule_id_return rule_id55 = null;

        DRLParser.decl_metadata_return decl_metadata56 = null;

        DRLParser.rule_attributes_return rule_attributes57 = null;

        DRLParser.when_part_return when_part58 = null;

        DRLParser.rhs_chunk_return rhs_chunk59 = null;


        RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
        RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
        RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
        RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
        RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.RULE);
        try {
            // src/main/resources/org/drools/lang/DRL.g:406:2: ( rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:407:3: rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk
            {
            pushFollow(FOLLOW_rule_key_in_rule1284);
            rule_key52=rule_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_key.add(rule_key52.getTree());
            pushFollow(FOLLOW_rule_id_in_rule1302);
            rule_id53=rule_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_id.add(rule_id53.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:410:3: ( extend_key rule_id )?
            int alt19=2;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:410:4: extend_key rule_id
                    {
                    pushFollow(FOLLOW_extend_key_in_rule1311);
                    extend_key54=extend_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extend_key.add(extend_key54.getTree());
                    pushFollow(FOLLOW_rule_id_in_rule1313);
                    rule_id55=rule_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_id.add(rule_id55.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:410:25: ( decl_metadata )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==AT) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:410:25: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_rule1317);
            	    decl_metadata56=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata56.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:410:40: ( rule_attributes )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:410:40: rule_attributes
                    {
                    pushFollow(FOLLOW_rule_attributes_in_rule1320);
                    rule_attributes57=rule_attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_attributes.add(rule_attributes57.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:410:57: ( when_part )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==WHEN) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:410:57: when_part
                    {
                    pushFollow(FOLLOW_when_part_in_rule1323);
                    when_part58=when_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_when_part.add(when_part58.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rhs_chunk_in_rule1326);
            rhs_chunk59=rhs_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk.add(rhs_chunk59.getTree());


            // AST REWRITE
            // elements: decl_metadata, rule_id, rule_key, rule_id, rhs_chunk, rule_attributes, when_part, extend_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:3: -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:411:6: ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rule_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_rule_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:411:25: ( ^( extend_key rule_id ) )?
                if ( stream_rule_id.hasNext()||stream_extend_key.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:411:25: ^( extend_key rule_id )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_extend_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_rule_id.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_rule_id.reset();
                stream_extend_key.reset();
                // src/main/resources/org/drools/lang/DRL.g:411:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:411:63: ( rule_attributes )?
                if ( stream_rule_attributes.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attributes.nextTree());

                }
                stream_rule_attributes.reset();
                // src/main/resources/org/drools/lang/DRL.g:411:80: ( when_part )?
                if ( stream_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_when_part.nextTree());

                }
                stream_when_part.reset();
                adaptor.addChild(root_1, stream_rhs_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(6) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			input.LA(5) == MINUS && input.LA(6) == ID && 
            			helper.validateLT(1, DroolsSoftKeywords.LOCK) && helper.validateLT(3, DroolsSoftKeywords.ON) &&
            			helper.validateLT(5, DroolsSoftKeywords.ACTIVE)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(4), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(5), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(4) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			(	(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.NO) && helper.validateLT(3, DroolsSoftKeywords.LOOP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AUTO) && helper.validateLT(3, DroolsSoftKeywords.FOCUS)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.RULEFLOW) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AGENDA) && helper.validateLT(3, DroolsSoftKeywords.GROUP))	)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(2) == EOF && input.LA(1) == ID && 
            				(helper.validateLT(1, DroolsSoftKeywords.DIALECT) || helper.validateLT(1, DroolsSoftKeywords.ENABLED) ||
            				 helper.validateLT(1, DroolsSoftKeywords.SALIENCE) || helper.validateLT(1, DroolsSoftKeywords.DURATION) ||
            				 helper.validateLT(1, DroolsSoftKeywords.TIMER))){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "when_part"
    // src/main/resources/org/drools/lang/DRL.g:457:1: when_part : WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block ;
    public final DRLParser.when_part_return when_part() throws RecognitionException {
        DRLParser.when_part_return retval = new DRLParser.when_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHEN60=null;
        Token COLON61=null;
        DRLParser.normal_lhs_block_return normal_lhs_block62 = null;


        Object WHEN60_tree=null;
        Object COLON61_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        try {
            // src/main/resources/org/drools/lang/DRL.g:458:2: ( WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block )
            // src/main/resources/org/drools/lang/DRL.g:458:5: WHEN ( COLON )? normal_lhs_block
            {
            WHEN60=(Token)match(input,WHEN,FOLLOW_WHEN_in_when_part1370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN60);

            if ( state.backtracking==0 ) {
              	helper.emit(WHEN60, DroolsEditorType.KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:459:3: ( COLON )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==COLON) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:459:3: COLON
                    {
                    COLON61=(Token)match(input,COLON,FOLLOW_COLON_in_when_part1376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON61);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COLON61, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_when_part1386);
            normal_lhs_block62=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block62.getTree());


            // AST REWRITE
            // elements: WHEN, normal_lhs_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:2: -> WHEN normal_lhs_block
            {
                adaptor.addChild(root_0, stream_WHEN.nextNode());
                adaptor.addChild(root_0, stream_normal_lhs_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "when_part"

    public static class rule_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_id"
    // src/main/resources/org/drools/lang/DRL.g:465:1: rule_id : (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] );
    public final DRLParser.rule_id_return rule_id() throws RecognitionException {
        DRLParser.rule_id_return retval = new DRLParser.rule_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:466:2: (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ID) ) {
                alt24=1;
            }
            else if ( (LA24_0==STRING) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:466:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_rule_id1407); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 468:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:469:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_rule_id1423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 471:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_id"

    public static class rule_attributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attributes"
    // src/main/resources/org/drools/lang/DRL.g:474:1: rule_attributes : ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) ;
    public final DRLParser.rule_attributes_return rule_attributes() throws RecognitionException {
        DRLParser.rule_attributes_return retval = new DRLParser.rule_attributes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON64=null;
        Token COMMA66=null;
        DRLParser.rule_attribute_return attr = null;

        DRLParser.attributes_key_return attributes_key63 = null;

        DRLParser.rule_attribute_return rule_attribute65 = null;


        Object COLON64_tree=null;
        Object COMMA66_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
        RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
        try {
            // src/main/resources/org/drools/lang/DRL.g:475:2: ( ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:475:4: ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )*
            {
            // src/main/resources/org/drools/lang/DRL.g:475:4: ( attributes_key COLON )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {
                int LA25_1 = input.LA(2);

                if ( (LA25_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
                    alt25=1;
                }
            }
            switch (alt25) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:475:6: attributes_key COLON
                    {
                    pushFollow(FOLLOW_attributes_key_in_rule_attributes1444);
                    attributes_key63=attributes_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attributes_key.add(attributes_key63.getTree());
                    COLON64=(Token)match(input,COLON,FOLLOW_COLON_in_rule_attributes1446); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON64);

                    if ( state.backtracking==0 ) {
                      	helper.emit(COLON64, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_rule_attribute_in_rule_attributes1456);
            rule_attribute65=rule_attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_attribute.add(rule_attribute65.getTree());
            // src/main/resources/org/drools/lang/DRL.g:476:18: ( ( COMMA )? attr= rule_attribute )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==ID||LA27_0==COMMA) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:476:20: ( COMMA )? attr= rule_attribute
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:476:20: ( COMMA )?
            	    int alt26=2;
            	    int LA26_0 = input.LA(1);

            	    if ( (LA26_0==COMMA) ) {
            	        alt26=1;
            	    }
            	    switch (alt26) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:476:20: COMMA
            	            {
            	            COMMA66=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1460); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA66);


            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA66, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1467);
            	    attr=rule_attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rule_attribute.add(attr.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);



            // AST REWRITE
            // elements: attributes_key, rule_attribute
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:3: -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:477:6: ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_RULE_ATTRIBUTES, "VT_RULE_ATTRIBUTES"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:477:27: ( attributes_key )?
                if ( stream_attributes_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_attributes_key.nextTree());

                }
                stream_attributes_key.reset();
                if ( !(stream_rule_attribute.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rule_attribute.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attribute.nextTree());

                }
                stream_rule_attribute.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_attributes"

    public static class rule_attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attribute"
    // src/main/resources/org/drools/lang/DRL.g:480:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );
    public final DRLParser.rule_attribute_return rule_attribute() throws RecognitionException {
        DRLParser.rule_attribute_return retval = new DRLParser.rule_attribute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_return salience67 = null;

        DRLParser.no_loop_return no_loop68 = null;

        DRLParser.agenda_group_return agenda_group69 = null;

        DRLParser.timer_return timer70 = null;

        DRLParser.activation_group_return activation_group71 = null;

        DRLParser.auto_focus_return auto_focus72 = null;

        DRLParser.date_effective_return date_effective73 = null;

        DRLParser.date_expires_return date_expires74 = null;

        DRLParser.enabled_return enabled75 = null;

        DRLParser.ruleflow_group_return ruleflow_group76 = null;

        DRLParser.lock_on_active_return lock_on_active77 = null;

        DRLParser.dialect_return dialect78 = null;

        DRLParser.calendars_return calendars79 = null;



         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE_ATTRIBUTE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:483:2: ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars )
            int alt28=13;
            alt28 = dfa28.predict(input);
            switch (alt28) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:483:4: salience
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_salience_in_rule_attribute1506);
                    salience67=salience();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, salience67.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:484:4: no_loop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_no_loop_in_rule_attribute1512);
                    no_loop68=no_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_loop68.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:485:4: agenda_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_agenda_group_in_rule_attribute1517);
                    agenda_group69=agenda_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, agenda_group69.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:486:4: timer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_timer_in_rule_attribute1524);
                    timer70=timer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timer70.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:487:4: activation_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_activation_group_in_rule_attribute1531);
                    activation_group71=activation_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, activation_group71.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:488:4: auto_focus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_auto_focus_in_rule_attribute1537);
                    auto_focus72=auto_focus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, auto_focus72.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:489:4: date_effective
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_effective_in_rule_attribute1543);
                    date_effective73=date_effective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_effective73.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:490:4: date_expires
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_expires_in_rule_attribute1549);
                    date_expires74=date_expires();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_expires74.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:491:4: enabled
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enabled_in_rule_attribute1555);
                    enabled75=enabled();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enabled75.getTree());

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:492:4: ruleflow_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1561);
                    ruleflow_group76=ruleflow_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ruleflow_group76.getTree());

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:493:4: lock_on_active
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_on_active_in_rule_attribute1567);
                    lock_on_active77=lock_on_active();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_on_active77.getTree());

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:494:4: dialect
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dialect_in_rule_attribute1572);
                    dialect78=dialect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dialect78.getTree());

                    }
                    break;
                case 13 :
                    // src/main/resources/org/drools/lang/DRL.g:495:6: calendars
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_calendars_in_rule_attribute1580);
                    calendars79=calendars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, calendars79.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; if (!(retval.tree instanceof CommonErrorNode)) helper.emit(Location.LOCATION_RULE_HEADER); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(2) == EOF && input.LA(1) == ID){
            			helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule_attribute"

    public static class date_effective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective"
    // src/main/resources/org/drools/lang/DRL.g:505:1: date_effective : date_effective_key STRING ;
    public final DRLParser.date_effective_return date_effective() throws RecognitionException {
        DRLParser.date_effective_return retval = new DRLParser.date_effective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING81=null;
        DRLParser.date_effective_key_return date_effective_key80 = null;


        Object STRING81_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:506:2: ( date_effective_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:506:4: date_effective_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_effective_key_in_date_effective1594);
            date_effective_key80=date_effective_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_effective_key80.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING81=(Token)match(input,STRING,FOLLOW_STRING_in_date_effective1599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING81_tree = (Object)adaptor.create(STRING81);
            adaptor.addChild(root_0, STRING81_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING81, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective"

    public static class date_expires_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires"
    // src/main/resources/org/drools/lang/DRL.g:510:1: date_expires : date_expires_key STRING ;
    public final DRLParser.date_expires_return date_expires() throws RecognitionException {
        DRLParser.date_expires_return retval = new DRLParser.date_expires_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING83=null;
        DRLParser.date_expires_key_return date_expires_key82 = null;


        Object STRING83_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:511:2: ( date_expires_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:511:4: date_expires_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_expires_key_in_date_expires1613);
            date_expires_key82=date_expires_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_expires_key82.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING83=(Token)match(input,STRING,FOLLOW_STRING_in_date_expires1618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING83_tree = (Object)adaptor.create(STRING83);
            adaptor.addChild(root_0, STRING83_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING83, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires"

    public static class enabled_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled"
    // src/main/resources/org/drools/lang/DRL.g:515:1: enabled : enabled_key ( BOOL | paren_chunk ) ;
    public final DRLParser.enabled_return enabled() throws RecognitionException {
        DRLParser.enabled_return retval = new DRLParser.enabled_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL85=null;
        DRLParser.enabled_key_return enabled_key84 = null;

        DRLParser.paren_chunk_return paren_chunk86 = null;


        Object BOOL85_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:516:2: ( enabled_key ( BOOL | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:516:4: enabled_key ( BOOL | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enabled_key_in_enabled1633);
            enabled_key84=enabled_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(enabled_key84.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:517:6: ( BOOL | paren_chunk )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==BOOL) ) {
                alt29=1;
            }
            else if ( (LA29_0==LEFT_PAREN) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:517:8: BOOL
                    {
                    BOOL85=(Token)match(input,BOOL,FOLLOW_BOOL_in_enabled1646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL85_tree = (Object)adaptor.create(BOOL85);
                    adaptor.addChild(root_0, BOOL85_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL85, DroolsEditorType.BOOLEAN_CONST );	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:518:8: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_enabled1657);
                    paren_chunk86=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk86.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled"

    public static class salience_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience"
    // src/main/resources/org/drools/lang/DRL.g:522:1: salience : salience_key ( signed_decimal | paren_chunk ) ;
    public final DRLParser.salience_return salience() throws RecognitionException {
        DRLParser.salience_return retval = new DRLParser.salience_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_key_return salience_key87 = null;

        DRLParser.signed_decimal_return signed_decimal88 = null;

        DRLParser.paren_chunk_return paren_chunk89 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:523:2: ( salience_key ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:523:4: salience_key ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_salience_key_in_salience1677);
            salience_key87=salience_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(salience_key87.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:524:3: ( signed_decimal | paren_chunk )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( ((LA30_0>=PLUS && LA30_0<=DECIMAL)) ) {
                alt30=1;
            }
            else if ( (LA30_0==LEFT_PAREN) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:524:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_salience1686);
                    signed_decimal88=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal88.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:525:5: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_salience1693);
                    paren_chunk89=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk89.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience"

    public static class no_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop"
    // src/main/resources/org/drools/lang/DRL.g:529:1: no_loop : no_loop_key ( BOOL )? ;
    public final DRLParser.no_loop_return no_loop() throws RecognitionException {
        DRLParser.no_loop_return retval = new DRLParser.no_loop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL91=null;
        DRLParser.no_loop_key_return no_loop_key90 = null;


        Object BOOL91_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:530:2: ( no_loop_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:530:4: no_loop_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_no_loop_key_in_no_loop1708);
            no_loop_key90=no_loop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(no_loop_key90.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:530:73: ( BOOL )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==BOOL) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:530:73: BOOL
                    {
                    BOOL91=(Token)match(input,BOOL,FOLLOW_BOOL_in_no_loop1713); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL91_tree = (Object)adaptor.create(BOOL91);
                    adaptor.addChild(root_0, BOOL91_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL91, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop"

    public static class auto_focus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus"
    // src/main/resources/org/drools/lang/DRL.g:534:1: auto_focus : auto_focus_key ( BOOL )? ;
    public final DRLParser.auto_focus_return auto_focus() throws RecognitionException {
        DRLParser.auto_focus_return retval = new DRLParser.auto_focus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL93=null;
        DRLParser.auto_focus_key_return auto_focus_key92 = null;


        Object BOOL93_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:535:2: ( auto_focus_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:535:4: auto_focus_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_auto_focus_key_in_auto_focus1728);
            auto_focus_key92=auto_focus_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(auto_focus_key92.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:535:76: ( BOOL )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BOOL) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:535:76: BOOL
                    {
                    BOOL93=(Token)match(input,BOOL,FOLLOW_BOOL_in_auto_focus1733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL93_tree = (Object)adaptor.create(BOOL93);
                    adaptor.addChild(root_0, BOOL93_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL93, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus"

    public static class activation_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group"
    // src/main/resources/org/drools/lang/DRL.g:539:1: activation_group : activation_group_key STRING ;
    public final DRLParser.activation_group_return activation_group() throws RecognitionException {
        DRLParser.activation_group_return retval = new DRLParser.activation_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING95=null;
        DRLParser.activation_group_key_return activation_group_key94 = null;


        Object STRING95_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:540:2: ( activation_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:540:4: activation_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_activation_group_key_in_activation_group1750);
            activation_group_key94=activation_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(activation_group_key94.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING95=(Token)match(input,STRING,FOLLOW_STRING_in_activation_group1755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING95_tree = (Object)adaptor.create(STRING95);
            adaptor.addChild(root_0, STRING95_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING95, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group"

    public static class ruleflow_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group"
    // src/main/resources/org/drools/lang/DRL.g:544:1: ruleflow_group : ruleflow_group_key STRING ;
    public final DRLParser.ruleflow_group_return ruleflow_group() throws RecognitionException {
        DRLParser.ruleflow_group_return retval = new DRLParser.ruleflow_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING97=null;
        DRLParser.ruleflow_group_key_return ruleflow_group_key96 = null;


        Object STRING97_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:545:2: ( ruleflow_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:545:4: ruleflow_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ruleflow_group_key_in_ruleflow_group1769);
            ruleflow_group_key96=ruleflow_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(ruleflow_group_key96.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING97=(Token)match(input,STRING,FOLLOW_STRING_in_ruleflow_group1774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING97_tree = (Object)adaptor.create(STRING97);
            adaptor.addChild(root_0, STRING97_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING97, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group"

    public static class agenda_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group"
    // src/main/resources/org/drools/lang/DRL.g:549:1: agenda_group : agenda_group_key STRING ;
    public final DRLParser.agenda_group_return agenda_group() throws RecognitionException {
        DRLParser.agenda_group_return retval = new DRLParser.agenda_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING99=null;
        DRLParser.agenda_group_key_return agenda_group_key98 = null;


        Object STRING99_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:550:2: ( agenda_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:550:4: agenda_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_agenda_group_key_in_agenda_group1788);
            agenda_group_key98=agenda_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(agenda_group_key98.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING99=(Token)match(input,STRING,FOLLOW_STRING_in_agenda_group1793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING99_tree = (Object)adaptor.create(STRING99);
            adaptor.addChild(root_0, STRING99_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING99, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group"

    public static class timer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer"
    // src/main/resources/org/drools/lang/DRL.g:554:1: timer : ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) ;
    public final DRLParser.timer_return timer() throws RecognitionException {
        DRLParser.timer_return retval = new DRLParser.timer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.duration_key_return duration_key100 = null;

        DRLParser.timer_key_return timer_key101 = null;

        DRLParser.signed_decimal_return signed_decimal102 = null;

        DRLParser.paren_chunk_return paren_chunk103 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:555:2: ( ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:555:4: ( duration_key | timer_key ) ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:555:4: ( duration_key | timer_key )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
                int LA33_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                    alt33=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                    alt33=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:555:5: duration_key
                    {
                    pushFollow(FOLLOW_duration_key_in_timer1808);
                    duration_key100=duration_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(duration_key100.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:555:19: timer_key
                    {
                    pushFollow(FOLLOW_timer_key_in_timer1811);
                    timer_key101=timer_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(timer_key101.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:556:3: ( signed_decimal | paren_chunk )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=PLUS && LA34_0<=DECIMAL)) ) {
                alt34=1;
            }
            else if ( (LA34_0==LEFT_PAREN) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:556:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_timer1822);
                    signed_decimal102=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal102.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:557:9: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_timer1833);
                    paren_chunk103=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk103.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer"

    public static class calendars_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars"
    // src/main/resources/org/drools/lang/DRL.g:561:1: calendars : calendars_key string_list ;
    public final DRLParser.calendars_return calendars() throws RecognitionException {
        DRLParser.calendars_return retval = new DRLParser.calendars_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.calendars_key_return calendars_key104 = null;

        DRLParser.string_list_return string_list105 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:562:2: ( calendars_key string_list )
            // src/main/resources/org/drools/lang/DRL.g:562:4: calendars_key string_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_calendars_key_in_calendars1854);
            calendars_key104=calendars_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(calendars_key104.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            pushFollow(FOLLOW_string_list_in_calendars1859);
            string_list105=string_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_list105.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars"

    public static class dialect_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect"
    // src/main/resources/org/drools/lang/DRL.g:565:1: dialect : dialect_key STRING ;
    public final DRLParser.dialect_return dialect() throws RecognitionException {
        DRLParser.dialect_return retval = new DRLParser.dialect_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING107=null;
        DRLParser.dialect_key_return dialect_key106 = null;


        Object STRING107_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:566:2: ( dialect_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:566:4: dialect_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_dialect_key_in_dialect1870);
            dialect_key106=dialect_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(dialect_key106.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING107=(Token)match(input,STRING,FOLLOW_STRING_in_dialect1875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING107_tree = (Object)adaptor.create(STRING107);
            adaptor.addChild(root_0, STRING107_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING107, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect"

    public static class lock_on_active_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active"
    // src/main/resources/org/drools/lang/DRL.g:570:1: lock_on_active : lock_on_active_key ( BOOL )? ;
    public final DRLParser.lock_on_active_return lock_on_active() throws RecognitionException {
        DRLParser.lock_on_active_return retval = new DRLParser.lock_on_active_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL109=null;
        DRLParser.lock_on_active_key_return lock_on_active_key108 = null;


        Object BOOL109_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:571:2: ( lock_on_active_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:571:4: lock_on_active_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lock_on_active_key_in_lock_on_active1893);
            lock_on_active_key108=lock_on_active_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(lock_on_active_key108.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:571:80: ( BOOL )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==BOOL) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:571:80: BOOL
                    {
                    BOOL109=(Token)match(input,BOOL,FOLLOW_BOOL_in_lock_on_active1898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL109_tree = (Object)adaptor.create(BOOL109);
                    adaptor.addChild(root_0, BOOL109_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL109, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active"

    public static class normal_lhs_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normal_lhs_block"
    // src/main/resources/org/drools/lang/DRL.g:578:1: normal_lhs_block : ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) ;
    public final DRLParser.normal_lhs_block_return normal_lhs_block() throws RecognitionException {
        DRLParser.normal_lhs_block_return retval = new DRLParser.normal_lhs_block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_return lhs110 = null;


        RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs");
        try {
            // src/main/resources/org/drools/lang/DRL.g:579:2: ( ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) )
            // src/main/resources/org/drools/lang/DRL.g:579:4: ( lhs )*
            {
            // src/main/resources/org/drools/lang/DRL.g:579:4: ( lhs )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ID) ) {
                    int LA36_1 = input.LA(2);

                    if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) ) {
                        alt36=1;
                    }


                }
                else if ( (LA36_0==LEFT_PAREN) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:579:4: lhs
            	    {
            	    pushFollow(FOLLOW_lhs_in_normal_lhs_block1916);
            	    lhs110=lhs();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_lhs.add(lhs110.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);



            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 580:2: -> ^( VT_AND_IMPLICIT ( lhs )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:580:5: ^( VT_AND_IMPLICIT ( lhs )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_IMPLICIT, "VT_AND_IMPLICIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:580:23: ( lhs )*
                while ( stream_lhs.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs.nextTree());

                }
                stream_lhs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normal_lhs_block"

    public static class lhs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs"
    // src/main/resources/org/drools/lang/DRL.g:583:1: lhs : lhs_or ;
    public final DRLParser.lhs_return lhs() throws RecognitionException {
        DRLParser.lhs_return retval = new DRLParser.lhs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_or_return lhs_or111 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:583:5: ( lhs_or )
            // src/main/resources/org/drools/lang/DRL.g:583:7: lhs_or
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_or_in_lhs1937);
            lhs_or111=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or111.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs"

    public static class lhs_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_or"
    // src/main/resources/org/drools/lang/DRL.g:586:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );
    public final DRLParser.lhs_or_return lhs_or() throws RecognitionException {
        DRLParser.lhs_or_return retval = new DRLParser.lhs_or_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN112=null;
        Token RIGHT_PAREN114=null;
        DRLParser.or_key_return or = null;

        DRLParser.or_key_return value = null;

        DRLParser.lhs_and_return lhs_and113 = null;

        DRLParser.lhs_and_return lhs_and115 = null;

        DRLParser.lhs_and_return lhs_and116 = null;


        Object LEFT_PAREN112_tree=null;
        Object RIGHT_PAREN114_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_lhs_and=new RewriteRuleSubtreeStream(adaptor,"rule lhs_and");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:589:3: ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==LEFT_PAREN) ) {
                int LA39_1 = input.LA(2);

                if ( (synpred1_DRL()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA39_0==ID) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:589:5: ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN
                    {
                    LEFT_PAREN112=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or1961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN112);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN112, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_key_in_lhs_or1971);
                    or=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:593:4: ( lhs_and )+
                    int cnt37=0;
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==ID||LA37_0==LEFT_PAREN) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:593:4: lhs_and
                    	    {
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or1979);
                    	    lhs_and113=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and113.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt37 >= 1 ) break loop37;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(37, input);
                                throw eee;
                        }
                        cnt37++;
                    } while (true);

                    RIGHT_PAREN114=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or1985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN114);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN114, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: lhs_and, RIGHT_PAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 595:3: -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:595:6: ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_PREFIX, (or!=null?((Token)or.start):null)), root_1);

                        if ( !(stream_lhs_and.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_and.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_and.nextTree());

                        }
                        stream_lhs_and.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:596:4: ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:596:4: ( lhs_and -> lhs_and )
                    // src/main/resources/org/drools/lang/DRL.g:596:5: lhs_and
                    {
                    pushFollow(FOLLOW_lhs_and_in_lhs_or2008);
                    lhs_and115=lhs_and();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and115.getTree());


                    // AST REWRITE
                    // elements: lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 596:13: -> lhs_and
                    {
                        adaptor.addChild(root_0, stream_lhs_and.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:597:3: ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==ID) ) {
                            int LA38_1 = input.LA(2);

                            if ( ((synpred2_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) ) {
                                alt38=1;
                            }


                        }


                        switch (alt38) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:597:5: ( or_key )=> (value= or_key ) lhs_and
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:597:16: (value= or_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:597:17: value= or_key
                    	    {
                    	    pushFollow(FOLLOW_or_key_in_lhs_or2028);
                    	    value=or_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      orToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2040);
                    	    lhs_and116=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and116.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_and, lhs_or
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 600:3: -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:600:6: ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_INFIX, orToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_and.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_or"

    public static class lhs_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_and"
    // src/main/resources/org/drools/lang/DRL.g:603:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );
    public final DRLParser.lhs_and_return lhs_and() throws RecognitionException {
        DRLParser.lhs_and_return retval = new DRLParser.lhs_and_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN117=null;
        Token RIGHT_PAREN119=null;
        DRLParser.and_key_return and = null;

        DRLParser.and_key_return value = null;

        DRLParser.lhs_unary_return lhs_unary118 = null;

        DRLParser.lhs_unary_return lhs_unary120 = null;

        DRLParser.lhs_unary_return lhs_unary121 = null;


        Object LEFT_PAREN117_tree=null;
        Object RIGHT_PAREN119_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
        RewriteRuleSubtreeStream stream_lhs_unary=new RewriteRuleSubtreeStream(adaptor,"rule lhs_unary");

        	Token andToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:606:3: ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==LEFT_PAREN) ) {
                int LA42_1 = input.LA(2);

                if ( (synpred3_DRL()) ) {
                    alt42=1;
                }
                else if ( (true) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA42_0==ID) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:606:5: ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN
                    {
                    LEFT_PAREN117=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and2081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN117);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN117, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_and_key_in_lhs_and2091);
                    and=and_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_and_key.add(and.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:610:4: ( lhs_unary )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ID||LA40_0==LEFT_PAREN) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:610:4: lhs_unary
                    	    {
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2099);
                    	    lhs_unary118=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary118.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);

                    RIGHT_PAREN119=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and2105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN119);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN119, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: RIGHT_PAREN, lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 612:3: -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:612:6: ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_PREFIX, (and!=null?((Token)and.start):null)), root_1);

                        if ( !(stream_lhs_unary.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_unary.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                        }
                        stream_lhs_unary.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:613:4: ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:613:4: ( lhs_unary -> lhs_unary )
                    // src/main/resources/org/drools/lang/DRL.g:613:5: lhs_unary
                    {
                    pushFollow(FOLLOW_lhs_unary_in_lhs_and2129);
                    lhs_unary120=lhs_unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary120.getTree());


                    // AST REWRITE
                    // elements: lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 613:15: -> lhs_unary
                    {
                        adaptor.addChild(root_0, stream_lhs_unary.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:614:3: ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==ID) ) {
                            int LA41_2 = input.LA(2);

                            if ( ((synpred4_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.AND))))) ) {
                                alt41=1;
                            }


                        }


                        switch (alt41) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:614:5: ( and_key )=> (value= and_key ) lhs_unary
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:614:17: (value= and_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:614:18: value= and_key
                    	    {
                    	    pushFollow(FOLLOW_and_key_in_lhs_and2149);
                    	    value=and_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_and_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      andToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2161);
                    	    lhs_unary121=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary121.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_and, lhs_unary
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 617:3: -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:617:6: ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_INFIX, andToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_and"

    public static class lhs_unary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_unary"
    // src/main/resources/org/drools/lang/DRL.g:620:1: lhs_unary : ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )? ;
    public final DRLParser.lhs_unary_return lhs_unary() throws RecognitionException {
        DRLParser.lhs_unary_return retval = new DRLParser.lhs_unary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN127=null;
        Token RIGHT_PAREN129=null;
        Token SEMICOLON131=null;
        DRLParser.lhs_exist_return lhs_exist122 = null;

        DRLParser.lhs_not_binding_return lhs_not_binding123 = null;

        DRLParser.lhs_not_return lhs_not124 = null;

        DRLParser.lhs_eval_return lhs_eval125 = null;

        DRLParser.lhs_forall_return lhs_forall126 = null;

        DRLParser.lhs_or_return lhs_or128 = null;

        DRLParser.pattern_source_return pattern_source130 = null;


        Object LEFT_PAREN127_tree=null;
        Object RIGHT_PAREN129_tree=null;
        Object SEMICOLON131_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:621:2: ( ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )? )
            // src/main/resources/org/drools/lang/DRL.g:621:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ( ( SEMICOLON )=> SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:621:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )
            int alt43=7;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ID) ) {
                int LA43_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {
                    alt43=1;
                }
                else if ( (((helper.validateNotWithBinding())&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) ) {
                    alt43=2;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                    alt43=3;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {
                    alt43=4;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {
                    alt43=5;
                }
                else if ( (true) ) {
                    alt43=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA43_0==LEFT_PAREN) ) {
                alt43=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:621:6: lhs_exist
                    {
                    pushFollow(FOLLOW_lhs_exist_in_lhs_unary2192);
                    lhs_exist122=lhs_exist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_exist122.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:622:4: {...}? => lhs_not_binding
                    {
                    if ( !((helper.validateNotWithBinding())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "lhs_unary", "helper.validateNotWithBinding()");
                    }
                    pushFollow(FOLLOW_lhs_not_binding_in_lhs_unary2200);
                    lhs_not_binding123=lhs_not_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not_binding123.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:623:5: lhs_not
                    {
                    pushFollow(FOLLOW_lhs_not_in_lhs_unary2206);
                    lhs_not124=lhs_not();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not124.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:624:5: lhs_eval
                    {
                    pushFollow(FOLLOW_lhs_eval_in_lhs_unary2212);
                    lhs_eval125=lhs_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_eval125.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:625:5: lhs_forall
                    {
                    pushFollow(FOLLOW_lhs_forall_in_lhs_unary2218);
                    lhs_forall126=lhs_forall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_forall126.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:626:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN127=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary2224); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN127, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_unary2235);
                    lhs_or128=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or128.getTree());
                    RIGHT_PAREN129=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary2241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN129_tree = (Object)adaptor.create(RIGHT_PAREN129);
                    adaptor.addChild(root_0, RIGHT_PAREN129_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN129, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:629:5: pattern_source
                    {
                    pushFollow(FOLLOW_pattern_source_in_lhs_unary2249);
                    pattern_source130=pattern_source();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_source130.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:631:3: ( ( SEMICOLON )=> SEMICOLON )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==SEMICOLON) ) {
                int LA44_1 = input.LA(2);

                if ( (synpred5_DRL()) ) {
                    alt44=1;
                }
            }
            switch (alt44) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:631:4: ( SEMICOLON )=> SEMICOLON
                    {
                    SEMICOLON131=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_unary2263); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(SEMICOLON131, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_unary"

    public static class lhs_exist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_exist"
    // src/main/resources/org/drools/lang/DRL.g:634:1: lhs_exist : exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_exist_return lhs_exist() throws RecognitionException {
        DRLParser.lhs_exist_return retval = new DRLParser.lhs_exist_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN134=null;
        Token RIGHT_PAREN136=null;
        DRLParser.exists_key_return exists_key132 = null;

        DRLParser.lhs_or_return lhs_or133 = null;

        DRLParser.lhs_or_return lhs_or135 = null;

        DRLParser.lhs_pattern_return lhs_pattern137 = null;


        Object LEFT_PAREN134_tree=null;
        Object RIGHT_PAREN136_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_exists_key=new RewriteRuleSubtreeStream(adaptor,"rule exists_key");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        try {
            // src/main/resources/org/drools/lang/DRL.g:635:2: ( exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:635:4: exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_exists_key_in_lhs_exist2279);
            exists_key132=exists_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exists_key.add(exists_key132.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS);	
            }
            // src/main/resources/org/drools/lang/DRL.g:637:10: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt45=3;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==LEFT_PAREN) ) {
                int LA45_1 = input.LA(2);

                if ( (synpred6_DRL()) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA45_0==ID) ) {
                int LA45_2 = input.LA(2);

                if ( (((synpred6_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))))||(synpred6_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))))||(synpred6_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))))||synpred6_DRL()||(synpred6_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))||((synpred6_DRL()&&(helper.validateNotWithBinding()))&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) ) {
                    alt45=1;
                }
                else if ( (true) ) {
                    alt45=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:637:12: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2306);
                    lhs_or133=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or133.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:638:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN134=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_exist2313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN134);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN134, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2321);
                    lhs_or135=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or135.getTree());
                    RIGHT_PAREN136=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_exist2328); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN136);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN136, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:641:12: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_exist2343);
                    lhs_pattern137=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern137.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: exists_key, lhs_or, RIGHT_PAREN, lhs_pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 643:10: -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:643:13: ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exists_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:643:26: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:643:34: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:643:47: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_exist"

    public static class lhs_not_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not_binding"
    // src/main/resources/org/drools/lang/DRL.g:646:1: lhs_not_binding : not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) ;
    public final DRLParser.lhs_not_binding_return lhs_not_binding() throws RecognitionException {
        DRLParser.lhs_not_binding_return retval = new DRLParser.lhs_not_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.not_key_return not_key138 = null;

        DRLParser.fact_binding_return fact_binding139 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:647:2: ( not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) )
            // src/main/resources/org/drools/lang/DRL.g:647:4: not_key fact_binding
            {
            pushFollow(FOLLOW_not_key_in_lhs_not_binding2389);
            not_key138=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key138.getTree());
            pushFollow(FOLLOW_fact_binding_in_lhs_not_binding2391);
            fact_binding139=fact_binding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding139.getTree());


            // AST REWRITE
            // elements: not_key, fact_binding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:2: -> ^( not_key ^( VT_PATTERN fact_binding ) )
            {
                // src/main/resources/org/drools/lang/DRL.g:648:5: ^( not_key ^( VT_PATTERN fact_binding ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:648:15: ^( VT_PATTERN fact_binding )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_2);

                adaptor.addChild(root_2, stream_fact_binding.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not_binding"

    public static class lhs_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not"
    // src/main/resources/org/drools/lang/DRL.g:651:1: lhs_not : not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_not_return lhs_not() throws RecognitionException {
        DRLParser.lhs_not_return retval = new DRLParser.lhs_not_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN142=null;
        Token RIGHT_PAREN144=null;
        DRLParser.not_key_return not_key140 = null;

        DRLParser.lhs_or_return lhs_or141 = null;

        DRLParser.lhs_or_return lhs_or143 = null;

        DRLParser.lhs_pattern_return lhs_pattern145 = null;


        Object LEFT_PAREN142_tree=null;
        Object RIGHT_PAREN144_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        try {
            // src/main/resources/org/drools/lang/DRL.g:651:9: ( not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:651:11: not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_not_key_in_lhs_not2414);
            not_key140=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key140.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_NOT);	
            }
            // src/main/resources/org/drools/lang/DRL.g:653:3: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt46=3;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==LEFT_PAREN) ) {
                int LA46_1 = input.LA(2);

                if ( (synpred7_DRL()) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==ID) ) {
                int LA46_2 = input.LA(2);

                if ( (synpred7_DRL()) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:653:5: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2436);
                    lhs_or141=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or141.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:654:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN142=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_not2443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN142);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN142, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2452);
                    lhs_or143=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or143.getTree());
                    RIGHT_PAREN144=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_not2458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN144);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN144, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:657:6: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_not2468);
                    lhs_pattern145=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern145.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lhs_or, not_key, RIGHT_PAREN, lhs_pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 658:10: -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:658:13: ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:658:23: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:658:31: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:658:44: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not"

    public static class lhs_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_eval"
    // src/main/resources/org/drools/lang/DRL.g:661:1: lhs_eval : ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) ;
    public final DRLParser.lhs_eval_return lhs_eval() throws RecognitionException {
        DRLParser.lhs_eval_return retval = new DRLParser.lhs_eval_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.eval_key_return ev = null;

        DRLParser.paren_chunk_return pc = null;


        RewriteRuleSubtreeStream stream_eval_key=new RewriteRuleSubtreeStream(adaptor,"rule eval_key");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:662:2: (ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:662:4: ev= eval_key pc= paren_chunk
            {
            pushFollow(FOLLOW_eval_key_in_lhs_eval2507);
            ev=eval_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eval_key.add(ev.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_EVAL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_lhs_eval2516);
            pc=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(pc.getTree());
            if ( state.backtracking==0 ) {
              	if (((DroolsTree) (pc!=null?((Object)pc.tree):null)).getText() != null){
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	            		
              		}
              	
            }
            if ( state.backtracking==0 ) {
              	String body = helper.safeSubstring( (pc!=null?input.toString(pc.start,pc.stop):null), 1, (pc!=null?input.toString(pc.start,pc.stop):null).length()-1 );
              		helper.checkTrailingSemicolon( body, (ev!=null?((Token)ev.start):null) );	
            }


            // AST REWRITE
            // elements: paren_chunk, eval_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:3: -> ^( eval_key paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:671:6: ^( eval_key paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_eval_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_eval"

    public static class lhs_forall_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_forall"
    // src/main/resources/org/drools/lang/DRL.g:674:1: lhs_forall : forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) ;
    public final DRLParser.lhs_forall_return lhs_forall() throws RecognitionException {
        DRLParser.lhs_forall_return retval = new DRLParser.lhs_forall_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN147=null;
        Token RIGHT_PAREN149=null;
        DRLParser.forall_key_return forall_key146 = null;

        DRLParser.pattern_source_return pattern_source148 = null;


        Object LEFT_PAREN147_tree=null;
        Object RIGHT_PAREN149_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:675:2: ( forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:675:4: forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN
            {
            pushFollow(FOLLOW_forall_key_in_lhs_forall2543);
            forall_key146=forall_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forall_key.add(forall_key146.getTree());
            LEFT_PAREN147=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN147);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN147, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:677:4: ( pattern_source )+
            int cnt47=0;
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==ID) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:677:4: pattern_source
            	    {
            	    pushFollow(FOLLOW_pattern_source_in_lhs_forall2556);
            	    pattern_source148=pattern_source();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source148.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt47 >= 1 ) break loop47;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(47, input);
                        throw eee;
                }
                cnt47++;
            } while (true);

            RIGHT_PAREN149=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN149);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN149, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, pattern_source, forall_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 679:3: -> ^( forall_key ( pattern_source )+ RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:679:6: ^( forall_key ( pattern_source )+ RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_forall_key.nextNode(), root_1);

                if ( !(stream_pattern_source.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pattern_source.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern_source.nextTree());

                }
                stream_pattern_source.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_forall"

    public static class pattern_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_source"
    // src/main/resources/org/drools/lang/DRL.g:682:1: pattern_source : lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? ;
    public final DRLParser.pattern_source_return pattern_source() throws RecognitionException {
        DRLParser.pattern_source_return retval = new DRLParser.pattern_source_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FROM152=null;
        DRLParser.lhs_pattern_return lhs_pattern150 = null;

        DRLParser.over_clause_return over_clause151 = null;

        DRLParser.accumulate_statement_return accumulate_statement153 = null;

        DRLParser.collect_statement_return collect_statement154 = null;

        DRLParser.entrypoint_statement_return entrypoint_statement155 = null;

        DRLParser.from_source_return from_source156 = null;


        Object FROM152_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:685:2: ( lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? )
            // src/main/resources/org/drools/lang/DRL.g:685:4: lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_pattern_in_pattern_source2598);
            lhs_pattern150=lhs_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_pattern150.getTree());
            // src/main/resources/org/drools/lang/DRL.g:686:3: ( over_clause )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==OVER) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:686:3: over_clause
                    {
                    pushFollow(FOLLOW_over_clause_in_pattern_source2602);
                    over_clause151=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause151.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:687:3: ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==FROM) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:688:4: FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    {
                    FROM152=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source2612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FROM152_tree = (Object)adaptor.create(FROM152);
                    root_0 = (Object)adaptor.becomeRoot(FROM152_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FROM152, DroolsEditorType.KEYWORD);
                      			helper.emit(Location.LOCATION_LHS_FROM);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:691:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    int alt49=4;
                    alt49 = dfa49.predict(input);
                    switch (alt49) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:691:14: accumulate_statement
                            {
                            pushFollow(FOLLOW_accumulate_statement_in_pattern_source2632);
                            accumulate_statement153=accumulate_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_statement153.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:692:15: collect_statement
                            {
                            pushFollow(FOLLOW_collect_statement_in_pattern_source2648);
                            collect_statement154=collect_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collect_statement154.getTree());

                            }
                            break;
                        case 3 :
                            // src/main/resources/org/drools/lang/DRL.g:693:15: entrypoint_statement
                            {
                            pushFollow(FOLLOW_entrypoint_statement_in_pattern_source2665);
                            entrypoint_statement155=entrypoint_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, entrypoint_statement155.getTree());

                            }
                            break;
                        case 4 :
                            // src/main/resources/org/drools/lang/DRL.g:694:15: from_source
                            {
                            pushFollow(FOLLOW_from_source_in_pattern_source2681);
                            from_source156=from_source();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_source156.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_ACCUMULATE);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_COLLECT);
            	}

        }
        return retval;
    }
    // $ANTLR end "pattern_source"

    public static class over_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_clause"
    // src/main/resources/org/drools/lang/DRL.g:712:1: over_clause : OVER over_elements ( COMMA over_elements )* ;
    public final DRLParser.over_clause_return over_clause() throws RecognitionException {
        DRLParser.over_clause_return retval = new DRLParser.over_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OVER157=null;
        Token COMMA159=null;
        DRLParser.over_elements_return over_elements158 = null;

        DRLParser.over_elements_return over_elements160 = null;


        Object OVER157_tree=null;
        Object COMMA159_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:713:2: ( OVER over_elements ( COMMA over_elements )* )
            // src/main/resources/org/drools/lang/DRL.g:713:4: OVER over_elements ( COMMA over_elements )*
            {
            root_0 = (Object)adaptor.nil();

            OVER157=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause2713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OVER157_tree = (Object)adaptor.create(OVER157);
            root_0 = (Object)adaptor.becomeRoot(OVER157_tree, root_0);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(OVER157, DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_over_elements_in_over_clause2718);
            over_elements158=over_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements158.getTree());
            // src/main/resources/org/drools/lang/DRL.g:714:4: ( COMMA over_elements )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMA) ) {
                    int LA51_2 = input.LA(2);

                    if ( (LA51_2==ID) ) {
                        int LA51_3 = input.LA(3);

                        if ( (LA51_3==COLON) ) {
                            alt51=1;
                        }


                    }


                }


                switch (alt51) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:714:5: COMMA over_elements
            	    {
            	    COMMA159=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause2725); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA159, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_over_elements_in_over_clause2730);
            	    over_elements160=over_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements160.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_clause"

    public static class over_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_elements"
    // src/main/resources/org/drools/lang/DRL.g:717:1: over_elements : id1= ID COLON id2= ID paren_chunk -> ^( VT_BEHAVIOR $id1 $id2 paren_chunk ) ;
    public final DRLParser.over_elements_return over_elements() throws RecognitionException {
        DRLParser.over_elements_return retval = new DRLParser.over_elements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token COLON161=null;
        DRLParser.paren_chunk_return paren_chunk162 = null;


        Object id1_tree=null;
        Object id2_tree=null;
        Object COLON161_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:718:2: (id1= ID COLON id2= ID paren_chunk -> ^( VT_BEHAVIOR $id1 $id2 paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:718:4: id1= ID COLON id2= ID paren_chunk
            {
            id1=(Token)match(input,ID,FOLLOW_ID_in_over_elements2745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.IDENTIFIER);	
            }
            COLON161=(Token)match(input,COLON,FOLLOW_COLON_in_over_elements2752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON161);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON161, DroolsEditorType.SYMBOL);	
            }
            id2=(Token)match(input,ID,FOLLOW_ID_in_over_elements2761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              	helper.emit(id2, DroolsEditorType.IDENTIFIER);	
            }
            pushFollow(FOLLOW_paren_chunk_in_over_elements2768);
            paren_chunk162=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk162.getTree());


            // AST REWRITE
            // elements: id2, id1, paren_chunk
            // token labels: id1, id2
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 722:2: -> ^( VT_BEHAVIOR $id1 $id2 paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:722:5: ^( VT_BEHAVIOR $id1 $id2 paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BEHAVIOR, "VT_BEHAVIOR"), root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());
                adaptor.addChild(root_1, stream_id2.nextNode());
                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_elements"

    public static class accumulate_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_statement"
    // src/main/resources/org/drools/lang/DRL.g:725:1: accumulate_statement : ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) ;
    public final DRLParser.accumulate_statement_return accumulate_statement() throws RecognitionException {
        DRLParser.accumulate_statement_return retval = new DRLParser.accumulate_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ACCUMULATE163=null;
        Token LEFT_PAREN164=null;
        Token COMMA166=null;
        Token RIGHT_PAREN169=null;
        DRLParser.lhs_or_return lhs_or165 = null;

        DRLParser.accumulate_init_clause_return accumulate_init_clause167 = null;

        DRLParser.accumulate_id_clause_return accumulate_id_clause168 = null;


        Object ACCUMULATE163_tree=null;
        Object LEFT_PAREN164_tree=null;
        Object COMMA166_tree=null;
        Object RIGHT_PAREN169_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
        RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
        try {
            // src/main/resources/org/drools/lang/DRL.g:726:2: ( ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:726:4: ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN
            {
            ACCUMULATE163=(Token)match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement2794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ACCUMULATE.add(ACCUMULATE163);

            if ( state.backtracking==0 ) {
              	helper.emit(ACCUMULATE163, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE);	
            }
            LEFT_PAREN164=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement2803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN164);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN164, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_accumulate_statement2811);
            lhs_or165=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or165.getTree());
            // src/main/resources/org/drools/lang/DRL.g:730:3: ( COMMA )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==COMMA) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:730:3: COMMA
                    {
                    COMMA166=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement2816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA166);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COMMA166, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:731:3: ( accumulate_init_clause | accumulate_id_clause )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==ID) ) {
                int LA53_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                    alt53=1;
                }
                else if ( (true) ) {
                    alt53=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:731:5: accumulate_init_clause
                    {
                    pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement2826);
                    accumulate_init_clause167=accumulate_init_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_init_clause.add(accumulate_init_clause167.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:732:5: accumulate_id_clause
                    {
                    pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement2832);
                    accumulate_id_clause168=accumulate_id_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_id_clause.add(accumulate_id_clause168.getTree());

                    }
                    break;

            }

            RIGHT_PAREN169=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement2840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN169);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN169, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: accumulate_init_clause, accumulate_id_clause, lhs_or, ACCUMULATE, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 736:3: -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:736:6: ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ACCUMULATE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:736:26: ( accumulate_init_clause )?
                if ( stream_accumulate_init_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_init_clause.nextTree());

                }
                stream_accumulate_init_clause.reset();
                // src/main/resources/org/drools/lang/DRL.g:736:50: ( accumulate_id_clause )?
                if ( stream_accumulate_id_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_id_clause.nextTree());

                }
                stream_accumulate_id_clause.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_statement"

    public static class accumulate_init_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_init_clause"
    // src/main/resources/org/drools/lang/DRL.g:740:1: accumulate_init_clause : init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) ;
    public final DRLParser.accumulate_init_clause_return accumulate_init_clause() throws RecognitionException {
        DRLParser.accumulate_init_clause_return retval = new DRLParser.accumulate_init_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token cm1=null;
        Token cm2=null;
        Token cm3=null;
        DRLParser.accumulate_paren_chunk_return pc1 = null;

        DRLParser.accumulate_paren_chunk_return pc2 = null;

        DRLParser.accumulate_paren_chunk_return pc3 = null;

        DRLParser.result_key_return res1 = null;

        DRLParser.accumulate_paren_chunk_return pc4 = null;

        DRLParser.init_key_return init_key170 = null;

        DRLParser.action_key_return action_key171 = null;

        DRLParser.reverse_key_return reverse_key172 = null;


        Object cm1_tree=null;
        Object cm2_tree=null;
        Object cm3_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_accumulate_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk");
        RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_init_key=new RewriteRuleSubtreeStream(adaptor,"rule init_key");
        RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:743:2: ( init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) )
            // src/main/resources/org/drools/lang/DRL.g:743:4: init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE]
            {
            pushFollow(FOLLOW_init_key_in_accumulate_init_clause2886);
            init_key170=init_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_init_key.add(init_key170.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2896);
            pc1=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc1.getTree());
            // src/main/resources/org/drools/lang/DRL.g:745:84: (cm1= COMMA )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==COMMA) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:745:84: cm1= COMMA
                    {
                    cm1=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause2901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm1, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);	
            }
            pushFollow(FOLLOW_action_key_in_accumulate_init_clause2912);
            action_key171=action_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_action_key.add(action_key171.getTree());
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2916);
            pc2=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:747:97: (cm2= COMMA )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==COMMA) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:747:97: cm2= COMMA
                    {
                    cm2=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause2921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm2);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm2, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null && pc2 != null && ((DroolsTree) pc2.getTree()).getText() != null ) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);	
            }
            // src/main/resources/org/drools/lang/DRL.g:749:2: ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ID) ) {
                int LA57_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                    alt57=1;
                }
            }
            switch (alt57) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:749:4: reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )?
                    {
                    pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause2933);
                    reverse_key172=reverse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reverse_key.add(reverse_key172.getTree());
                    pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2937);
                    pc3=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc3.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:749:100: (cm3= COMMA )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==COMMA) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:749:100: cm3= COMMA
                            {
                            cm3=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause2942); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(cm3);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      	helper.emit(cm3, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if ((pc1 != null && ((DroolsTree) pc1.tree).getText() != null) &&
                          			(pc2 != null && ((DroolsTree) pc2.tree).getText() != null) &&
                          			(pc3 != null && ((DroolsTree) pc3.tree).getText() != null)) {
              			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
              		}	
              	
            }
            pushFollow(FOLLOW_result_key_in_accumulate_init_clause2958);
            res1=result_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_key.add(res1.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit((res1!=null?((Token)res1.start):null), DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2964);
            pc4=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc4.getTree());


            // AST REWRITE
            // elements: pc3, reverse_key, pc1, action_key, pc4, pc2, result_key, init_key
            // token labels: 
            // rule labels: pc2, pc4, pc3, pc1, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"rule pc2",pc2!=null?pc2.tree:null);
            RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"rule pc4",pc4!=null?pc4.tree:null);
            RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"rule pc3",pc3!=null?pc3.tree:null);
            RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"rule pc1",pc1!=null?pc1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 758:2: -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
            {
                // src/main/resources/org/drools/lang/DRL.g:758:5: ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_INIT_CLAUSE, "VT_ACCUMULATE_INIT_CLAUSE"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:758:33: ^( init_key $pc1)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_init_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc1.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:758:50: ^( action_key $pc2)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_action_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc2.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:758:69: ( ^( reverse_key $pc3) )?
                if ( stream_pc3.hasNext()||stream_reverse_key.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:758:69: ^( reverse_key $pc3)
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_reverse_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_pc3.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_pc3.reset();
                stream_reverse_key.reset();
                // src/main/resources/org/drools/lang/DRL.g:758:90: ^( result_key $pc4)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_result_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc4.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.RESULT)) {
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		if (input.LA(1) == LEFT_PAREN){
            			input.consume();
            			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "accumulate_init_clause"

    public static class accumulate_paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:771:1: accumulate_paren_chunk[int locationType] : pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.accumulate_paren_chunk_return accumulate_paren_chunk(int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_return retval = new DRLParser.accumulate_paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accumulate_paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_accumulate_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:774:3: (pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:774:5: pc= accumulate_paren_chunk_data[false,$locationType]
            {
            pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3022);
            pc=accumulate_paren_chunk_data(false, locationType);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 775:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk"

    public static class accumulate_paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:778:1: accumulate_paren_chunk_data[boolean isRecursive, int locationType] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN ;
    public final DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data(boolean isRecursive, int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_data_return retval = new DRLParser.accumulate_paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data173 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:779:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:779:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              				helper.emit(locationType);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:787:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )*
            loop58:
            do {
                int alt58=3;
                int LA58_0 = input.LA(1);

                if ( ((LA58_0>=VT_COMPILATION_UNIT && LA58_0<=BOOL)||(LA58_0>=FROM && LA58_0<=MISC)) ) {
                    alt58=1;
                }
                else if ( (LA58_0==LEFT_PAREN) ) {
                    alt58=2;
                }


                switch (alt58) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:787:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:787:94: accumulate_paren_chunk_data[true,-1]
            	    {
            	    pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3074);
            	    accumulate_paren_chunk_data173=accumulate_paren_chunk_data(true, -1);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_paren_chunk_data173.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk_data"

    public static class accumulate_id_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_id_clause"
    // src/main/resources/org/drools/lang/DRL.g:797:1: accumulate_id_clause : ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) ;
    public final DRLParser.accumulate_id_clause_return accumulate_id_clause() throws RecognitionException {
        DRLParser.accumulate_id_clause_return retval = new DRLParser.accumulate_id_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID174=null;
        DRLParser.paren_chunk_return paren_chunk175 = null;


        Object ID174_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:798:2: ( ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:798:4: ID paren_chunk
            {
            ID174=(Token)match(input,ID,FOLLOW_ID_in_accumulate_id_clause3101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID174);

            if ( state.backtracking==0 ) {
              	helper.emit(ID174, DroolsEditorType.IDENTIFIER);	
            }
            pushFollow(FOLLOW_paren_chunk_in_accumulate_id_clause3107);
            paren_chunk175=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk175.getTree());


            // AST REWRITE
            // elements: paren_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 800:2: -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:800:5: ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_ID_CLAUSE, "VT_ACCUMULATE_ID_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_id_clause"

    public static class collect_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collect_statement"
    // src/main/resources/org/drools/lang/DRL.g:803:1: collect_statement : COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) ;
    public final DRLParser.collect_statement_return collect_statement() throws RecognitionException {
        DRLParser.collect_statement_return retval = new DRLParser.collect_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLLECT176=null;
        Token LEFT_PAREN177=null;
        Token RIGHT_PAREN179=null;
        DRLParser.pattern_source_return pattern_source178 = null;


        Object COLLECT176_tree=null;
        Object LEFT_PAREN177_tree=null;
        Object RIGHT_PAREN179_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COLLECT=new RewriteRuleTokenStream(adaptor,"token COLLECT");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        try {
            // src/main/resources/org/drools/lang/DRL.g:804:2: ( COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:804:4: COLLECT LEFT_PAREN pattern_source RIGHT_PAREN
            {
            COLLECT176=(Token)match(input,COLLECT,FOLLOW_COLLECT_in_collect_statement3129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLLECT.add(COLLECT176);

            if ( state.backtracking==0 ) {
              	helper.emit(COLLECT176, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            LEFT_PAREN177=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement3138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN177);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN177, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_pattern_source_in_collect_statement3145);
            pattern_source178=pattern_source();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source178.getTree());
            RIGHT_PAREN179=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement3150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN179);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN179, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: pattern_source, RIGHT_PAREN, COLLECT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 810:2: -> ^( COLLECT pattern_source RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:810:5: ^( COLLECT pattern_source RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_COLLECT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_pattern_source.nextTree());
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "collect_statement"

    public static class entrypoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_statement"
    // src/main/resources/org/drools/lang/DRL.g:813:1: entrypoint_statement : entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) ;
    public final DRLParser.entrypoint_statement_return entrypoint_statement() throws RecognitionException {
        DRLParser.entrypoint_statement_return retval = new DRLParser.entrypoint_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.entry_point_key_return entry_point_key180 = null;

        DRLParser.entrypoint_id_return entrypoint_id181 = null;


        RewriteRuleSubtreeStream stream_entrypoint_id=new RewriteRuleSubtreeStream(adaptor,"rule entrypoint_id");
        RewriteRuleSubtreeStream stream_entry_point_key=new RewriteRuleSubtreeStream(adaptor,"rule entry_point_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:814:2: ( entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) )
            // src/main/resources/org/drools/lang/DRL.g:814:4: entry_point_key entrypoint_id
            {
            pushFollow(FOLLOW_entry_point_key_in_entrypoint_statement3177);
            entry_point_key180=entry_point_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entry_point_key.add(entry_point_key180.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            pushFollow(FOLLOW_entrypoint_id_in_entrypoint_statement3185);
            entrypoint_id181=entrypoint_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entrypoint_id.add(entrypoint_id181.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: entrypoint_id, entry_point_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 818:2: -> ^( entry_point_key entrypoint_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:818:5: ^( entry_point_key entrypoint_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_entry_point_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_entrypoint_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_statement"

    public static class entrypoint_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_id"
    // src/main/resources/org/drools/lang/DRL.g:821:1: entrypoint_id : (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] );
    public final DRLParser.entrypoint_id_return entrypoint_id() throws RecognitionException {
        DRLParser.entrypoint_id_return retval = new DRLParser.entrypoint_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;

        Object value_tree=null;
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:822:2: (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==ID) ) {
                alt59=1;
            }
            else if ( (LA59_0==STRING) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:822:5: value= ID
                    {
                    value=(Token)match(input,ID,FOLLOW_ID_in_entrypoint_id3211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 823:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:824:5: value= STRING
                    {
                    value=(Token)match(input,STRING,FOLLOW_STRING_in_entrypoint_id3228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 825:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_id"

    public static class from_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_source"
    // src/main/resources/org/drools/lang/DRL.g:829:1: from_source options {backtrack=true; memoize=true; } : fs= expression -> VT_FROM_SOURCE[$fs.text] ;
    public final DRLParser.from_source_return from_source() throws RecognitionException {
        DRLParser.from_source_return retval = new DRLParser.from_source_return();
        retval.start = input.LT(1);
        int from_source_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.expression_return fs = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:831:2: (fs= expression -> VT_FROM_SOURCE[$fs.text] )
            // src/main/resources/org/drools/lang/DRL.g:831:4: fs= expression
            {
            pushFollow(FOLLOW_expression_in_from_source3265);
            fs=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(fs.getTree());
            if ( state.backtracking==0 ) {
               if ( input.LA(1) != EOF || input.get(input.index() - 1).getType() == WS ) { helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION); } 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 832:10: -> VT_FROM_SOURCE[$fs.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FROM_SOURCE, (fs!=null?input.toString(fs.start,fs.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, from_source_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_source"

    public static class lhs_pattern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_pattern"
    // src/main/resources/org/drools/lang/DRL.g:838:1: lhs_pattern : ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) );
    public final DRLParser.lhs_pattern_return lhs_pattern() throws RecognitionException {
        DRLParser.lhs_pattern_return retval = new DRLParser.lhs_pattern_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.fact_binding_return fact_binding182 = null;

        DRLParser.fact_return fact183 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        try {
            // src/main/resources/org/drools/lang/DRL.g:839:2: ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==ID) ) {
                int LA60_1 = input.LA(2);

                if ( (LA60_1==COLON) ) {
                    alt60=1;
                }
                else if ( (LA60_1==DOT||LA60_1==LEFT_PAREN||LA60_1==LEFT_SQUARE) ) {
                    alt60=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:839:4: fact_binding
                    {
                    pushFollow(FOLLOW_fact_binding_in_lhs_pattern3296);
                    fact_binding182=fact_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding182.getTree());


                    // AST REWRITE
                    // elements: fact_binding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 839:17: -> ^( VT_PATTERN fact_binding )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:839:20: ^( VT_PATTERN fact_binding )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact_binding.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:840:4: fact
                    {
                    pushFollow(FOLLOW_fact_in_lhs_pattern3309);
                    fact183=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact183.getTree());


                    // AST REWRITE
                    // elements: fact
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 840:9: -> ^( VT_PATTERN fact )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:840:12: ^( VT_PATTERN fact )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_pattern"

    public static class fact_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding"
    // src/main/resources/org/drools/lang/DRL.g:843:1: fact_binding : label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.fact_binding_return fact_binding() throws RecognitionException {
        DRLParser.fact_binding_return retval = new DRLParser.fact_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN186=null;
        Token RIGHT_PAREN188=null;
        DRLParser.label_return label184 = null;

        DRLParser.fact_return fact185 = null;

        DRLParser.fact_binding_expression_return fact_binding_expression187 = null;


        Object LEFT_PAREN186_tree=null;
        Object RIGHT_PAREN188_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_fact_binding_expression=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding_expression");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        try {
            // src/main/resources/org/drools/lang/DRL.g:844:3: ( label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:844:5: label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            {
            pushFollow(FOLLOW_label_in_fact_binding3329);
            label184=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label.add(label184.getTree());
            // src/main/resources/org/drools/lang/DRL.g:845:3: ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==ID) ) {
                alt61=1;
            }
            else if ( (LA61_0==LEFT_PAREN) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:845:5: fact
                    {
                    pushFollow(FOLLOW_fact_in_fact_binding3335);
                    fact185=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact185.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:846:6: LEFT_PAREN fact_binding_expression RIGHT_PAREN
                    {
                    LEFT_PAREN186=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_binding3342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN186);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN186, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_fact_binding_expression_in_fact_binding3350);
                    fact_binding_expression187=fact_binding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding_expression.add(fact_binding_expression187.getTree());
                    RIGHT_PAREN188=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_binding3358); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN188);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN188, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: fact_binding_expression, label, RIGHT_PAREN, fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 850:3: -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:850:6: ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_BINDING, "VT_FACT_BINDING"), root_1);

                adaptor.addChild(root_1, stream_label.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:850:30: ( fact )?
                if ( stream_fact.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact.nextTree());

                }
                stream_fact.reset();
                // src/main/resources/org/drools/lang/DRL.g:850:36: ( fact_binding_expression )?
                if ( stream_fact_binding_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact_binding_expression.nextTree());

                }
                stream_fact_binding_expression.reset();
                // src/main/resources/org/drools/lang/DRL.g:850:61: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding"

    public static class fact_binding_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding_expression"
    // src/main/resources/org/drools/lang/DRL.g:853:1: fact_binding_expression : ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* ;
    public final DRLParser.fact_binding_expression_return fact_binding_expression() throws RecognitionException {
        DRLParser.fact_binding_expression_return retval = new DRLParser.fact_binding_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token pipe=null;
        DRLParser.or_key_return value = null;

        DRLParser.fact_return fact189 = null;

        DRLParser.fact_return fact190 = null;


        Object pipe_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:856:3: ( ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* )
            // src/main/resources/org/drools/lang/DRL.g:856:5: ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            {
            // src/main/resources/org/drools/lang/DRL.g:856:5: ( fact -> fact )
            // src/main/resources/org/drools/lang/DRL.g:856:6: fact
            {
            pushFollow(FOLLOW_fact_in_fact_binding_expression3399);
            fact189=fact();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact.add(fact189.getTree());


            // AST REWRITE
            // elements: fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 856:11: -> fact
            {
                adaptor.addChild(root_0, stream_fact.nextTree());

            }

            retval.tree = root_0;}
            }

            // src/main/resources/org/drools/lang/DRL.g:856:20: ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
                    alt63=1;
                }
                else if ( (LA63_0==DOUBLE_PIPE) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:856:22: (value= or_key | pipe= DOUBLE_PIPE ) fact
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:856:22: (value= or_key | pipe= DOUBLE_PIPE )
            	    int alt62=2;
            	    int LA62_0 = input.LA(1);

            	    if ( (LA62_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            	        alt62=1;
            	    }
            	    else if ( (LA62_0==DOUBLE_PIPE) ) {
            	        alt62=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 62, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt62) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:856:23: value= or_key
            	            {
            	            pushFollow(FOLLOW_or_key_in_fact_binding_expression3411);
            	            value=or_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
            	            if ( state.backtracking==0 ) {
            	              orToken = (value!=null?((Token)value.start):null);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/main/resources/org/drools/lang/DRL.g:856:62: pipe= DOUBLE_PIPE
            	            {
            	            pipe=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3417); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOUBLE_PIPE.add(pipe);

            	            if ( state.backtracking==0 ) {
            	              orToken = pipe;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_fact_in_fact_binding_expression3422);
            	    fact190=fact();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_fact.add(fact190.getTree());


            	    // AST REWRITE
            	    // elements: fact_binding_expression, fact
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 857:3: -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	    {
            	        // src/main/resources/org/drools/lang/DRL.g:857:6: ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_OR, orToken), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_fact.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding_expression"

    public static class fact_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact"
    // src/main/resources/org/drools/lang/DRL.g:860:1: fact : pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) ;
    public final DRLParser.fact_return fact() throws RecognitionException {
        DRLParser.fact_return retval = new DRLParser.fact_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN192=null;
        Token RIGHT_PAREN194=null;
        DRLParser.pattern_type_return pattern_type191 = null;

        DRLParser.constraints_return constraints193 = null;


        Object LEFT_PAREN192_tree=null;
        Object RIGHT_PAREN194_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_pattern_type=new RewriteRuleSubtreeStream(adaptor,"rule pattern_type");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
         boolean isFailedOnConstraints = true; helper.pushParaphrases(DroolsParaphraseTypes.PATTERN); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:863:2: ( pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) )
            // src/main/resources/org/drools/lang/DRL.g:863:4: pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_pattern_type_in_fact3462);
            pattern_type191=pattern_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_type.add(pattern_type191.getTree());
            LEFT_PAREN192=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact3467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN192);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN192, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            }
            // src/main/resources/org/drools/lang/DRL.g:866:4: ( constraints )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==ID||LA64_0==LEFT_PAREN) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:866:4: constraints
                    {
                    pushFollow(FOLLOW_constraints_in_fact3478);
                    constraints193=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints193.getTree());

                    }
                    break;

            }

            RIGHT_PAREN194=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact3484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN194);

            if ( state.backtracking==0 ) {
              	isFailedOnConstraints = false;	
            }
            if ( state.backtracking==0 ) {
              	if ((RIGHT_PAREN194!=null?RIGHT_PAREN194.getText():null).equals(")") ){ //WORKAROUND FOR ANTLR BUG!
              			helper.emit(RIGHT_PAREN194, DroolsEditorType.SYMBOL);
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
              		}	
            }


            // AST REWRITE
            // elements: pattern_type, constraints
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 872:2: -> ^( VT_FACT pattern_type ( constraints )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:872:5: ^( VT_FACT pattern_type ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT, "VT_FACT"), root_1);

                adaptor.addChild(root_1, stream_pattern_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:872:28: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases();	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailedOnConstraints && input.LA(1) == EOF && input.get(input.index() - 1).getType() == WS){
            		if (!(helper.getActiveSentence().getContent().getLast() instanceof Integer) && input.LA(-1) != COLON) {
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "fact"

    public static class constraints_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraints"
    // src/main/resources/org/drools/lang/DRL.g:882:1: constraints : constraint ( COMMA constraint )* ;
    public final DRLParser.constraints_return constraints() throws RecognitionException {
        DRLParser.constraints_return retval = new DRLParser.constraints_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA196=null;
        DRLParser.constraint_return constraint195 = null;

        DRLParser.constraint_return constraint197 = null;


        Object COMMA196_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:883:2: ( constraint ( COMMA constraint )* )
            // src/main/resources/org/drools/lang/DRL.g:883:4: constraint ( COMMA constraint )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_in_constraints3516);
            constraint195=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint195.getTree());
            // src/main/resources/org/drools/lang/DRL.g:883:15: ( COMMA constraint )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==COMMA) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:883:17: COMMA constraint
            	    {
            	    COMMA196=(Token)match(input,COMMA,FOLLOW_COMMA_in_constraints3520); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA196, DroolsEditorType.SYMBOL);
            	      		helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            	    }
            	    pushFollow(FOLLOW_constraint_in_constraints3527);
            	    constraint197=constraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint197.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraints"

    public static class constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // src/main/resources/org/drools/lang/DRL.g:888:1: constraint : or_constr ;
    public final DRLParser.constraint_return constraint() throws RecognitionException {
        DRLParser.constraint_return retval = new DRLParser.constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.or_constr_return or_constr198 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:889:2: ( or_constr )
            // src/main/resources/org/drools/lang/DRL.g:889:4: or_constr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_or_constr_in_constraint3541);
            or_constr198=or_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr198.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint"

    public static class or_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_constr"
    // src/main/resources/org/drools/lang/DRL.g:892:1: or_constr : and_constr ( DOUBLE_PIPE and_constr )* ;
    public final DRLParser.or_constr_return or_constr() throws RecognitionException {
        DRLParser.or_constr_return retval = new DRLParser.or_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE200=null;
        DRLParser.and_constr_return and_constr199 = null;

        DRLParser.and_constr_return and_constr201 = null;


        Object DOUBLE_PIPE200_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:893:2: ( and_constr ( DOUBLE_PIPE and_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:893:4: and_constr ( DOUBLE_PIPE and_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_constr_in_or_constr3552);
            and_constr199=and_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr199.getTree());
            // src/main/resources/org/drools/lang/DRL.g:893:15: ( DOUBLE_PIPE and_constr )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==DOUBLE_PIPE) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:893:17: DOUBLE_PIPE and_constr
            	    {
            	    DOUBLE_PIPE200=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_constr3556); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE200_tree = (Object)adaptor.create(DOUBLE_PIPE200);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE200_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE200, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_constr_in_or_constr3563);
            	    and_constr201=and_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr201.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_constr"

    public static class and_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_constr"
    // src/main/resources/org/drools/lang/DRL.g:897:1: and_constr : unary_constr ( DOUBLE_AMPER unary_constr )* ;
    public final DRLParser.and_constr_return and_constr() throws RecognitionException {
        DRLParser.and_constr_return retval = new DRLParser.and_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER203=null;
        DRLParser.unary_constr_return unary_constr202 = null;

        DRLParser.unary_constr_return unary_constr204 = null;


        Object DOUBLE_AMPER203_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:898:2: ( unary_constr ( DOUBLE_AMPER unary_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:898:4: unary_constr ( DOUBLE_AMPER unary_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unary_constr_in_and_constr3578);
            unary_constr202=unary_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr202.getTree());
            // src/main/resources/org/drools/lang/DRL.g:898:17: ( DOUBLE_AMPER unary_constr )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==DOUBLE_AMPER) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:898:19: DOUBLE_AMPER unary_constr
            	    {
            	    DOUBLE_AMPER203=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_constr3582); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER203_tree = (Object)adaptor.create(DOUBLE_AMPER203);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER203_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER203, DroolsEditorType.SYMBOL);;	
            	    }
            	    pushFollow(FOLLOW_unary_constr_in_and_constr3589);
            	    unary_constr204=unary_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr204.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_constr"

    public static class unary_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_constr"
    // src/main/resources/org/drools/lang/DRL.g:902:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );
    public final DRLParser.unary_constr_return unary_constr() throws RecognitionException {
        DRLParser.unary_constr_return retval = new DRLParser.unary_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN208=null;
        Token RIGHT_PAREN210=null;
        DRLParser.eval_key_return eval_key205 = null;

        DRLParser.paren_chunk_return paren_chunk206 = null;

        DRLParser.field_constraint_return field_constraint207 = null;

        DRLParser.or_constr_return or_constr209 = null;


        Object LEFT_PAREN208_tree=null;
        Object RIGHT_PAREN210_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:906:2: ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN )
            int alt68=3;
            alt68 = dfa68.predict(input);
            switch (alt68) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:906:4: eval_key paren_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_eval_key_in_unary_constr3622);
                    eval_key205=eval_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(eval_key205.getTree(), root_0);
                    pushFollow(FOLLOW_paren_chunk_in_unary_constr3625);
                    paren_chunk206=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk206.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:907:4: field_constraint
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_field_constraint_in_unary_constr3630);
                    field_constraint207=field_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_constraint207.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:908:5: LEFT_PAREN or_constr RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN208=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_constr3636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN208, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_constr_in_unary_constr3646);
                    or_constr209=or_constr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr209.getTree());
                    RIGHT_PAREN210=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_constr3651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN210_tree = (Object)adaptor.create(RIGHT_PAREN210);
                    adaptor.addChild(root_0, RIGHT_PAREN210_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN210, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS)
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}

        }
        return retval;
    }
    // $ANTLR end "unary_constr"

    public static class field_constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_constraint"
    // src/main/resources/org/drools/lang/DRL.g:921:1: field_constraint : ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) );
    public final DRLParser.field_constraint_return field_constraint() throws RecognitionException {
        DRLParser.field_constraint_return retval = new DRLParser.field_constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token arw=null;
        DRLParser.label_return label211 = null;

        DRLParser.accessor_path_return accessor_path212 = null;

        DRLParser.or_restr_connective_return or_restr_connective213 = null;

        DRLParser.paren_chunk_return paren_chunk214 = null;

        DRLParser.accessor_path_return accessor_path215 = null;

        DRLParser.or_restr_connective_return or_restr_connective216 = null;


        Object arw_tree=null;
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");

        	boolean isArrow = false;

        try {
            // src/main/resources/org/drools/lang/DRL.g:924:3: ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID) ) {
                int LA70_1 = input.LA(2);

                if ( ((LA70_1>=ID && LA70_1<=DOT)||LA70_1==LEFT_PAREN||(LA70_1>=EQUALS && LA70_1<=NOT_EQUALS)||LA70_1==LEFT_SQUARE) ) {
                    alt70=2;
                }
                else if ( (LA70_1==COLON) ) {
                    alt70=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 70, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:924:5: label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )?
                    {
                    pushFollow(FOLLOW_label_in_field_constraint3671);
                    label211=label();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label.add(label211.getTree());
                    pushFollow(FOLLOW_accessor_path_in_field_constraint3673);
                    accessor_path212=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path212.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:925:3: ( or_restr_connective | arw= ARROW paren_chunk )?
                    int alt69=3;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                        alt69=1;
                    }
                    else if ( (LA69_0==LEFT_PAREN||(LA69_0>=EQUALS && LA69_0<=NOT_EQUALS)) ) {
                        alt69=1;
                    }
                    else if ( (LA69_0==ARROW) ) {
                        alt69=2;
                    }
                    switch (alt69) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:925:5: or_restr_connective
                            {
                            pushFollow(FOLLOW_or_restr_connective_in_field_constraint3680);
                            or_restr_connective213=or_restr_connective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective213.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:925:27: arw= ARROW paren_chunk
                            {
                            arw=(Token)match(input,ARROW,FOLLOW_ARROW_in_field_constraint3686); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ARROW.add(arw);

                            if ( state.backtracking==0 ) {
                              	helper.emit(arw, DroolsEditorType.SYMBOL);	
                            }
                            pushFollow(FOLLOW_paren_chunk_in_field_constraint3690);
                            paren_chunk214=paren_chunk();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk214.getTree());
                            if ( state.backtracking==0 ) {
                              isArrow = true;
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: paren_chunk, accessor_path, label, label, or_restr_connective, accessor_path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 926:3: -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )?
                    if (isArrow) {
                        // src/main/resources/org/drools/lang/DRL.g:926:17: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:926:39: ^( VT_FIELD accessor_path )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        // src/main/resources/org/drools/lang/DRL.g:926:66: ( ^( VK_EVAL[$arw] paren_chunk ) )?
                        if ( stream_paren_chunk.hasNext() ) {
                            // src/main/resources/org/drools/lang/DRL.g:926:66: ^( VK_EVAL[$arw] paren_chunk )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VK_EVAL, arw), root_1);

                            adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_paren_chunk.reset();

                    }
                    else // 927:3: -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:927:6: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:927:28: ^( VT_FIELD accessor_path ( or_restr_connective )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:927:53: ( or_restr_connective )?
                        if ( stream_or_restr_connective.hasNext() ) {
                            adaptor.addChild(root_2, stream_or_restr_connective.nextTree());

                        }
                        stream_or_restr_connective.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:928:4: accessor_path or_restr_connective
                    {
                    pushFollow(FOLLOW_accessor_path_in_field_constraint3744);
                    accessor_path215=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path215.getTree());
                    pushFollow(FOLLOW_or_restr_connective_in_field_constraint3746);
                    or_restr_connective216=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective216.getTree());


                    // AST REWRITE
                    // elements: or_restr_connective, accessor_path
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 929:3: -> ^( VT_FIELD accessor_path or_restr_connective )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:929:6: ^( VT_FIELD accessor_path or_restr_connective )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_accessor_path.nextTree());
                        adaptor.addChild(root_1, stream_or_restr_connective.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "field_constraint"

    public static class label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // src/main/resources/org/drools/lang/DRL.g:932:1: label : value= ID COLON -> VT_LABEL[$value] ;
    public final DRLParser.label_return label() throws RecognitionException {
        DRLParser.label_return retval = new DRLParser.label_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;
        Token COLON217=null;

        Object value_tree=null;
        Object COLON217_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:933:2: (value= ID COLON -> VT_LABEL[$value] )
            // src/main/resources/org/drools/lang/DRL.g:933:4: value= ID COLON
            {
            value=(Token)match(input,ID,FOLLOW_ID_in_label3771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(value);

            if ( state.backtracking==0 ) {
              	helper.emit(value, DroolsEditorType.IDENTIFIER_VARIABLE);	
            }
            COLON217=(Token)match(input,COLON,FOLLOW_COLON_in_label3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON217);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON217, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 935:3: -> VT_LABEL[$value]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_LABEL, value));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class or_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:938:1: or_restr_connective : and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* ;
    public final DRLParser.or_restr_connective_return or_restr_connective() throws RecognitionException {
        DRLParser.or_restr_connective_return retval = new DRLParser.or_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE219=null;
        DRLParser.and_restr_connective_return and_restr_connective218 = null;

        DRLParser.and_restr_connective_return and_restr_connective220 = null;


        Object DOUBLE_PIPE219_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:939:2: ( and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* )
            // src/main/resources/org/drools/lang/DRL.g:939:4: and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective3799);
            and_restr_connective218=and_restr_connective();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective218.getTree());
            // src/main/resources/org/drools/lang/DRL.g:939:25: ({...}? => DOUBLE_PIPE and_restr_connective )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==DOUBLE_PIPE) ) {
                    int LA71_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt71=1;
                    }


                }


                switch (alt71) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:939:26: {...}? => DOUBLE_PIPE and_restr_connective
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "or_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_PIPE219=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective3805); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE219_tree = (Object)adaptor.create(DOUBLE_PIPE219);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE219_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE219, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective3813);
            	    and_restr_connective220=and_restr_connective();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective220.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_restr_connective"

    public static class and_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:952:1: and_restr_connective : constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* ;
    public final DRLParser.and_restr_connective_return and_restr_connective() throws RecognitionException {
        DRLParser.and_restr_connective_return retval = new DRLParser.and_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER222=null;
        DRLParser.constraint_expression_return constraint_expression221 = null;

        DRLParser.constraint_expression_return constraint_expression223 = null;


        Object DOUBLE_AMPER222_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:953:2: ( constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* )
            // src/main/resources/org/drools/lang/DRL.g:953:4: constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_expression_in_and_restr_connective3834);
            constraint_expression221=constraint_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression221.getTree());
            // src/main/resources/org/drools/lang/DRL.g:953:26: ({...}? => DOUBLE_AMPER constraint_expression )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==DOUBLE_AMPER) ) {
                    int LA72_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt72=1;
                    }


                }


                switch (alt72) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:953:27: {...}? => DOUBLE_AMPER constraint_expression
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "and_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_AMPER222=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_restr_connective3840); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER222_tree = (Object)adaptor.create(DOUBLE_AMPER222);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER222_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER222, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_constraint_expression_in_and_restr_connective3847);
            	    constraint_expression223=constraint_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression223.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_restr_connective"

    public static class constraint_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_expression"
    // src/main/resources/org/drools/lang/DRL.g:966:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );
    public final DRLParser.constraint_expression_return constraint_expression() throws RecognitionException {
        DRLParser.constraint_expression_return retval = new DRLParser.constraint_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN226=null;
        Token RIGHT_PAREN228=null;
        DRLParser.compound_operator_return compound_operator224 = null;

        DRLParser.simple_operator_return simple_operator225 = null;

        DRLParser.or_restr_connective_return or_restr_connective227 = null;


        Object LEFT_PAREN226_tree=null;
        Object RIGHT_PAREN228_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:968:2: ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN )
            int alt73=3;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:968:4: compound_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compound_operator_in_constraint_expression3877);
                    compound_operator224=compound_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_operator224.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:969:4: simple_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_operator_in_constraint_expression3882);
                    simple_operator225=simple_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_operator225.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:970:4: LEFT_PAREN or_restr_connective RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN226=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression3887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN226, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_restr_connective_in_constraint_expression3896);
                    or_restr_connective227=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_restr_connective227.getTree());
                    RIGHT_PAREN228=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression3901); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN228_tree = (Object)adaptor.create(RIGHT_PAREN228);
                    adaptor.addChild(root_0, RIGHT_PAREN228_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN228, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && 
            				input.LA(2) == ID && helper.validateLT(1, DroolsSoftKeywords.NOT)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF  && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.IN)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS){
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_END);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "constraint_expression"

    public static class simple_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_operator"
    // src/main/resources/org/drools/lang/DRL.g:1016:1: simple_operator : ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( square_chunk )? ) ) expression_value ;
    public final DRLParser.simple_operator_return simple_operator() throws RecognitionException {
        DRLParser.simple_operator_return retval = new DRLParser.simple_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS229=null;
        Token GREATER230=null;
        Token GREATER_EQUALS231=null;
        Token LESS232=null;
        Token LESS_EQUALS233=null;
        Token NOT_EQUALS234=null;
        DRLParser.not_key_return not_key235 = null;

        DRLParser.operator_key_return operator_key236 = null;

        DRLParser.square_chunk_return square_chunk237 = null;

        DRLParser.expression_value_return expression_value238 = null;


        Object EQUALS229_tree=null;
        Object GREATER230_tree=null;
        Object GREATER_EQUALS231_tree=null;
        Object LESS232_tree=null;
        Object LESS_EQUALS233_tree=null;
        Object NOT_EQUALS234_tree=null;

        if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
        try {
            // src/main/resources/org/drools/lang/DRL.g:1018:2: ( ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( square_chunk )? ) ) expression_value )
            // src/main/resources/org/drools/lang/DRL.g:1019:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( square_chunk )? ) ) expression_value
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1019:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( square_chunk )? ) )
            int alt76=7;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EQUALS) ) {
                alt76=1;
            }
            else if ( (LA76_0==GREATER) ) {
                alt76=2;
            }
            else if ( (LA76_0==GREATER_EQUALS) ) {
                alt76=3;
            }
            else if ( (LA76_0==LESS) ) {
                alt76=4;
            }
            else if ( (LA76_0==LESS_EQUALS) ) {
                alt76=5;
            }
            else if ( (LA76_0==NOT_EQUALS) ) {
                alt76=6;
            }
            else if ( (LA76_0==ID) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                alt76=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1020:3: EQUALS
                    {
                    EQUALS229=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator3936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS229_tree = (Object)adaptor.create(EQUALS229);
                    root_0 = (Object)adaptor.becomeRoot(EQUALS229_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(EQUALS229, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1021:4: GREATER
                    {
                    GREATER230=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator3944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER230_tree = (Object)adaptor.create(GREATER230);
                    root_0 = (Object)adaptor.becomeRoot(GREATER230_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER230, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1022:4: GREATER_EQUALS
                    {
                    GREATER_EQUALS231=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator3952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_EQUALS231_tree = (Object)adaptor.create(GREATER_EQUALS231);
                    root_0 = (Object)adaptor.becomeRoot(GREATER_EQUALS231_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER_EQUALS231, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1023:4: LESS
                    {
                    LESS232=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator3960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS232_tree = (Object)adaptor.create(LESS232);
                    root_0 = (Object)adaptor.becomeRoot(LESS232_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS232, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1024:4: LESS_EQUALS
                    {
                    LESS_EQUALS233=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator3968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_EQUALS233_tree = (Object)adaptor.create(LESS_EQUALS233);
                    root_0 = (Object)adaptor.becomeRoot(LESS_EQUALS233_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS_EQUALS233, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1025:4: NOT_EQUALS
                    {
                    NOT_EQUALS234=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator3976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EQUALS234_tree = (Object)adaptor.create(NOT_EQUALS234);
                    root_0 = (Object)adaptor.becomeRoot(NOT_EQUALS234_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NOT_EQUALS234, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1026:4: ( not_key )? ( operator_key ( square_chunk )? )
                    {
                    // src/main/resources/org/drools/lang/DRL.g:1026:4: ( not_key )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==ID) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                        int LA74_1 = input.LA(2);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                            alt74=1;
                        }
                    }
                    switch (alt74) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1026:4: not_key
                            {
                            pushFollow(FOLLOW_not_key_in_simple_operator3984);
                            not_key235=not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key235.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1027:3: ( operator_key ( square_chunk )? )
                    // src/main/resources/org/drools/lang/DRL.g:1027:5: operator_key ( square_chunk )?
                    {
                    pushFollow(FOLLOW_operator_key_in_simple_operator3991);
                    operator_key236=operator_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(operator_key236.getTree(), root_0);
                    // src/main/resources/org/drools/lang/DRL.g:1027:19: ( square_chunk )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==LEFT_SQUARE) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1027:19: square_chunk
                            {
                            pushFollow(FOLLOW_square_chunk_in_simple_operator3994);
                            square_chunk237=square_chunk();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk237.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            pushFollow(FOLLOW_expression_value_in_simple_operator4006);
            expression_value238=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value238.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_operator"

    public static class compound_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_operator"
    // src/main/resources/org/drools/lang/DRL.g:1034:1: compound_operator : ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN ;
    public final DRLParser.compound_operator_return compound_operator() throws RecognitionException {
        DRLParser.compound_operator_return retval = new DRLParser.compound_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN242=null;
        Token COMMA244=null;
        Token RIGHT_PAREN246=null;
        DRLParser.in_key_return in_key239 = null;

        DRLParser.not_key_return not_key240 = null;

        DRLParser.in_key_return in_key241 = null;

        DRLParser.expression_value_return expression_value243 = null;

        DRLParser.expression_value_return expression_value245 = null;


        Object LEFT_PAREN242_tree=null;
        Object COMMA244_tree=null;
        Object RIGHT_PAREN246_tree=null;

         if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:1036:2: ( ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1037:2: ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1037:2: ( in_key | not_key in_key )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {
                int LA77_1 = input.LA(2);

                if ( (LA77_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
                    alt77=2;
                }
                else if ( (LA77_1==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
                    alt77=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1037:4: in_key
                    {
                    pushFollow(FOLLOW_in_key_in_compound_operator4028);
                    in_key239=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key239.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1037:14: not_key in_key
                    {
                    pushFollow(FOLLOW_not_key_in_compound_operator4033);
                    not_key240=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key240.getTree());
                    pushFollow(FOLLOW_in_key_in_compound_operator4035);
                    in_key241=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key241.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            LEFT_PAREN242=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN242, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_expression_value_in_compound_operator4054);
            expression_value243=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value243.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1040:21: ( COMMA expression_value )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1040:23: COMMA expression_value
            	    {
            	    COMMA244=(Token)match(input,COMMA,FOLLOW_COMMA_in_compound_operator4058); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA244, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_expression_value_in_compound_operator4063);
            	    expression_value245=expression_value();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value245.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            RIGHT_PAREN246=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN246_tree = (Object)adaptor.create(RIGHT_PAREN246);
            adaptor.addChild(root_0, RIGHT_PAREN246_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN246, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
            		helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}	
        }
        return retval;
    }
    // $ANTLR end "compound_operator"

    public static class expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_value"
    // src/main/resources/org/drools/lang/DRL.g:1051:1: expression_value : ( accessor_path | signed_literal | paren_chunk ) ;
    public final DRLParser.expression_value_return expression_value() throws RecognitionException {
        DRLParser.expression_value_return retval = new DRLParser.expression_value_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accessor_path_return accessor_path247 = null;

        DRLParser.signed_literal_return signed_literal248 = null;

        DRLParser.paren_chunk_return paren_chunk249 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1052:2: ( ( accessor_path | signed_literal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:1052:4: ( accessor_path | signed_literal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1052:4: ( accessor_path | signed_literal | paren_chunk )
            int alt79=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt79=1;
                }
                break;
            case STRING:
            case BOOL:
            case NULL:
            case PLUS:
            case MINUS:
            case DECIMAL:
            case HEX:
            case FLOAT:
                {
                alt79=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt79=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1052:5: accessor_path
                    {
                    pushFollow(FOLLOW_accessor_path_in_expression_value4092);
                    accessor_path247=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_path247.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1053:4: signed_literal
                    {
                    pushFollow(FOLLOW_signed_literal_in_expression_value4097);
                    signed_literal248=signed_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_literal248.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1054:4: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_expression_value4103);
                    paren_chunk249=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk249.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if (helper.isEditorInterfaceEnabled && !(input.LA(1) == EOF && input.get(input.index() - 1).getType() != WS))
              			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF) {
            		if (input.LA(1) == DOUBLE_PIPE) {
            			helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "expression_value"

    public static class signed_literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_literal"
    // src/main/resources/org/drools/lang/DRL.g:1068:1: signed_literal : ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL );
    public final DRLParser.signed_literal_return signed_literal() throws RecognitionException {
        DRLParser.signed_literal_return retval = new DRLParser.signed_literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING250=null;
        Token BOOL254=null;
        Token NULL255=null;
        DRLParser.signed_decimal_return signed_decimal251 = null;

        DRLParser.signed_hex_return signed_hex252 = null;

        DRLParser.signed_float_return signed_float253 = null;


        Object STRING250_tree=null;
        Object BOOL254_tree=null;
        Object NULL255_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1069:9: ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL )
            int alt80=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt80=1;
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case FLOAT:
                    {
                    alt80=4;
                    }
                    break;
                case HEX:
                    {
                    alt80=3;
                    }
                    break;
                case DECIMAL:
                    {
                    alt80=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 2, input);

                    throw nvae;
                }

                }
                break;
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case HEX:
                    {
                    alt80=3;
                    }
                    break;
                case FLOAT:
                    {
                    alt80=4;
                    }
                    break;
                case DECIMAL:
                    {
                    alt80=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 3, input);

                    throw nvae;
                }

                }
                break;
            case DECIMAL:
                {
                alt80=2;
                }
                break;
            case HEX:
                {
                alt80=3;
                }
                break;
            case FLOAT:
                {
                alt80=4;
                }
                break;
            case BOOL:
                {
                alt80=5;
                }
                break;
            case NULL:
                {
                alt80=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1069:17: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING250=(Token)match(input,STRING,FOLLOW_STRING_in_signed_literal4135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING250_tree = (Object)adaptor.create(STRING250);
                    adaptor.addChild(root_0, STRING250_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(STRING250, DroolsEditorType.STRING_CONST);  
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1070:17: signed_decimal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_decimal_in_signed_literal4172);
                    signed_decimal251=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal251.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1071:17: signed_hex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_hex_in_signed_literal4190);
                    signed_hex252=signed_hex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_hex252.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1072:17: signed_float
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_float_in_signed_literal4208);
                    signed_float253=signed_float();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_float253.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1073:17: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL254=(Token)match(input,BOOL,FOLLOW_BOOL_in_signed_literal4226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL254_tree = (Object)adaptor.create(BOOL254);
                    adaptor.addChild(root_0, BOOL254_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(BOOL254, DroolsEditorType.BOOLEAN_CONST); 
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1074:17: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL255=(Token)match(input,NULL,FOLLOW_NULL_in_signed_literal4265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL255_tree = (Object)adaptor.create(NULL255);
                    adaptor.addChild(root_0, NULL255_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(NULL255, DroolsEditorType.NULL_CONST); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_literal"

    public static class signed_decimal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal"
    // src/main/resources/org/drools/lang/DRL.g:1077:1: signed_decimal : sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] ;
    public final DRLParser.signed_decimal_return signed_decimal() throws RecognitionException {
        DRLParser.signed_decimal_return retval = new DRLParser.signed_decimal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_decimal_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_decimal_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_decimal_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1078:9: (sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1078:17: sdm= signed_decimal_match
            {
            pushFollow(FOLLOW_signed_decimal_match_in_signed_decimal4319);
            sdm=signed_decimal_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_decimal_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1078:42: -> SIGNED_DECIMAL[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_DECIMAL, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal"

    public static class signed_decimal_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal_match"
    // src/main/resources/org/drools/lang/DRL.g:1081:1: signed_decimal_match : ( PLUS | MINUS )? DECIMAL ;
    public final DRLParser.signed_decimal_match_return signed_decimal_match() throws RecognitionException {
        DRLParser.signed_decimal_match_return retval = new DRLParser.signed_decimal_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS256=null;
        Token MINUS257=null;
        Token DECIMAL258=null;

        Object PLUS256_tree=null;
        Object MINUS257_tree=null;
        Object DECIMAL258_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1082:9: ( ( PLUS | MINUS )? DECIMAL )
            // src/main/resources/org/drools/lang/DRL.g:1082:17: ( PLUS | MINUS )? DECIMAL
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1082:17: ( PLUS | MINUS )?
            int alt81=3;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==PLUS) ) {
                alt81=1;
            }
            else if ( (LA81_0==MINUS) ) {
                alt81=2;
            }
            switch (alt81) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1082:18: PLUS
                    {
                    PLUS256=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_decimal_match4356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS256_tree = (Object)adaptor.create(PLUS256);
                    adaptor.addChild(root_0, PLUS256_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS256, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1082:81: MINUS
                    {
                    MINUS257=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_decimal_match4362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS257_tree = (Object)adaptor.create(MINUS257);
                    adaptor.addChild(root_0, MINUS257_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS257, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            DECIMAL258=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_signed_decimal_match4384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECIMAL258_tree = (Object)adaptor.create(DECIMAL258);
            adaptor.addChild(root_0, DECIMAL258_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(DECIMAL258, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal_match"

    public static class signed_hex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex"
    // src/main/resources/org/drools/lang/DRL.g:1086:1: signed_hex : sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] ;
    public final DRLParser.signed_hex_return signed_hex() throws RecognitionException {
        DRLParser.signed_hex_return retval = new DRLParser.signed_hex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_hex_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_hex_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_hex_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1087:9: (sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1087:17: sdm= signed_hex_match
            {
            pushFollow(FOLLOW_signed_hex_match_in_signed_hex4419);
            sdm=signed_hex_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_hex_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1087:38: -> SIGNED_HEX[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_HEX, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex"

    public static class signed_hex_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex_match"
    // src/main/resources/org/drools/lang/DRL.g:1090:1: signed_hex_match : ( PLUS | MINUS )? HEX ;
    public final DRLParser.signed_hex_match_return signed_hex_match() throws RecognitionException {
        DRLParser.signed_hex_match_return retval = new DRLParser.signed_hex_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS259=null;
        Token MINUS260=null;
        Token HEX261=null;

        Object PLUS259_tree=null;
        Object MINUS260_tree=null;
        Object HEX261_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1091:9: ( ( PLUS | MINUS )? HEX )
            // src/main/resources/org/drools/lang/DRL.g:1091:17: ( PLUS | MINUS )? HEX
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1091:17: ( PLUS | MINUS )?
            int alt82=3;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==PLUS) ) {
                alt82=1;
            }
            else if ( (LA82_0==MINUS) ) {
                alt82=2;
            }
            switch (alt82) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1091:18: PLUS
                    {
                    PLUS259=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_hex_match4456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS259_tree = (Object)adaptor.create(PLUS259);
                    adaptor.addChild(root_0, PLUS259_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS259, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1091:81: MINUS
                    {
                    MINUS260=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_hex_match4462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS260_tree = (Object)adaptor.create(MINUS260);
                    adaptor.addChild(root_0, MINUS260_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS260, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            HEX261=(Token)match(input,HEX,FOLLOW_HEX_in_signed_hex_match4484); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            HEX261_tree = (Object)adaptor.create(HEX261);
            adaptor.addChild(root_0, HEX261_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(HEX261, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex_match"

    public static class signed_float_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float"
    // src/main/resources/org/drools/lang/DRL.g:1095:1: signed_float : sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] ;
    public final DRLParser.signed_float_return signed_float() throws RecognitionException {
        DRLParser.signed_float_return retval = new DRLParser.signed_float_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_float_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_float_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_float_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1096:9: (sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1096:17: sdm= signed_float_match
            {
            pushFollow(FOLLOW_signed_float_match_in_signed_float4519);
            sdm=signed_float_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_float_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1096:40: -> SIGNED_FLOAT[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_FLOAT, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float"

    public static class signed_float_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float_match"
    // src/main/resources/org/drools/lang/DRL.g:1099:1: signed_float_match : ( PLUS | MINUS )? FLOAT ;
    public final DRLParser.signed_float_match_return signed_float_match() throws RecognitionException {
        DRLParser.signed_float_match_return retval = new DRLParser.signed_float_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS262=null;
        Token MINUS263=null;
        Token FLOAT264=null;

        Object PLUS262_tree=null;
        Object MINUS263_tree=null;
        Object FLOAT264_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1100:9: ( ( PLUS | MINUS )? FLOAT )
            // src/main/resources/org/drools/lang/DRL.g:1100:17: ( PLUS | MINUS )? FLOAT
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1100:17: ( PLUS | MINUS )?
            int alt83=3;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==PLUS) ) {
                alt83=1;
            }
            else if ( (LA83_0==MINUS) ) {
                alt83=2;
            }
            switch (alt83) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1100:18: PLUS
                    {
                    PLUS262=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_float_match4556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS262_tree = (Object)adaptor.create(PLUS262);
                    adaptor.addChild(root_0, PLUS262_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS262, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1100:81: MINUS
                    {
                    MINUS263=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_float_match4562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS263_tree = (Object)adaptor.create(MINUS263);
                    adaptor.addChild(root_0, MINUS263_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS263, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            FLOAT264=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_signed_float_match4584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLOAT264_tree = (Object)adaptor.create(FLOAT264);
            adaptor.addChild(root_0, FLOAT264_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(FLOAT264, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float_match"

    public static class pattern_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_type"
    // src/main/resources/org/drools/lang/DRL.g:1103:1: pattern_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.pattern_type_return pattern_type() throws RecognitionException {
        DRLParser.pattern_type_return retval = new DRLParser.pattern_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition265 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1104:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1104:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type4605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1104:11: (id+= DOT id+= ID )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==DOT) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1104:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_type4611); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type4615); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PATTERN, helper.buildStringFromTokens(list_id));	
            }
            // src/main/resources/org/drools/lang/DRL.g:1107:6: ( dimension_definition )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==LEFT_SQUARE) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1107:6: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_pattern_type4630);
            	    dimension_definition265=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition265.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);



            // AST REWRITE
            // elements: dimension_definition, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1108:3: -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1108:6: ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN_TYPE, "VT_PATTERN_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1108:28: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern_type"

    public static class data_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // src/main/resources/org/drools/lang/DRL.g:1111:1: data_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.data_type_return data_type() throws RecognitionException {
        DRLParser.data_type_return retval = new DRLParser.data_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition266 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1112:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1112:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_data_type4658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1112:11: (id+= DOT id+= ID )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==DOT) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1112:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_data_type4664); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_data_type4668); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:1112:31: ( dimension_definition )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==LEFT_SQUARE) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1112:31: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_data_type4673);
            	    dimension_definition266=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition266.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);	
            }


            // AST REWRITE
            // elements: dimension_definition, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1114:3: -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1114:6: ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_DATA_TYPE, "VT_DATA_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1114:25: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class dimension_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dimension_definition"
    // src/main/resources/org/drools/lang/DRL.g:1117:1: dimension_definition : LEFT_SQUARE RIGHT_SQUARE ;
    public final DRLParser.dimension_definition_return dimension_definition() throws RecognitionException {
        DRLParser.dimension_definition_return retval = new DRLParser.dimension_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE267=null;
        Token RIGHT_SQUARE268=null;

        Object LEFT_SQUARE267_tree=null;
        Object RIGHT_SQUARE268_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1118:2: ( LEFT_SQUARE RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1118:4: LEFT_SQUARE RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE267=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_dimension_definition4702); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE267_tree = (Object)adaptor.create(LEFT_SQUARE267);
            adaptor.addChild(root_0, LEFT_SQUARE267_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_SQUARE267, DroolsEditorType.SYMBOL);	
            }
            RIGHT_SQUARE268=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_dimension_definition4709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE268_tree = (Object)adaptor.create(RIGHT_SQUARE268);
            adaptor.addChild(root_0, RIGHT_SQUARE268_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_SQUARE268, DroolsEditorType.SYMBOL);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dimension_definition"

    public static class accessor_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_path"
    // src/main/resources/org/drools/lang/DRL.g:1122:1: accessor_path : accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) ;
    public final DRLParser.accessor_path_return accessor_path() throws RecognitionException {
        DRLParser.accessor_path_return retval = new DRLParser.accessor_path_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT270=null;
        DRLParser.accessor_element_return accessor_element269 = null;

        DRLParser.accessor_element_return accessor_element271 = null;


        Object DOT270_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_accessor_element=new RewriteRuleSubtreeStream(adaptor,"rule accessor_element");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1123:2: ( accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1123:4: accessor_element ( DOT accessor_element )*
            {
            pushFollow(FOLLOW_accessor_element_in_accessor_path4723);
            accessor_element269=accessor_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element269.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1123:21: ( DOT accessor_element )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==DOT) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1123:23: DOT accessor_element
            	    {
            	    DOT270=(Token)match(input,DOT,FOLLOW_DOT_in_accessor_path4727); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT270);

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOT270, DroolsEditorType.IDENTIFIER);	
            	    }
            	    pushFollow(FOLLOW_accessor_element_in_accessor_path4731);
            	    accessor_element271=accessor_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element271.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);



            // AST REWRITE
            // elements: accessor_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1124:2: -> ^( VT_ACCESSOR_PATH ( accessor_element )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1124:5: ^( VT_ACCESSOR_PATH ( accessor_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_PATH, "VT_ACCESSOR_PATH"), root_1);

                if ( !(stream_accessor_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_accessor_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessor_element.nextTree());

                }
                stream_accessor_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_path"

    public static class accessor_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_element"
    // src/main/resources/org/drools/lang/DRL.g:1127:1: accessor_element : ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) ;
    public final DRLParser.accessor_element_return accessor_element() throws RecognitionException {
        DRLParser.accessor_element_return retval = new DRLParser.accessor_element_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID272=null;
        DRLParser.square_chunk_return square_chunk273 = null;


        Object ID272_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1128:2: ( ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1128:4: ID ( square_chunk )*
            {
            ID272=(Token)match(input,ID,FOLLOW_ID_in_accessor_element4755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID272);

            if ( state.backtracking==0 ) {
              	helper.emit(ID272, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1129:3: ( square_chunk )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==LEFT_SQUARE) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1129:3: square_chunk
            	    {
            	    pushFollow(FOLLOW_square_chunk_in_accessor_element4761);
            	    square_chunk273=square_chunk();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_square_chunk.add(square_chunk273.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);



            // AST REWRITE
            // elements: square_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1130:2: -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1130:5: ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_ELEMENT, "VT_ACCESSOR_ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // src/main/resources/org/drools/lang/DRL.g:1130:30: ( square_chunk )*
                while ( stream_square_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_square_chunk.nextTree());

                }
                stream_square_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_element"

    public static class rhs_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1136:1: rhs_chunk : rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] ;
    public final DRLParser.rhs_chunk_return rhs_chunk() throws RecognitionException {
        DRLParser.rhs_chunk_return retval = new DRLParser.rhs_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rhs_chunk_data_return rc = null;


        RewriteRuleSubtreeStream stream_rhs_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1139:3: (rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1139:5: rc= rhs_chunk_data
            {
            pushFollow(FOLLOW_rhs_chunk_data_in_rhs_chunk4793);
            rc=rhs_chunk_data();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk_data.add(rc.getTree());
            if ( state.backtracking==0 ) {
              text = (rc!=null?input.toString(rc.start,rc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1140:2: -> VT_RHS_CHUNK[$rc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_RHS_CHUNK, (rc!=null?((Token)rc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk"

    public static class rhs_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1143:1: rhs_chunk_data : THEN ( not_end_key )* end_key ( SEMICOLON )? ;
    public final DRLParser.rhs_chunk_data_return rhs_chunk_data() throws RecognitionException {
        DRLParser.rhs_chunk_data_return retval = new DRLParser.rhs_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token THEN274=null;
        Token SEMICOLON277=null;
        DRLParser.not_end_key_return not_end_key275 = null;

        DRLParser.end_key_return end_key276 = null;


        Object THEN274_tree=null;
        Object SEMICOLON277_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1144:2: ( THEN ( not_end_key )* end_key ( SEMICOLON )? )
            // src/main/resources/org/drools/lang/DRL.g:1144:4: THEN ( not_end_key )* end_key ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            THEN274=(Token)match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data4812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN274_tree = (Object)adaptor.create(THEN274);
            adaptor.addChild(root_0, THEN274_tree);
            }
            if ( state.backtracking==0 ) {
              	if ((THEN274!=null?THEN274.getText():null).equalsIgnoreCase("then")){
              			helper.emit(THEN274, DroolsEditorType.KEYWORD);
              			helper.emit(Location.LOCATION_RHS);
              		}	
            }
            // src/main/resources/org/drools/lang/DRL.g:1149:4: ( not_end_key )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==ID) && (((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) {
                    int LA90_1 = input.LA(2);

                    if ( ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                        alt90=1;
                    }


                }
                else if ( ((LA90_0>=VT_COMPILATION_UNIT && LA90_0<=SEMICOLON)||(LA90_0>=DOT && LA90_0<=MISC)) && ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1149:4: not_end_key
            	    {
            	    pushFollow(FOLLOW_not_end_key_in_rhs_chunk_data4821);
            	    not_end_key275=not_end_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_end_key275.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_rhs_chunk_data4827);
            end_key276=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, end_key276.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1151:3: ( SEMICOLON )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==SEMICOLON) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1151:3: SEMICOLON
                    {
                    SEMICOLON277=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data4832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON277_tree = (Object)adaptor.create(SEMICOLON277);
                    adaptor.addChild(root_0, SEMICOLON277_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON277, DroolsEditorType.KEYWORD);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk_data"

    public static class curly_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1154:1: curly_chunk : cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] ;
    public final DRLParser.curly_chunk_return curly_chunk() throws RecognitionException {
        DRLParser.curly_chunk_return retval = new DRLParser.curly_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.curly_chunk_data_return cc = null;


        RewriteRuleSubtreeStream stream_curly_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1157:3: (cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1157:5: cc= curly_chunk_data[false]
            {
            pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk4851);
            cc=curly_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk_data.add(cc.getTree());
            if ( state.backtracking==0 ) {
              text = (cc!=null?input.toString(cc.start,cc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1158:2: -> VT_CURLY_CHUNK[$cc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_CURLY_CHUNK, (cc!=null?((Token)cc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk"

    public static class curly_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1161:1: curly_chunk_data[boolean isRecursive] : lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY ;
    public final DRLParser.curly_chunk_data_return curly_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.curly_chunk_data_return retval = new DRLParser.curly_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lc1=null;
        Token any=null;
        Token rc1=null;
        DRLParser.curly_chunk_data_return curly_chunk_data278 = null;


        Object lc1_tree=null;
        Object any_tree=null;
        Object rc1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1162:2: (lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1162:4: lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            lc1=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_chunk_data4874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lc1_tree = (Object)adaptor.create(lc1);
            adaptor.addChild(root_0, lc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1169:4: (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )*
            loop92:
            do {
                int alt92=3;
                int LA92_0 = input.LA(1);

                if ( ((LA92_0>=VT_COMPILATION_UNIT && LA92_0<=THEN)||(LA92_0>=QUESTION && LA92_0<=MISC)) ) {
                    alt92=1;
                }
                else if ( (LA92_0==LEFT_CURLY) ) {
                    alt92=2;
                }


                switch (alt92) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1169:5: any=~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=THEN)||(input.LA(1)>=QUESTION && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1169:94: curly_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk_data4902);
            	    curly_chunk_data278=curly_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_chunk_data278.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            rc1=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_chunk_data4913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rc1_tree = (Object)adaptor.create(rc1);
            adaptor.addChild(root_0, rc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk_data"

    public static class paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1179:1: paren_chunk : pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.paren_chunk_return paren_chunk() throws RecognitionException {
        DRLParser.paren_chunk_return retval = new DRLParser.paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1182:3: (pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1182:5: pc= paren_chunk_data[false]
            {
            pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk4934);
            pc=paren_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1183:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk"

    public static class paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1186:1: paren_chunk_data[boolean isRecursive] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN ;
    public final DRLParser.paren_chunk_data_return paren_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.paren_chunk_data_return retval = new DRLParser.paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.paren_chunk_data_return paren_chunk_data279 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1187:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1187:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_chunk_data4958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1194:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )*
            loop93:
            do {
                int alt93=3;
                int LA93_0 = input.LA(1);

                if ( ((LA93_0>=VT_COMPILATION_UNIT && LA93_0<=BOOL)||(LA93_0>=FROM && LA93_0<=MISC)) ) {
                    alt93=1;
                }
                else if ( (LA93_0==LEFT_PAREN) ) {
                    alt93=2;
                }


                switch (alt93) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1194:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1194:94: paren_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk_data4986);
            	    paren_chunk_data279=paren_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk_data279.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_chunk_data4997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk_data"

    public static class square_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1204:1: square_chunk : sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] ;
    public final DRLParser.square_chunk_return square_chunk() throws RecognitionException {
        DRLParser.square_chunk_return retval = new DRLParser.square_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.square_chunk_data_return sc = null;


        RewriteRuleSubtreeStream stream_square_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1207:3: (sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1207:5: sc= square_chunk_data[false]
            {
            pushFollow(FOLLOW_square_chunk_data_in_square_chunk5018);
            sc=square_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_square_chunk_data.add(sc.getTree());
            if ( state.backtracking==0 ) {
              text = (sc!=null?input.toString(sc.start,sc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1208:2: -> VT_SQUARE_CHUNK[$sc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (sc!=null?((Token)sc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk"

    public static class square_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1211:1: square_chunk_data[boolean isRecursive] : ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE ;
    public final DRLParser.square_chunk_data_return square_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.square_chunk_data_return retval = new DRLParser.square_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ls1=null;
        Token any=null;
        Token rs1=null;
        DRLParser.square_chunk_data_return square_chunk_data280 = null;


        Object ls1_tree=null;
        Object any_tree=null;
        Object rs1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1212:2: (ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1212:4: ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            ls1=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_square_chunk_data5041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ls1_tree = (Object)adaptor.create(ls1);
            adaptor.addChild(root_0, ls1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(ls1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(ls1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1219:4: (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )*
            loop94:
            do {
                int alt94=3;
                int LA94_0 = input.LA(1);

                if ( ((LA94_0>=VT_COMPILATION_UNIT && LA94_0<=FLOAT)||(LA94_0>=THEN && LA94_0<=MISC)) ) {
                    alt94=1;
                }
                else if ( (LA94_0==LEFT_SQUARE) ) {
                    alt94=2;
                }


                switch (alt94) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1219:5: any=~ ( LEFT_SQUARE | RIGHT_SQUARE )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=FLOAT)||(input.LA(1)>=THEN && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1219:95: square_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_square_chunk_data_in_square_chunk_data5068);
            	    square_chunk_data280=square_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk_data280.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            rs1=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_square_chunk_data5079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rs1_tree = (Object)adaptor.create(rs1);
            adaptor.addChild(root_0, rs1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rs1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rs1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk_data"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // src/main/resources/org/drools/lang/DRL.g:1232:1: literal : ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL );
    public final DRLParser.literal_return literal() throws RecognitionException {
        DRLParser.literal_return retval = new DRLParser.literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING281=null;
        Token DECIMAL282=null;
        Token HEX283=null;
        Token FLOAT284=null;
        Token BOOL285=null;
        Token NULL286=null;

        Object STRING281_tree=null;
        Object DECIMAL282_tree=null;
        Object HEX283_tree=null;
        Object FLOAT284_tree=null;
        Object BOOL285_tree=null;
        Object NULL286_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1233:2: ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL )
            int alt95=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt95=1;
                }
                break;
            case DECIMAL:
                {
                alt95=2;
                }
                break;
            case HEX:
                {
                alt95=3;
                }
                break;
            case FLOAT:
                {
                alt95=4;
                }
                break;
            case BOOL:
                {
                alt95=5;
                }
                break;
            case NULL:
                {
                alt95=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }

            switch (alt95) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1233:4: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING281=(Token)match(input,STRING,FOLLOW_STRING_in_literal5097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING281_tree = (Object)adaptor.create(STRING281);
                    adaptor.addChild(root_0, STRING281_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(STRING281, DroolsEditorType.STRING_CONST);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1234:4: DECIMAL
                    {
                    root_0 = (Object)adaptor.nil();

                    DECIMAL282=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL282_tree = (Object)adaptor.create(DECIMAL282);
                    adaptor.addChild(root_0, DECIMAL282_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(DECIMAL282, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1235:4: HEX
                    {
                    root_0 = (Object)adaptor.nil();

                    HEX283=(Token)match(input,HEX,FOLLOW_HEX_in_literal5129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX283_tree = (Object)adaptor.create(HEX283);
                    adaptor.addChild(root_0, HEX283_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(HEX283, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1236:4: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();

                    FLOAT284=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT284_tree = (Object)adaptor.create(FLOAT284);
                    adaptor.addChild(root_0, FLOAT284_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FLOAT284, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1237:4: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL285=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL285_tree = (Object)adaptor.create(BOOL285);
                    adaptor.addChild(root_0, BOOL285_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL285, DroolsEditorType.BOOLEAN_CONST);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1238:4: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL286=(Token)match(input,NULL,FOLLOW_NULL_in_literal5178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL286_tree = (Object)adaptor.create(NULL286);
                    adaptor.addChild(root_0, NULL286_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NULL286, DroolsEditorType.NULL_CONST);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // src/main/resources/org/drools/lang/DRL.g:1241:1: typeList : type ( COMMA type )* ;
    public final DRLParser.typeList_return typeList() throws RecognitionException {
        DRLParser.typeList_return retval = new DRLParser.typeList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA288=null;
        DRLParser.type_return type287 = null;

        DRLParser.type_return type289 = null;


        Object COMMA288_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1242:2: ( type ( COMMA type )* )
            // src/main/resources/org/drools/lang/DRL.g:1242:4: type ( COMMA type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5209);
            type287=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type287.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1242:9: ( COMMA type )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==COMMA) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1242:10: COMMA type
            	    {
            	    COMMA288=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5212); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA288_tree = (Object)adaptor.create(COMMA288);
            	    adaptor.addChild(root_0, COMMA288_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList5214);
            	    type289=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type289.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // src/main/resources/org/drools/lang/DRL.g:1246:1: type options {backtrack=true; memoize=true; } : ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) );
    public final DRLParser.type_return type() throws RecognitionException {
        DRLParser.type_return retval = new DRLParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE291=null;
        Token RIGHT_SQUARE292=null;
        Token ID293=null;
        Token DOT295=null;
        Token ID296=null;
        Token LEFT_SQUARE298=null;
        Token RIGHT_SQUARE299=null;
        DRLParser.primitiveType_return primitiveType290 = null;

        DRLParser.typeArguments_return typeArguments294 = null;

        DRLParser.typeArguments_return typeArguments297 = null;


        Object LEFT_SQUARE291_tree=null;
        Object RIGHT_SQUARE292_tree=null;
        Object ID293_tree=null;
        Object DOT295_tree=null;
        Object ID296_tree=null;
        Object LEFT_SQUARE298_tree=null;
        Object RIGHT_SQUARE299_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1248:2: ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==ID) ) {
                int LA102_1 = input.LA(2);

                if ( (((synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))))) ) {
                    alt102=1;
                }
                else if ( (true) ) {
                    alt102=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1248:5: ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1248:24: ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1248:26: primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type5253);
                    primitiveType290=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType290.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1248:40: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( (LA97_0==LEFT_SQUARE) ) {
                            int LA97_2 = input.LA(2);

                            if ( (LA97_2==RIGHT_SQUARE) ) {
                                int LA97_3 = input.LA(3);

                                if ( (synpred9_DRL()) ) {
                                    alt97=1;
                                }


                            }


                        }


                        switch (alt97) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1248:41: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE291=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5263); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE291_tree = (Object)adaptor.create(LEFT_SQUARE291);
                    	    adaptor.addChild(root_0, LEFT_SQUARE291_tree);
                    	    }
                    	    RIGHT_SQUARE292=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5265); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE292_tree = (Object)adaptor.create(RIGHT_SQUARE292);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE292_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop97;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1249:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1249:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1249:6: ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    ID293=(Token)match(input,ID,FOLLOW_ID_in_type5276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID293_tree = (Object)adaptor.create(ID293);
                    adaptor.addChild(root_0, ID293_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1249:9: ( ( typeArguments )=> typeArguments )?
                    int alt98=2;
                    alt98 = dfa98.predict(input);
                    switch (alt98) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1249:10: ( typeArguments )=> typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_type5283);
                            typeArguments294=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments294.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1249:43: ( DOT ID ( ( typeArguments )=> typeArguments )? )*
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);

                        if ( (LA100_0==DOT) ) {
                            alt100=1;
                        }


                        switch (alt100) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1249:44: DOT ID ( ( typeArguments )=> typeArguments )?
                    	    {
                    	    DOT295=(Token)match(input,DOT,FOLLOW_DOT_in_type5288); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT295_tree = (Object)adaptor.create(DOT295);
                    	    adaptor.addChild(root_0, DOT295_tree);
                    	    }
                    	    ID296=(Token)match(input,ID,FOLLOW_ID_in_type5290); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID296_tree = (Object)adaptor.create(ID296);
                    	    adaptor.addChild(root_0, ID296_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1249:51: ( ( typeArguments )=> typeArguments )?
                    	    int alt99=2;
                    	    alt99 = dfa99.predict(input);
                    	    switch (alt99) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1249:52: ( typeArguments )=> typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_type5297);
                    	            typeArguments297=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments297.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop100;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1249:88: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop101:
                    do {
                        int alt101=2;
                        int LA101_0 = input.LA(1);

                        if ( (LA101_0==LEFT_SQUARE) ) {
                            int LA101_2 = input.LA(2);

                            if ( (LA101_2==RIGHT_SQUARE) ) {
                                int LA101_3 = input.LA(3);

                                if ( (synpred12_DRL()) ) {
                                    alt101=1;
                                }


                            }


                        }


                        switch (alt101) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1249:89: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE298=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5312); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE298_tree = (Object)adaptor.create(LEFT_SQUARE298);
                    	    adaptor.addChild(root_0, LEFT_SQUARE298_tree);
                    	    }
                    	    RIGHT_SQUARE299=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5314); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE299_tree = (Object)adaptor.create(RIGHT_SQUARE299);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE299_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop101;
                        }
                    } while (true);


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // src/main/resources/org/drools/lang/DRL.g:1252:1: typeName : ( ID | packageOrTypeName DOT ID );
    public final DRLParser.typeName_return typeName() throws RecognitionException {
        DRLParser.typeName_return retval = new DRLParser.typeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID300=null;
        Token DOT302=null;
        Token ID303=null;
        DRLParser.packageOrTypeName_return packageOrTypeName301 = null;


        Object ID300_tree=null;
        Object DOT302_tree=null;
        Object ID303_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1253:2: ( ID | packageOrTypeName DOT ID )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==ID) ) {
                int LA103_1 = input.LA(2);

                if ( (LA103_1==EOF) ) {
                    alt103=1;
                }
                else if ( (LA103_1==DOT) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1253:6: ID
                    {
                    root_0 = (Object)adaptor.nil();

                    ID300=(Token)match(input,ID,FOLLOW_ID_in_typeName5331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID300_tree = (Object)adaptor.create(ID300);
                    adaptor.addChild(root_0, ID300_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1254:10: packageOrTypeName DOT ID
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_packageOrTypeName_in_typeName5342);
                    packageOrTypeName301=packageOrTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageOrTypeName301.getTree());
                    DOT302=(Token)match(input,DOT,FOLLOW_DOT_in_typeName5344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT302_tree = (Object)adaptor.create(DOT302);
                    adaptor.addChild(root_0, DOT302_tree);
                    }
                    ID303=(Token)match(input,ID,FOLLOW_ID_in_typeName5346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID303_tree = (Object)adaptor.create(ID303);
                    adaptor.addChild(root_0, ID303_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // src/main/resources/org/drools/lang/DRL.g:1257:1: packageOrTypeName : id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) ;
    public final DRLParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        DRLParser.packageOrTypeName_return retval = new DRLParser.packageOrTypeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1258:2: (id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1258:4: id+= ID (id+= DOT id+= ID )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1258:11: (id+= DOT id+= ID )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==DOT) ) {
                    int LA104_2 = input.LA(2);

                    if ( (LA104_2==ID) ) {
                        int LA104_3 = input.LA(3);

                        if ( ((LA104_3>=SEMICOLON && LA104_3<=DOT)) ) {
                            alt104=1;
                        }
                        else if ( (LA104_3==EOF) ) {
                            int LA104_5 = input.LA(4);

                            if ( (LA104_5==EOF) ) {
                                alt104=1;
                            }


                        }


                    }


                }


                switch (alt104) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1258:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_packageOrTypeName5365); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5369); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PACKAGE, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1261:3: -> ^( VT_PACKAGE_ID ( ID )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1261:6: ^( VT_PACKAGE_ID ( ID )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PACKAGE_ID, "VT_PACKAGE_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1264:1: typeArguments : LESS typeArgument ( COMMA typeArgument )* GREATER ;
    public final DRLParser.typeArguments_return typeArguments() throws RecognitionException {
        DRLParser.typeArguments_return retval = new DRLParser.typeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS304=null;
        Token COMMA306=null;
        Token GREATER308=null;
        DRLParser.typeArgument_return typeArgument305 = null;

        DRLParser.typeArgument_return typeArgument307 = null;


        Object LESS304_tree=null;
        Object COMMA306_tree=null;
        Object GREATER308_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1265:2: ( LESS typeArgument ( COMMA typeArgument )* GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1265:4: LESS typeArgument ( COMMA typeArgument )* GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS304=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS304_tree = (Object)adaptor.create(LESS304);
            adaptor.addChild(root_0, LESS304_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5399);
            typeArgument305=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument305.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1265:22: ( COMMA typeArgument )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1265:23: COMMA typeArgument
            	    {
            	    COMMA306=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5402); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA306_tree = (Object)adaptor.create(COMMA306);
            	    adaptor.addChild(root_0, COMMA306_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments5404);
            	    typeArgument307=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument307.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            GREATER308=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER308_tree = (Object)adaptor.create(GREATER308);
            adaptor.addChild(root_0, GREATER308_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // src/main/resources/org/drools/lang/DRL.g:1268:1: typeArgument : ( type | QUESTION ( ( extends_key | super_key ) type )? );
    public final DRLParser.typeArgument_return typeArgument() throws RecognitionException {
        DRLParser.typeArgument_return retval = new DRLParser.typeArgument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION310=null;
        DRLParser.type_return type309 = null;

        DRLParser.extends_key_return extends_key311 = null;

        DRLParser.super_key_return super_key312 = null;

        DRLParser.type_return type313 = null;


        Object QUESTION310_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1269:2: ( type | QUESTION ( ( extends_key | super_key ) type )? )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==ID) ) {
                alt108=1;
            }
            else if ( (LA108_0==QUESTION) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1269:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument5420);
                    type309=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type309.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1270:4: QUESTION ( ( extends_key | super_key ) type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    QUESTION310=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_typeArgument5425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION310_tree = (Object)adaptor.create(QUESTION310);
                    adaptor.addChild(root_0, QUESTION310_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1270:13: ( ( extends_key | super_key ) type )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1270:14: ( extends_key | super_key ) type
                            {
                            // src/main/resources/org/drools/lang/DRL.g:1270:14: ( extends_key | super_key )
                            int alt106=2;
                            int LA106_0 = input.LA(1);

                            if ( (LA106_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))))) {
                                int LA106_1 = input.LA(2);

                                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                                    alt106=1;
                                }
                                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                                    alt106=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 106, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 106, 0, input);

                                throw nvae;
                            }
                            switch (alt106) {
                                case 1 :
                                    // src/main/resources/org/drools/lang/DRL.g:1270:15: extends_key
                                    {
                                    pushFollow(FOLLOW_extends_key_in_typeArgument5429);
                                    extends_key311=extends_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key311.getTree());

                                    }
                                    break;
                                case 2 :
                                    // src/main/resources/org/drools/lang/DRL.g:1270:29: super_key
                                    {
                                    pushFollow(FOLLOW_super_key_in_typeArgument5433);
                                    super_key312=super_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key312.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument5436);
                            type313=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type313.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameters"
    // src/main/resources/org/drools/lang/DRL.g:1273:1: parameters : LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) ;
    public final DRLParser.parameters_return parameters() throws RecognitionException {
        DRLParser.parameters_return retval = new DRLParser.parameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN314=null;
        Token COMMA316=null;
        Token RIGHT_PAREN318=null;
        DRLParser.param_definition_return param_definition315 = null;

        DRLParser.param_definition_return param_definition317 = null;


        Object LEFT_PAREN314_tree=null;
        Object COMMA316_tree=null;
        Object RIGHT_PAREN318_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_param_definition=new RewriteRuleSubtreeStream(adaptor,"rule param_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1274:2: ( LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:1274:4: LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN
            {
            LEFT_PAREN314=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parameters5449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN314);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN314, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1275:4: ( param_definition ( COMMA param_definition )* )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ID) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1275:6: param_definition ( COMMA param_definition )*
                    {
                    pushFollow(FOLLOW_param_definition_in_parameters5458);
                    param_definition315=param_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_param_definition.add(param_definition315.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1275:23: ( COMMA param_definition )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==COMMA) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1275:24: COMMA param_definition
                    	    {
                    	    COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters5461); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA316);

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(COMMA316, DroolsEditorType.SYMBOL);	
                    	    }
                    	    pushFollow(FOLLOW_param_definition_in_parameters5465);
                    	    param_definition317=param_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_param_definition.add(param_definition317.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_PAREN318=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parameters5474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN318);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN318, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: param_definition, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1277:3: -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:1277:6: ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PARAM_LIST, "VT_PARAM_LIST"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:1277:22: ( param_definition )*
                while ( stream_param_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_param_definition.nextTree());

                }
                stream_param_definition.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameters"

    public static class param_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "param_definition"
    // src/main/resources/org/drools/lang/DRL.g:1280:1: param_definition : ( data_type )? argument ;
    public final DRLParser.param_definition_return param_definition() throws RecognitionException {
        DRLParser.param_definition_return retval = new DRLParser.param_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.data_type_return data_type319 = null;

        DRLParser.argument_return argument320 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1281:2: ( ( data_type )? argument )
            // src/main/resources/org/drools/lang/DRL.g:1281:4: ( data_type )? argument
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1281:4: ( data_type )?
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1281:4: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_param_definition5500);
                    data_type319=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type319.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_argument_in_param_definition5503);
            argument320=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument320.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "param_definition"

    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // src/main/resources/org/drools/lang/DRL.g:1284:1: argument : ID ( dimension_definition )* ;
    public final DRLParser.argument_return argument() throws RecognitionException {
        DRLParser.argument_return retval = new DRLParser.argument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID321=null;
        DRLParser.dimension_definition_return dimension_definition322 = null;


        Object ID321_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1285:2: ( ID ( dimension_definition )* )
            // src/main/resources/org/drools/lang/DRL.g:1285:4: ID ( dimension_definition )*
            {
            root_0 = (Object)adaptor.nil();

            ID321=(Token)match(input,ID,FOLLOW_ID_in_argument5514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID321_tree = (Object)adaptor.create(ID321);
            adaptor.addChild(root_0, ID321_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(ID321, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1286:3: ( dimension_definition )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==LEFT_SQUARE) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1286:3: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_argument5520);
            	    dimension_definition322=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dimension_definition322.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class string_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_list"
    // src/main/resources/org/drools/lang/DRL.g:1289:1: string_list : first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] ;
    public final DRLParser.string_list_return string_list() throws RecognitionException {
        DRLParser.string_list_return retval = new DRLParser.string_list_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token first=null;
        Token next=null;
        Token COMMA323=null;

        Object first_tree=null;
        Object next_tree=null;
        Object COMMA323_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");


            StringBuilder buf = new StringBuilder();

        try {
            // src/main/resources/org/drools/lang/DRL.g:1293:2: (first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] )
            // src/main/resources/org/drools/lang/DRL.g:1293:4: first= STRING ( COMMA next= STRING )*
            {
            first=(Token)match(input,STRING,FOLLOW_STRING_in_string_list5539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING.add(first);

            if ( state.backtracking==0 ) {
               buf.append( "[ "+ (first!=null?first.getText():null) ); 
            }
            // src/main/resources/org/drools/lang/DRL.g:1294:5: ( COMMA next= STRING )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==COMMA) ) {
                    int LA113_2 = input.LA(2);

                    if ( (LA113_2==STRING) ) {
                        alt113=1;
                    }


                }


                switch (alt113) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1294:6: COMMA next= STRING
            	    {
            	    COMMA323=(Token)match(input,COMMA,FOLLOW_COMMA_in_string_list5548); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA323);

            	    next=(Token)match(input,STRING,FOLLOW_STRING_in_string_list5552); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_STRING.add(next);

            	    if ( state.backtracking==0 ) {
            	       buf.append( ", " + (next!=null?next.getText():null) ); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);



            // AST REWRITE
            // elements: STRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1295:2: -> STRING[$first,buf.toString()+\" ]\"]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STRING, first, buf.toString()+" ]"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_list"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // src/main/resources/org/drools/lang/DRL.g:1301:1: expression options {backtrack=true; memoize=true; } : conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? ;
    public final DRLParser.expression_return expression() throws RecognitionException {
        DRLParser.expression_return retval = new DRLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.conditionalExpression_return conditionalExpression324 = null;

        DRLParser.assignmentOperator_return assignmentOperator325 = null;

        DRLParser.expression_return expression326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1303:2: ( conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? )
            // src/main/resources/org/drools/lang/DRL.g:1303:4: conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression5592);
            conditionalExpression324=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression324.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1303:26: ( ( assignmentOperator )=> assignmentOperator expression )?
            int alt114=2;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1303:27: ( assignmentOperator )=> assignmentOperator expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression5601);
                    assignmentOperator325=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentOperator325.getTree());
                    pushFollow(FOLLOW_expression_in_expression5603);
                    expression326=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression326.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1306:1: conditionalExpression : conditionalOrExpression ( QUESTION expression COLON expression )? ;
    public final DRLParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        DRLParser.conditionalExpression_return retval = new DRLParser.conditionalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION328=null;
        Token COLON330=null;
        DRLParser.conditionalOrExpression_return conditionalOrExpression327 = null;

        DRLParser.expression_return expression329 = null;

        DRLParser.expression_return expression331 = null;


        Object QUESTION328_tree=null;
        Object COLON330_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1307:9: ( conditionalOrExpression ( QUESTION expression COLON expression )? )
            // src/main/resources/org/drools/lang/DRL.g:1307:17: conditionalOrExpression ( QUESTION expression COLON expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression5629);
            conditionalOrExpression327=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression327.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1307:41: ( QUESTION expression COLON expression )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==QUESTION) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1307:43: QUESTION expression COLON expression
                    {
                    QUESTION328=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression5633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION328_tree = (Object)adaptor.create(QUESTION328);
                    adaptor.addChild(root_0, QUESTION328_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression5635);
                    expression329=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression329.getTree());
                    COLON330=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression5637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON330_tree = (Object)adaptor.create(COLON330);
                    adaptor.addChild(root_0, COLON330_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression5639);
                    expression331=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression331.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1309:1: conditionalOrExpression : conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* ;
    public final DRLParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        DRLParser.conditionalOrExpression_return retval = new DRLParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE333=null;
        DRLParser.conditionalAndExpression_return conditionalAndExpression332 = null;

        DRLParser.conditionalAndExpression_return conditionalAndExpression334 = null;


        Object DOUBLE_PIPE333_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1310:5: ( conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1310:9: conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5657);
            conditionalAndExpression332=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression332.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1310:34: ( DOUBLE_PIPE conditionalAndExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==DOUBLE_PIPE) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1310:36: DOUBLE_PIPE conditionalAndExpression
            	    {
            	    DOUBLE_PIPE333=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression5661); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE333_tree = (Object)adaptor.create(DOUBLE_PIPE333);
            	    adaptor.addChild(root_0, DOUBLE_PIPE333_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5663);
            	    conditionalAndExpression334=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression334.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // src/main/resources/org/drools/lang/DRL.g:1313:1: conditionalAndExpression : inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* ;
    public final DRLParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        DRLParser.conditionalAndExpression_return retval = new DRLParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER336=null;
        DRLParser.inclusiveOrExpression_return inclusiveOrExpression335 = null;

        DRLParser.inclusiveOrExpression_return inclusiveOrExpression337 = null;


        Object DOUBLE_AMPER336_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1314:5: ( inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1314:9: inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5682);
            inclusiveOrExpression335=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression335.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1314:31: ( DOUBLE_AMPER inclusiveOrExpression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==DOUBLE_AMPER) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1314:33: DOUBLE_AMPER inclusiveOrExpression
            	    {
            	    DOUBLE_AMPER336=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression5686); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER336_tree = (Object)adaptor.create(DOUBLE_AMPER336);
            	    adaptor.addChild(root_0, DOUBLE_AMPER336_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5688);
            	    inclusiveOrExpression337=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression337.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1317:1: inclusiveOrExpression : exclusiveOrExpression ( PIPE exclusiveOrExpression )* ;
    public final DRLParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        DRLParser.inclusiveOrExpression_return retval = new DRLParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PIPE339=null;
        DRLParser.exclusiveOrExpression_return exclusiveOrExpression338 = null;

        DRLParser.exclusiveOrExpression_return exclusiveOrExpression340 = null;


        Object PIPE339_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1318:5: ( exclusiveOrExpression ( PIPE exclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1318:9: exclusiveOrExpression ( PIPE exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5707);
            exclusiveOrExpression338=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression338.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1318:31: ( PIPE exclusiveOrExpression )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==PIPE) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1318:33: PIPE exclusiveOrExpression
            	    {
            	    PIPE339=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression5711); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE339_tree = (Object)adaptor.create(PIPE339);
            	    adaptor.addChild(root_0, PIPE339_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5713);
            	    exclusiveOrExpression340=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression340.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1321:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final DRLParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        DRLParser.exclusiveOrExpression_return retval = new DRLParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token XOR342=null;
        DRLParser.andExpression_return andExpression341 = null;

        DRLParser.andExpression_return andExpression343 = null;


        Object XOR342_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1322:5: ( andExpression ( XOR andExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1322:9: andExpression ( XOR andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5732);
            andExpression341=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression341.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1322:23: ( XOR andExpression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==XOR) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1322:25: XOR andExpression
            	    {
            	    XOR342=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression5736); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR342_tree = (Object)adaptor.create(XOR342);
            	    adaptor.addChild(root_0, XOR342_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5738);
            	    andExpression343=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression343.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // src/main/resources/org/drools/lang/DRL.g:1325:1: andExpression : equalityExpression ( AMPER equalityExpression )* ;
    public final DRLParser.andExpression_return andExpression() throws RecognitionException {
        DRLParser.andExpression_return retval = new DRLParser.andExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPER345=null;
        DRLParser.equalityExpression_return equalityExpression344 = null;

        DRLParser.equalityExpression_return equalityExpression346 = null;


        Object AMPER345_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1326:5: ( equalityExpression ( AMPER equalityExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1326:9: equalityExpression ( AMPER equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression5757);
            equalityExpression344=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression344.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1326:28: ( AMPER equalityExpression )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==AMPER) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1326:30: AMPER equalityExpression
            	    {
            	    AMPER345=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression5761); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPER345_tree = (Object)adaptor.create(AMPER345);
            	    adaptor.addChild(root_0, AMPER345_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression5763);
            	    equalityExpression346=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression346.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // src/main/resources/org/drools/lang/DRL.g:1329:1: equalityExpression : instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* ;
    public final DRLParser.equalityExpression_return equalityExpression() throws RecognitionException {
        DRLParser.equalityExpression_return retval = new DRLParser.equalityExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set348=null;
        DRLParser.instanceOfExpression_return instanceOfExpression347 = null;

        DRLParser.instanceOfExpression_return instanceOfExpression349 = null;


        Object set348_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1330:5: ( instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1330:9: instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5782);
            instanceOfExpression347=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression347.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1330:30: ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==EQUALS||LA121_0==NOT_EQUALS) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1330:32: ( EQUALS | NOT_EQUALS ) instanceOfExpression
            	    {
            	    set348=(Token)input.LT(1);
            	    if ( input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set348));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5796);
            	    instanceOfExpression349=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression349.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // src/main/resources/org/drools/lang/DRL.g:1333:1: instanceOfExpression : relationalExpression ( instanceof_key type )? ;
    public final DRLParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        DRLParser.instanceOfExpression_return retval = new DRLParser.instanceOfExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.relationalExpression_return relationalExpression350 = null;

        DRLParser.instanceof_key_return instanceof_key351 = null;

        DRLParser.type_return type352 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1334:5: ( relationalExpression ( instanceof_key type )? )
            // src/main/resources/org/drools/lang/DRL.g:1334:9: relationalExpression ( instanceof_key type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5815);
            relationalExpression350=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression350.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1334:30: ( instanceof_key type )?
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1334:31: instanceof_key type
                    {
                    pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression5818);
                    instanceof_key351=instanceof_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceof_key351.getTree());
                    pushFollow(FOLLOW_type_in_instanceOfExpression5820);
                    type352=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type352.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1337:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* ;
    public final DRLParser.relationalExpression_return relationalExpression() throws RecognitionException {
        DRLParser.relationalExpression_return retval = new DRLParser.relationalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.shiftExpression_return shiftExpression353 = null;

        DRLParser.relationalOp_return relationalOp354 = null;

        DRLParser.shiftExpression_return shiftExpression355 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1338:5: ( shiftExpression ( relationalOp shiftExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1338:9: shiftExpression ( relationalOp shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5838);
            shiftExpression353=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression353.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1338:25: ( relationalOp shiftExpression )*
            loop123:
            do {
                int alt123=2;
                alt123 = dfa123.predict(input);
                switch (alt123) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1338:27: relationalOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression5842);
            	    relationalOp354=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalOp354.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5844);
            	    shiftExpression355=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression355.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // src/main/resources/org/drools/lang/DRL.g:1341:1: relationalOp : ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) ;
    public final DRLParser.relationalOp_return relationalOp() throws RecognitionException {
        DRLParser.relationalOp_return retval = new DRLParser.relationalOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set356=null;

        Object set356_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1342:2: ( ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) )
            // src/main/resources/org/drools/lang/DRL.g:1342:4: ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER )
            {
            root_0 = (Object)adaptor.nil();

            set356=(Token)input.LT(1);
            if ( (input.LA(1)>=GREATER && input.LA(1)<=LESS_EQUALS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set356));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // src/main/resources/org/drools/lang/DRL.g:1345:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
    public final DRLParser.shiftExpression_return shiftExpression() throws RecognitionException {
        DRLParser.shiftExpression_return retval = new DRLParser.shiftExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.additiveExpression_return additiveExpression357 = null;

        DRLParser.shiftOp_return shiftOp358 = null;

        DRLParser.additiveExpression_return additiveExpression359 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1346:5: ( additiveExpression ( shiftOp additiveExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1346:9: additiveExpression ( shiftOp additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5891);
            additiveExpression357=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression357.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1346:28: ( shiftOp additiveExpression )*
            loop124:
            do {
                int alt124=2;
                switch ( input.LA(1) ) {
                case SHIFT_LEFT:
                    {
                    int LA124_2 = input.LA(2);

                    if ( (LA124_2==ID||LA124_2==STRING||(LA124_2>=BOOL && LA124_2<=LEFT_PAREN)||LA124_2==LESS||(LA124_2>=NULL && LA124_2<=LEFT_SQUARE)||(LA124_2>=INCR && LA124_2<=NEGATION)) ) {
                        alt124=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT:
                    {
                    int LA124_3 = input.LA(2);

                    if ( (LA124_3==ID||LA124_3==STRING||(LA124_3>=BOOL && LA124_3<=LEFT_PAREN)||LA124_3==LESS||(LA124_3>=NULL && LA124_3<=LEFT_SQUARE)||(LA124_3>=INCR && LA124_3<=NEGATION)) ) {
                        alt124=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT_UNSIG:
                    {
                    int LA124_4 = input.LA(2);

                    if ( (LA124_4==ID||LA124_4==STRING||(LA124_4>=BOOL && LA124_4<=LEFT_PAREN)||LA124_4==LESS||(LA124_4>=NULL && LA124_4<=LEFT_SQUARE)||(LA124_4>=INCR && LA124_4<=NEGATION)) ) {
                        alt124=1;
                    }


                    }
                    break;

                }

                switch (alt124) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1346:30: shiftOp additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression5895);
            	    shiftOp358=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftOp358.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5897);
            	    additiveExpression359=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression359.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // src/main/resources/org/drools/lang/DRL.g:1349:1: shiftOp : ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) ;
    public final DRLParser.shiftOp_return shiftOp() throws RecognitionException {
        DRLParser.shiftOp_return retval = new DRLParser.shiftOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set360=null;

        Object set360_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1350:2: ( ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) )
            // src/main/resources/org/drools/lang/DRL.g:1350:4: ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT )
            {
            root_0 = (Object)adaptor.nil();

            set360=(Token)input.LT(1);
            if ( (input.LA(1)>=SHIFT_LEFT && input.LA(1)<=SHIFT_RIGHT) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set360));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // src/main/resources/org/drools/lang/DRL.g:1353:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final DRLParser.additiveExpression_return additiveExpression() throws RecognitionException {
        DRLParser.additiveExpression_return retval = new DRLParser.additiveExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set362=null;
        DRLParser.multiplicativeExpression_return multiplicativeExpression361 = null;

        DRLParser.multiplicativeExpression_return multiplicativeExpression363 = null;


        Object set362_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1354:5: ( multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1354:9: multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5938);
            multiplicativeExpression361=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression361.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1354:34: ( ( PLUS | MINUS ) multiplicativeExpression )*
            loop125:
            do {
                int alt125=2;
                alt125 = dfa125.predict(input);
                switch (alt125) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1354:36: ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    set362=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set362));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5950);
            	    multiplicativeExpression363=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression363.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // src/main/resources/org/drools/lang/DRL.g:1357:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final DRLParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        DRLParser.multiplicativeExpression_return retval = new DRLParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set365=null;
        DRLParser.unaryExpression_return unaryExpression364 = null;

        DRLParser.unaryExpression_return unaryExpression366 = null;


        Object set365_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1358:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1358:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5969);
            unaryExpression364=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression364.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1358:25: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( ((LA126_0>=STAR && LA126_0<=MOD)) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1358:27: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    set365=(Token)input.LT(1);
            	    if ( (input.LA(1)>=STAR && input.LA(1)<=MOD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set365));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5987);
            	    unaryExpression366=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression366.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // src/main/resources/org/drools/lang/DRL.g:1361:1: unaryExpression : ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus );
    public final DRLParser.unaryExpression_return unaryExpression() throws RecognitionException {
        DRLParser.unaryExpression_return retval = new DRLParser.unaryExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS367=null;
        Token MINUS369=null;
        Token INCR371=null;
        Token DECR373=null;
        DRLParser.unaryExpression_return unaryExpression368 = null;

        DRLParser.unaryExpression_return unaryExpression370 = null;

        DRLParser.primary_return primary372 = null;

        DRLParser.primary_return primary374 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus375 = null;


        Object PLUS367_tree=null;
        Object MINUS369_tree=null;
        Object INCR371_tree=null;
        Object DECR373_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1362:5: ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus )
            int alt127=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt127=1;
                }
                break;
            case MINUS:
                {
                alt127=2;
                }
                break;
            case INCR:
                {
                alt127=3;
                }
                break;
            case DECR:
                {
                alt127=4;
                }
                break;
            case ID:
            case STRING:
            case BOOL:
            case LEFT_PAREN:
            case LESS:
            case NULL:
            case DECIMAL:
            case HEX:
            case FLOAT:
            case LEFT_SQUARE:
            case TILDE:
            case NEGATION:
                {
                alt127=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1362:9: PLUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS367=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression6007); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS367_tree = (Object)adaptor.create(PLUS367);
                    adaptor.addChild(root_0, PLUS367_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6009);
                    unaryExpression368=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression368.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1363:7: MINUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS369=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS369_tree = (Object)adaptor.create(MINUS369);
                    adaptor.addChild(root_0, MINUS369_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6019);
                    unaryExpression370=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression370.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1364:9: INCR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    INCR371=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression6029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INCR371_tree = (Object)adaptor.create(INCR371);
                    adaptor.addChild(root_0, INCR371_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression6031);
                    primary372=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary372.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1365:9: DECR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    DECR373=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression6041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECR373_tree = (Object)adaptor.create(DECR373);
                    adaptor.addChild(root_0, DECR373_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression6043);
                    primary374=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary374.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1366:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6053);
                    unaryExpressionNotPlusMinus375=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus375.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // src/main/resources/org/drools/lang/DRL.g:1369:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( INCR | DECR )? );
    public final DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        DRLParser.unaryExpressionNotPlusMinus_return retval = new DRLParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token TILDE376=null;
        Token NEGATION378=null;
        Token set383=null;
        DRLParser.unaryExpression_return unaryExpression377 = null;

        DRLParser.unaryExpression_return unaryExpression379 = null;

        DRLParser.castExpression_return castExpression380 = null;

        DRLParser.primary_return primary381 = null;

        DRLParser.selector_return selector382 = null;


        Object TILDE376_tree=null;
        Object NEGATION378_tree=null;
        Object set383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1371:5: ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( INCR | DECR )? )
            int alt130=4;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1371:9: TILDE unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    TILDE376=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus6086); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE376_tree = (Object)adaptor.create(TILDE376);
                    adaptor.addChild(root_0, TILDE376_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6088);
                    unaryExpression377=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression377.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1372:8: NEGATION unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    NEGATION378=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus6097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEGATION378_tree = (Object)adaptor.create(NEGATION378);
                    adaptor.addChild(root_0, NEGATION378_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6099);
                    unaryExpression379=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression379.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1373:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6109);
                    castExpression380=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression380.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1374:9: primary ( ( selector )=> selector )* ( INCR | DECR )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6119);
                    primary381=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary381.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1374:17: ( ( selector )=> selector )*
                    loop128:
                    do {
                        int alt128=2;
                        alt128 = dfa128.predict(input);
                        switch (alt128) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1374:18: ( selector )=> selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6126);
                    	    selector382=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector382.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1374:41: ( INCR | DECR )?
                    int alt129=2;
                    alt129 = dfa129.predict(input);
                    switch (alt129) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:
                            {
                            set383=(Token)input.LT(1);
                            if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set383));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // src/main/resources/org/drools/lang/DRL.g:1377:1: castExpression options {backtrack=true; memoize=true; } : ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus );
    public final DRLParser.castExpression_return castExpression() throws RecognitionException {
        DRLParser.castExpression_return retval = new DRLParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN384=null;
        Token RIGHT_PAREN386=null;
        Token LEFT_PAREN388=null;
        Token RIGHT_PAREN390=null;
        Token LEFT_PAREN392=null;
        Token RIGHT_PAREN394=null;
        DRLParser.primitiveType_return primitiveType385 = null;

        DRLParser.unaryExpression_return unaryExpression387 = null;

        DRLParser.type_return type389 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus391 = null;

        DRLParser.expression_return expression393 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus395 = null;


        Object LEFT_PAREN384_tree=null;
        Object RIGHT_PAREN386_tree=null;
        Object LEFT_PAREN388_tree=null;
        Object RIGHT_PAREN390_tree=null;
        Object LEFT_PAREN392_tree=null;
        Object RIGHT_PAREN394_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1379:5: ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus )
            int alt131=3;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==LEFT_PAREN) ) {
                int LA131_1 = input.LA(2);

                if ( (synpred18_DRL()) ) {
                    alt131=1;
                }
                else if ( (synpred19_DRL()) ) {
                    alt131=2;
                }
                else if ( (true) ) {
                    alt131=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1379:8: ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN384=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN384_tree = (Object)adaptor.create(LEFT_PAREN384);
                    adaptor.addChild(root_0, LEFT_PAREN384_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression6181);
                    primitiveType385=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType385.getTree());
                    RIGHT_PAREN386=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN386_tree = (Object)adaptor.create(RIGHT_PAREN386);
                    adaptor.addChild(root_0, RIGHT_PAREN386_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression6185);
                    unaryExpression387=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression387.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1380:8: ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN388=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN388_tree = (Object)adaptor.create(LEFT_PAREN388);
                    adaptor.addChild(root_0, LEFT_PAREN388_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression6204);
                    type389=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type389.getTree());
                    RIGHT_PAREN390=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN390_tree = (Object)adaptor.create(RIGHT_PAREN390);
                    adaptor.addChild(root_0, RIGHT_PAREN390_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6208);
                    unaryExpressionNotPlusMinus391=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus391.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1381:8: LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN392=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6217); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN392_tree = (Object)adaptor.create(LEFT_PAREN392);
                    adaptor.addChild(root_0, LEFT_PAREN392_tree);
                    }
                    pushFollow(FOLLOW_expression_in_castExpression6219);
                    expression393=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression393.getTree());
                    RIGHT_PAREN394=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN394_tree = (Object)adaptor.create(RIGHT_PAREN394);
                    adaptor.addChild(root_0, RIGHT_PAREN394_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6223);
                    unaryExpressionNotPlusMinus395=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus395.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // src/main/resources/org/drools/lang/DRL.g:1384:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );
    public final DRLParser.primitiveType_return primitiveType() throws RecognitionException {
        DRLParser.primitiveType_return retval = new DRLParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.boolean_key_return boolean_key396 = null;

        DRLParser.char_key_return char_key397 = null;

        DRLParser.byte_key_return byte_key398 = null;

        DRLParser.short_key_return short_key399 = null;

        DRLParser.int_key_return int_key400 = null;

        DRLParser.long_key_return long_key401 = null;

        DRLParser.float_key_return float_key402 = null;

        DRLParser.double_key_return double_key403 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1386:5: ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key )
            int alt132=8;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1386:9: boolean_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolean_key_in_primitiveType6260);
                    boolean_key396=boolean_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_key396.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1387:7: char_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_char_key_in_primitiveType6268);
                    char_key397=char_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_key397.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1388:7: byte_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_byte_key_in_primitiveType6276);
                    byte_key398=byte_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, byte_key398.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1389:7: short_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_short_key_in_primitiveType6284);
                    short_key399=short_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, short_key399.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1390:7: int_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_int_key_in_primitiveType6292);
                    int_key400=int_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, int_key400.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1391:7: long_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_long_key_in_primitiveType6300);
                    long_key401=long_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, long_key401.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1392:7: float_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_float_key_in_primitiveType6308);
                    float_key402=float_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, float_key402.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1393:7: double_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_double_key_in_primitiveType6316);
                    double_key403=double_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_key403.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // src/main/resources/org/drools/lang/DRL.g:1396:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );
    public final DRLParser.primary_return primary() throws RecognitionException {
        DRLParser.primary_return retval = new DRLParser.primary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE415=null;
        Token RIGHT_SQUARE416=null;
        Token DOT417=null;
        Token ID421=null;
        Token DOT422=null;
        Token ID423=null;
        DRLParser.parExpression_return parExpression404 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments405 = null;

        DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix406 = null;

        DRLParser.this_key_return this_key407 = null;

        DRLParser.arguments_return arguments408 = null;

        DRLParser.literal_return literal409 = null;

        DRLParser.super_key_return super_key410 = null;

        DRLParser.superSuffix_return superSuffix411 = null;

        DRLParser.new_key_return new_key412 = null;

        DRLParser.creator_return creator413 = null;

        DRLParser.primitiveType_return primitiveType414 = null;

        DRLParser.class_key_return class_key418 = null;

        DRLParser.inlineMapExpression_return inlineMapExpression419 = null;

        DRLParser.inlineListExpression_return inlineListExpression420 = null;

        DRLParser.identifierSuffix_return identifierSuffix424 = null;


        Object LEFT_SQUARE415_tree=null;
        Object RIGHT_SQUARE416_tree=null;
        Object DOT417_tree=null;
        Object ID421_tree=null;
        Object DOT422_tree=null;
        Object ID423_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1398:5: ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? )
            int alt137=9;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1398:7: ( parExpression )=> parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6339);
                    parExpression404=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression404.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1399:9: ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6354);
                    nonWildcardTypeArguments405=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments405.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1399:63: ( explicitGenericInvocationSuffix | this_key arguments )
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==ID) ) {
                        int LA133_1 = input.LA(2);

                        if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))))) ) {
                            alt133=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                            alt133=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 133, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 133, 0, input);

                        throw nvae;
                    }
                    switch (alt133) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1399:64: explicitGenericInvocationSuffix
                            {
                            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6357);
                            explicitGenericInvocationSuffix406=explicitGenericInvocationSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix406.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1399:98: this_key arguments
                            {
                            pushFollow(FOLLOW_this_key_in_primary6361);
                            this_key407=this_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, this_key407.getTree());
                            pushFollow(FOLLOW_arguments_in_primary6363);
                            arguments408=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments408.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1400:9: ( literal )=> literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6379);
                    literal409=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal409.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1402:9: ( super_key )=> super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_primary6399);
                    super_key410=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key410.getTree());
                    pushFollow(FOLLOW_superSuffix_in_primary6401);
                    superSuffix411=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix411.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1403:9: ( new_key )=> new_key creator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_new_key_in_primary6416);
                    new_key412=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key412.getTree());
                    pushFollow(FOLLOW_creator_in_primary6418);
                    creator413=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, creator413.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1404:9: ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_primary6433);
                    primitiveType414=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType414.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1404:41: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==LEFT_SQUARE) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1404:42: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE415=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary6436); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE415_tree = (Object)adaptor.create(LEFT_SQUARE415);
                    	    adaptor.addChild(root_0, LEFT_SQUARE415_tree);
                    	    }
                    	    RIGHT_SQUARE416=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary6438); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE416_tree = (Object)adaptor.create(RIGHT_SQUARE416);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE416_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);

                    DOT417=(Token)match(input,DOT,FOLLOW_DOT_in_primary6442); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT417_tree = (Object)adaptor.create(DOT417);
                    adaptor.addChild(root_0, DOT417_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_primary6444);
                    class_key418=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key418.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1406:9: ( inlineMapExpression )=> inlineMapExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineMapExpression_in_primary6464);
                    inlineMapExpression419=inlineMapExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineMapExpression419.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1407:9: ( inlineListExpression )=> inlineListExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineListExpression_in_primary6479);
                    inlineListExpression420=inlineListExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineListExpression420.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1408:9: ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ID421=(Token)match(input,ID,FOLLOW_ID_in_primary6493); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID421_tree = (Object)adaptor.create(ID421);
                    adaptor.addChild(root_0, ID421_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1408:18: ( ( DOT ID )=> DOT ID )*
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==DOT) ) {
                            int LA135_2 = input.LA(2);

                            if ( (LA135_2==ID) ) {
                                int LA135_3 = input.LA(3);

                                if ( (synpred36_DRL()) ) {
                                    alt135=1;
                                }


                            }


                        }


                        switch (alt135) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1408:19: ( DOT ID )=> DOT ID
                    	    {
                    	    DOT422=(Token)match(input,DOT,FOLLOW_DOT_in_primary6502); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT422_tree = (Object)adaptor.create(DOT422);
                    	    adaptor.addChild(root_0, DOT422_tree);
                    	    }
                    	    ID423=(Token)match(input,ID,FOLLOW_ID_in_primary6504); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID423_tree = (Object)adaptor.create(ID423);
                    	    adaptor.addChild(root_0, ID423_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1408:38: ( ( identifierSuffix )=> identifierSuffix )?
                    int alt136=2;
                    alt136 = dfa136.predict(input);
                    switch (alt136) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1408:39: ( identifierSuffix )=> identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary6513);
                            identifierSuffix424=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierSuffix424.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class inlineListExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineListExpression"
    // src/main/resources/org/drools/lang/DRL.g:1411:1: inlineListExpression : LEFT_SQUARE ( expressionList )? RIGHT_SQUARE ;
    public final DRLParser.inlineListExpression_return inlineListExpression() throws RecognitionException {
        DRLParser.inlineListExpression_return retval = new DRLParser.inlineListExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE425=null;
        Token RIGHT_SQUARE427=null;
        DRLParser.expressionList_return expressionList426 = null;


        Object LEFT_SQUARE425_tree=null;
        Object RIGHT_SQUARE427_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1412:5: ( LEFT_SQUARE ( expressionList )? RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1412:9: LEFT_SQUARE ( expressionList )? RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE425=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression6534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE425_tree = (Object)adaptor.create(LEFT_SQUARE425);
            adaptor.addChild(root_0, LEFT_SQUARE425_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1412:21: ( expressionList )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ID||LA138_0==STRING||(LA138_0>=BOOL && LA138_0<=LEFT_PAREN)||LA138_0==LESS||(LA138_0>=NULL && LA138_0<=LEFT_SQUARE)||(LA138_0>=INCR && LA138_0<=NEGATION)) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1412:21: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_inlineListExpression6536);
                    expressionList426=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList426.getTree());

                    }
                    break;

            }

            RIGHT_SQUARE427=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression6539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE427_tree = (Object)adaptor.create(RIGHT_SQUARE427);
            adaptor.addChild(root_0, RIGHT_SQUARE427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineListExpression"

    public static class inlineMapExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineMapExpression"
    // src/main/resources/org/drools/lang/DRL.g:1415:1: inlineMapExpression : LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE ;
    public final DRLParser.inlineMapExpression_return inlineMapExpression() throws RecognitionException {
        DRLParser.inlineMapExpression_return retval = new DRLParser.inlineMapExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE428=null;
        Token RIGHT_SQUARE430=null;
        DRLParser.mapExpressionList_return mapExpressionList429 = null;


        Object LEFT_SQUARE428_tree=null;
        Object RIGHT_SQUARE430_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1416:5: ( LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1416:7: LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE428=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression6561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE428_tree = (Object)adaptor.create(LEFT_SQUARE428);
            adaptor.addChild(root_0, LEFT_SQUARE428_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1416:19: ( mapExpressionList )+
            int cnt139=0;
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==ID||LA139_0==STRING||(LA139_0>=BOOL && LA139_0<=LEFT_PAREN)||LA139_0==LESS||(LA139_0>=NULL && LA139_0<=LEFT_SQUARE)||(LA139_0>=INCR && LA139_0<=NEGATION)) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1416:19: mapExpressionList
            	    {
            	    pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression6563);
            	    mapExpressionList429=mapExpressionList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapExpressionList429.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);

            RIGHT_SQUARE430=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression6566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE430_tree = (Object)adaptor.create(RIGHT_SQUARE430);
            adaptor.addChild(root_0, RIGHT_SQUARE430_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineMapExpression"

    public static class mapExpressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapExpressionList"
    // src/main/resources/org/drools/lang/DRL.g:1419:1: mapExpressionList : mapEntry ( COMMA mapEntry )* ;
    public final DRLParser.mapExpressionList_return mapExpressionList() throws RecognitionException {
        DRLParser.mapExpressionList_return retval = new DRLParser.mapExpressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA432=null;
        DRLParser.mapEntry_return mapEntry431 = null;

        DRLParser.mapEntry_return mapEntry433 = null;


        Object COMMA432_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1420:5: ( mapEntry ( COMMA mapEntry )* )
            // src/main/resources/org/drools/lang/DRL.g:1420:7: mapEntry ( COMMA mapEntry )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mapEntry_in_mapExpressionList6583);
            mapEntry431=mapEntry();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry431.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1420:16: ( COMMA mapEntry )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==COMMA) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1420:17: COMMA mapEntry
            	    {
            	    COMMA432=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapExpressionList6586); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA432_tree = (Object)adaptor.create(COMMA432);
            	    adaptor.addChild(root_0, COMMA432_tree);
            	    }
            	    pushFollow(FOLLOW_mapEntry_in_mapExpressionList6588);
            	    mapEntry433=mapEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry433.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapExpressionList"

    public static class mapEntry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapEntry"
    // src/main/resources/org/drools/lang/DRL.g:1423:1: mapEntry : expression COLON expression ;
    public final DRLParser.mapEntry_return mapEntry() throws RecognitionException {
        DRLParser.mapEntry_return retval = new DRLParser.mapEntry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON435=null;
        DRLParser.expression_return expression434 = null;

        DRLParser.expression_return expression436 = null;


        Object COLON435_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1424:5: ( expression COLON expression )
            // src/main/resources/org/drools/lang/DRL.g:1424:7: expression COLON expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_mapEntry6611);
            expression434=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression434.getTree());
            COLON435=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry6613); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON435_tree = (Object)adaptor.create(COLON435);
            adaptor.addChild(root_0, COLON435_tree);
            }
            pushFollow(FOLLOW_expression_in_mapEntry6615);
            expression436=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression436.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapEntry"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // src/main/resources/org/drools/lang/DRL.g:1427:1: parExpression : LEFT_PAREN expression RIGHT_PAREN ;
    public final DRLParser.parExpression_return parExpression() throws RecognitionException {
        DRLParser.parExpression_return retval = new DRLParser.parExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN437=null;
        Token RIGHT_PAREN439=null;
        DRLParser.expression_return expression438 = null;


        Object LEFT_PAREN437_tree=null;
        Object RIGHT_PAREN439_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1428:2: ( LEFT_PAREN expression RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1428:4: LEFT_PAREN expression RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN437=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression6629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN437_tree = (Object)adaptor.create(LEFT_PAREN437);
            adaptor.addChild(root_0, LEFT_PAREN437_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression6631);
            expression438=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression438.getTree());
            RIGHT_PAREN439=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression6633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN439_tree = (Object)adaptor.create(RIGHT_PAREN439);
            adaptor.addChild(root_0, RIGHT_PAREN439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1431:1: identifierSuffix options {backtrack=true; memoize=true; } : ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments );
    public final DRLParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        DRLParser.identifierSuffix_return retval = new DRLParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE440=null;
        Token RIGHT_SQUARE441=null;
        Token DOT442=null;
        Token LEFT_SQUARE444=null;
        Token RIGHT_SQUARE446=null;
        DRLParser.class_key_return class_key443 = null;

        DRLParser.expression_return expression445 = null;

        DRLParser.arguments_return arguments447 = null;


        Object LEFT_SQUARE440_tree=null;
        Object RIGHT_SQUARE441_tree=null;
        Object DOT442_tree=null;
        Object LEFT_SQUARE444_tree=null;
        Object RIGHT_SQUARE446_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1433:5: ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments )
            int alt143=3;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==LEFT_SQUARE) ) {
                int LA143_1 = input.LA(2);

                if ( (LA143_1==RIGHT_SQUARE) ) {
                    alt143=1;
                }
                else if ( (LA143_1==ID||LA143_1==STRING||(LA143_1>=BOOL && LA143_1<=LEFT_PAREN)||LA143_1==LESS||(LA143_1>=NULL && LA143_1<=LEFT_SQUARE)||(LA143_1>=INCR && LA143_1<=NEGATION)) ) {
                    alt143=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 143, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA143_0==LEFT_PAREN) ) {
                alt143=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1433:7: ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1433:7: ( LEFT_SQUARE RIGHT_SQUARE )+
                    int cnt141=0;
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==LEFT_SQUARE) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1433:8: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE440=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix6663); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE440_tree = (Object)adaptor.create(LEFT_SQUARE440);
                    	    adaptor.addChild(root_0, LEFT_SQUARE440_tree);
                    	    }
                    	    RIGHT_SQUARE441=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix6665); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE441_tree = (Object)adaptor.create(RIGHT_SQUARE441);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE441_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt141 >= 1 ) break loop141;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(141, input);
                                throw eee;
                        }
                        cnt141++;
                    } while (true);

                    DOT442=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix6669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT442_tree = (Object)adaptor.create(DOT442);
                    adaptor.addChild(root_0, DOT442_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_identifierSuffix6671);
                    class_key443=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key443.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1434:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1434:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        alt142 = dfa142.predict(input);
                        switch (alt142) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1434:8: ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE444=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix6686); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE444_tree = (Object)adaptor.create(LEFT_SQUARE444);
                    	    adaptor.addChild(root_0, LEFT_SQUARE444_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix6688);
                    	    expression445=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression445.getTree());
                    	    RIGHT_SQUARE446=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix6690); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE446_tree = (Object)adaptor.create(RIGHT_SQUARE446);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE446_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1435:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_identifierSuffix6703);
                    arguments447=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments447.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // src/main/resources/org/drools/lang/DRL.g:1443:1: creator : ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) ;
    public final DRLParser.creator_return creator() throws RecognitionException {
        DRLParser.creator_return retval = new DRLParser.creator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments448 = null;

        DRLParser.createdName_return createdName449 = null;

        DRLParser.arrayCreatorRest_return arrayCreatorRest450 = null;

        DRLParser.classCreatorRest_return classCreatorRest451 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1444:2: ( ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) )
            // src/main/resources/org/drools/lang/DRL.g:1444:4: ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1444:4: ( nonWildcardTypeArguments )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LESS) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1444:4: nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator6721);
                    nonWildcardTypeArguments448=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments448.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_createdName_in_creator6724);
            createdName449=createdName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName449.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1445:9: ( arrayCreatorRest | classCreatorRest )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==LEFT_SQUARE) ) {
                alt145=1;
            }
            else if ( (LA145_0==LEFT_PAREN) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1445:10: arrayCreatorRest
                    {
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator6735);
                    arrayCreatorRest450=arrayCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayCreatorRest450.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1445:29: classCreatorRest
                    {
                    pushFollow(FOLLOW_classCreatorRest_in_creator6739);
                    classCreatorRest451=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest451.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // src/main/resources/org/drools/lang/DRL.g:1448:1: createdName : ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType );
    public final DRLParser.createdName_return createdName() throws RecognitionException {
        DRLParser.createdName_return retval = new DRLParser.createdName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID452=null;
        Token DOT454=null;
        Token ID455=null;
        DRLParser.typeArguments_return typeArguments453 = null;

        DRLParser.typeArguments_return typeArguments456 = null;

        DRLParser.primitiveType_return primitiveType457 = null;


        Object ID452_tree=null;
        Object DOT454_tree=null;
        Object ID455_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1449:2: ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))))) {
                int LA149_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))))) ) {
                    alt149=1;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1449:4: ID ( typeArguments )? ( DOT ID ( typeArguments )? )*
                    {
                    root_0 = (Object)adaptor.nil();

                    ID452=(Token)match(input,ID,FOLLOW_ID_in_createdName6751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID452_tree = (Object)adaptor.create(ID452);
                    adaptor.addChild(root_0, ID452_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1449:7: ( typeArguments )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==LESS) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1449:7: typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_createdName6753);
                            typeArguments453=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments453.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1450:9: ( DOT ID ( typeArguments )? )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==DOT) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1450:11: DOT ID ( typeArguments )?
                    	    {
                    	    DOT454=(Token)match(input,DOT,FOLLOW_DOT_in_createdName6766); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT454_tree = (Object)adaptor.create(DOT454);
                    	    adaptor.addChild(root_0, DOT454_tree);
                    	    }
                    	    ID455=(Token)match(input,ID,FOLLOW_ID_in_createdName6768); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID455_tree = (Object)adaptor.create(ID455);
                    	    adaptor.addChild(root_0, ID455_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1450:18: ( typeArguments )?
                    	    int alt147=2;
                    	    int LA147_0 = input.LA(1);

                    	    if ( (LA147_0==LESS) ) {
                    	        alt147=1;
                    	    }
                    	    switch (alt147) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1450:18: typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_createdName6770);
                    	            typeArguments456=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments456.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1451:11: primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName6785);
                    primitiveType457=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType457.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // src/main/resources/org/drools/lang/DRL.g:1454:1: innerCreator : {...}? => ID classCreatorRest ;
    public final DRLParser.innerCreator_return innerCreator() throws RecognitionException {
        DRLParser.innerCreator_return retval = new DRLParser.innerCreator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID458=null;
        DRLParser.classCreatorRest_return classCreatorRest459 = null;


        Object ID458_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1455:2: ({...}? => ID classCreatorRest )
            // src/main/resources/org/drools/lang/DRL.g:1455:4: {...}? => ID classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "innerCreator", "!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            ID458=(Token)match(input,ID,FOLLOW_ID_in_innerCreator6800); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID458_tree = (Object)adaptor.create(ID458);
            adaptor.addChild(root_0, ID458_tree);
            }
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator6802);
            classCreatorRest459=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest459.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1458:1: arrayCreatorRest : LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) ;
    public final DRLParser.arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        DRLParser.arrayCreatorRest_return retval = new DRLParser.arrayCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE460=null;
        Token RIGHT_SQUARE461=null;
        Token LEFT_SQUARE462=null;
        Token RIGHT_SQUARE463=null;
        Token RIGHT_SQUARE466=null;
        Token LEFT_SQUARE467=null;
        Token RIGHT_SQUARE469=null;
        Token LEFT_SQUARE470=null;
        Token RIGHT_SQUARE471=null;
        DRLParser.arrayInitializer_return arrayInitializer464 = null;

        DRLParser.expression_return expression465 = null;

        DRLParser.expression_return expression468 = null;


        Object LEFT_SQUARE460_tree=null;
        Object RIGHT_SQUARE461_tree=null;
        Object LEFT_SQUARE462_tree=null;
        Object RIGHT_SQUARE463_tree=null;
        Object RIGHT_SQUARE466_tree=null;
        Object LEFT_SQUARE467_tree=null;
        Object RIGHT_SQUARE469_tree=null;
        Object LEFT_SQUARE470_tree=null;
        Object RIGHT_SQUARE471_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1459:2: ( LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1459:6: LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE460=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE460_tree = (Object)adaptor.create(LEFT_SQUARE460);
            adaptor.addChild(root_0, LEFT_SQUARE460_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1460:2: ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==RIGHT_SQUARE) ) {
                alt153=1;
            }
            else if ( (LA153_0==ID||LA153_0==STRING||(LA153_0>=BOOL && LA153_0<=LEFT_PAREN)||LA153_0==LESS||(LA153_0>=NULL && LA153_0<=LEFT_SQUARE)||(LA153_0>=INCR && LA153_0<=NEGATION)) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1460:6: RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer
                    {
                    RIGHT_SQUARE461=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE461_tree = (Object)adaptor.create(RIGHT_SQUARE461);
                    adaptor.addChild(root_0, RIGHT_SQUARE461_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1460:19: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==LEFT_SQUARE) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1460:20: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE462=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6826); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE462_tree = (Object)adaptor.create(LEFT_SQUARE462);
                    	    adaptor.addChild(root_0, LEFT_SQUARE462_tree);
                    	    }
                    	    RIGHT_SQUARE463=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6828); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE463_tree = (Object)adaptor.create(RIGHT_SQUARE463);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE463_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest6832);
                    arrayInitializer464=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer464.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1461:13: expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest6846);
                    expression465=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression465.getTree());
                    RIGHT_SQUARE466=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE466_tree = (Object)adaptor.create(RIGHT_SQUARE466);
                    adaptor.addChild(root_0, RIGHT_SQUARE466_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1461:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*
                    loop151:
                    do {
                        int alt151=2;
                        alt151 = dfa151.predict(input);
                        switch (alt151) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1461:38: {...}? => LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    if ( !((!helper.validateLT(2,"]"))) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "arrayCreatorRest", "!helper.validateLT(2,\"]\")");
                    	    }
                    	    LEFT_SQUARE467=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6853); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE467_tree = (Object)adaptor.create(LEFT_SQUARE467);
                    	    adaptor.addChild(root_0, LEFT_SQUARE467_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest6855);
                    	    expression468=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression468.getTree());
                    	    RIGHT_SQUARE469=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6857); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE469_tree = (Object)adaptor.create(RIGHT_SQUARE469);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE469_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1461:106: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==LEFT_SQUARE) ) {
                            int LA152_2 = input.LA(2);

                            if ( (LA152_2==RIGHT_SQUARE) ) {
                                int LA152_3 = input.LA(3);

                                if ( (synpred41_DRL()) ) {
                                    alt152=1;
                                }


                            }


                        }


                        switch (alt152) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1461:107: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE470=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6869); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE470_tree = (Object)adaptor.create(LEFT_SQUARE470);
                    	    adaptor.addChild(root_0, LEFT_SQUARE470_tree);
                    	    }
                    	    RIGHT_SQUARE471=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6871); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE471_tree = (Object)adaptor.create(RIGHT_SQUARE471);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE471_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayCreatorRest"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1465:1: variableInitializer : ( arrayInitializer | expression );
    public final DRLParser.variableInitializer_return variableInitializer() throws RecognitionException {
        DRLParser.variableInitializer_return retval = new DRLParser.variableInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arrayInitializer_return arrayInitializer472 = null;

        DRLParser.expression_return expression473 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1466:2: ( arrayInitializer | expression )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LEFT_CURLY) ) {
                alt154=1;
            }
            else if ( (LA154_0==ID||LA154_0==STRING||(LA154_0>=BOOL && LA154_0<=LEFT_PAREN)||LA154_0==LESS||(LA154_0>=NULL && LA154_0<=LEFT_SQUARE)||(LA154_0>=INCR && LA154_0<=NEGATION)) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1466:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6894);
                    arrayInitializer472=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer472.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1467:10: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer6905);
                    expression473=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression473.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1470:1: arrayInitializer : LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY ;
    public final DRLParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        DRLParser.arrayInitializer_return retval = new DRLParser.arrayInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY474=null;
        Token COMMA476=null;
        Token COMMA478=null;
        Token RIGHT_CURLY479=null;
        DRLParser.variableInitializer_return variableInitializer475 = null;

        DRLParser.variableInitializer_return variableInitializer477 = null;


        Object LEFT_CURLY474_tree=null;
        Object COMMA476_tree=null;
        Object COMMA478_tree=null;
        Object RIGHT_CURLY479_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1471:2: ( LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1471:4: LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY474=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer6917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY474_tree = (Object)adaptor.create(LEFT_CURLY474);
            adaptor.addChild(root_0, LEFT_CURLY474_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1471:15: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==ID||LA157_0==STRING||(LA157_0>=BOOL && LA157_0<=LEFT_PAREN)||LA157_0==LESS||(LA157_0>=NULL && LA157_0<=LEFT_SQUARE)||LA157_0==LEFT_CURLY||(LA157_0>=INCR && LA157_0<=NEGATION)) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1471:16: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6920);
                    variableInitializer475=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer475.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1471:36: ( COMMA variableInitializer )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==COMMA) ) {
                            int LA155_1 = input.LA(2);

                            if ( (LA155_1==ID||LA155_1==STRING||(LA155_1>=BOOL && LA155_1<=LEFT_PAREN)||LA155_1==LESS||(LA155_1>=NULL && LA155_1<=LEFT_SQUARE)||LA155_1==LEFT_CURLY||(LA155_1>=INCR && LA155_1<=NEGATION)) ) {
                                alt155=1;
                            }


                        }


                        switch (alt155) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1471:37: COMMA variableInitializer
                    	    {
                    	    COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6923); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA476_tree = (Object)adaptor.create(COMMA476);
                    	    adaptor.addChild(root_0, COMMA476_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6925);
                    	    variableInitializer477=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer477.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1471:65: ( COMMA )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==COMMA) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1471:66: COMMA
                            {
                            COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6930); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA478_tree = (Object)adaptor.create(COMMA478);
                            adaptor.addChild(root_0, COMMA478_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RIGHT_CURLY479=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer6937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY479_tree = (Object)adaptor.create(RIGHT_CURLY479);
            adaptor.addChild(root_0, RIGHT_CURLY479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1474:1: classCreatorRest : arguments ;
    public final DRLParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        DRLParser.classCreatorRest_return retval = new DRLParser.classCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arguments_return arguments480 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1475:2: ( arguments )
            // src/main/resources/org/drools/lang/DRL.g:1475:4: arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest6948);
            arguments480=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments480.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // src/main/resources/org/drools/lang/DRL.g:1478:1: explicitGenericInvocation : nonWildcardTypeArguments arguments ;
    public final DRLParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        DRLParser.explicitGenericInvocation_return retval = new DRLParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments481 = null;

        DRLParser.arguments_return arguments482 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1479:2: ( nonWildcardTypeArguments arguments )
            // src/main/resources/org/drools/lang/DRL.g:1479:4: nonWildcardTypeArguments arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6960);
            nonWildcardTypeArguments481=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments481.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation6962);
            arguments482=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments482.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1482:1: nonWildcardTypeArguments : LESS typeList GREATER ;
    public final DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        DRLParser.nonWildcardTypeArguments_return retval = new DRLParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS483=null;
        Token GREATER485=null;
        DRLParser.typeList_return typeList484 = null;


        Object LESS483_tree=null;
        Object GREATER485_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1483:2: ( LESS typeList GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1483:4: LESS typeList GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS483=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments6974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS483_tree = (Object)adaptor.create(LESS483);
            adaptor.addChild(root_0, LESS483_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments6976);
            typeList484=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList484.getTree());
            GREATER485=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments6978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER485_tree = (Object)adaptor.create(GREATER485);
            adaptor.addChild(root_0, GREATER485_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1486:1: explicitGenericInvocationSuffix : ( super_key superSuffix | ID arguments );
    public final DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        DRLParser.explicitGenericInvocationSuffix_return retval = new DRLParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID488=null;
        DRLParser.super_key_return super_key486 = null;

        DRLParser.superSuffix_return superSuffix487 = null;

        DRLParser.arguments_return arguments489 = null;


        Object ID488_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1487:2: ( super_key superSuffix | ID arguments )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==ID) ) {
                int LA158_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                    alt158=1;
                }
                else if ( (true) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1487:4: super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_explicitGenericInvocationSuffix6990);
                    super_key486=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key486.getTree());
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6992);
                    superSuffix487=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix487.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1488:7: ID arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    ID488=(Token)match(input,ID,FOLLOW_ID_in_explicitGenericInvocationSuffix7000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID488_tree = (Object)adaptor.create(ID488);
                    adaptor.addChild(root_0, ID488_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix7002);
                    arguments489=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments489.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // src/main/resources/org/drools/lang/DRL.g:1491:1: selector options {backtrack=true; memoize=true; } : ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE );
    public final DRLParser.selector_return selector() throws RecognitionException {
        DRLParser.selector_return retval = new DRLParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token DOT490=null;
        Token ID491=null;
        Token DOT493=null;
        Token DOT496=null;
        Token LEFT_SQUARE500=null;
        Token RIGHT_SQUARE502=null;
        DRLParser.arguments_return arguments492 = null;

        DRLParser.super_key_return super_key494 = null;

        DRLParser.superSuffix_return superSuffix495 = null;

        DRLParser.new_key_return new_key497 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments498 = null;

        DRLParser.innerCreator_return innerCreator499 = null;

        DRLParser.expression_return expression501 = null;


        Object DOT490_tree=null;
        Object ID491_tree=null;
        Object DOT493_tree=null;
        Object DOT496_tree=null;
        Object LEFT_SQUARE500_tree=null;
        Object RIGHT_SQUARE502_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1493:2: ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE )
            int alt161=4;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==DOT) ) {
                int LA161_1 = input.LA(2);

                if ( (synpred43_DRL()) ) {
                    alt161=1;
                }
                else if ( (synpred44_DRL()) ) {
                    alt161=2;
                }
                else if ( (synpred45_DRL()) ) {
                    alt161=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 161, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA161_0==LEFT_SQUARE) ) {
                alt161=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1493:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT490=(Token)match(input,DOT,FOLLOW_DOT_in_selector7029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT490_tree = (Object)adaptor.create(DOT490);
                    adaptor.addChild(root_0, DOT490_tree);
                    }
                    ID491=(Token)match(input,ID,FOLLOW_ID_in_selector7031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID491_tree = (Object)adaptor.create(ID491);
                    adaptor.addChild(root_0, ID491_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1493:13: ( ( LEFT_PAREN )=> arguments )?
                    int alt159=2;
                    alt159 = dfa159.predict(input);
                    switch (alt159) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1493:14: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector7040);
                            arguments492=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments492.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1495:6: DOT super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT493=(Token)match(input,DOT,FOLLOW_DOT_in_selector7051); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT493_tree = (Object)adaptor.create(DOT493);
                    adaptor.addChild(root_0, DOT493_tree);
                    }
                    pushFollow(FOLLOW_super_key_in_selector7053);
                    super_key494=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key494.getTree());
                    pushFollow(FOLLOW_superSuffix_in_selector7055);
                    superSuffix495=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix495.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1496:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT496=(Token)match(input,DOT,FOLLOW_DOT_in_selector7062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT496_tree = (Object)adaptor.create(DOT496);
                    adaptor.addChild(root_0, DOT496_tree);
                    }
                    pushFollow(FOLLOW_new_key_in_selector7064);
                    new_key497=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key497.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1496:18: ( nonWildcardTypeArguments )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==LESS) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1496:19: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7067);
                            nonWildcardTypeArguments498=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments498.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector7071);
                    innerCreator499=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator499.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1497:6: LEFT_SQUARE expression RIGHT_SQUARE
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_SQUARE500=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector7078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_SQUARE500_tree = (Object)adaptor.create(LEFT_SQUARE500);
                    adaptor.addChild(root_0, LEFT_SQUARE500_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector7080);
                    expression501=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression501.getTree());
                    RIGHT_SQUARE502=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector7082); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE502_tree = (Object)adaptor.create(RIGHT_SQUARE502);
                    adaptor.addChild(root_0, RIGHT_SQUARE502_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1500:1: superSuffix : ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? );
    public final DRLParser.superSuffix_return superSuffix() throws RecognitionException {
        DRLParser.superSuffix_return retval = new DRLParser.superSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT504=null;
        Token ID505=null;
        DRLParser.arguments_return arguments503 = null;

        DRLParser.arguments_return arguments506 = null;


        Object DOT504_tree=null;
        Object ID505_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1501:2: ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==LEFT_PAREN) ) {
                alt163=1;
            }
            else if ( (LA163_0==DOT) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1501:4: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_superSuffix7094);
                    arguments503=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments503.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1502:7: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT504=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix7102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT504_tree = (Object)adaptor.create(DOT504);
                    adaptor.addChild(root_0, DOT504_tree);
                    }
                    ID505=(Token)match(input,ID,FOLLOW_ID_in_superSuffix7104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID505_tree = (Object)adaptor.create(ID505);
                    adaptor.addChild(root_0, ID505_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1502:14: ( ( LEFT_PAREN )=> arguments )?
                    int alt162=2;
                    alt162 = dfa162.predict(input);
                    switch (alt162) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1502:15: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix7113);
                            arguments506=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments506.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // src/main/resources/org/drools/lang/DRL.g:1505:1: arguments options {backtrack=true; memoize=true; } : LEFT_PAREN ( expressionList )? RIGHT_PAREN ;
    public final DRLParser.arguments_return arguments() throws RecognitionException {
        DRLParser.arguments_return retval = new DRLParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN507=null;
        Token RIGHT_PAREN509=null;
        DRLParser.expressionList_return expressionList508 = null;


        Object LEFT_PAREN507_tree=null;
        Object RIGHT_PAREN509_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1507:2: ( LEFT_PAREN ( expressionList )? RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1507:4: LEFT_PAREN ( expressionList )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN507=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments7147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN507_tree = (Object)adaptor.create(LEFT_PAREN507);
            adaptor.addChild(root_0, LEFT_PAREN507_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1507:15: ( expressionList )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==ID||LA164_0==STRING||(LA164_0>=BOOL && LA164_0<=LEFT_PAREN)||LA164_0==LESS||(LA164_0>=NULL && LA164_0<=LEFT_SQUARE)||(LA164_0>=INCR && LA164_0<=NEGATION)) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1507:15: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments7149);
                    expressionList508=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList508.getTree());

                    }
                    break;

            }

            RIGHT_PAREN509=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments7152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN509_tree = (Object)adaptor.create(RIGHT_PAREN509);
            adaptor.addChild(root_0, RIGHT_PAREN509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // src/main/resources/org/drools/lang/DRL.g:1510:1: expressionList : expression ( COMMA expression )* ;
    public final DRLParser.expressionList_return expressionList() throws RecognitionException {
        DRLParser.expressionList_return retval = new DRLParser.expressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA511=null;
        DRLParser.expression_return expression510 = null;

        DRLParser.expression_return expression512 = null;


        Object COMMA511_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1512:5: ( expression ( COMMA expression )* )
            // src/main/resources/org/drools/lang/DRL.g:1512:9: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList7169);
            expression510=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression510.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1512:20: ( COMMA expression )*
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==COMMA) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1512:21: COMMA expression
            	    {
            	    COMMA511=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList7172); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA511_tree = (Object)adaptor.create(COMMA511);
            	    adaptor.addChild(root_0, COMMA511_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList7174);
            	    expression512=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression512.getTree());

            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // src/main/resources/org/drools/lang/DRL.g:1515:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );
    public final DRLParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        DRLParser.assignmentOperator_return retval = new DRLParser.assignmentOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN513=null;
        Token PLUS_ASSIGN514=null;
        Token MINUS_ASSIGN515=null;
        Token MULT_ASSIGN516=null;
        Token DIV_ASSIGN517=null;
        Token AND_ASSIGN518=null;
        Token OR_ASSIGN519=null;
        Token XOR_ASSIGN520=null;
        Token MOD_ASSIGN521=null;
        Token SHIFT_LEFT522=null;
        Token EQUALS_ASSIGN523=null;
        Token SHIFT_RIGHT524=null;
        Token EQUALS_ASSIGN525=null;
        Token SHIFT_RIGHT_UNSIG526=null;
        Token EQUALS_ASSIGN527=null;

        Object EQUALS_ASSIGN513_tree=null;
        Object PLUS_ASSIGN514_tree=null;
        Object MINUS_ASSIGN515_tree=null;
        Object MULT_ASSIGN516_tree=null;
        Object DIV_ASSIGN517_tree=null;
        Object AND_ASSIGN518_tree=null;
        Object OR_ASSIGN519_tree=null;
        Object XOR_ASSIGN520_tree=null;
        Object MOD_ASSIGN521_tree=null;
        Object SHIFT_LEFT522_tree=null;
        Object EQUALS_ASSIGN523_tree=null;
        Object SHIFT_RIGHT524_tree=null;
        Object EQUALS_ASSIGN525_tree=null;
        Object SHIFT_RIGHT_UNSIG526_tree=null;
        Object EQUALS_ASSIGN527_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1517:2: ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN )
            int alt166=12;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1517:6: EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_ASSIGN513=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN513_tree = (Object)adaptor.create(EQUALS_ASSIGN513);
                    adaptor.addChild(root_0, EQUALS_ASSIGN513_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1518:13: PLUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS_ASSIGN514=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator7215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS_ASSIGN514_tree = (Object)adaptor.create(PLUS_ASSIGN514);
                    adaptor.addChild(root_0, PLUS_ASSIGN514_tree);
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1519:13: MINUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS_ASSIGN515=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator7229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS_ASSIGN515_tree = (Object)adaptor.create(MINUS_ASSIGN515);
                    adaptor.addChild(root_0, MINUS_ASSIGN515_tree);
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1520:13: MULT_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MULT_ASSIGN516=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator7243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MULT_ASSIGN516_tree = (Object)adaptor.create(MULT_ASSIGN516);
                    adaptor.addChild(root_0, MULT_ASSIGN516_tree);
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1521:13: DIV_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DIV_ASSIGN517=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator7257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV_ASSIGN517_tree = (Object)adaptor.create(DIV_ASSIGN517);
                    adaptor.addChild(root_0, DIV_ASSIGN517_tree);
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1522:13: AND_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_ASSIGN518=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator7271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_ASSIGN518_tree = (Object)adaptor.create(AND_ASSIGN518);
                    adaptor.addChild(root_0, AND_ASSIGN518_tree);
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1523:13: OR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_ASSIGN519=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator7285); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_ASSIGN519_tree = (Object)adaptor.create(OR_ASSIGN519);
                    adaptor.addChild(root_0, OR_ASSIGN519_tree);
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1524:13: XOR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    XOR_ASSIGN520=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator7299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    XOR_ASSIGN520_tree = (Object)adaptor.create(XOR_ASSIGN520);
                    adaptor.addChild(root_0, XOR_ASSIGN520_tree);
                    }

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1525:13: MOD_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MOD_ASSIGN521=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator7313); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOD_ASSIGN521_tree = (Object)adaptor.create(MOD_ASSIGN521);
                    adaptor.addChild(root_0, MOD_ASSIGN521_tree);
                    }

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:1526:13: SHIFT_LEFT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_LEFT522=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator7327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_LEFT522_tree = (Object)adaptor.create(SHIFT_LEFT522);
                    adaptor.addChild(root_0, SHIFT_LEFT522_tree);
                    }
                    EQUALS_ASSIGN523=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN523_tree = (Object)adaptor.create(EQUALS_ASSIGN523);
                    adaptor.addChild(root_0, EQUALS_ASSIGN523_tree);
                    }

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:1527:13: SHIFT_RIGHT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT524=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator7343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT524_tree = (Object)adaptor.create(SHIFT_RIGHT524);
                    adaptor.addChild(root_0, SHIFT_RIGHT524_tree);
                    }
                    EQUALS_ASSIGN525=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN525_tree = (Object)adaptor.create(EQUALS_ASSIGN525);
                    adaptor.addChild(root_0, EQUALS_ASSIGN525_tree);
                    }

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:1528:13: SHIFT_RIGHT_UNSIG EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT_UNSIG526=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT_UNSIG526_tree = (Object)adaptor.create(SHIFT_RIGHT_UNSIG526);
                    adaptor.addChild(root_0, SHIFT_RIGHT_UNSIG526_tree);
                    }
                    EQUALS_ASSIGN527=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7361); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN527_tree = (Object)adaptor.create(EQUALS_ASSIGN527);
                    adaptor.addChild(root_0, EQUALS_ASSIGN527_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_key"
    // src/main/resources/org/drools/lang/DRL.g:1534:1: operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.operator_key_return operator_key() throws RecognitionException {
        DRLParser.operator_key_return retval = new DRLParser.operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1535:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1535:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(false)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "operator_key", "(helper.isPluggableEvaluator(false))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_operator_key7385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1537:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_key"

    public static class neg_operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg_operator_key"
    // src/main/resources/org/drools/lang/DRL.g:1540:1: neg_operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.neg_operator_key_return neg_operator_key() throws RecognitionException {
        DRLParser.neg_operator_key_return retval = new DRLParser.neg_operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1541:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1541:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(true)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "neg_operator_key", "(helper.isPluggableEvaluator(true))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_neg_operator_key7429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1543:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg_operator_key"

    public static class lock_on_active_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active_key"
    // src/main/resources/org/drools/lang/DRL.g:1546:1: lock_on_active_key : {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] ;
    public final DRLParser.lock_on_active_key_return lock_on_active_key() throws RecognitionException {
        DRLParser.lock_on_active_key_return retval = new DRLParser.lock_on_active_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;
        Token mis2=null;
        Token id3=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        Object mis2_tree=null;
        Object id3_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1549:3: ({...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1549:5: {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lock_on_active_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, \"-\") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key7474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key7478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key7482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            mis2=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key7486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis2);

            id3=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key7490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id3);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);
              		helper.emit(mis2, DroolsEditorType.KEYWORD);
              		helper.emit(id3, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1555:3: -> VK_LOCK_ON_ACTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_LOCK_ON_ACTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active_key"

    public static class date_effective_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective_key"
    // src/main/resources/org/drools/lang/DRL.g:1558:1: date_effective_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] ;
    public final DRLParser.date_effective_key_return date_effective_key() throws RecognitionException {
        DRLParser.date_effective_key_return retval = new DRLParser.date_effective_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1561:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1561:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_effective_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key7522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_effective_key7526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key7530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1565:3: -> VK_DATE_EFFECTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EFFECTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective_key"

    public static class date_expires_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires_key"
    // src/main/resources/org/drools/lang/DRL.g:1568:1: date_expires_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] ;
    public final DRLParser.date_expires_key_return date_expires_key() throws RecognitionException {
        DRLParser.date_expires_key_return retval = new DRLParser.date_expires_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1571:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1571:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_expires_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key7562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_expires_key7566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key7570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1575:3: -> VK_DATE_EXPIRES[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EXPIRES, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires_key"

    public static class no_loop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop_key"
    // src/main/resources/org/drools/lang/DRL.g:1578:1: no_loop_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] ;
    public final DRLParser.no_loop_key_return no_loop_key() throws RecognitionException {
        DRLParser.no_loop_key_return retval = new DRLParser.no_loop_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1581:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1581:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "no_loop_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.LOOP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key7602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_no_loop_key7606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key7610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1585:3: -> VK_NO_LOOP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NO_LOOP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop_key"

    public static class auto_focus_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus_key"
    // src/main/resources/org/drools/lang/DRL.g:1588:1: auto_focus_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] ;
    public final DRLParser.auto_focus_key_return auto_focus_key() throws RecognitionException {
        DRLParser.auto_focus_key_return retval = new DRLParser.auto_focus_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1591:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1591:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "auto_focus_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.FOCUS))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key7642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_auto_focus_key7646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key7650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1595:3: -> VK_AUTO_FOCUS[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AUTO_FOCUS, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus_key"

    public static class activation_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group_key"
    // src/main/resources/org/drools/lang/DRL.g:1598:1: activation_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] ;
    public final DRLParser.activation_group_key_return activation_group_key() throws RecognitionException {
        DRLParser.activation_group_key_return retval = new DRLParser.activation_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1601:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1601:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "activation_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key7682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_activation_group_key7686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key7690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1605:3: -> VK_ACTIVATION_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTIVATION_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group_key"

    public static class agenda_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group_key"
    // src/main/resources/org/drools/lang/DRL.g:1608:1: agenda_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] ;
    public final DRLParser.agenda_group_key_return agenda_group_key() throws RecognitionException {
        DRLParser.agenda_group_key_return retval = new DRLParser.agenda_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1611:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1611:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "agenda_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key7722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_agenda_group_key7726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key7730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1615:3: -> VK_AGENDA_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AGENDA_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group_key"

    public static class ruleflow_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group_key"
    // src/main/resources/org/drools/lang/DRL.g:1618:1: ruleflow_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] ;
    public final DRLParser.ruleflow_group_key_return ruleflow_group_key() throws RecognitionException {
        DRLParser.ruleflow_group_key_return retval = new DRLParser.ruleflow_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1621:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1621:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ruleflow_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key7762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_ruleflow_group_key7766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key7770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1625:3: -> VK_RULEFLOW_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULEFLOW_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group_key"

    public static class entry_point_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entry_point_key"
    // src/main/resources/org/drools/lang/DRL.g:1628:1: entry_point_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] ;
    public final DRLParser.entry_point_key_return entry_point_key() throws RecognitionException {
        DRLParser.entry_point_key_return retval = new DRLParser.entry_point_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1631:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:1631:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "entry_point_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.POINT))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key7802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_entry_point_key7806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key7810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1635:3: -> VK_ENTRY_POINT[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENTRY_POINT, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entry_point_key"

    public static class timer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer_key"
    // src/main/resources/org/drools/lang/DRL.g:1638:1: timer_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.timer_key_return timer_key() throws RecognitionException {
        DRLParser.timer_key_return retval = new DRLParser.timer_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1639:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1639:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timer_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_timer_key7839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1641:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer_key"

    public static class duration_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "duration_key"
    // src/main/resources/org/drools/lang/DRL.g:1644:1: duration_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.duration_key_return duration_key() throws RecognitionException {
        DRLParser.duration_key_return retval = new DRLParser.duration_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1645:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1645:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "duration_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_duration_key7866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1647:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_key"

    public static class calendars_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars_key"
    // src/main/resources/org/drools/lang/DRL.g:1650:1: calendars_key : {...}? =>id= ID -> VK_CALENDARS[$id] ;
    public final DRLParser.calendars_key_return calendars_key() throws RecognitionException {
        DRLParser.calendars_key_return retval = new DRLParser.calendars_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1651:2: ({...}? =>id= ID -> VK_CALENDARS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1651:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "calendars_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_calendars_key7893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1653:3: -> VK_CALENDARS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CALENDARS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars_key"

    public static class package_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_key"
    // src/main/resources/org/drools/lang/DRL.g:1656:1: package_key : {...}? =>id= ID -> VK_PACKAGE[$id] ;
    public final DRLParser.package_key_return package_key() throws RecognitionException {
        DRLParser.package_key_return retval = new DRLParser.package_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1657:2: ({...}? =>id= ID -> VK_PACKAGE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1657:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "package_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_package_key7920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1659:3: -> VK_PACKAGE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PACKAGE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_key"

    public static class import_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_key"
    // src/main/resources/org/drools/lang/DRL.g:1662:1: import_key : {...}? =>id= ID -> VK_IMPORT[$id] ;
    public final DRLParser.import_key_return import_key() throws RecognitionException {
        DRLParser.import_key_return retval = new DRLParser.import_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1663:2: ({...}? =>id= ID -> VK_IMPORT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1663:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "import_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_import_key7947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1665:3: -> VK_IMPORT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPORT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_key"

    public static class dialect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect_key"
    // src/main/resources/org/drools/lang/DRL.g:1668:1: dialect_key : {...}? =>id= ID -> VK_DIALECT[$id] ;
    public final DRLParser.dialect_key_return dialect_key() throws RecognitionException {
        DRLParser.dialect_key_return retval = new DRLParser.dialect_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1669:2: ({...}? =>id= ID -> VK_DIALECT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1669:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dialect_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_dialect_key7974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1671:3: -> VK_DIALECT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DIALECT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect_key"

    public static class salience_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience_key"
    // src/main/resources/org/drools/lang/DRL.g:1674:1: salience_key : {...}? =>id= ID -> VK_SALIENCE[$id] ;
    public final DRLParser.salience_key_return salience_key() throws RecognitionException {
        DRLParser.salience_key_return retval = new DRLParser.salience_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1675:2: ({...}? =>id= ID -> VK_SALIENCE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1675:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "salience_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_salience_key8001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1677:3: -> VK_SALIENCE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SALIENCE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience_key"

    public static class enabled_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled_key"
    // src/main/resources/org/drools/lang/DRL.g:1680:1: enabled_key : {...}? =>id= ID -> VK_ENABLED[$id] ;
    public final DRLParser.enabled_key_return enabled_key() throws RecognitionException {
        DRLParser.enabled_key_return retval = new DRLParser.enabled_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1681:2: ({...}? =>id= ID -> VK_ENABLED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1681:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enabled_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enabled_key8028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1683:3: -> VK_ENABLED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENABLED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled_key"

    public static class attributes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributes_key"
    // src/main/resources/org/drools/lang/DRL.g:1686:1: attributes_key : {...}? =>id= ID -> VK_ATTRIBUTES[$id] ;
    public final DRLParser.attributes_key_return attributes_key() throws RecognitionException {
        DRLParser.attributes_key_return retval = new DRLParser.attributes_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1687:2: ({...}? =>id= ID -> VK_ATTRIBUTES[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1687:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "attributes_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_attributes_key8055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1689:3: -> VK_ATTRIBUTES[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ATTRIBUTES, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributes_key"

    public static class rule_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_key"
    // src/main/resources/org/drools/lang/DRL.g:1692:1: rule_key : {...}? =>id= ID -> VK_RULE[$id] ;
    public final DRLParser.rule_key_return rule_key() throws RecognitionException {
        DRLParser.rule_key_return retval = new DRLParser.rule_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1693:2: ({...}? =>id= ID -> VK_RULE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1693:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rule_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_rule_key8082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1695:3: -> VK_RULE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_key"

    public static class extend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extend_key"
    // src/main/resources/org/drools/lang/DRL.g:1698:1: extend_key : {...}? =>id= ID -> VK_EXTEND[$id] ;
    public final DRLParser.extend_key_return extend_key() throws RecognitionException {
        DRLParser.extend_key_return retval = new DRLParser.extend_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1699:2: ({...}? =>id= ID -> VK_EXTEND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1699:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extend_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extend_key8109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1701:3: -> VK_EXTEND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTEND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extend_key"

    public static class query_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_key"
    // src/main/resources/org/drools/lang/DRL.g:1704:1: query_key : {...}? =>id= ID -> VK_QUERY[$id] ;
    public final DRLParser.query_key_return query_key() throws RecognitionException {
        DRLParser.query_key_return retval = new DRLParser.query_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1705:2: ({...}? =>id= ID -> VK_QUERY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1705:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "query_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_query_key8136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1707:3: -> VK_QUERY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_QUERY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_key"

    public static class declare_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_key"
    // src/main/resources/org/drools/lang/DRL.g:1710:1: declare_key : {...}? =>id= ID -> VK_DECLARE[$id] ;
    public final DRLParser.declare_key_return declare_key() throws RecognitionException {
        DRLParser.declare_key_return retval = new DRLParser.declare_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1711:2: ({...}? =>id= ID -> VK_DECLARE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1711:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "declare_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_declare_key8163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1713:3: -> VK_DECLARE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DECLARE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "declare_key"

    public static class function_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_key"
    // src/main/resources/org/drools/lang/DRL.g:1716:1: function_key : {...}? =>id= ID -> VK_FUNCTION[$id] ;
    public final DRLParser.function_key_return function_key() throws RecognitionException {
        DRLParser.function_key_return retval = new DRLParser.function_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1717:2: ({...}? =>id= ID -> VK_FUNCTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1717:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_function_key8190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1719:3: -> VK_FUNCTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FUNCTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_key"

    public static class global_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_key"
    // src/main/resources/org/drools/lang/DRL.g:1722:1: global_key : {...}? =>id= ID -> VK_GLOBAL[$id] ;
    public final DRLParser.global_key_return global_key() throws RecognitionException {
        DRLParser.global_key_return retval = new DRLParser.global_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1723:2: ({...}? =>id= ID -> VK_GLOBAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1723:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "global_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_global_key8217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1725:3: -> VK_GLOBAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_GLOBAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_key"

    public static class eval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eval_key"
    // src/main/resources/org/drools/lang/DRL.g:1728:1: eval_key : {...}? =>id= ID -> VK_EVAL[$id] ;
    public final DRLParser.eval_key_return eval_key() throws RecognitionException {
        DRLParser.eval_key_return retval = new DRLParser.eval_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1729:2: ({...}? =>id= ID -> VK_EVAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1729:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "eval_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_eval_key8244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1731:3: -> VK_EVAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EVAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eval_key"

    public static class not_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_key"
    // src/main/resources/org/drools/lang/DRL.g:1734:1: not_key : {...}? =>id= ID -> VK_NOT[$id] ;
    public final DRLParser.not_key_return not_key() throws RecognitionException {
        DRLParser.not_key_return retval = new DRLParser.not_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1735:2: ({...}? =>id= ID -> VK_NOT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1735:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NOT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_not_key8271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1737:3: -> VK_NOT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NOT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_key"

    public static class in_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_key"
    // src/main/resources/org/drools/lang/DRL.g:1740:1: in_key : {...}? =>id= ID -> VK_IN[$id] ;
    public final DRLParser.in_key_return in_key() throws RecognitionException {
        DRLParser.in_key_return retval = new DRLParser.in_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1741:2: ({...}? =>id= ID -> VK_IN[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1741:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "in_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_in_key8298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1743:3: -> VK_IN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_key"

    public static class or_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_key"
    // src/main/resources/org/drools/lang/DRL.g:1746:1: or_key : {...}? =>id= ID -> VK_OR[$id] ;
    public final DRLParser.or_key_return or_key() throws RecognitionException {
        DRLParser.or_key_return retval = new DRLParser.or_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1747:2: ({...}? =>id= ID -> VK_OR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1747:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "or_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.OR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_or_key8325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1749:3: -> VK_OR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_key"

    public static class and_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_key"
    // src/main/resources/org/drools/lang/DRL.g:1752:1: and_key : {...}? =>id= ID -> VK_AND[$id] ;
    public final DRLParser.and_key_return and_key() throws RecognitionException {
        DRLParser.and_key_return retval = new DRLParser.and_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1753:2: ({...}? =>id= ID -> VK_AND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1753:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "and_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_and_key8352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1755:3: -> VK_AND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_key"

    public static class exists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exists_key"
    // src/main/resources/org/drools/lang/DRL.g:1758:1: exists_key : {...}? =>id= ID -> VK_EXISTS[$id] ;
    public final DRLParser.exists_key_return exists_key() throws RecognitionException {
        DRLParser.exists_key_return retval = new DRLParser.exists_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1759:2: ({...}? =>id= ID -> VK_EXISTS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1759:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exists_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_exists_key8379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1761:3: -> VK_EXISTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXISTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exists_key"

    public static class forall_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_key"
    // src/main/resources/org/drools/lang/DRL.g:1764:1: forall_key : {...}? =>id= ID -> VK_FORALL[$id] ;
    public final DRLParser.forall_key_return forall_key() throws RecognitionException {
        DRLParser.forall_key_return retval = new DRLParser.forall_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1765:2: ({...}? =>id= ID -> VK_FORALL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1765:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "forall_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_forall_key8406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1767:3: -> VK_FORALL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FORALL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forall_key"

    public static class action_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "action_key"
    // src/main/resources/org/drools/lang/DRL.g:1770:1: action_key : {...}? =>id= ID -> VK_ACTION[$id] ;
    public final DRLParser.action_key_return action_key() throws RecognitionException {
        DRLParser.action_key_return retval = new DRLParser.action_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1771:2: ({...}? =>id= ID -> VK_ACTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1771:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "action_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_action_key8433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1773:3: -> VK_ACTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "action_key"

    public static class reverse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverse_key"
    // src/main/resources/org/drools/lang/DRL.g:1776:1: reverse_key : {...}? =>id= ID -> VK_REVERSE[$id] ;
    public final DRLParser.reverse_key_return reverse_key() throws RecognitionException {
        DRLParser.reverse_key_return retval = new DRLParser.reverse_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1777:2: ({...}? =>id= ID -> VK_REVERSE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1777:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reverse_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_reverse_key8460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1779:3: -> VK_REVERSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_REVERSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reverse_key"

    public static class result_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "result_key"
    // src/main/resources/org/drools/lang/DRL.g:1782:1: result_key : {...}? =>id= ID -> VK_RESULT[$id] ;
    public final DRLParser.result_key_return result_key() throws RecognitionException {
        DRLParser.result_key_return retval = new DRLParser.result_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1783:2: ({...}? =>id= ID -> VK_RESULT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1783:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RESULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RESULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_result_key8487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1785:3: -> VK_RESULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RESULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "result_key"

    public static class end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "end_key"
    // src/main/resources/org/drools/lang/DRL.g:1788:1: end_key : {...}? =>id= ID -> VK_END[$id] ;
    public final DRLParser.end_key_return end_key() throws RecognitionException {
        DRLParser.end_key_return retval = new DRLParser.end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1789:2: ({...}? =>id= ID -> VK_END[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1789:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "end_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_end_key8514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1791:3: -> VK_END[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_END, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "end_key"

    public static class not_end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_end_key"
    // src/main/resources/org/drools/lang/DRL.g:1794:1: not_end_key : {...}? =>any= . ;
    public final DRLParser.not_end_key_return not_end_key() throws RecognitionException {
        DRLParser.not_end_key_return retval = new DRLParser.not_end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token any=null;

        Object any_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1795:2: ({...}? =>any= . )
            // src/main/resources/org/drools/lang/DRL.g:1795:4: {...}? =>any= .
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_end_key", "!(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            any=(Token)input.LT(1);
            matchAny(input); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            any_tree = (Object)adaptor.create(any);
            adaptor.addChild(root_0, any_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(any, DroolsEditorType.CODE_CHUNK);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_end_key"

    public static class init_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_key"
    // src/main/resources/org/drools/lang/DRL.g:1799:1: init_key : {...}? =>id= ID -> VK_INIT[$id] ;
    public final DRLParser.init_key_return init_key() throws RecognitionException {
        DRLParser.init_key_return retval = new DRLParser.init_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1800:2: ({...}? =>id= ID -> VK_INIT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1800:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "init_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INIT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_init_key8561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1802:3: -> VK_INIT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INIT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "init_key"

    public static class instanceof_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceof_key"
    // src/main/resources/org/drools/lang/DRL.g:1805:1: instanceof_key : {...}? =>id= ID -> VK_INSTANCEOF[$id] ;
    public final DRLParser.instanceof_key_return instanceof_key() throws RecognitionException {
        DRLParser.instanceof_key_return retval = new DRLParser.instanceof_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1806:2: ({...}? =>id= ID -> VK_INSTANCEOF[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1806:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instanceof_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_instanceof_key8588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1808:3: -> VK_INSTANCEOF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INSTANCEOF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceof_key"

    public static class extends_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extends_key"
    // src/main/resources/org/drools/lang/DRL.g:1811:1: extends_key : {...}? =>id= ID -> VK_EXTENDS[$id] ;
    public final DRLParser.extends_key_return extends_key() throws RecognitionException {
        DRLParser.extends_key_return retval = new DRLParser.extends_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1812:2: ({...}? =>id= ID -> VK_EXTENDS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1812:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extends_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extends_key8615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1814:3: -> VK_EXTENDS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTENDS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extends_key"

    public static class super_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "super_key"
    // src/main/resources/org/drools/lang/DRL.g:1817:1: super_key : {...}? =>id= ID -> VK_SUPER[$id] ;
    public final DRLParser.super_key_return super_key() throws RecognitionException {
        DRLParser.super_key_return retval = new DRLParser.super_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1818:2: ({...}? =>id= ID -> VK_SUPER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1818:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "super_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_super_key8642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1820:3: -> VK_SUPER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SUPER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "super_key"

    public static class boolean_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_key"
    // src/main/resources/org/drools/lang/DRL.g:1823:1: boolean_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.boolean_key_return boolean_key() throws RecognitionException {
        DRLParser.boolean_key_return retval = new DRLParser.boolean_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1824:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1824:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "boolean_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_boolean_key8670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1826:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "boolean_key"

    public static class char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_key"
    // src/main/resources/org/drools/lang/DRL.g:1829:1: char_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.char_key_return char_key() throws RecognitionException {
        DRLParser.char_key_return retval = new DRLParser.char_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1830:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1830:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_char_key8698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1832:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "char_key"

    public static class byte_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "byte_key"
    // src/main/resources/org/drools/lang/DRL.g:1835:1: byte_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.byte_key_return byte_key() throws RecognitionException {
        DRLParser.byte_key_return retval = new DRLParser.byte_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1836:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1836:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "byte_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_byte_key8726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1838:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "byte_key"

    public static class short_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "short_key"
    // src/main/resources/org/drools/lang/DRL.g:1841:1: short_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.short_key_return short_key() throws RecognitionException {
        DRLParser.short_key_return retval = new DRLParser.short_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1842:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1842:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "short_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_short_key8754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1844:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_key"

    public static class int_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "int_key"
    // src/main/resources/org/drools/lang/DRL.g:1847:1: int_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.int_key_return int_key() throws RecognitionException {
        DRLParser.int_key_return retval = new DRLParser.int_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1848:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1848:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "int_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_int_key8782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1850:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "int_key"

    public static class long_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "long_key"
    // src/main/resources/org/drools/lang/DRL.g:1853:1: long_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.long_key_return long_key() throws RecognitionException {
        DRLParser.long_key_return retval = new DRLParser.long_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1854:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1854:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "long_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LONG))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_long_key8810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1856:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "long_key"

    public static class float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "float_key"
    // src/main/resources/org/drools/lang/DRL.g:1859:1: float_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.float_key_return float_key() throws RecognitionException {
        DRLParser.float_key_return retval = new DRLParser.float_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1860:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1860:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "float_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_float_key8838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1862:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "float_key"

    public static class double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_key"
    // src/main/resources/org/drools/lang/DRL.g:1865:1: double_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.double_key_return double_key() throws RecognitionException {
        DRLParser.double_key_return retval = new DRLParser.double_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1866:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1866:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "double_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_double_key8866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1868:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_key"

    public static class this_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "this_key"
    // src/main/resources/org/drools/lang/DRL.g:1871:1: this_key : {...}? =>id= ID -> VK_THIS[$id] ;
    public final DRLParser.this_key_return this_key() throws RecognitionException {
        DRLParser.this_key_return retval = new DRLParser.this_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1872:2: ({...}? =>id= ID -> VK_THIS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1872:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "this_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THIS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_this_key8894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1874:3: -> VK_THIS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THIS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "this_key"

    public static class void_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "void_key"
    // src/main/resources/org/drools/lang/DRL.g:1877:1: void_key : {...}? =>id= ID -> VK_VOID[$id] ;
    public final DRLParser.void_key_return void_key() throws RecognitionException {
        DRLParser.void_key_return retval = new DRLParser.void_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1878:2: ({...}? =>id= ID -> VK_VOID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1878:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "void_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOID))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_void_key8922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1880:3: -> VK_VOID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "void_key"

    public static class class_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_key"
    // src/main/resources/org/drools/lang/DRL.g:1883:1: class_key : {...}? =>id= ID -> VK_CLASS[$id] ;
    public final DRLParser.class_key_return class_key() throws RecognitionException {
        DRLParser.class_key_return retval = new DRLParser.class_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1884:2: ({...}? =>id= ID -> VK_CLASS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1884:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "class_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_class_key8950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1886:3: -> VK_CLASS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CLASS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "class_key"

    public static class new_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "new_key"
    // src/main/resources/org/drools/lang/DRL.g:1889:1: new_key : {...}? =>id= ID -> VK_NEW[$id] ;
    public final DRLParser.new_key_return new_key() throws RecognitionException {
        DRLParser.new_key_return retval = new DRLParser.new_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1890:2: ({...}? =>id= ID -> VK_NEW[$id] )
            // src/main/resources/org/drools/lang/DRL.g:1890:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "new_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NEW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_new_key8978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1892:3: -> VK_NEW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NEW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "new_key"

    // $ANTLR start synpred1_DRL
    public final void synpred1_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:589:5: ( LEFT_PAREN or_key )
        // src/main/resources/org/drools/lang/DRL.g:589:6: LEFT_PAREN or_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred1_DRL1952); if (state.failed) return ;
        pushFollow(FOLLOW_or_key_in_synpred1_DRL1954);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_DRL

    // $ANTLR start synpred2_DRL
    public final void synpred2_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:597:5: ( or_key )
        // src/main/resources/org/drools/lang/DRL.g:597:6: or_key
        {
        pushFollow(FOLLOW_or_key_in_synpred2_DRL2021);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_DRL

    // $ANTLR start synpred3_DRL
    public final void synpred3_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:606:5: ( LEFT_PAREN and_key )
        // src/main/resources/org/drools/lang/DRL.g:606:6: LEFT_PAREN and_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred3_DRL2072); if (state.failed) return ;
        pushFollow(FOLLOW_and_key_in_synpred3_DRL2074);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_DRL

    // $ANTLR start synpred4_DRL
    public final void synpred4_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:614:5: ( and_key )
        // src/main/resources/org/drools/lang/DRL.g:614:6: and_key
        {
        pushFollow(FOLLOW_and_key_in_synpred4_DRL2142);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_DRL

    // $ANTLR start synpred5_DRL
    public final void synpred5_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:631:4: ( SEMICOLON )
        // src/main/resources/org/drools/lang/DRL.g:631:5: SEMICOLON
        {
        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred5_DRL2259); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_DRL

    // $ANTLR start synpred6_DRL
    public final void synpred6_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:637:12: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:637:13: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred6_DRL2296); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:637:24: ( or_key | and_key )
        int alt167=2;
        int LA167_0 = input.LA(1);

        if ( (LA167_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))))) {
            int LA167_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt167=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 167, 0, input);

            throw nvae;
        }
        switch (alt167) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:637:25: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred6_DRL2299);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:637:32: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred6_DRL2301);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred6_DRL

    // $ANTLR start synpred7_DRL
    public final void synpred7_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:653:5: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:653:6: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred7_DRL2424); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:653:17: ( or_key | and_key )
        int alt168=2;
        int LA168_0 = input.LA(1);

        if ( (LA168_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))))) {
            int LA168_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt168=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 168, 0, input);

            throw nvae;
        }
        switch (alt168) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:653:18: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred7_DRL2427);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:653:25: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred7_DRL2429);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred7_DRL

    // $ANTLR start synpred8_DRL
    public final void synpred8_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1248:5: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1248:6: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred8_DRL5246);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_DRL

    // $ANTLR start synpred9_DRL
    public final void synpred9_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1248:41: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1248:42: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred9_DRL5257); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred9_DRL5259); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_DRL

    // $ANTLR start synpred10_DRL
    public final void synpred10_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1249:10: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1249:11: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred10_DRL5280);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_DRL

    // $ANTLR start synpred11_DRL
    public final void synpred11_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1249:52: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1249:53: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred11_DRL5294);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_DRL

    // $ANTLR start synpred12_DRL
    public final void synpred12_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1249:89: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1249:90: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred12_DRL5306); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5308); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_DRL

    // $ANTLR start synpred13_DRL
    public final void synpred13_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1303:27: ( assignmentOperator )
        // src/main/resources/org/drools/lang/DRL.g:1303:28: assignmentOperator
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred13_DRL5596);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_DRL

    // $ANTLR start synpred16_DRL
    public final void synpred16_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1373:9: ( castExpression )
        // src/main/resources/org/drools/lang/DRL.g:1373:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred16_DRL6109);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_DRL

    // $ANTLR start synpred17_DRL
    public final void synpred17_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1374:18: ( selector )
        // src/main/resources/org/drools/lang/DRL.g:1374:19: selector
        {
        pushFollow(FOLLOW_selector_in_synpred17_DRL6123);
        selector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_DRL

    // $ANTLR start synpred18_DRL
    public final void synpred18_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1379:8: ( LEFT_PAREN primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1379:9: LEFT_PAREN primitiveType
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred18_DRL6172); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred18_DRL6174);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_DRL

    // $ANTLR start synpred19_DRL
    public final void synpred19_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1380:8: ( LEFT_PAREN type )
        // src/main/resources/org/drools/lang/DRL.g:1380:9: LEFT_PAREN type
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred19_DRL6195); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred19_DRL6197);
        type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_DRL

    // $ANTLR start synpred20_DRL
    public final void synpred20_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1386:9: ( boolean_key )
        // src/main/resources/org/drools/lang/DRL.g:1386:9: boolean_key
        {
        pushFollow(FOLLOW_boolean_key_in_synpred20_DRL6260);
        boolean_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_DRL

    // $ANTLR start synpred21_DRL
    public final void synpred21_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1387:7: ( char_key )
        // src/main/resources/org/drools/lang/DRL.g:1387:7: char_key
        {
        pushFollow(FOLLOW_char_key_in_synpred21_DRL6268);
        char_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_DRL

    // $ANTLR start synpred22_DRL
    public final void synpred22_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1388:7: ( byte_key )
        // src/main/resources/org/drools/lang/DRL.g:1388:7: byte_key
        {
        pushFollow(FOLLOW_byte_key_in_synpred22_DRL6276);
        byte_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_DRL

    // $ANTLR start synpred23_DRL
    public final void synpred23_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1389:7: ( short_key )
        // src/main/resources/org/drools/lang/DRL.g:1389:7: short_key
        {
        pushFollow(FOLLOW_short_key_in_synpred23_DRL6284);
        short_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_DRL

    // $ANTLR start synpred24_DRL
    public final void synpred24_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1390:7: ( int_key )
        // src/main/resources/org/drools/lang/DRL.g:1390:7: int_key
        {
        pushFollow(FOLLOW_int_key_in_synpred24_DRL6292);
        int_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_DRL

    // $ANTLR start synpred25_DRL
    public final void synpred25_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1391:7: ( long_key )
        // src/main/resources/org/drools/lang/DRL.g:1391:7: long_key
        {
        pushFollow(FOLLOW_long_key_in_synpred25_DRL6300);
        long_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_DRL

    // $ANTLR start synpred26_DRL
    public final void synpred26_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1392:7: ( float_key )
        // src/main/resources/org/drools/lang/DRL.g:1392:7: float_key
        {
        pushFollow(FOLLOW_float_key_in_synpred26_DRL6308);
        float_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_DRL

    // $ANTLR start synpred27_DRL
    public final void synpred27_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1398:7: ( parExpression )
        // src/main/resources/org/drools/lang/DRL.g:1398:8: parExpression
        {
        pushFollow(FOLLOW_parExpression_in_synpred27_DRL6335);
        parExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_DRL

    // $ANTLR start synpred28_DRL
    public final void synpred28_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1399:9: ( nonWildcardTypeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1399:10: nonWildcardTypeArguments
        {
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred28_DRL6350);
        nonWildcardTypeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_DRL

    // $ANTLR start synpred29_DRL
    public final void synpred29_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1400:9: ( literal )
        // src/main/resources/org/drools/lang/DRL.g:1400:10: literal
        {
        pushFollow(FOLLOW_literal_in_synpred29_DRL6375);
        literal();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_DRL

    // $ANTLR start synpred30_DRL
    public final void synpred30_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1402:9: ( super_key )
        // src/main/resources/org/drools/lang/DRL.g:1402:10: super_key
        {
        pushFollow(FOLLOW_super_key_in_synpred30_DRL6395);
        super_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_DRL

    // $ANTLR start synpred31_DRL
    public final void synpred31_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1403:9: ( new_key )
        // src/main/resources/org/drools/lang/DRL.g:1403:10: new_key
        {
        pushFollow(FOLLOW_new_key_in_synpred31_DRL6412);
        new_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_DRL

    // $ANTLR start synpred32_DRL
    public final void synpred32_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1404:9: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1404:10: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred32_DRL6429);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_DRL

    // $ANTLR start synpred33_DRL
    public final void synpred33_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1406:9: ( inlineMapExpression )
        // src/main/resources/org/drools/lang/DRL.g:1406:10: inlineMapExpression
        {
        pushFollow(FOLLOW_inlineMapExpression_in_synpred33_DRL6460);
        inlineMapExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_DRL

    // $ANTLR start synpred34_DRL
    public final void synpred34_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1407:9: ( inlineListExpression )
        // src/main/resources/org/drools/lang/DRL.g:1407:10: inlineListExpression
        {
        pushFollow(FOLLOW_inlineListExpression_in_synpred34_DRL6475);
        inlineListExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_DRL

    // $ANTLR start synpred35_DRL
    public final void synpred35_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1408:9: ( ID )
        // src/main/resources/org/drools/lang/DRL.g:1408:10: ID
        {
        match(input,ID,FOLLOW_ID_in_synpred35_DRL6490); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_DRL

    // $ANTLR start synpred36_DRL
    public final void synpred36_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1408:19: ( DOT ID )
        // src/main/resources/org/drools/lang/DRL.g:1408:20: DOT ID
        {
        match(input,DOT,FOLLOW_DOT_in_synpred36_DRL6497); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred36_DRL6499); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_DRL

    // $ANTLR start synpred37_DRL
    public final void synpred37_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1408:39: ( identifierSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1408:40: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred37_DRL6510);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_DRL

    // $ANTLR start synpred39_DRL
    public final void synpred39_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1434:8: ( LEFT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1434:9: LEFT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred39_DRL6681); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_DRL

    // $ANTLR start synpred41_DRL
    public final void synpred41_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1461:107: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1461:108: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred41_DRL6863); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred41_DRL6865); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_DRL

    // $ANTLR start synpred42_DRL
    public final void synpred42_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1493:14: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1493:15: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred42_DRL7035); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_DRL

    // $ANTLR start synpred43_DRL
    public final void synpred43_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1493:6: ( DOT ID ( ( LEFT_PAREN )=> arguments )? )
        // src/main/resources/org/drools/lang/DRL.g:1493:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
        {
        match(input,DOT,FOLLOW_DOT_in_synpred43_DRL7029); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred43_DRL7031); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1493:13: ( ( LEFT_PAREN )=> arguments )?
        int alt171=2;
        int LA171_0 = input.LA(1);

        if ( (LA171_0==LEFT_PAREN) && (synpred42_DRL())) {
            alt171=1;
        }
        switch (alt171) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1493:14: ( LEFT_PAREN )=> arguments
                {
                pushFollow(FOLLOW_arguments_in_synpred43_DRL7040);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred43_DRL

    // $ANTLR start synpred44_DRL
    public final void synpred44_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1495:6: ( DOT super_key superSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1495:6: DOT super_key superSuffix
        {
        match(input,DOT,FOLLOW_DOT_in_synpred44_DRL7051); if (state.failed) return ;
        pushFollow(FOLLOW_super_key_in_synpred44_DRL7053);
        super_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred44_DRL7055);
        superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_DRL

    // $ANTLR start synpred45_DRL
    public final void synpred45_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1496:6: ( DOT new_key ( nonWildcardTypeArguments )? innerCreator )
        // src/main/resources/org/drools/lang/DRL.g:1496:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
        {
        match(input,DOT,FOLLOW_DOT_in_synpred45_DRL7062); if (state.failed) return ;
        pushFollow(FOLLOW_new_key_in_synpred45_DRL7064);
        new_key();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1496:18: ( nonWildcardTypeArguments )?
        int alt172=2;
        int LA172_0 = input.LA(1);

        if ( (LA172_0==LESS) ) {
            alt172=1;
        }
        switch (alt172) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1496:19: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred45_DRL7067);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_innerCreator_in_synpred45_DRL7071);
        innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_DRL

    // $ANTLR start synpred46_DRL
    public final void synpred46_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1502:15: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1502:16: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred46_DRL7108); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_DRL

    // Delegated rules

    public final boolean synpred45_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA166 dfa166 = new DFA166(this);
    static final String DFA1_eotS =
        "\13\uffff";
    static final String DFA1_eofS =
        "\1\2\12\uffff";
    static final String DFA1_minS =
        "\2\133\2\uffff\1\0\6\uffff";
    static final String DFA1_maxS =
        "\1\133\1\167\2\uffff\1\0\6\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\2\2\1\uffff\5\2\1\1";
    static final String DFA1_specialS =
        "\1\2\1\0\2\uffff\1\1\6\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1",
            "\1\4\2\uffff\1\10\5\uffff\1\11\1\7\17\uffff\1\5\1\3\1\6",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "178:4: ( package_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_1 = input.LA(1);

                         
                        int index1_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 3;}

                        else if ( (LA1_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))))) {s = 4;}

                        else if ( (LA1_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 5;}

                        else if ( (LA1_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 6;}

                        else if ( (LA1_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 7;}

                        else if ( (LA1_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 8;}

                        else if ( (LA1_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 9;}

                         
                        input.seek(index1_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_4 = input.LA(1);

                         
                        int index1_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {s = 10;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))))) ) {s = 9;}

                         
                        input.seek(index1_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA1_0 = input.LA(1);

                         
                        int index1_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_0==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                        else if ( (LA1_0==EOF) ) {s = 2;}

                         
                        input.seek(index1_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\20\uffff";
    static final String DFA4_eofS =
        "\20\uffff";
    static final String DFA4_minS =
        "\2\133\1\uffff\2\0\13\uffff";
    static final String DFA4_maxS =
        "\1\133\1\167\1\uffff\2\0\13\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\1\2\uffff\4\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA4_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\13\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1",
            "\1\3\2\uffff\1\4\5\uffff\1\10\1\7\17\uffff\1\5\1\2\1\6",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "257:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_0 = input.LA(1);

                         
                        int index4_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_0==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                         
                        input.seek(index4_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 2;}

                        else if ( (LA4_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))))) {s = 3;}

                        else if ( (LA4_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 4;}

                        else if ( (LA4_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 5;}

                        else if ( (LA4_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 6;}

                        else if ( (LA4_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 7;}

                        else if ( (LA4_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 8;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 14;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 15;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 14;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 15;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\16\uffff";
    static final String DFA11_eofS =
        "\16\uffff";
    static final String DFA11_minS =
        "\2\133\1\uffff\1\133\1\uffff\2\133\2\173\2\133\1\143\1\173\1\133";
    static final String DFA11_maxS =
        "\1\145\1\146\1\uffff\1\172\1\uffff\1\172\1\133\2\173\3\172\1\173"+
        "\1\172";
    static final String DFA11_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\11\uffff";
    static final String DFA11_specialS =
        "\16\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\2\11\uffff\1\1",
            "\1\3\11\uffff\1\2\1\4",
            "",
            "\1\5\1\6\3\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\23\uffff"+
            "\1\7",
            "",
            "\2\2\3\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\23\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\4\1\6\10\uffff\1\2\24\uffff\1\14",
            "\1\4\7\uffff\1\4\1\uffff\1\2\1\4\23\uffff\1\7",
            "\1\4\1\uffff\1\2\1\4\23\uffff\1\10",
            "\1\15",
            "\1\4\11\uffff\1\2\24\uffff\1\14"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "340:3: ( parameters )?";
        }
    }
    static final String DFA19_eotS =
        "\13\uffff";
    static final String DFA19_eofS =
        "\13\uffff";
    static final String DFA19_minS =
        "\2\133\2\uffff\1\0\6\uffff";
    static final String DFA19_maxS =
        "\1\174\1\167\2\uffff\1\0\6\uffff";
    static final String DFA19_acceptS =
        "\2\uffff\2\2\1\uffff\4\2\1\1\1\2";
    static final String DFA19_specialS =
        "\1\1\1\2\2\uffff\1\0\6\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\1\3\uffff\1\2\2\uffff\1\2\31\uffff\1\2",
            "\1\11\2\uffff\1\4\1\uffff\1\10\3\uffff\1\12\1\7\17\uffff\1"+
            "\5\1\3\1\6",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "410:3: ( extend_key rule_id )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {s = 9;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 10;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_0 = input.LA(1);

                         
                        int index19_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA19_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                        else if ( (LA19_0==AT||LA19_0==WHEN||LA19_0==THEN) ) {s = 2;}

                         
                        input.seek(index19_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA19_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 3;}

                        else if ( (LA19_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 4;}

                        else if ( (LA19_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 5;}

                        else if ( (LA19_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 6;}

                        else if ( (LA19_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))))) {s = 7;}

                        else if ( (LA19_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {s = 8;}

                        else if ( (LA19_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {s = 9;}

                        else if ( (LA19_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 10;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA28_eotS =
        "\17\uffff";
    static final String DFA28_eofS =
        "\17\uffff";
    static final String DFA28_minS =
        "\1\133\1\0\15\uffff";
    static final String DFA28_maxS =
        "\1\133\1\0\15\uffff";
    static final String DFA28_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA28_specialS =
        "\1\0\1\1\15\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "480:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_0 = input.LA(1);

                         
                        int index28_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA28_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))))) {s = 1;}

                         
                        input.seek(index28_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA28_1 = input.LA(1);

                         
                        int index28_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {s = 2;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {s = 3;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {s = 14;}

                         
                        input.seek(index28_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\24\uffff";
    static final String DFA49_eofS =
        "\24\uffff";
    static final String DFA49_minS =
        "\1\133\2\uffff\1\0\20\uffff";
    static final String DFA49_maxS =
        "\1\u008c\2\uffff\1\0\20\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\16\uffff\1\3";
    static final String DFA49_specialS =
        "\3\uffff\1\0\20\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\3\2\uffff\1\4\5\uffff\2\4\3\uffff\1\1\1\2\6\uffff\1\4\2"+
            "\uffff\7\4\16\uffff\4\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "691:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA68_eotS =
        "\17\uffff";
    static final String DFA68_eofS =
        "\17\uffff";
    static final String DFA68_minS =
        "\2\133\12\uffff\1\0\2\uffff";
    static final String DFA68_maxS =
        "\1\145\1\172\12\uffff\1\0\2\uffff";
    static final String DFA68_acceptS =
        "\2\uffff\1\3\1\2\12\uffff\1\1";
    static final String DFA68_specialS =
        "\14\uffff\1\0\2\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\1\11\uffff\1\2",
            "\2\3\3\uffff\1\3\4\uffff\1\14\10\uffff\6\3\6\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "902:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA68_12 = input.LA(1);

                         
                        int index68_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 14;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index68_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA73_eotS =
        "\61\uffff";
    static final String DFA73_eofS =
        "\61\uffff";
    static final String DFA73_minS =
        "\2\133\10\uffff\1\133\10\uffff\1\4\12\uffff\1\0\5\uffff\2\0\1\uffff"+
        "\10\0\2\uffff";
    static final String DFA73_maxS =
        "\1\163\1\172\10\uffff\1\172\10\uffff\1\u00a3\12\uffff\1\0\5\uffff"+
        "\2\0\1\uffff\10\0\2\uffff";
    static final String DFA73_acceptS =
        "\2\uffff\1\2\5\uffff\1\3\1\2\12\uffff\2\2\11\uffff\1\2\20\uffff"+
        "\1\1";
    static final String DFA73_specialS =
        "\1\0\1\1\10\uffff\1\2\10\uffff\1\3\12\uffff\1\4\5\uffff\1\5\1\6"+
        "\1\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\1\11\uffff\1\10\10\uffff\6\2",
            "\1\12\2\uffff\1\11\5\uffff\1\11\1\23\16\uffff\7\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\25\1\37\1\uffff\1\25\4\uffff\1\37\1\25\1\36\1\37\4\uffff"+
            "\2\37\7\uffff\6\25\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\127\37\1\44\2\37\1\47\5\37\1\55\1\45\16\37\1\56\1\50\1\51"+
            "\1\52\1\53\1\54\52\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "966:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_0 = input.LA(1);

                         
                        int index73_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA73_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {s = 1;}

                        else if ( ((LA73_0>=EQUALS && LA73_0<=NOT_EQUALS)) ) {s = 2;}

                        else if ( (LA73_0==LEFT_PAREN) ) {s = 8;}

                         
                        input.seek(index73_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA73_1==STRING||LA73_1==BOOL||(LA73_1>=NULL && LA73_1<=LEFT_SQUARE)) && (((helper.isPluggableEvaluator(false))))) {s = 9;}

                        else if ( (LA73_1==ID) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {s = 10;}

                        else if ( (LA73_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 19;}

                         
                        input.seek(index73_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_10 = input.LA(1);

                         
                        int index73_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA73_10==LEFT_SQUARE) && ((((helper.isPluggableEvaluator(false)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))))) {s = 20;}

                        else if ( (LA73_10==ID||LA73_10==STRING||LA73_10==BOOL||(LA73_10>=NULL && LA73_10<=FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 21;}

                        else if ( (LA73_10==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 30;}

                        else if ( (LA73_10==DOT||LA73_10==COMMA||LA73_10==RIGHT_PAREN||(LA73_10>=DOUBLE_PIPE && LA73_10<=DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {s = 31;}

                         
                        input.seek(index73_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_19 = input.LA(1);

                         
                        int index73_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA73_19==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 36;}

                        else if ( (LA73_19==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 37;}

                        else if ( ((LA73_19>=VT_COMPILATION_UNIT && LA73_19<=SEMICOLON)||(LA73_19>=DOT && LA73_19<=DOT_STAR)||(LA73_19>=AT && LA73_19<=COMMA)||(LA73_19>=RIGHT_PAREN && LA73_19<=NOT_EQUALS)||(LA73_19>=LEFT_SQUARE && LA73_19<=MISC)) && (((helper.isPluggableEvaluator(false))))) {s = 31;}

                        else if ( (LA73_19==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 39;}

                        else if ( (LA73_19==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 40;}

                        else if ( (LA73_19==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 41;}

                        else if ( (LA73_19==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 42;}

                        else if ( (LA73_19==HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 43;}

                        else if ( (LA73_19==FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 44;}

                        else if ( (LA73_19==BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 45;}

                        else if ( (LA73_19==NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 46;}

                         
                        input.seek(index73_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA73_30 = input.LA(1);

                         
                        int index73_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 48;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 31;}

                         
                        input.seek(index73_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA73_36 = input.LA(1);

                         
                        int index73_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_36);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA73_37 = input.LA(1);

                         
                        int index73_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_37);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA73_39 = input.LA(1);

                         
                        int index73_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA73_40 = input.LA(1);

                         
                        int index73_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_40);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA73_41 = input.LA(1);

                         
                        int index73_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_41);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA73_42 = input.LA(1);

                         
                        int index73_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_42);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA73_43 = input.LA(1);

                         
                        int index73_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_43);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA73_44 = input.LA(1);

                         
                        int index73_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_44);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA73_45 = input.LA(1);

                         
                        int index73_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA73_46 = input.LA(1);

                         
                        int index73_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 31;}

                         
                        input.seek(index73_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA98_eotS =
        "\57\uffff";
    static final String DFA98_eofS =
        "\1\2\56\uffff";
    static final String DFA98_minS =
        "\1\132\1\0\55\uffff";
    static final String DFA98_maxS =
        "\1\u0094\1\0\55\uffff";
    static final String DFA98_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA98_specialS =
        "\1\uffff\1\0\55\uffff}>";
    static final String[] DFA98_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\4\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\1\1\1\uffff\12\2\1\uffff\10\2\3\uffff\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "1249:9: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_1 = input.LA(1);

                         
                        int index98_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index98_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA99_eotS =
        "\57\uffff";
    static final String DFA99_eofS =
        "\1\2\56\uffff";
    static final String DFA99_minS =
        "\1\132\1\0\55\uffff";
    static final String DFA99_maxS =
        "\1\u0094\1\0\55\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA99_specialS =
        "\1\uffff\1\0\55\uffff}>";
    static final String[] DFA99_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\4\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\1\1\1\uffff\12\2\1\uffff\10\2\3\uffff\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "1249:51: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\6\uffff";
    static final String DFA111_eofS =
        "\6\uffff";
    static final String DFA111_minS =
        "\2\133\1\173\2\uffff\1\133";
    static final String DFA111_maxS =
        "\1\133\1\172\1\173\2\uffff\1\172";
    static final String DFA111_acceptS =
        "\3\uffff\1\2\1\1\1\uffff";
    static final String DFA111_specialS =
        "\6\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\1",
            "\2\4\6\uffff\1\3\2\uffff\1\3\23\uffff\1\2",
            "\1\5",
            "",
            "",
            "\1\4\7\uffff\1\3\2\uffff\1\3\23\uffff\1\2"
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "1281:4: ( data_type )?";
        }
    }
    static final String DFA114_eotS =
        "\17\uffff";
    static final String DFA114_eofS =
        "\17\uffff";
    static final String DFA114_minS =
        "\1\132\14\0\2\uffff";
    static final String DFA114_maxS =
        "\1\u0094\14\0\2\uffff";
    static final String DFA114_acceptS =
        "\15\uffff\1\2\1\1";
    static final String DFA114_specialS =
        "\1\uffff\1\11\1\12\1\13\1\6\1\4\1\5\1\1\1\7\1\3\1\0\1\10\1\2\2"+
        "\uffff}>";
    static final String[] DFA114_transitionS = {
            "\2\15\2\uffff\1\15\1\uffff\1\15\1\1\1\uffff\4\15\12\uffff\1"+
            "\15\2\uffff\11\15\1\uffff\1\15\4\uffff\1\12\1\14\1\13\3\uffff"+
            "\4\15\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "1303:26: ( ( assignmentOperator )=> assignmentOperator expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_10 = input.LA(1);

                         
                        int index114_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA114_7 = input.LA(1);

                         
                        int index114_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA114_12 = input.LA(1);

                         
                        int index114_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA114_9 = input.LA(1);

                         
                        int index114_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA114_5 = input.LA(1);

                         
                        int index114_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA114_6 = input.LA(1);

                         
                        int index114_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA114_4 = input.LA(1);

                         
                        int index114_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA114_8 = input.LA(1);

                         
                        int index114_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA114_11 = input.LA(1);

                         
                        int index114_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA114_1 = input.LA(1);

                         
                        int index114_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_1);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA114_2 = input.LA(1);

                         
                        int index114_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_2);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA114_3 = input.LA(1);

                         
                        int index114_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index114_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\54\uffff";
    static final String DFA122_eofS =
        "\54\uffff";
    static final String DFA122_minS =
        "\1\132\1\0\52\uffff";
    static final String DFA122_maxS =
        "\1\u0094\1\0\52\uffff";
    static final String DFA122_acceptS =
        "\2\uffff\1\2\50\uffff\1\1";
    static final String DFA122_specialS =
        "\1\uffff\1\0\52\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\2\1\1\2\uffff\1\2\1\uffff\2\2\1\uffff\4\2\4\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\12\2\1\uffff\10\2\3\uffff\14"+
            "\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "1334:30: ( instanceof_key type )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\54\uffff";
    static final String DFA123_eofS =
        "\54\uffff";
    static final String DFA123_minS =
        "\1\132\53\uffff";
    static final String DFA123_maxS =
        "\1\u0094\53\uffff";
    static final String DFA123_acceptS =
        "\1\uffff\1\2\40\uffff\1\1\10\uffff\1\1";
    static final String DFA123_specialS =
        "\54\uffff}>";
    static final String[] DFA123_transitionS = {
            "\2\1\2\uffff\1\1\1\uffff\2\1\1\uffff\4\1\4\uffff\2\1\1\uffff"+
            "\1\1\2\53\1\42\1\53\12\1\1\uffff\10\1\3\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "()* loopback of 1338:25: ( relationalOp shiftExpression )*";
        }
    }
    static final String DFA125_eotS =
        "\54\uffff";
    static final String DFA125_eofS =
        "\54\uffff";
    static final String DFA125_minS =
        "\1\132\53\uffff";
    static final String DFA125_maxS =
        "\1\u0094\53\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\2\33\uffff\2\1\15\uffff";
    static final String DFA125_specialS =
        "\54\uffff}>";
    static final String[] DFA125_transitionS = {
            "\2\1\2\uffff\1\1\1\uffff\2\1\1\uffff\4\1\4\uffff\2\1\1\uffff"+
            "\7\1\1\35\1\36\6\1\1\uffff\10\1\3\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "()* loopback of 1354:34: ( ( PLUS | MINUS ) multiplicativeExpression )*";
        }
    }
    static final String DFA130_eotS =
        "\16\uffff";
    static final String DFA130_eofS =
        "\16\uffff";
    static final String DFA130_minS =
        "\1\133\2\uffff\1\0\12\uffff";
    static final String DFA130_maxS =
        "\1\u008c\2\uffff\1\0\12\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\10\uffff\1\3";
    static final String DFA130_specialS =
        "\3\uffff\1\0\12\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\4\2\uffff\1\4\5\uffff\1\4\1\3\13\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\4\4\20\uffff\1\1\1\2",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "1369:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( INCR | DECR )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_DRL()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA128_eotS =
        "\57\uffff";
    static final String DFA128_eofS =
        "\1\1\56\uffff";
    static final String DFA128_minS =
        "\1\132\52\uffff\1\0\3\uffff";
    static final String DFA128_maxS =
        "\1\u0094\52\uffff\1\0\3\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA128_specialS =
        "\1\0\52\uffff\1\1\3\uffff}>";
    static final String[] DFA128_transitionS = {
            "\2\1\1\56\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\4\uffff\2\1\1"+
            "\uffff\14\1\1\53\2\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()* loopback of 1374:17: ( ( selector )=> selector )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_0 = input.LA(1);

                         
                        int index128_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA128_0==EOF||(LA128_0>=SEMICOLON && LA128_0<=ID)||LA128_0==STRING||(LA128_0>=COLON && LA128_0<=EQUALS_ASSIGN)||(LA128_0>=COMMA && LA128_0<=RIGHT_PAREN)||(LA128_0>=DOUBLE_PIPE && LA128_0<=DOUBLE_AMPER)||(LA128_0>=EQUALS && LA128_0<=FLOAT)||(LA128_0>=RIGHT_SQUARE && LA128_0<=THEN)||(LA128_0>=RIGHT_CURLY && LA128_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA128_0==LEFT_SQUARE) ) {s = 43;}

                        else if ( (LA128_0==DOT) && (synpred17_DRL())) {s = 46;}

                         
                        input.seek(index128_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA128_43 = input.LA(1);

                         
                        int index128_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA129_eotS =
        "\56\uffff";
    static final String DFA129_eofS =
        "\1\2\55\uffff";
    static final String DFA129_minS =
        "\1\132\55\uffff";
    static final String DFA129_maxS =
        "\1\u0094\55\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\1\2\36\uffff\1\1\14\uffff";
    static final String DFA129_specialS =
        "\56\uffff}>";
    static final String[] DFA129_transitionS = {
            "\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\4\2\4\uffff\2\2\1\uffff"+
            "\17\2\1\uffff\13\2\1\1\1\41\12\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "1374:41: ( INCR | DECR )?";
        }
    }
    static final String DFA132_eotS =
        "\12\uffff";
    static final String DFA132_eofS =
        "\12\uffff";
    static final String DFA132_minS =
        "\1\133\1\0\10\uffff";
    static final String DFA132_maxS =
        "\1\133\1\0\10\uffff";
    static final String DFA132_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA132_specialS =
        "\1\0\1\1\10\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "1384:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_0 = input.LA(1);

                         
                        int index132_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA132_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {s = 1;}

                         
                        input.seek(index132_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred20_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) ) {s = 2;}

                        else if ( ((synpred21_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {s = 3;}

                        else if ( ((synpred22_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))) ) {s = 4;}

                        else if ( ((synpred23_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))) ) {s = 5;}

                        else if ( ((synpred24_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) ) {s = 6;}

                        else if ( ((synpred25_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))) ) {s = 7;}

                        else if ( ((synpred26_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {s = 9;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\21\uffff";
    static final String DFA137_eofS =
        "\21\uffff";
    static final String DFA137_minS =
        "\1\133\10\uffff\2\0\6\uffff";
    static final String DFA137_maxS =
        "\1\172\10\uffff\2\0\6\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\1\1\2\6\3\2\uffff\1\4\1\5\1\6\1\11\1\7\1\10";
    static final String DFA137_specialS =
        "\1\0\10\uffff\1\1\1\2\6\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\11\2\uffff\1\3\5\uffff\1\7\1\1\13\uffff\1\2\2\uffff\1\10"+
            "\2\uffff\1\4\1\5\1\6\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "1396:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_0 = input.LA(1);

                         
                        int index137_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA137_0==LEFT_PAREN) && (synpred27_DRL())) {s = 1;}

                        else if ( (LA137_0==LESS) && (synpred28_DRL())) {s = 2;}

                        else if ( (LA137_0==STRING) && (synpred29_DRL())) {s = 3;}

                        else if ( (LA137_0==DECIMAL) && (synpred29_DRL())) {s = 4;}

                        else if ( (LA137_0==HEX) && (synpred29_DRL())) {s = 5;}

                        else if ( (LA137_0==FLOAT) && (synpred29_DRL())) {s = 6;}

                        else if ( (LA137_0==BOOL) && (synpred29_DRL())) {s = 7;}

                        else if ( (LA137_0==NULL) && (synpred29_DRL())) {s = 8;}

                        else if ( (LA137_0==ID) ) {s = 9;}

                        else if ( (LA137_0==LEFT_SQUARE) ) {s = 10;}

                         
                        input.seek(index137_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA137_9 = input.LA(1);

                         
                        int index137_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred30_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) ) {s = 11;}

                        else if ( ((synpred31_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NEW))))) ) {s = 12;}

                        else if ( (((synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred32_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))))) ) {s = 13;}

                        else if ( (synpred35_DRL()) ) {s = 14;}

                         
                        input.seek(index137_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA137_10 = input.LA(1);

                         
                        int index137_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_DRL()) ) {s = 15;}

                        else if ( (synpred34_DRL()) ) {s = 16;}

                         
                        input.seek(index137_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\60\uffff";
    static final String DFA136_eofS =
        "\1\3\57\uffff";
    static final String DFA136_minS =
        "\1\132\2\0\55\uffff";
    static final String DFA136_maxS =
        "\1\u0094\2\0\55\uffff";
    static final String DFA136_acceptS =
        "\3\uffff\1\2\53\uffff\1\1";
    static final String DFA136_specialS =
        "\1\uffff\1\0\1\1\55\uffff}>";
    static final String[] DFA136_transitionS = {
            "\3\3\1\uffff\1\3\1\uffff\2\3\1\uffff\2\3\1\2\1\3\4\uffff\2"+
            "\3\1\uffff\14\3\1\1\2\3\1\uffff\27\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "1408:38: ( ( identifierSuffix )=> identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_1 = input.LA(1);

                         
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_2 = input.LA(1);

                         
                        int index136_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index136_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA142_eotS =
        "\60\uffff";
    static final String DFA142_eofS =
        "\1\1\57\uffff";
    static final String DFA142_minS =
        "\1\132\52\uffff\1\0\4\uffff";
    static final String DFA142_maxS =
        "\1\u0094\52\uffff\1\0\4\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\2\55\uffff\1\1";
    static final String DFA142_specialS =
        "\53\uffff\1\0\4\uffff}>";
    static final String[] DFA142_transitionS = {
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\4\uffff\2\1\1\uffff"+
            "\14\1\1\53\2\1\1\uffff\27\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1434:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_43 = input.LA(1);

                         
                        int index142_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index142_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA151_eotS =
        "\60\uffff";
    static final String DFA151_eofS =
        "\1\2\57\uffff";
    static final String DFA151_minS =
        "\1\132\1\0\56\uffff";
    static final String DFA151_maxS =
        "\1\u0094\1\0\56\uffff";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA151_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA151_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\4\uffff\2\2\1\uffff"+
            "\14\2\1\1\2\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()* loopback of 1461:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_1 = input.LA(1);

                         
                        int index151_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!helper.validateLT(2,"]"))) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\60\uffff";
    static final String DFA159_eofS =
        "\1\2\57\uffff";
    static final String DFA159_minS =
        "\1\132\1\0\56\uffff";
    static final String DFA159_maxS =
        "\1\u0094\1\0\56\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA159_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA159_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\1\1\2\4\uffff\2"+
            "\2\1\uffff\17\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "1493:13: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_1 = input.LA(1);

                         
                        int index159_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index159_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\60\uffff";
    static final String DFA162_eofS =
        "\1\2\57\uffff";
    static final String DFA162_minS =
        "\1\132\1\0\56\uffff";
    static final String DFA162_maxS =
        "\1\u0094\1\0\56\uffff";
    static final String DFA162_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA162_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA162_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\1\1\2\4\uffff\2"+
            "\2\1\uffff\17\2\1\uffff\27\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "1502:14: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_1 = input.LA(1);

                         
                        int index162_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index162_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\15\uffff";
    static final String DFA166_eofS =
        "\15\uffff";
    static final String DFA166_minS =
        "\1\141\14\uffff";
    static final String DFA166_maxS =
        "\1\u0094\14\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA166_specialS =
        "\15\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\1\41\uffff\1\12\1\14\1\13\7\uffff\1\2\1\3\1\4\1\5\1\6\1"+
            "\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "1515:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );";
        }
    }
 

    public static final BitSet FOLLOW_package_statement_in_compilation_unit426 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_resync_in_compilation_unit445 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_statement_in_compilation_unit452 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_resync_in_compilation_unit454 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_key_in_package_statement555 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_packageOrTypeName_in_package_statement559 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_statement561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_attribute_in_statement601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_import_statement_in_statement606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_in_statement625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_statement631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_statement636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_statement641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_in_statement646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_import_statement672 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_import_name_in_import_statement674 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_import_statement677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_function_import_statement717 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_function_key_in_function_import_statement719 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_import_name_in_function_import_statement731 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_import_statement734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_name768 = new BitSet(new long[]{0x0000000000000002L,0x0000000030000000L});
    public static final BitSet FOLLOW_DOT_in_import_name774 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_import_name778 = new BitSet(new long[]{0x0000000000000002L,0x0000000030000000L});
    public static final BitSet FOLLOW_DOT_STAR_in_import_name785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_key_in_global828 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_data_type_in_global830 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_global_id_in_global832 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_global834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_id863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_function898 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_data_type_in_function900 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_function_id_in_function903 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_parameters_in_function905 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_curly_chunk_in_function907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_id937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_key_in_query972 = new BitSet(new long[]{0x0000000000000000L,0x0000000048000000L});
    public static final BitSet FOLLOW_query_id_in_query974 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_parameters_in_query982 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_normal_lhs_block_in_query991 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_end_key_in_query998 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_query1000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_id1035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_query_id1051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_type_declaration1084 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_type_declare_id_in_type_declaration1087 = new BitSet(new long[]{0x0000000000000000L,0x0000002088000000L});
    public static final BitSet FOLLOW_decl_metadata_in_type_declaration1091 = new BitSet(new long[]{0x0000000000000000L,0x0000002088000000L});
    public static final BitSet FOLLOW_decl_field_in_type_declaration1096 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_end_key_in_type_declaration1101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_declare_id1133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_decl_metadata1152 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_decl_metadata1160 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_metadata1167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_decl_field1192 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_decl_field_initialization_in_decl_field1198 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_decl_field1204 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_data_type_in_decl_field1210 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_decl_metadata_in_decl_field1214 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1242 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_field_initialization1248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_key_in_rule1284 = new BitSet(new long[]{0x0000000000000000L,0x0000000048000000L});
    public static final BitSet FOLLOW_rule_id_in_rule1302 = new BitSet(new long[]{0x0000000000000000L,0x1000000488000000L});
    public static final BitSet FOLLOW_extend_key_in_rule1311 = new BitSet(new long[]{0x0000000000000000L,0x0000000048000000L});
    public static final BitSet FOLLOW_rule_id_in_rule1313 = new BitSet(new long[]{0x0000000000000000L,0x1000000488000000L});
    public static final BitSet FOLLOW_decl_metadata_in_rule1317 = new BitSet(new long[]{0x0000000000000000L,0x1000000488000000L});
    public static final BitSet FOLLOW_rule_attributes_in_rule1320 = new BitSet(new long[]{0x0000000000000000L,0x1000000488000000L});
    public static final BitSet FOLLOW_when_part_in_rule1323 = new BitSet(new long[]{0x0000000000000000L,0x1000000488000000L});
    public static final BitSet FOLLOW_rhs_chunk_in_rule1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_when_part1370 = new BitSet(new long[]{0x0000000000000000L,0x0000002108000000L});
    public static final BitSet FOLLOW_COLON_in_when_part1376 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_normal_lhs_block_in_when_part1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_id1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_rule_id1423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_key_in_rule_attributes1444 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_rule_attributes1446 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1456 = new BitSet(new long[]{0x0000000000000002L,0x0000000808000000L});
    public static final BitSet FOLLOW_COMMA_in_rule_attributes1460 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1467 = new BitSet(new long[]{0x0000000000000002L,0x0000000808000000L});
    public static final BitSet FOLLOW_salience_in_rule_attribute1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_in_rule_attribute1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_in_rule_attribute1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timer_in_rule_attribute1524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_in_rule_attribute1531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_in_rule_attribute1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_in_rule_attribute1543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_in_rule_attribute1549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_in_rule_attribute1555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_in_rule_attribute1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_in_rule_attribute1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_in_rule_attribute1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_in_rule_attribute1580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_key_in_date_effective1594 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STRING_in_date_effective1599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_key_in_date_expires1613 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STRING_in_date_expires1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_key_in_enabled1633 = new BitSet(new long[]{0x0000000000000000L,0x0000003000000000L});
    public static final BitSet FOLLOW_BOOL_in_enabled1646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_enabled1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_salience_key_in_salience1677 = new BitSet(new long[]{0x0000000000000000L,0x00E0002000000000L});
    public static final BitSet FOLLOW_signed_decimal_in_salience1686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_salience1693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_key_in_no_loop1708 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_BOOL_in_no_loop1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_key_in_auto_focus1728 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_BOOL_in_auto_focus1733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_key_in_activation_group1750 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STRING_in_activation_group1755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_key_in_ruleflow_group1769 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STRING_in_ruleflow_group1774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_key_in_agenda_group1788 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STRING_in_agenda_group1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_key_in_timer1808 = new BitSet(new long[]{0x0000000000000000L,0x00E0002000000000L});
    public static final BitSet FOLLOW_timer_key_in_timer1811 = new BitSet(new long[]{0x0000000000000000L,0x00E0002000000000L});
    public static final BitSet FOLLOW_signed_decimal_in_timer1822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_timer1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_key_in_calendars1854 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_string_list_in_calendars1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_key_in_dialect1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STRING_in_dialect1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_key_in_lock_on_active1893 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_BOOL_in_lock_on_active1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_in_normal_lhs_block1916 = new BitSet(new long[]{0x0000000000000002L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_or_in_lhs1937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_or1961 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_or_key_in_lhs_or1971 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or1979 = new BitSet(new long[]{0x0000000000000000L,0x0000006008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_or1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2008 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2028 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2040 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_and2081 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2091 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2099 = new BitSet(new long[]{0x0000000000000000L,0x0000006008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_and2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2129 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2149 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2161 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_lhs_exist_in_lhs_unary2192 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_lhs_not_binding_in_lhs_unary2200 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_lhs_not_in_lhs_unary2206 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_lhs_eval_in_lhs_unary2212 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_lhs_forall_in_lhs_unary2218 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_unary2224 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_unary2235 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_unary2241 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_unary2249 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_unary2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exists_key_in_lhs_exist2279 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_exist2313 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2321 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_exist2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_exist2343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not_binding2389 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_not_binding2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not2414 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_not2443 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2452 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_not2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_not2468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eval_key_in_lhs_eval2507 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_paren_chunk_in_lhs_eval2516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_key_in_lhs_forall2543 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_forall2548 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_forall2556 = new BitSet(new long[]{0x0000000000000000L,0x0000006008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_forall2562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_pattern_source2598 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L});
    public static final BitSet FOLLOW_over_clause_in_pattern_source2602 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_FROM_in_pattern_source2612 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_accumulate_statement_in_pattern_source2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_statement_in_pattern_source2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entrypoint_statement_in_pattern_source2665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_source_in_pattern_source2681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVER_in_over_clause2713 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_over_elements_in_over_clause2718 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_over_clause2725 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_over_elements_in_over_clause2730 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ID_in_over_elements2745 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_over_elements2752 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_over_elements2761 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_paren_chunk_in_over_elements2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ACCUMULATE_in_accumulate_statement2794 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_statement2803 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_lhs_or_in_accumulate_statement2811 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_statement2816 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_accumulate_init_clause_in_accumulate_statement2826 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_accumulate_id_clause_in_accumulate_statement2832 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_statement2840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_key_in_accumulate_init_clause2886 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2896 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause2901 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_action_key_in_accumulate_init_clause2912 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2916 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause2921 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_reverse_key_in_accumulate_init_clause2933 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2937 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000808000000L});
    public static final BitSet FOLLOW_result_key_in_accumulate_init_clause2958 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause2964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3046 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_accumulate_paren_chunk_data3058 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3074 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_accumulate_id_clause3101 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_paren_chunk_in_accumulate_id_clause3107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_in_collect_statement3129 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_collect_statement3138 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_pattern_source_in_collect_statement3145 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_collect_statement3150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entry_point_key_in_entrypoint_statement3177 = new BitSet(new long[]{0x0000000000000000L,0x0000000048000000L});
    public static final BitSet FOLLOW_entrypoint_id_in_entrypoint_statement3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entrypoint_id3211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_entrypoint_id3228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_source3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_pattern3296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_lhs_pattern3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_fact_binding3329 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_fact_in_fact_binding3335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact_binding3342 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_fact_binding_expression_in_fact_binding3350 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact_binding3358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3399 = new BitSet(new long[]{0x0000000000000002L,0x0000080008000000L});
    public static final BitSet FOLLOW_or_key_in_fact_binding_expression3411 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3417 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3422 = new BitSet(new long[]{0x0000000000000002L,0x0000080008000000L});
    public static final BitSet FOLLOW_pattern_type_in_fact3462 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact3467 = new BitSet(new long[]{0x0000000000000000L,0x0000006008000000L});
    public static final BitSet FOLLOW_constraints_in_fact3478 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_constraints3516 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_constraints3520 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_constraint_in_constraints3527 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_or_constr_in_constraint3541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3552 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_constr3556 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_and_constr_in_or_constr3563 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr3578 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_constr3582 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr3589 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_eval_key_in_unary_constr3622 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_paren_chunk_in_unary_constr3625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_constraint_in_unary_constr3630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_constr3636 = new BitSet(new long[]{0x0000000000000000L,0x0000002008000000L});
    public static final BitSet FOLLOW_or_constr_in_unary_constr3646 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_constr3651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_field_constraint3671 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint3673 = new BitSet(new long[]{0x0000000000000002L,0x000FE02008000000L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROW_in_field_constraint3686 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_paren_chunk_in_field_constraint3690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint3744 = new BitSet(new long[]{0x0000000000000000L,0x000FC02008000000L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint3746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_label3771 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_label3778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective3799 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_restr_connective3805 = new BitSet(new long[]{0x0000000000000000L,0x000FC02008000000L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective3813 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective3834 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_restr_connective3840 = new BitSet(new long[]{0x0000000000000000L,0x000FC02008000000L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective3847 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_compound_operator_in_constraint_expression3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_operator_in_constraint_expression3882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_constraint_expression3887 = new BitSet(new long[]{0x0000000000000000L,0x000FC02008000000L});
    public static final BitSet FOLLOW_or_restr_connective_in_constraint_expression3896 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_constraint_expression3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_simple_operator3936 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_GREATER_in_simple_operator3944 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_GREATER_EQUALS_in_simple_operator3952 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_LESS_in_simple_operator3960 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_LESS_EQUALS_in_simple_operator3968 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_NOT_EQUALS_in_simple_operator3976 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_not_key_in_simple_operator3984 = new BitSet(new long[]{0x0000000000000000L,0x000FC00008000000L});
    public static final BitSet FOLLOW_operator_key_in_simple_operator3991 = new BitSet(new long[]{0x0000000000000000L,0x07F0003048000000L});
    public static final BitSet FOLLOW_square_chunk_in_simple_operator3994 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_expression_value_in_simple_operator4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4028 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_not_key_in_compound_operator4033 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4035 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_compound_operator4046 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4054 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_COMMA_in_compound_operator4058 = new BitSet(new long[]{0x0000000000000000L,0x03F0003048000000L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4063 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_compound_operator4071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_expression_value4092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_literal_in_expression_value4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_expression_value4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_signed_literal4135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_in_signed_literal4172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_in_signed_literal4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_in_signed_literal4208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_signed_literal4226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_signed_literal4265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_match_in_signed_decimal4319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_decimal_match4356 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_decimal_match4362 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_DECIMAL_in_signed_decimal_match4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_match_in_signed_hex4419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_hex_match4456 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_hex_match4462 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_HEX_in_signed_hex_match4484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_match_in_signed_float4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_float_match4556 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_float_match4562 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_FLOAT_in_signed_float_match4584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_pattern_type4605 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L});
    public static final BitSet FOLLOW_DOT_in_pattern_type4611 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_pattern_type4615 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L});
    public static final BitSet FOLLOW_dimension_definition_in_pattern_type4630 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_ID_in_data_type4658 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L});
    public static final BitSet FOLLOW_DOT_in_data_type4664 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_data_type4668 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L});
    public static final BitSet FOLLOW_dimension_definition_in_data_type4673 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_dimension_definition4702 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_dimension_definition4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path4723 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_DOT_in_accessor_path4727 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path4731 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_ID_in_accessor_element4755 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_square_chunk_in_accessor_element4761 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_rhs_chunk_data_in_rhs_chunk4793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_rhs_chunk_data4812 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_not_end_key_in_rhs_chunk_data4821 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_end_key_in_rhs_chunk_data4827 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_chunk_data4832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_chunk_data4874 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_curly_chunk_data4886 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk_data4902 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_chunk_data4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk4934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_chunk_data4958 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_paren_chunk_data4970 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk_data4986 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_paren_chunk_data4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk5018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_square_chunk_data5041 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_square_chunk_data5053 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk_data5068 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000FFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_square_chunk_data5079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_literal5097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_literal5120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_in_literal5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_literal5142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_literal5153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal5178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5209 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_typeList5212 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_type_in_typeList5214 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_primitiveType_in_type5253 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5263 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5265 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_ID_in_type5276 = new BitSet(new long[]{0x0000000000000002L,0x0402000010000000L});
    public static final BitSet FOLLOW_typeArguments_in_type5283 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L});
    public static final BitSet FOLLOW_DOT_in_type5288 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_type5290 = new BitSet(new long[]{0x0000000000000002L,0x0402000010000000L});
    public static final BitSet FOLLOW_typeArguments_in_type5297 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5312 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5314 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_ID_in_typeName5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName5342 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_DOT_in_typeName5344 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_typeName5346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5359 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_DOT_in_packageOrTypeName5365 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5369 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_LESS_in_typeArguments5397 = new BitSet(new long[]{0x0000000000000000L,0x8000000008000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5399 = new BitSet(new long[]{0x0000000000000000L,0x0000800800000000L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments5402 = new BitSet(new long[]{0x0000000000000000L,0x8000000008000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5404 = new BitSet(new long[]{0x0000000000000000L,0x0000800800000000L});
    public static final BitSet FOLLOW_GREATER_in_typeArguments5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument5420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_typeArgument5425 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_extends_key_in_typeArgument5429 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_super_key_in_typeArgument5433 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_type_in_typeArgument5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parameters5449 = new BitSet(new long[]{0x0000000000000000L,0x0000004008000000L});
    public static final BitSet FOLLOW_param_definition_in_parameters5458 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_COMMA_in_parameters5461 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_param_definition_in_parameters5465 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parameters5474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_data_type_in_param_definition5500 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_argument_in_param_definition5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_argument5514 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_dimension_definition_in_argument5520 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_STRING_in_string_list5539 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_string_list5548 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STRING_in_string_list5552 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression5592 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x00000000001FE038L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression5601 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_expression5603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression5629 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression5633 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5635 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression5637 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5657 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression5661 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5663 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5682 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression5686 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5688 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5707 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_PIPE_in_inclusiveOrExpression5711 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression5736 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_AMPER_in_andExpression5761 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5782 = new BitSet(new long[]{0x0000000000000002L,0x0008400000000000L});
    public static final BitSet FOLLOW_set_in_equalityExpression5786 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5796 = new BitSet(new long[]{0x0000000000000002L,0x0008400000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5815 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_instanceof_key_in_instanceOfExpression5818 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5838 = new BitSet(new long[]{0x0000000000000002L,0x0007800000000000L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression5842 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5844 = new BitSet(new long[]{0x0000000000000002L,0x0007800000000000L});
    public static final BitSet FOLLOW_set_in_relationalOp5862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression5895 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_set_in_shiftOp5911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5938 = new BitSet(new long[]{0x0000000000000002L,0x0060000000000000L});
    public static final BitSet FOLLOW_set_in_additiveExpression5942 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5950 = new BitSet(new long[]{0x0000000000000002L,0x0060000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression5973 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression6007 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression6017 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCR_in_unaryExpression6029 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_primary_in_unaryExpression6031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECR_in_unaryExpression6041 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_primary_in_unaryExpression6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unaryExpressionNotPlusMinus6086 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus6097 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus6119 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus6126 = new BitSet(new long[]{0x0000000000000002L,0x0400000010000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_set_in_unaryExpressionNotPlusMinus6130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6179 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6181 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6183 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6202 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_type_in_castExpression6204 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6206 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6217 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_castExpression6219 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6221 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_primitiveType6260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_primitiveType6268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_primitiveType6276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_primitiveType6284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_primitiveType6292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_primitiveType6300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_primitiveType6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_double_key_in_primitiveType6316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6354 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_key_in_primary6361 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_arguments_in_primary6363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_primary6399 = new BitSet(new long[]{0x0000000000000000L,0x0000002010000000L});
    public static final BitSet FOLLOW_superSuffix_in_primary6401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_primary6416 = new BitSet(new long[]{0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_creator_in_primary6418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary6433 = new BitSet(new long[]{0x0000000000000000L,0x0400000010000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_primary6436 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_primary6438 = new BitSet(new long[]{0x0000000000000000L,0x0400000010000000L});
    public static final BitSet FOLLOW_DOT_in_primary6442 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_class_key_in_primary6444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_primary6464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_primary6479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_primary6493 = new BitSet(new long[]{0x0000000000000002L,0x0400002010000000L});
    public static final BitSet FOLLOW_DOT_in_primary6502 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_primary6504 = new BitSet(new long[]{0x0000000000000002L,0x0400002010000000L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary6513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineListExpression6534 = new BitSet(new long[]{0x0000000000000000L,0x0FF2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expressionList_in_inlineListExpression6536 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineListExpression6539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineMapExpression6561 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_mapExpressionList_in_inlineMapExpression6563 = new BitSet(new long[]{0x0000000000000000L,0x0FF2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineMapExpression6566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList6583 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_mapExpressionList6586 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList6588 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_mapEntry6611 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_mapEntry6613 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_mapEntry6615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parExpression6629 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_parExpression6631 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parExpression6633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix6663 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix6665 = new BitSet(new long[]{0x0000000000000000L,0x0400000010000000L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix6669 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_class_key_in_identifierSuffix6671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix6686 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix6688 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix6690 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix6703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator6721 = new BitSet(new long[]{0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_createdName_in_creator6724 = new BitSet(new long[]{0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator6735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator6739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_createdName6751 = new BitSet(new long[]{0x0000000000000002L,0x0002000010000000L});
    public static final BitSet FOLLOW_typeArguments_in_createdName6753 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_DOT_in_createdName6766 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_createdName6768 = new BitSet(new long[]{0x0000000000000002L,0x0002000010000000L});
    public static final BitSet FOLLOW_typeArguments_in_createdName6770 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_primitiveType_in_createdName6785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_innerCreator6800 = new BitSet(new long[]{0x0000000000000000L,0x0400002000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator6802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6815 = new BitSet(new long[]{0x0000000000000000L,0x0FF2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6823 = new BitSet(new long[]{0x0000000000000000L,0x2400000000000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6826 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6828 = new BitSet(new long[]{0x0000000000000000L,0x2400000000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest6846 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6848 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6853 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest6855 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6857 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest6869 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest6871 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer6894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer6905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_arrayInitializer6917 = new BitSet(new long[]{0x0000000000000000L,0x67F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6920 = new BitSet(new long[]{0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6923 = new BitSet(new long[]{0x0000000000000000L,0x27F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6925 = new BitSet(new long[]{0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6930 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_arrayInitializer6937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest6948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6960 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation6962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_nonWildcardTypeArguments6974 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments6976 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_GREATER_in_nonWildcardTypeArguments6978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_explicitGenericInvocationSuffix6990 = new BitSet(new long[]{0x0000000000000000L,0x0000002010000000L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_explicitGenericInvocationSuffix7000 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix7002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7029 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_selector7031 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_arguments_in_selector7040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7051 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_super_key_in_selector7053 = new BitSet(new long[]{0x0000000000000000L,0x0000002010000000L});
    public static final BitSet FOLLOW_superSuffix_in_selector7055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7062 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_new_key_in_selector7064 = new BitSet(new long[]{0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7067 = new BitSet(new long[]{0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_innerCreator_in_selector7071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_selector7078 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_selector7080 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_selector7082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_superSuffix7102 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_superSuffix7104 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_arguments7147 = new BitSet(new long[]{0x0000000000000000L,0x07F2067048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expressionList_in_arguments7149 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_arguments7152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList7169 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList7172 = new BitSet(new long[]{0x0000000000000000L,0x07F2063048000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_expression_in_expressionList7174 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentOperator7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentOperator7229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULT_ASSIGN_in_assignmentOperator7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentOperator7257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentOperator7271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentOperator7285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentOperator7299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentOperator7313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_assignmentOperator7327 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_assignmentOperator7343 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7359 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_operator_key7385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_neg_operator_key7429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key7474 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key7478 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key7482 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key7486 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key7490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_effective_key7522 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_date_effective_key7526 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_date_effective_key7530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_expires_key7562 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_date_expires_key7566 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_date_expires_key7570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_no_loop_key7602 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_no_loop_key7606 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_no_loop_key7610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key7642 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_auto_focus_key7646 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key7650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_activation_group_key7682 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_activation_group_key7686 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_activation_group_key7690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key7722 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_agenda_group_key7726 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key7730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key7762 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_ruleflow_group_key7766 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key7770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entry_point_key7802 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_MINUS_in_entry_point_key7806 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_entry_point_key7810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_timer_key7839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_duration_key7866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_calendars_key7893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_package_key7920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_key7947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_dialect_key7974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_salience_key8001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enabled_key8028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_attributes_key8055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_key8082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extend_key8109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_key8136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_declare_key8163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_key8190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_key8217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_eval_key8244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_not_key8271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_in_key8298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_or_key8325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_and_key8352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_exists_key8379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_forall_key8406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_action_key8433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_reverse_key8460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_result_key8487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_end_key8514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_init_key8561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_instanceof_key8588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extends_key8615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_super_key8642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_boolean_key8670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_char_key8698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_byte_key8726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_short_key8754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_int_key8782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_long_key8810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_float_key8838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_double_key8866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_this_key8894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_void_key8922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_key8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_new_key8978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred1_DRL1952 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_or_key_in_synpred1_DRL1954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_key_in_synpred2_DRL2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred3_DRL2072 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_and_key_in_synpred3_DRL2074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred4_DRL2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred5_DRL2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred6_DRL2296 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_or_key_in_synpred6_DRL2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred6_DRL2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred7_DRL2424 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_or_key_in_synpred7_DRL2427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred7_DRL2429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred8_DRL5246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred9_DRL5257 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred9_DRL5259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred10_DRL5280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred11_DRL5294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred12_DRL5306 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred13_DRL5596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred16_DRL6109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_synpred17_DRL6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred18_DRL6172 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred18_DRL6174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred19_DRL6195 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_type_in_synpred19_DRL6197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_synpred20_DRL6260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_synpred21_DRL6268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_synpred22_DRL6276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_synpred23_DRL6284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_synpred24_DRL6292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_synpred25_DRL6300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_synpred26_DRL6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred27_DRL6335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred28_DRL6350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred29_DRL6375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_synpred30_DRL6395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_synpred31_DRL6412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred32_DRL6429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_synpred33_DRL6460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_synpred34_DRL6475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred35_DRL6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred36_DRL6497 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_synpred36_DRL6499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred37_DRL6510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred39_DRL6681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred41_DRL6863 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred41_DRL6865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred42_DRL7035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred43_DRL7029 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_ID_in_synpred43_DRL7031 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred43_DRL7040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred44_DRL7051 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_super_key_in_synpred44_DRL7053 = new BitSet(new long[]{0x0000000000000000L,0x0000002010000000L});
    public static final BitSet FOLLOW_superSuffix_in_synpred44_DRL7055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred45_DRL7062 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_new_key_in_synpred45_DRL7064 = new BitSet(new long[]{0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred45_DRL7067 = new BitSet(new long[]{0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred45_DRL7071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred46_DRL7108 = new BitSet(new long[]{0x0000000000000002L});

}