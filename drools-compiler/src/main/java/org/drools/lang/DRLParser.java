// $ANTLR 3.3 Nov 30, 2010 12:46:29 src/main/resources/org/drools/lang/DRL.g 2011-01-17 16:59:29

	package org.drools.lang;
	
	import java.util.List;
	import java.util.LinkedList;
	import org.drools.compiler.DroolsParserException;
	import org.drools.lang.ParserHelper;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class DRLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "r<EOR>", "<DOWN>", "<UP>", "VT_COMPILATION_UNIT", "VT_FUNCTION_IMPORT", "VT_FACT", "VT_CONSTRAINTS", "VT_LABEL", "VT_QUERY_ID", "VT_TYPE_DECLARE_ID", "VT_TYPE_NAME", "VT_RULE_ID", "VT_ENTRYPOINT_ID", "VT_RULE_ATTRIBUTES", "VT_PKG_ATTRIBUTES", "VT_RHS_CHUNK", "VT_CURLY_CHUNK", "VT_SQUARE_CHUNK", "VT_PAREN_CHUNK", "VT_BEHAVIOR", "VT_AND_IMPLICIT", "VT_AND_PREFIX", "VT_OR_PREFIX", "VT_AND_INFIX", "VT_OR_INFIX", "VT_ACCUMULATE_INIT_CLAUSE", "VT_ACCUMULATE_ID_CLAUSE", "VT_FROM_SOURCE", "VT_EXPRESSION_CHAIN", "VT_FOR_CE", "VT_FOR_FUNCTIONS", "VT_PATTERN", "VT_FACT_BINDING", "VT_FACT_OR", "VT_BIND_FIELD", "VT_FIELD", "VT_ACCESSOR_PATH", "VT_ACCESSOR_ELEMENT", "VT_DATA_TYPE", "VT_PATTERN_TYPE", "VT_PACKAGE_ID", "VT_IMPORT_ID", "VT_GLOBAL_ID", "VT_FUNCTION_ID", "VT_PARAM_LIST", "VT_ARGUMENTS", "VT_EXPRESSION", "VK_DATE_EFFECTIVE", "VK_DATE_EXPIRES", "VK_LOCK_ON_ACTIVE", "VK_NO_LOOP", "VK_AUTO_FOCUS", "VK_ACTIVATION_GROUP", "VK_AGENDA_GROUP", "VK_RULEFLOW_GROUP", "VK_TIMER", "VK_CALENDARS", "VK_DIALECT", "VK_SALIENCE", "VK_ENABLED", "VK_ATTRIBUTES", "VK_RULE", "VK_EXTEND", "VK_IMPLEMENTS", "VK_IMPORT", "VK_PACKAGE", "VK_QUERY", "VK_DECLARE", "VK_FUNCTION", "VK_GLOBAL", "VK_EVAL", "VK_ENTRY_POINT", "VK_NOT", "VK_IN", "VK_OR", "VK_AND", "VK_EXISTS", "VK_FORALL", "VK_FOR", "VK_ACTION", "VK_REVERSE", "VK_RESULT", "VK_OPERATOR", "VK_END", "VK_INIT", "VK_INSTANCEOF", "VK_EXTENDS", "VK_SUPER", "VK_PRIMITIVE_TYPE", "VK_THIS", "VK_VOID", "VK_CLASS", "VK_NEW", "VK_FINAL", "VK_IF", "VK_ELSE", "VK_WHILE", "VK_DO", "VK_CASE", "VK_DEFAULT", "VK_TRY", "VK_CATCH", "VK_FINALLY", "VK_SWITCH", "VK_SYNCHRONIZED", "VK_RETURN", "VK_THROW", "VK_BREAK", "VK_CONTINUE", "VK_ASSERT", "VK_MODIFY", "VK_STATIC", "VK_PUBLIC", "VK_PROTECTED", "VK_PRIVATE", "VK_ABSTRACT", "VK_NATIVE", "VK_TRANSIENT", "VK_VOLATILE", "VK_STRICTFP", "VK_THROWS", "VK_INTERFACE", "VK_ENUM", "SIGNED_DECIMAL", "SIGNED_HEX", "SIGNED_FLOAT", "VT_PROP_KEY", "VT_PROP_VALUE", "SEMICOLON", "ID", "DOT", "STAR", "STRING", "AT", "COLON", "EQUALS_ASSIGN", "WHEN", "COMMA", "BOOL", "LEFT_PAREN", "RIGHT_PAREN", "FROM", "OVER", "TimePeriod", "DECIMAL", "ACCUMULATE", "COLLECT", "DOUBLE_PIPE", "DOUBLE_AMPER", "ARROW", "EQUALS", "GREATER", "GREATER_EQUALS", "LESS", "LESS_EQUALS", "NOT_EQUALS", "LEFT_SQUARE", "RIGHT_SQUARE", "NULL", "PLUS", "MINUS", "HEX", "FLOAT", "THEN", "LEFT_CURLY", "RIGHT_CURLY", "QUESTION", "PIPE", "XOR", "AMPER", "SHIFT_LEFT", "SHIFT_RIGHT_UNSIG", "SHIFT_RIGHT", "DIV", "MOD", "INCR", "DECR", "TILDE", "NEGATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "EOL", "WS", "Exponent", "FloatTypeSuffix", "HexDigit", "IntegerTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "SH_STYLE_SINGLE_LINE_COMMENT", "C_STYLE_SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "IdentifierStart", "IdentifierPart", "MISC"
    };
    public static final int EOF=-1;
    public static final int VT_COMPILATION_UNIT=4;
    public static final int VT_FUNCTION_IMPORT=5;
    public static final int VT_FACT=6;
    public static final int VT_CONSTRAINTS=7;
    public static final int VT_LABEL=8;
    public static final int VT_QUERY_ID=9;
    public static final int VT_TYPE_DECLARE_ID=10;
    public static final int VT_TYPE_NAME=11;
    public static final int VT_RULE_ID=12;
    public static final int VT_ENTRYPOINT_ID=13;
    public static final int VT_RULE_ATTRIBUTES=14;
    public static final int VT_PKG_ATTRIBUTES=15;
    public static final int VT_RHS_CHUNK=16;
    public static final int VT_CURLY_CHUNK=17;
    public static final int VT_SQUARE_CHUNK=18;
    public static final int VT_PAREN_CHUNK=19;
    public static final int VT_BEHAVIOR=20;
    public static final int VT_AND_IMPLICIT=21;
    public static final int VT_AND_PREFIX=22;
    public static final int VT_OR_PREFIX=23;
    public static final int VT_AND_INFIX=24;
    public static final int VT_OR_INFIX=25;
    public static final int VT_ACCUMULATE_INIT_CLAUSE=26;
    public static final int VT_ACCUMULATE_ID_CLAUSE=27;
    public static final int VT_FROM_SOURCE=28;
    public static final int VT_EXPRESSION_CHAIN=29;
    public static final int VT_FOR_CE=30;
    public static final int VT_FOR_FUNCTIONS=31;
    public static final int VT_PATTERN=32;
    public static final int VT_FACT_BINDING=33;
    public static final int VT_FACT_OR=34;
    public static final int VT_BIND_FIELD=35;
    public static final int VT_FIELD=36;
    public static final int VT_ACCESSOR_PATH=37;
    public static final int VT_ACCESSOR_ELEMENT=38;
    public static final int VT_DATA_TYPE=39;
    public static final int VT_PATTERN_TYPE=40;
    public static final int VT_PACKAGE_ID=41;
    public static final int VT_IMPORT_ID=42;
    public static final int VT_GLOBAL_ID=43;
    public static final int VT_FUNCTION_ID=44;
    public static final int VT_PARAM_LIST=45;
    public static final int VT_ARGUMENTS=46;
    public static final int VT_EXPRESSION=47;
    public static final int VK_DATE_EFFECTIVE=48;
    public static final int VK_DATE_EXPIRES=49;
    public static final int VK_LOCK_ON_ACTIVE=50;
    public static final int VK_NO_LOOP=51;
    public static final int VK_AUTO_FOCUS=52;
    public static final int VK_ACTIVATION_GROUP=53;
    public static final int VK_AGENDA_GROUP=54;
    public static final int VK_RULEFLOW_GROUP=55;
    public static final int VK_TIMER=56;
    public static final int VK_CALENDARS=57;
    public static final int VK_DIALECT=58;
    public static final int VK_SALIENCE=59;
    public static final int VK_ENABLED=60;
    public static final int VK_ATTRIBUTES=61;
    public static final int VK_RULE=62;
    public static final int VK_EXTEND=63;
    public static final int VK_IMPLEMENTS=64;
    public static final int VK_IMPORT=65;
    public static final int VK_PACKAGE=66;
    public static final int VK_QUERY=67;
    public static final int VK_DECLARE=68;
    public static final int VK_FUNCTION=69;
    public static final int VK_GLOBAL=70;
    public static final int VK_EVAL=71;
    public static final int VK_ENTRY_POINT=72;
    public static final int VK_NOT=73;
    public static final int VK_IN=74;
    public static final int VK_OR=75;
    public static final int VK_AND=76;
    public static final int VK_EXISTS=77;
    public static final int VK_FORALL=78;
    public static final int VK_FOR=79;
    public static final int VK_ACTION=80;
    public static final int VK_REVERSE=81;
    public static final int VK_RESULT=82;
    public static final int VK_OPERATOR=83;
    public static final int VK_END=84;
    public static final int VK_INIT=85;
    public static final int VK_INSTANCEOF=86;
    public static final int VK_EXTENDS=87;
    public static final int VK_SUPER=88;
    public static final int VK_PRIMITIVE_TYPE=89;
    public static final int VK_THIS=90;
    public static final int VK_VOID=91;
    public static final int VK_CLASS=92;
    public static final int VK_NEW=93;
    public static final int VK_FINAL=94;
    public static final int VK_IF=95;
    public static final int VK_ELSE=96;
    public static final int VK_WHILE=97;
    public static final int VK_DO=98;
    public static final int VK_CASE=99;
    public static final int VK_DEFAULT=100;
    public static final int VK_TRY=101;
    public static final int VK_CATCH=102;
    public static final int VK_FINALLY=103;
    public static final int VK_SWITCH=104;
    public static final int VK_SYNCHRONIZED=105;
    public static final int VK_RETURN=106;
    public static final int VK_THROW=107;
    public static final int VK_BREAK=108;
    public static final int VK_CONTINUE=109;
    public static final int VK_ASSERT=110;
    public static final int VK_MODIFY=111;
    public static final int VK_STATIC=112;
    public static final int VK_PUBLIC=113;
    public static final int VK_PROTECTED=114;
    public static final int VK_PRIVATE=115;
    public static final int VK_ABSTRACT=116;
    public static final int VK_NATIVE=117;
    public static final int VK_TRANSIENT=118;
    public static final int VK_VOLATILE=119;
    public static final int VK_STRICTFP=120;
    public static final int VK_THROWS=121;
    public static final int VK_INTERFACE=122;
    public static final int VK_ENUM=123;
    public static final int SIGNED_DECIMAL=124;
    public static final int SIGNED_HEX=125;
    public static final int SIGNED_FLOAT=126;
    public static final int VT_PROP_KEY=127;
    public static final int VT_PROP_VALUE=128;
    public static final int SEMICOLON=129;
    public static final int ID=130;
    public static final int DOT=131;
    public static final int STAR=132;
    public static final int STRING=133;
    public static final int AT=134;
    public static final int COLON=135;
    public static final int EQUALS_ASSIGN=136;
    public static final int WHEN=137;
    public static final int COMMA=138;
    public static final int BOOL=139;
    public static final int LEFT_PAREN=140;
    public static final int RIGHT_PAREN=141;
    public static final int FROM=142;
    public static final int OVER=143;
    public static final int TimePeriod=144;
    public static final int DECIMAL=145;
    public static final int ACCUMULATE=146;
    public static final int COLLECT=147;
    public static final int DOUBLE_PIPE=148;
    public static final int DOUBLE_AMPER=149;
    public static final int ARROW=150;
    public static final int EQUALS=151;
    public static final int GREATER=152;
    public static final int GREATER_EQUALS=153;
    public static final int LESS=154;
    public static final int LESS_EQUALS=155;
    public static final int NOT_EQUALS=156;
    public static final int LEFT_SQUARE=157;
    public static final int RIGHT_SQUARE=158;
    public static final int NULL=159;
    public static final int PLUS=160;
    public static final int MINUS=161;
    public static final int HEX=162;
    public static final int FLOAT=163;
    public static final int THEN=164;
    public static final int LEFT_CURLY=165;
    public static final int RIGHT_CURLY=166;
    public static final int QUESTION=167;
    public static final int PIPE=168;
    public static final int XOR=169;
    public static final int AMPER=170;
    public static final int SHIFT_LEFT=171;
    public static final int SHIFT_RIGHT_UNSIG=172;
    public static final int SHIFT_RIGHT=173;
    public static final int DIV=174;
    public static final int MOD=175;
    public static final int INCR=176;
    public static final int DECR=177;
    public static final int TILDE=178;
    public static final int NEGATION=179;
    public static final int PLUS_ASSIGN=180;
    public static final int MINUS_ASSIGN=181;
    public static final int MULT_ASSIGN=182;
    public static final int DIV_ASSIGN=183;
    public static final int AND_ASSIGN=184;
    public static final int OR_ASSIGN=185;
    public static final int XOR_ASSIGN=186;
    public static final int MOD_ASSIGN=187;
    public static final int EOL=188;
    public static final int WS=189;
    public static final int Exponent=190;
    public static final int FloatTypeSuffix=191;
    public static final int HexDigit=192;
    public static final int IntegerTypeSuffix=193;
    public static final int EscapeSequence=194;
    public static final int UnicodeEscape=195;
    public static final int OctalEscape=196;
    public static final int SH_STYLE_SINGLE_LINE_COMMENT=197;
    public static final int C_STYLE_SINGLE_LINE_COMMENT=198;
    public static final int MULTI_LINE_COMMENT=199;
    public static final int IdentifierStart=200;
    public static final int IdentifierPart=201;
    public static final int MISC=202;

    // delegates
    // delegators


        public DRLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public DRLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[293+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return DRLParser.tokenNames; }
    public String getGrammarFileName() { return "src/main/resources/org/drools/lang/DRL.g"; }


        private ParserHelper helper = new ParserHelper( this,
                                                        tokenNames,
                                                        input,
                                                        state );
                                                        
        public ParserHelper getHelper()                           { return helper; }
        public boolean hasErrors()                                { return helper.hasErrors(); }
        public List<DroolsParserException> getErrors()            { return helper.getErrors(); }
        public List<String> getErrorMessages()                    { return helper.getErrorMessages(); }
        public void enableEditorInterface()                       {        helper.enableEditorInterface(); }
        public void disableEditorInterface()                      {        helper.disableEditorInterface(); }
        public LinkedList<DroolsSentence> getEditorInterface()    { return helper.getEditorInterface(); }
        public void reportError(RecognitionException ex)          {        helper.reportError( ex ); }
        /** Overrided this method to not output mesages */
        public void emitErrorMessage(String msg)                  {}



    public static class compilation_unit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilation_unit"
    // src/main/resources/org/drools/lang/DRL.g:223:1: compilation_unit : ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) ;
    public final DRLParser.compilation_unit_return compilation_unit() throws RecognitionException {
        DRLParser.compilation_unit_return retval = new DRLParser.compilation_unit_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF5=null;
        DRLParser.package_statement_return package_statement1 = null;

        DRLParser.resync_return resync2 = null;

        DRLParser.statement_return statement3 = null;

        DRLParser.resync_return resync4 = null;


        Object EOF5_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_package_statement=new RewriteRuleSubtreeStream(adaptor,"rule package_statement");
        RewriteRuleSubtreeStream stream_resync=new RewriteRuleSubtreeStream(adaptor,"rule resync");
        try {
            // src/main/resources/org/drools/lang/DRL.g:224:2: ( ( package_statement )? resync ( statement resync )* EOF -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* ) )
            // src/main/resources/org/drools/lang/DRL.g:224:4: ( package_statement )? resync ( statement resync )* EOF
            {
            // src/main/resources/org/drools/lang/DRL.g:224:4: ( package_statement )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:224:4: package_statement
                    {
                    pushFollow(FOLLOW_package_statement_in_compilation_unit618);
                    package_statement1=package_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_statement.add(package_statement1.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_resync_in_compilation_unit637);
            resync2=resync();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resync.add(resync2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:226:3: ( statement resync )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:226:5: statement resync
            	    {
            	    pushFollow(FOLLOW_statement_in_compilation_unit644);
            	    statement3=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement3.getTree());
            	    pushFollow(FOLLOW_resync_in_compilation_unit646);
            	    resync4=resync();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_resync.add(resync4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            EOF5=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF5);



            // AST REWRITE
            // elements: package_statement, statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 228:3: -> ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:228:6: ^( VT_COMPILATION_UNIT ( package_statement )? ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:228:28: ( package_statement )?
                if ( stream_package_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_package_statement.nextTree());

                }
                stream_package_statement.reset();
                // src/main/resources/org/drools/lang/DRL.g:228:47: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException e ) {

            		helper.reportError( e );
            	
        }
        catch ( RewriteEmptyStreamException e ) {

            	
        }
        finally {

            	if (helper.isEditorInterfaceEnabled && retval.tree == null) {
            		retval.tree = root_0;
            		root_0 = (Object) adaptor.nil();
            		Object root_1 = (Object) adaptor.nil();
            		root_1 = (Object) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), root_1);
            		if (stream_package_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_package_statement.nextTree());
            		}
            		while (stream_statement.hasNext()) {
            			adaptor.addChild(root_1, stream_statement.nextTree());
            		}
            		adaptor.addChild(root_0, root_1);
            		retval.stop = input.LT(-1);
            		retval.tree = (Object) adaptor.rulePostProcessing(root_0);
            		adaptor.setTokenBoundaries(retval.tree, retval.start,
            				retval.stop);
            	}
            	if (helper.isEditorInterfaceEnabled && helper.hasErrors()) {
            		Tree rootNode = (Tree) adaptor.becomeRoot(adaptor.create(
            				VT_COMPILATION_UNIT, "VT_COMPILATION_UNIT"), adaptor.nil());
            		for (int i = 0; i < ((Tree)retval.tree).getChildCount(); i++) {
            			Tree childNode = (Tree) ((Tree)retval.tree).getChild(i);
            			if (!(childNode instanceof CommonErrorNode)) {
            				rootNode.addChild(childNode);
            			}
            		}
            		retval.tree = rootNode; 
            	}

        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public static class resync_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resync"
    // src/main/resources/org/drools/lang/DRL.g:271:1: resync : ;
    public final DRLParser.resync_return resync() throws RecognitionException {
        DRLParser.resync_return retval = new DRLParser.resync_return();
        retval.start = input.LT(1);

        Object root_0 = null;


            // Consume any garbled tokens that come before the next statement
            // or the end of the block. The only slight risk here is that the
            // block becomes MORE inclusive than it should but as the script is
            // in error, this is a better course than throwing out the block
            // when the error occurs and screwing up the whole meaning of
            // the rest of the token stream.
            //
            helper.syncToSet();
        try {
            // src/main/resources/org/drools/lang/DRL.g:282:5: ()
            // src/main/resources/org/drools/lang/DRL.g:284:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "resync"

    public static class package_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_statement"
    // src/main/resources/org/drools/lang/DRL.g:289:1: package_statement : package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) ;
    public final DRLParser.package_statement_return package_statement() throws RecognitionException {
        DRLParser.package_statement_return retval = new DRLParser.package_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON8=null;
        DRLParser.package_key_return package_key6 = null;

        DRLParser.packageOrTypeName_return packageOrTypeName7 = null;


        Object SEMICOLON8_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_packageOrTypeName=new RewriteRuleSubtreeStream(adaptor,"rule packageOrTypeName");
         helper.pushParaphrases(DroolsParaphraseTypes.PACKAGE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.PACKAGE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:292:2: ( package_key packageOrTypeName ( SEMICOLON )? -> ^( package_key packageOrTypeName ) )
            // src/main/resources/org/drools/lang/DRL.g:292:4: package_key packageOrTypeName ( SEMICOLON )?
            {
            pushFollow(FOLLOW_package_key_in_package_statement747);
            package_key6=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key6.getTree());
            pushFollow(FOLLOW_packageOrTypeName_in_package_statement751);
            packageOrTypeName7=packageOrTypeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_packageOrTypeName.add(packageOrTypeName7.getTree());
            // src/main/resources/org/drools/lang/DRL.g:293:21: ( SEMICOLON )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SEMICOLON) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:293:21: SEMICOLON
                    {
                    SEMICOLON8=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_statement753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON8);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON8, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: packageOrTypeName, package_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:3: -> ^( package_key packageOrTypeName )
            {
                // src/main/resources/org/drools/lang/DRL.g:295:6: ^( package_key packageOrTypeName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_package_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_packageOrTypeName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_statement"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // src/main/resources/org/drools/lang/DRL.g:303:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );
    public final DRLParser.statement_return statement() throws RecognitionException {
        DRLParser.statement_return retval = new DRLParser.statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_attribute_return rule_attribute9 = null;

        DRLParser.function_import_statement_return function_import_statement10 = null;

        DRLParser.import_statement_return import_statement11 = null;

        DRLParser.global_return global12 = null;

        DRLParser.function_return function13 = null;

        DRLParser.type_declaration_return type_declaration14 = null;

        DRLParser.rule_return rule15 = null;

        DRLParser.query_return query16 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:306:3: ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query )
            int alt4=8;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:306:5: rule_attribute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_attribute_in_statement793);
                    rule_attribute9=rule_attribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule_attribute9.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:307:4: function_import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_import_statement_in_statement798);
                    function_import_statement10=function_import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_import_statement10.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:308:10: import_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_import_statement_in_statement811);
                    import_statement11=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement11.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:309:4: global
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_global_in_statement817);
                    global12=global();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global12.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:310:4: function
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_in_statement823);
                    function13=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function13.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:311:4: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_statement828);
                    type_declaration14=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration14.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:312:4: rule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rule_in_statement833);
                    rule15=rule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rule15.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:313:4: query
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_query_in_statement838);
                    query16=query();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query16.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_statement"
    // src/main/resources/org/drools/lang/DRL.g:319:1: import_statement : import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) ;
    public final DRLParser.import_statement_return import_statement() throws RecognitionException {
        DRLParser.import_statement_return retval = new DRLParser.import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON19=null;
        DRLParser.import_key_return import_key17 = null;

        DRLParser.import_name_return import_name18 = null;


        Object SEMICOLON19_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.IMPORT_STATEMENT);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:322:2: ( import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )? -> ^( import_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:322:4: import_key import_name[DroolsParaphraseTypes.IMPORT] ( SEMICOLON )?
            {
            pushFollow(FOLLOW_import_key_in_import_statement864);
            import_key17=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(import_key17.getTree());
            pushFollow(FOLLOW_import_name_in_import_statement866);
            import_name18=import_name(DroolsParaphraseTypes.IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name18.getTree());
            // src/main/resources/org/drools/lang/DRL.g:322:57: ( SEMICOLON )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==SEMICOLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:322:57: SEMICOLON
                    {
                    SEMICOLON19=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_import_statement869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON19);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON19, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_name, import_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:3: -> ^( import_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:324:6: ^( import_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_import_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_statement"

    public static class function_import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_import_statement"
    // src/main/resources/org/drools/lang/DRL.g:327:1: function_import_statement : {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) ;
    public final DRLParser.function_import_statement_return function_import_statement() throws RecognitionException {
        DRLParser.function_import_statement_return retval = new DRLParser.function_import_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON22=null;
        DRLParser.import_key_return imp = null;

        DRLParser.function_key_return function_key20 = null;

        DRLParser.import_name_return import_name21 = null;


        Object SEMICOLON22_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_import_key=new RewriteRuleSubtreeStream(adaptor,"rule import_key");
        RewriteRuleSubtreeStream stream_import_name=new RewriteRuleSubtreeStream(adaptor,"rule import_name");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION_IMPORT); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION_IMPORT_STATEMENT); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:330:2: ({...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )? -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name ) )
            // src/main/resources/org/drools/lang/DRL.g:330:4: {...}? =>imp= import_key function_key import_name[DroolsParaphraseTypes.FUNCTION_IMPORT] ( SEMICOLON )?
            {
            if ( !((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_import_statement", "helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION)");
            }
            pushFollow(FOLLOW_import_key_in_function_import_statement909);
            imp=import_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_key.add(imp.getTree());
            pushFollow(FOLLOW_function_key_in_function_import_statement911);
            function_key20=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key20.getTree());
            pushFollow(FOLLOW_import_name_in_function_import_statement923);
            import_name21=import_name(DroolsParaphraseTypes.FUNCTION_IMPORT);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_import_name.add(import_name21.getTree());
            // src/main/resources/org/drools/lang/DRL.g:331:61: ( SEMICOLON )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==SEMICOLON) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:331:61: SEMICOLON
                    {
                    SEMICOLON22=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_import_statement926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON22);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON22, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: import_name, function_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:3: -> ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
            {
                // src/main/resources/org/drools/lang/DRL.g:333:6: ^( VT_FUNCTION_IMPORT[$imp.start] function_key import_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FUNCTION_IMPORT, (imp!=null?((Token)imp.start):null)), root_1);

                adaptor.addChild(root_1, stream_function_key.nextTree());
                adaptor.addChild(root_1, stream_import_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_import_statement"

    public static class import_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_name"
    // src/main/resources/org/drools/lang/DRL.g:336:1: import_name[DroolsParaphraseTypes importType] : id+= ID (id+= DOT id+= ID )* (id+= DOT id+= STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( STAR )? ) ;
    public final DRLParser.import_name_return import_name(DroolsParaphraseTypes importType) throws RecognitionException {
        DRLParser.import_name_return retval = new DRLParser.import_name_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:337:2: (id+= ID (id+= DOT id+= ID )* (id+= DOT id+= STAR )? -> ^( VT_IMPORT_ID ( ID )+ ( STAR )? ) )
            // src/main/resources/org/drools/lang/DRL.g:337:4: id+= ID (id+= DOT id+= ID )* (id+= DOT id+= STAR )?
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_import_name960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:337:11: (id+= DOT id+= ID )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DOT) ) {
                    int LA7_1 = input.LA(2);

                    if ( (LA7_1==ID) ) {
                        alt7=1;
                    }


                }


                switch (alt7) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:337:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_import_name966); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_import_name970); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:337:31: (id+= DOT id+= STAR )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==DOT) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:337:32: id+= DOT id+= STAR
                    {
                    id=(Token)match(input,DOT,FOLLOW_DOT_in_import_name978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(id);

                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id);

                    id=(Token)match(input,STAR,FOLLOW_STAR_in_import_name982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(id);

                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(importType, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: STAR, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:3: -> ^( VT_IMPORT_ID ( ID )+ ( STAR )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:340:6: ^( VT_IMPORT_ID ( ID )+ ( STAR )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_IMPORT_ID, "VT_IMPORT_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:340:25: ( STAR )?
                if ( stream_STAR.hasNext() ) {
                    adaptor.addChild(root_1, stream_STAR.nextNode());

                }
                stream_STAR.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_name"

    public static class global_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global"
    // src/main/resources/org/drools/lang/DRL.g:346:1: global : global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) ;
    public final DRLParser.global_return global() throws RecognitionException {
        DRLParser.global_return retval = new DRLParser.global_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON26=null;
        DRLParser.global_key_return global_key23 = null;

        DRLParser.data_type_return data_type24 = null;

        DRLParser.global_id_return global_id25 = null;


        Object SEMICOLON26_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_global_key=new RewriteRuleSubtreeStream(adaptor,"rule global_key");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_global_id=new RewriteRuleSubtreeStream(adaptor,"rule global_id");
         helper.pushParaphrases(DroolsParaphraseTypes.GLOBAL);  if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.GLOBAL); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:349:2: ( global_key data_type global_id ( SEMICOLON )? -> ^( global_key data_type global_id ) )
            // src/main/resources/org/drools/lang/DRL.g:349:4: global_key data_type global_id ( SEMICOLON )?
            {
            pushFollow(FOLLOW_global_key_in_global1026);
            global_key23=global_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_key.add(global_key23.getTree());
            pushFollow(FOLLOW_data_type_in_global1028);
            data_type24=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type24.getTree());
            pushFollow(FOLLOW_global_id_in_global1030);
            global_id25=global_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_global_id.add(global_id25.getTree());
            // src/main/resources/org/drools/lang/DRL.g:349:35: ( SEMICOLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMICOLON) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:349:35: SEMICOLON
                    {
                    SEMICOLON26=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_global1032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON26);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON26, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: global_key, global_id, data_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:3: -> ^( global_key data_type global_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:351:6: ^( global_key data_type global_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_global_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_data_type.nextTree());
                adaptor.addChild(root_1, stream_global_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global"

    public static class global_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_id"
    // src/main/resources/org/drools/lang/DRL.g:354:1: global_id : id= ID -> VT_GLOBAL_ID[$id] ;
    public final DRLParser.global_id_return global_id() throws RecognitionException {
        DRLParser.global_id_return retval = new DRLParser.global_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:355:2: (id= ID -> VT_GLOBAL_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:355:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_global_id1061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.GLOBAL, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:3: -> VT_GLOBAL_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_GLOBAL_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_id"

    public static class function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function"
    // src/main/resources/org/drools/lang/DRL.g:364:1: function : function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) ;
    public final DRLParser.function_return function() throws RecognitionException {
        DRLParser.function_return retval = new DRLParser.function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.function_key_return function_key27 = null;

        DRLParser.data_type_return data_type28 = null;

        DRLParser.function_id_return function_id29 = null;

        DRLParser.parameters_return parameters30 = null;

        DRLParser.curly_chunk_return curly_chunk31 = null;


        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_function_id=new RewriteRuleSubtreeStream(adaptor,"rule function_id");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_curly_chunk=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk");
         helper.pushParaphrases(DroolsParaphraseTypes.FUNCTION); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.FUNCTION);  
        try {
            // src/main/resources/org/drools/lang/DRL.g:367:2: ( function_key ( data_type )? function_id parameters curly_chunk -> ^( function_key ( data_type )? function_id parameters curly_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:367:4: function_key ( data_type )? function_id parameters curly_chunk
            {
            pushFollow(FOLLOW_function_key_in_function1096);
            function_key27=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key27.getTree());
            // src/main/resources/org/drools/lang/DRL.g:367:17: ( data_type )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID) ) {
                int LA10_1 = input.LA(2);

                if ( ((LA10_1>=ID && LA10_1<=DOT)||LA10_1==LEFT_SQUARE) ) {
                    alt10=1;
                }
            }
            switch (alt10) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:367:17: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_function1098);
                    data_type28=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_data_type.add(data_type28.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_function_id_in_function1101);
            function_id29=function_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_id.add(function_id29.getTree());
            pushFollow(FOLLOW_parameters_in_function1103);
            parameters30=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters.add(parameters30.getTree());
            pushFollow(FOLLOW_curly_chunk_in_function1105);
            curly_chunk31=curly_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk.add(curly_chunk31.getTree());


            // AST REWRITE
            // elements: data_type, curly_chunk, function_id, parameters, function_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:3: -> ^( function_key ( data_type )? function_id parameters curly_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:368:6: ^( function_key ( data_type )? function_id parameters curly_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_function_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:368:21: ( data_type )?
                if ( stream_data_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_data_type.nextTree());

                }
                stream_data_type.reset();
                adaptor.addChild(root_1, stream_function_id.nextTree());
                adaptor.addChild(root_1, stream_parameters.nextTree());
                adaptor.addChild(root_1, stream_curly_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function"

    public static class function_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_id"
    // src/main/resources/org/drools/lang/DRL.g:371:1: function_id : id= ID -> VT_FUNCTION_ID[$id] ;
    public final DRLParser.function_id_return function_id() throws RecognitionException {
        DRLParser.function_id_return retval = new DRLParser.function_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:372:2: (id= ID -> VT_FUNCTION_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:372:4: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_function_id1135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.FUNCTION, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:3: -> VT_FUNCTION_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FUNCTION_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_id"

    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // src/main/resources/org/drools/lang/DRL.g:381:1: query : query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) ;
    public final DRLParser.query_return query() throws RecognitionException {
        DRLParser.query_return retval = new DRLParser.query_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token SEMICOLON36=null;
        DRLParser.end_key_return end = null;

        DRLParser.query_key_return query_key32 = null;

        DRLParser.query_id_return query_id33 = null;

        DRLParser.parameters_return parameters34 = null;

        DRLParser.normal_lhs_block_return normal_lhs_block35 = null;


        Object SEMICOLON36_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_query_key=new RewriteRuleSubtreeStream(adaptor,"rule query_key");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_query_id=new RewriteRuleSubtreeStream(adaptor,"rule query_id");
         helper.pushParaphrases(DroolsParaphraseTypes.QUERY); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.QUERY); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:384:2: ( query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )? -> ^( query_key query_id ( parameters )? normal_lhs_block end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:384:4: query_key query_id ( parameters )? normal_lhs_block end= end_key ( SEMICOLON )?
            {
            pushFollow(FOLLOW_query_key_in_query1170);
            query_key32=query_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_key.add(query_key32.getTree());
            pushFollow(FOLLOW_query_id_in_query1172);
            query_id33=query_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_id.add(query_id33.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:386:3: ( parameters )?
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:386:3: parameters
                    {
                    pushFollow(FOLLOW_parameters_in_query1180);
                    parameters34=parameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameters.add(parameters34.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_query1189);
            normal_lhs_block35=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block35.getTree());
            pushFollow(FOLLOW_end_key_in_query1196);
            end=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end.getTree());
            // src/main/resources/org/drools/lang/DRL.g:389:15: ( SEMICOLON )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==SEMICOLON) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:389:15: SEMICOLON
                    {
                    SEMICOLON36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_query1198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON36);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON36, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: query_key, end_key, normal_lhs_block, query_id, parameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:3: -> ^( query_key query_id ( parameters )? normal_lhs_block end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:391:6: ^( query_key query_id ( parameters )? normal_lhs_block end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_query_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_query_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:391:27: ( parameters )?
                if ( stream_parameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameters.nextTree());

                }
                stream_parameters.reset();
                adaptor.addChild(root_1, stream_normal_lhs_block.nextTree());
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query"

    public static class query_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_id"
    // src/main/resources/org/drools/lang/DRL.g:394:1: query_id : (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] );
    public final DRLParser.query_id_return query_id() throws RecognitionException {
        DRLParser.query_id_return retval = new DRLParser.query_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // src/main/resources/org/drools/lang/DRL.g:395:2: (id= ID -> VT_QUERY_ID[$id] | id= STRING -> VT_QUERY_ID[$id] )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ID) ) {
                alt13=1;
            }
            else if ( (LA13_0==STRING) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:395:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_query_id1233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 397:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:398:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_query_id1249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.QUERY, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 400:72: -> VT_QUERY_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_QUERY_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_id"

    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // src/main/resources/org/drools/lang/DRL.g:406:1: type_declaration : declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) ;
    public final DRLParser.type_declaration_return type_declaration() throws RecognitionException {
        DRLParser.type_declaration_return retval = new DRLParser.type_declaration_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.declare_key_return declare_key37 = null;

        DRLParser.type_declare_id_return type_declare_id38 = null;

        DRLParser.type_decl_extends_return type_decl_extends39 = null;

        DRLParser.type_decl_implements_return type_decl_implements40 = null;

        DRLParser.decl_metadata_return decl_metadata41 = null;

        DRLParser.decl_field_return decl_field42 = null;

        DRLParser.end_key_return end_key43 = null;


        RewriteRuleSubtreeStream stream_decl_field=new RewriteRuleSubtreeStream(adaptor,"rule decl_field");
        RewriteRuleSubtreeStream stream_type_declare_id=new RewriteRuleSubtreeStream(adaptor,"rule type_declare_id");
        RewriteRuleSubtreeStream stream_type_decl_extends=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_extends");
        RewriteRuleSubtreeStream stream_type_decl_implements=new RewriteRuleSubtreeStream(adaptor,"rule type_decl_implements");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
         helper.pushParaphrases(DroolsParaphraseTypes.TYPE_DECLARE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.TYPE_DECLARATION); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:409:2: ( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key ) )
            // src/main/resources/org/drools/lang/DRL.g:409:4: declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key
            {
            pushFollow(FOLLOW_declare_key_in_type_declaration1282);
            declare_key37=declare_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declare_key.add(declare_key37.getTree());
            pushFollow(FOLLOW_type_declare_id_in_type_declaration1285);
            type_declare_id38=type_declare_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declare_id.add(type_declare_id38.getTree());
            // src/main/resources/org/drools/lang/DRL.g:409:33: ( type_decl_extends )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==ID) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                    int LA14_3 = input.LA(3);

                    if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                        alt14=1;
                    }
                }
            }
            switch (alt14) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:409:33: type_decl_extends
                    {
                    pushFollow(FOLLOW_type_decl_extends_in_type_declaration1287);
                    type_decl_extends39=type_decl_extends();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_extends.add(type_decl_extends39.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:409:52: ( type_decl_implements )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==ID) ) {
                int LA15_1 = input.LA(2);

                if ( (LA15_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {
                    int LA15_3 = input.LA(3);

                    if ( (LA15_3==DOT||LA15_3==AT||LA15_3==COMMA) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))))) {
                        alt15=1;
                    }
                    else if ( (LA15_3==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))))) {
                        int LA15_6 = input.LA(4);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {
                            alt15=1;
                        }
                    }
                }
            }
            switch (alt15) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:409:52: type_decl_implements
                    {
                    pushFollow(FOLLOW_type_decl_implements_in_type_declaration1290);
                    type_decl_implements40=type_decl_implements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_decl_implements.add(type_decl_implements40.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:410:3: ( decl_metadata )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==AT) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:410:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_type_declaration1295);
            	    decl_metadata41=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata41.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:411:3: ( decl_field )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==ID) ) {
                    int LA17_1 = input.LA(2);

                    if ( ((LA17_1>=COLON && LA17_1<=EQUALS_ASSIGN)) ) {
                        alt17=1;
                    }


                }


                switch (alt17) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:411:3: decl_field
            	    {
            	    pushFollow(FOLLOW_decl_field_in_type_declaration1300);
            	    decl_field42=decl_field();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_field.add(decl_field42.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_type_declaration1306);
            end_key43=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key43.getTree());


            // AST REWRITE
            // elements: decl_metadata, type_decl_extends, declare_key, end_key, type_declare_id, decl_field, type_decl_implements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:3: -> ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
            {
                // src/main/resources/org/drools/lang/DRL.g:414:6: ^( declare_key type_declare_id ( type_decl_extends )? ( type_decl_implements )? ( decl_metadata )* ( decl_field )* end_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_declare_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_type_declare_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:414:36: ( type_decl_extends )?
                if ( stream_type_decl_extends.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_extends.nextTree());

                }
                stream_type_decl_extends.reset();
                // src/main/resources/org/drools/lang/DRL.g:414:55: ( type_decl_implements )?
                if ( stream_type_decl_implements.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_decl_implements.nextTree());

                }
                stream_type_decl_implements.reset();
                // src/main/resources/org/drools/lang/DRL.g:414:77: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:414:92: ( decl_field )*
                while ( stream_decl_field.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field.nextTree());

                }
                stream_decl_field.reset();
                adaptor.addChild(root_1, stream_end_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class type_declare_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declare_id"
    // src/main/resources/org/drools/lang/DRL.g:417:1: type_declare_id : id= ID -> VT_TYPE_DECLARE_ID[$id] ;
    public final DRLParser.type_declare_id_return type_declare_id() throws RecognitionException {
        DRLParser.type_declare_id_return retval = new DRLParser.type_declare_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:418:2: (id= ID -> VT_TYPE_DECLARE_ID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:418:5: id= ID
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_type_declare_id1344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.TYPE_DECLARE, (id!=null?id.getText():null));	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:79: -> VT_TYPE_DECLARE_ID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_DECLARE_ID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declare_id"

    public static class type_decl_extends_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_extends"
    // src/main/resources/org/drools/lang/DRL.g:425:1: type_decl_extends : extends_key typeName ;
    public final DRLParser.type_decl_extends_return type_decl_extends() throws RecognitionException {
        DRLParser.type_decl_extends_return retval = new DRLParser.type_decl_extends_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.extends_key_return extends_key44 = null;

        DRLParser.typeName_return typeName45 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:426:2: ( extends_key typeName )
            // src/main/resources/org/drools/lang/DRL.g:426:4: extends_key typeName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_extends_key_in_type_decl_extends1367);
            extends_key44=extends_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(extends_key44.getTree(), root_0);
            pushFollow(FOLLOW_typeName_in_type_decl_extends1370);
            typeName45=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName45.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_extends"

    public static class type_decl_implements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_decl_implements"
    // src/main/resources/org/drools/lang/DRL.g:429:1: type_decl_implements : implements_key typeNameList ;
    public final DRLParser.type_decl_implements_return type_decl_implements() throws RecognitionException {
        DRLParser.type_decl_implements_return retval = new DRLParser.type_decl_implements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.implements_key_return implements_key46 = null;

        DRLParser.typeNameList_return typeNameList47 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:430:2: ( implements_key typeNameList )
            // src/main/resources/org/drools/lang/DRL.g:430:4: implements_key typeNameList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_implements_key_in_type_decl_implements1382);
            implements_key46=implements_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(implements_key46.getTree(), root_0);
            pushFollow(FOLLOW_typeNameList_in_type_decl_implements1385);
            typeNameList47=typeNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeNameList47.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_decl_implements"

    public static class decl_metadata_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_metadata"
    // src/main/resources/org/drools/lang/DRL.g:441:1: decl_metadata : AT ID ( paren_chunk )? -> ^( AT ID ( paren_chunk )? ) ;
    public final DRLParser.decl_metadata_return decl_metadata() throws RecognitionException {
        DRLParser.decl_metadata_return retval = new DRLParser.decl_metadata_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT48=null;
        Token ID49=null;
        DRLParser.paren_chunk_return paren_chunk50 = null;


        Object AT48_tree=null;
        Object ID49_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:442:2: ( AT ID ( paren_chunk )? -> ^( AT ID ( paren_chunk )? ) )
            // src/main/resources/org/drools/lang/DRL.g:442:4: AT ID ( paren_chunk )?
            {
            AT48=(Token)match(input,AT,FOLLOW_AT_in_decl_metadata1404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT48);

            if ( state.backtracking==0 ) {
              	helper.emit(AT48, DroolsEditorType.SYMBOL);	
            }
            ID49=(Token)match(input,ID,FOLLOW_ID_in_decl_metadata1412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID49);

            if ( state.backtracking==0 ) {
              	helper.emit(ID49, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:446:3: ( paren_chunk )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==LEFT_PAREN) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:446:3: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_decl_metadata1419);
                    paren_chunk50=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk50.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: paren_chunk, AT, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:3: -> ^( AT ID ( paren_chunk )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:447:6: ^( AT ID ( paren_chunk )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // src/main/resources/org/drools/lang/DRL.g:447:14: ( paren_chunk )?
                if ( stream_paren_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                }
                stream_paren_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_metadata"

    public static class decl_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field"
    // src/main/resources/org/drools/lang/DRL.g:450:1: decl_field : ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) ;
    public final DRLParser.decl_field_return decl_field() throws RecognitionException {
        DRLParser.decl_field_return retval = new DRLParser.decl_field_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID51=null;
        Token COLON53=null;
        DRLParser.decl_field_initialization_return decl_field_initialization52 = null;

        DRLParser.data_type_return data_type54 = null;

        DRLParser.decl_metadata_return decl_metadata55 = null;


        Object ID51_tree=null;
        Object COLON53_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_decl_field_initialization=new RewriteRuleSubtreeStream(adaptor,"rule decl_field_initialization");
        RewriteRuleSubtreeStream stream_data_type=new RewriteRuleSubtreeStream(adaptor,"rule data_type");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        try {
            // src/main/resources/org/drools/lang/DRL.g:451:2: ( ID ( decl_field_initialization )? COLON data_type ( decl_metadata )* -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* ) )
            // src/main/resources/org/drools/lang/DRL.g:451:4: ID ( decl_field_initialization )? COLON data_type ( decl_metadata )*
            {
            ID51=(Token)match(input,ID,FOLLOW_ID_in_decl_field1444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID51);

            if ( state.backtracking==0 ) {
              	helper.emit(ID51, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:452:3: ( decl_field_initialization )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==EQUALS_ASSIGN) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:452:3: decl_field_initialization
                    {
                    pushFollow(FOLLOW_decl_field_initialization_in_decl_field1450);
                    decl_field_initialization52=decl_field_initialization();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decl_field_initialization.add(decl_field_initialization52.getTree());

                    }
                    break;

            }

            COLON53=(Token)match(input,COLON,FOLLOW_COLON_in_decl_field1456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON53);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON53, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_data_type_in_decl_field1462);
            data_type54=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_data_type.add(data_type54.getTree());
            // src/main/resources/org/drools/lang/DRL.g:455:3: ( decl_metadata )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==AT) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:455:3: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_decl_field1466);
            	    decl_metadata55=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata55.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);



            // AST REWRITE
            // elements: decl_metadata, data_type, decl_field_initialization, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:3: -> ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:456:6: ^( ID ( decl_field_initialization )? data_type ( decl_metadata )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ID.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:456:11: ( decl_field_initialization )?
                if ( stream_decl_field_initialization.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_field_initialization.nextTree());

                }
                stream_decl_field_initialization.reset();
                adaptor.addChild(root_1, stream_data_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:456:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field"

    public static class decl_field_initialization_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decl_field_initialization"
    // src/main/resources/org/drools/lang/DRL.g:459:1: decl_field_initialization : EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) ;
    public final DRLParser.decl_field_initialization_return decl_field_initialization() throws RecognitionException {
        DRLParser.decl_field_initialization_return retval = new DRLParser.decl_field_initialization_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN56=null;
        DRLParser.paren_chunk_return paren_chunk57 = null;


        Object EQUALS_ASSIGN56_tree=null;
        RewriteRuleTokenStream stream_EQUALS_ASSIGN=new RewriteRuleTokenStream(adaptor,"token EQUALS_ASSIGN");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:460:2: ( EQUALS_ASSIGN paren_chunk -> ^( EQUALS_ASSIGN paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:460:4: EQUALS_ASSIGN paren_chunk
            {
            EQUALS_ASSIGN56=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_ASSIGN.add(EQUALS_ASSIGN56);

            if ( state.backtracking==0 ) {
              	helper.emit(EQUALS_ASSIGN56, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_decl_field_initialization1500);
            paren_chunk57=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk57.getTree());


            // AST REWRITE
            // elements: paren_chunk, EQUALS_ASSIGN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:2: -> ^( EQUALS_ASSIGN paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:462:5: ^( EQUALS_ASSIGN paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_EQUALS_ASSIGN.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decl_field_initialization"

    public static class rule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // src/main/resources/org/drools/lang/DRL.g:475:1: rule : rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) ;
    public final DRLParser.rule_return rule() throws RecognitionException {
        DRLParser.rule_return retval = new DRLParser.rule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rule_key_return rule_key58 = null;

        DRLParser.rule_id_return rule_id59 = null;

        DRLParser.extend_key_return extend_key60 = null;

        DRLParser.rule_id_return rule_id61 = null;

        DRLParser.decl_metadata_return decl_metadata62 = null;

        DRLParser.rule_attributes_return rule_attributes63 = null;

        DRLParser.when_part_return when_part64 = null;

        DRLParser.rhs_chunk_return rhs_chunk65 = null;


        RewriteRuleSubtreeStream stream_rule_id=new RewriteRuleSubtreeStream(adaptor,"rule rule_id");
        RewriteRuleSubtreeStream stream_rhs_chunk=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk");
        RewriteRuleSubtreeStream stream_rule_attributes=new RewriteRuleSubtreeStream(adaptor,"rule rule_attributes");
        RewriteRuleSubtreeStream stream_rule_key=new RewriteRuleSubtreeStream(adaptor,"rule rule_key");
        RewriteRuleSubtreeStream stream_extend_key=new RewriteRuleSubtreeStream(adaptor,"rule extend_key");
        RewriteRuleSubtreeStream stream_decl_metadata=new RewriteRuleSubtreeStream(adaptor,"rule decl_metadata");
        RewriteRuleSubtreeStream stream_when_part=new RewriteRuleSubtreeStream(adaptor,"rule when_part");
         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE); if ( state.backtracking==0 ) helper.beginSentence(DroolsSentenceType.RULE);
        try {
            // src/main/resources/org/drools/lang/DRL.g:478:2: ( rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:479:3: rule_key rule_id ( extend_key rule_id )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk
            {
            pushFollow(FOLLOW_rule_key_in_rule1538);
            rule_key58=rule_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_key.add(rule_key58.getTree());
            pushFollow(FOLLOW_rule_id_in_rule1556);
            rule_id59=rule_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_id.add(rule_id59.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:482:3: ( extend_key rule_id )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:482:4: extend_key rule_id
                    {
                    pushFollow(FOLLOW_extend_key_in_rule1565);
                    extend_key60=extend_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extend_key.add(extend_key60.getTree());
                    pushFollow(FOLLOW_rule_id_in_rule1567);
                    rule_id61=rule_id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_id.add(rule_id61.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:482:25: ( decl_metadata )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==AT) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:482:25: decl_metadata
            	    {
            	    pushFollow(FOLLOW_decl_metadata_in_rule1571);
            	    decl_metadata62=decl_metadata();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_decl_metadata.add(decl_metadata62.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:482:40: ( rule_attributes )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:482:40: rule_attributes
                    {
                    pushFollow(FOLLOW_rule_attributes_in_rule1574);
                    rule_attributes63=rule_attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rule_attributes.add(rule_attributes63.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:482:57: ( when_part )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==WHEN) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:482:57: when_part
                    {
                    pushFollow(FOLLOW_when_part_in_rule1577);
                    when_part64=when_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_when_part.add(when_part64.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rhs_chunk_in_rule1580);
            rhs_chunk65=rhs_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk.add(rhs_chunk65.getTree());


            // AST REWRITE
            // elements: rule_key, rule_attributes, when_part, rule_id, decl_metadata, rhs_chunk, rule_id, extend_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:3: -> ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:483:6: ^( rule_key rule_id ( ^( extend_key rule_id ) )? ( decl_metadata )* ( rule_attributes )? ( when_part )? rhs_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rule_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_rule_id.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:483:25: ( ^( extend_key rule_id ) )?
                if ( stream_rule_id.hasNext()||stream_extend_key.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:483:25: ^( extend_key rule_id )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_extend_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_rule_id.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_rule_id.reset();
                stream_extend_key.reset();
                // src/main/resources/org/drools/lang/DRL.g:483:48: ( decl_metadata )*
                while ( stream_decl_metadata.hasNext() ) {
                    adaptor.addChild(root_1, stream_decl_metadata.nextTree());

                }
                stream_decl_metadata.reset();
                // src/main/resources/org/drools/lang/DRL.g:483:63: ( rule_attributes )?
                if ( stream_rule_attributes.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attributes.nextTree());

                }
                stream_rule_attributes.reset();
                // src/main/resources/org/drools/lang/DRL.g:483:80: ( when_part )?
                if ( stream_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_when_part.nextTree());

                }
                stream_when_part.reset();
                adaptor.addChild(root_1, stream_rhs_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(6) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			input.LA(5) == MINUS && input.LA(6) == ID && 
            			helper.validateLT(1, DroolsSoftKeywords.LOCK) && helper.validateLT(3, DroolsSoftKeywords.ON) &&
            			helper.validateLT(5, DroolsSoftKeywords.ACTIVE)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(4), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(5), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(4) == EOF && input.LA(1) == ID && input.LA(2) == MINUS && input.LA(3) == ID && 
            			(	(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.NO) && helper.validateLT(3, DroolsSoftKeywords.LOOP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.DATE) && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AUTO) && helper.validateLT(3, DroolsSoftKeywords.FOCUS)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.ACTIVATION) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.RULEFLOW) && helper.validateLT(3, DroolsSoftKeywords.GROUP)) ||
            				(helper.validateLT(1, DroolsSoftKeywords.AGENDA) && helper.validateLT(3, DroolsSoftKeywords.GROUP))	)){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(3), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            			input.consume();
            			input.consume();
            		} else if (input.LA(2) == EOF && input.LA(1) == ID && 
            				(helper.validateLT(1, DroolsSoftKeywords.DIALECT) || helper.validateLT(1, DroolsSoftKeywords.ENABLED) ||
            				 helper.validateLT(1, DroolsSoftKeywords.SALIENCE) || helper.validateLT(1, DroolsSoftKeywords.DURATION) ||
            				 helper.validateLT(1, DroolsSoftKeywords.TIMER))){
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "when_part"
    // src/main/resources/org/drools/lang/DRL.g:529:1: when_part : WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block ;
    public final DRLParser.when_part_return when_part() throws RecognitionException {
        DRLParser.when_part_return retval = new DRLParser.when_part_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token WHEN66=null;
        Token COLON67=null;
        DRLParser.normal_lhs_block_return normal_lhs_block68 = null;


        Object WHEN66_tree=null;
        Object COLON67_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_normal_lhs_block=new RewriteRuleSubtreeStream(adaptor,"rule normal_lhs_block");
        try {
            // src/main/resources/org/drools/lang/DRL.g:530:2: ( WHEN ( COLON )? normal_lhs_block -> WHEN normal_lhs_block )
            // src/main/resources/org/drools/lang/DRL.g:530:5: WHEN ( COLON )? normal_lhs_block
            {
            WHEN66=(Token)match(input,WHEN,FOLLOW_WHEN_in_when_part1624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN66);

            if ( state.backtracking==0 ) {
              	helper.emit(WHEN66, DroolsEditorType.KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:531:3: ( COLON )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==COLON) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:531:3: COLON
                    {
                    COLON67=(Token)match(input,COLON,FOLLOW_COLON_in_when_part1630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON67);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COLON67, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }
            pushFollow(FOLLOW_normal_lhs_block_in_when_part1640);
            normal_lhs_block68=normal_lhs_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_normal_lhs_block.add(normal_lhs_block68.getTree());


            // AST REWRITE
            // elements: WHEN, normal_lhs_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:2: -> WHEN normal_lhs_block
            {
                adaptor.addChild(root_0, stream_WHEN.nextNode());
                adaptor.addChild(root_0, stream_normal_lhs_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "when_part"

    public static class rule_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_id"
    // src/main/resources/org/drools/lang/DRL.g:537:1: rule_id : (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] );
    public final DRLParser.rule_id_return rule_id() throws RecognitionException {
        DRLParser.rule_id_return retval = new DRLParser.rule_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // src/main/resources/org/drools/lang/DRL.g:538:2: (id= ID -> VT_RULE_ID[$id] | id= STRING -> VT_RULE_ID[$id] )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ID) ) {
                alt26=1;
            }
            else if ( (LA26_0==STRING) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:538:5: id= ID
                    {
                    id=(Token)match(input,ID,FOLLOW_ID_in_rule_id1661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 540:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:541:5: id= STRING
                    {
                    id=(Token)match(input,STRING,FOLLOW_STRING_in_rule_id1677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(id);

                    if ( state.backtracking==0 ) {
                      	helper.emit(id, DroolsEditorType.IDENTIFIER);
                      		helper.setParaphrasesValue(DroolsParaphraseTypes.RULE, (id!=null?id.getText():null));	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 543:71: -> VT_RULE_ID[$id]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_RULE_ID, id));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_id"

    public static class rule_attributes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attributes"
    // src/main/resources/org/drools/lang/DRL.g:546:1: rule_attributes : ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) ;
    public final DRLParser.rule_attributes_return rule_attributes() throws RecognitionException {
        DRLParser.rule_attributes_return retval = new DRLParser.rule_attributes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON70=null;
        Token COMMA72=null;
        DRLParser.rule_attribute_return attr = null;

        DRLParser.attributes_key_return attributes_key69 = null;

        DRLParser.rule_attribute_return rule_attribute71 = null;


        Object COLON70_tree=null;
        Object COMMA72_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rule_attribute=new RewriteRuleSubtreeStream(adaptor,"rule rule_attribute");
        RewriteRuleSubtreeStream stream_attributes_key=new RewriteRuleSubtreeStream(adaptor,"rule attributes_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:547:2: ( ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )* -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:547:4: ( attributes_key COLON )? rule_attribute ( ( COMMA )? attr= rule_attribute )*
            {
            // src/main/resources/org/drools/lang/DRL.g:547:4: ( attributes_key COLON )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {
                int LA27_1 = input.LA(2);

                if ( (LA27_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {
                    alt27=1;
                }
            }
            switch (alt27) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:547:6: attributes_key COLON
                    {
                    pushFollow(FOLLOW_attributes_key_in_rule_attributes1698);
                    attributes_key69=attributes_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attributes_key.add(attributes_key69.getTree());
                    COLON70=(Token)match(input,COLON,FOLLOW_COLON_in_rule_attributes1700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON70);

                    if ( state.backtracking==0 ) {
                      	helper.emit(COLON70, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_rule_attribute_in_rule_attributes1710);
            rule_attribute71=rule_attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rule_attribute.add(rule_attribute71.getTree());
            // src/main/resources/org/drools/lang/DRL.g:548:18: ( ( COMMA )? attr= rule_attribute )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==ID||LA29_0==COMMA) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:548:20: ( COMMA )? attr= rule_attribute
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:548:20: ( COMMA )?
            	    int alt28=2;
            	    int LA28_0 = input.LA(1);

            	    if ( (LA28_0==COMMA) ) {
            	        alt28=1;
            	    }
            	    switch (alt28) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:548:20: COMMA
            	            {
            	            COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_rule_attributes1714); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA72);


            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA72, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_rule_attribute_in_rule_attributes1721);
            	    attr=rule_attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rule_attribute.add(attr.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);



            // AST REWRITE
            // elements: attributes_key, rule_attribute
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 549:3: -> ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:549:6: ^( VT_RULE_ATTRIBUTES ( attributes_key )? ( rule_attribute )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_RULE_ATTRIBUTES, "VT_RULE_ATTRIBUTES"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:549:27: ( attributes_key )?
                if ( stream_attributes_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_attributes_key.nextTree());

                }
                stream_attributes_key.reset();
                if ( !(stream_rule_attribute.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rule_attribute.hasNext() ) {
                    adaptor.addChild(root_1, stream_rule_attribute.nextTree());

                }
                stream_rule_attribute.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_attributes"

    public static class rule_attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_attribute"
    // src/main/resources/org/drools/lang/DRL.g:552:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );
    public final DRLParser.rule_attribute_return rule_attribute() throws RecognitionException {
        DRLParser.rule_attribute_return retval = new DRLParser.rule_attribute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_return salience73 = null;

        DRLParser.no_loop_return no_loop74 = null;

        DRLParser.agenda_group_return agenda_group75 = null;

        DRLParser.timer_return timer76 = null;

        DRLParser.activation_group_return activation_group77 = null;

        DRLParser.auto_focus_return auto_focus78 = null;

        DRLParser.date_effective_return date_effective79 = null;

        DRLParser.date_expires_return date_expires80 = null;

        DRLParser.enabled_return enabled81 = null;

        DRLParser.ruleflow_group_return ruleflow_group82 = null;

        DRLParser.lock_on_active_return lock_on_active83 = null;

        DRLParser.dialect_return dialect84 = null;

        DRLParser.calendars_return calendars85 = null;



         boolean isFailed = true; helper.pushParaphrases(DroolsParaphraseTypes.RULE_ATTRIBUTE); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:555:2: ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars )
            int alt30=13;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:555:4: salience
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_salience_in_rule_attribute1760);
                    salience73=salience();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, salience73.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:556:4: no_loop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_no_loop_in_rule_attribute1766);
                    no_loop74=no_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_loop74.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:557:4: agenda_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_agenda_group_in_rule_attribute1771);
                    agenda_group75=agenda_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, agenda_group75.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:558:4: timer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_timer_in_rule_attribute1778);
                    timer76=timer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timer76.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:559:4: activation_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_activation_group_in_rule_attribute1785);
                    activation_group77=activation_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, activation_group77.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:560:4: auto_focus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_auto_focus_in_rule_attribute1791);
                    auto_focus78=auto_focus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, auto_focus78.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:561:4: date_effective
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_effective_in_rule_attribute1797);
                    date_effective79=date_effective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_effective79.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:562:4: date_expires
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_date_expires_in_rule_attribute1803);
                    date_expires80=date_expires();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, date_expires80.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:563:4: enabled
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enabled_in_rule_attribute1809);
                    enabled81=enabled();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enabled81.getTree());

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:564:4: ruleflow_group
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ruleflow_group_in_rule_attribute1815);
                    ruleflow_group82=ruleflow_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ruleflow_group82.getTree());

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:565:4: lock_on_active
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_on_active_in_rule_attribute1821);
                    lock_on_active83=lock_on_active();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_on_active83.getTree());

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:566:4: dialect
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_dialect_in_rule_attribute1826);
                    dialect84=dialect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dialect84.getTree());

                    }
                    break;
                case 13 :
                    // src/main/resources/org/drools/lang/DRL.g:567:6: calendars
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_calendars_in_rule_attribute1834);
                    calendars85=calendars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, calendars85.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases(); isFailed = false; if (!(retval.tree instanceof CommonErrorNode)) helper.emit(Location.LOCATION_RULE_HEADER); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailed) {
            		if (input.LA(2) == EOF && input.LA(1) == ID){
            			helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            			input.consume();
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "rule_attribute"

    public static class date_effective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective"
    // src/main/resources/org/drools/lang/DRL.g:577:1: date_effective : date_effective_key STRING ;
    public final DRLParser.date_effective_return date_effective() throws RecognitionException {
        DRLParser.date_effective_return retval = new DRLParser.date_effective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING87=null;
        DRLParser.date_effective_key_return date_effective_key86 = null;


        Object STRING87_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:578:2: ( date_effective_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:578:4: date_effective_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_effective_key_in_date_effective1848);
            date_effective_key86=date_effective_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_effective_key86.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING87=(Token)match(input,STRING,FOLLOW_STRING_in_date_effective1853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING87_tree = (Object)adaptor.create(STRING87);
            adaptor.addChild(root_0, STRING87_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING87, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective"

    public static class date_expires_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires"
    // src/main/resources/org/drools/lang/DRL.g:582:1: date_expires : date_expires_key STRING ;
    public final DRLParser.date_expires_return date_expires() throws RecognitionException {
        DRLParser.date_expires_return retval = new DRLParser.date_expires_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING89=null;
        DRLParser.date_expires_key_return date_expires_key88 = null;


        Object STRING89_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:583:2: ( date_expires_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:583:4: date_expires_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_date_expires_key_in_date_expires1867);
            date_expires_key88=date_expires_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(date_expires_key88.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING89=(Token)match(input,STRING,FOLLOW_STRING_in_date_expires1872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING89_tree = (Object)adaptor.create(STRING89);
            adaptor.addChild(root_0, STRING89_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING89, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires"

    public static class enabled_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled"
    // src/main/resources/org/drools/lang/DRL.g:587:1: enabled : enabled_key ( BOOL | paren_chunk ) ;
    public final DRLParser.enabled_return enabled() throws RecognitionException {
        DRLParser.enabled_return retval = new DRLParser.enabled_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL91=null;
        DRLParser.enabled_key_return enabled_key90 = null;

        DRLParser.paren_chunk_return paren_chunk92 = null;


        Object BOOL91_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:588:2: ( enabled_key ( BOOL | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:588:4: enabled_key ( BOOL | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enabled_key_in_enabled1887);
            enabled_key90=enabled_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(enabled_key90.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:589:6: ( BOOL | paren_chunk )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==BOOL) ) {
                alt31=1;
            }
            else if ( (LA31_0==LEFT_PAREN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:589:8: BOOL
                    {
                    BOOL91=(Token)match(input,BOOL,FOLLOW_BOOL_in_enabled1900); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL91_tree = (Object)adaptor.create(BOOL91);
                    adaptor.addChild(root_0, BOOL91_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL91, DroolsEditorType.BOOLEAN_CONST );	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:590:8: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_enabled1911);
                    paren_chunk92=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk92.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled"

    public static class salience_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience"
    // src/main/resources/org/drools/lang/DRL.g:594:1: salience : salience_key ( signed_decimal | paren_chunk ) ;
    public final DRLParser.salience_return salience() throws RecognitionException {
        DRLParser.salience_return retval = new DRLParser.salience_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.salience_key_return salience_key93 = null;

        DRLParser.signed_decimal_return signed_decimal94 = null;

        DRLParser.paren_chunk_return paren_chunk95 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:595:2: ( salience_key ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:595:4: salience_key ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_salience_key_in_salience1931);
            salience_key93=salience_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(salience_key93.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:596:3: ( signed_decimal | paren_chunk )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==DECIMAL||(LA32_0>=PLUS && LA32_0<=MINUS)) ) {
                alt32=1;
            }
            else if ( (LA32_0==LEFT_PAREN) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:596:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_salience1940);
                    signed_decimal94=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal94.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:597:5: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_salience1947);
                    paren_chunk95=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk95.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience"

    public static class no_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop"
    // src/main/resources/org/drools/lang/DRL.g:601:1: no_loop : no_loop_key ( BOOL )? ;
    public final DRLParser.no_loop_return no_loop() throws RecognitionException {
        DRLParser.no_loop_return retval = new DRLParser.no_loop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL97=null;
        DRLParser.no_loop_key_return no_loop_key96 = null;


        Object BOOL97_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:602:2: ( no_loop_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:602:4: no_loop_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_no_loop_key_in_no_loop1962);
            no_loop_key96=no_loop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(no_loop_key96.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:602:73: ( BOOL )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BOOL) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:602:73: BOOL
                    {
                    BOOL97=(Token)match(input,BOOL,FOLLOW_BOOL_in_no_loop1967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL97_tree = (Object)adaptor.create(BOOL97);
                    adaptor.addChild(root_0, BOOL97_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL97, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop"

    public static class auto_focus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus"
    // src/main/resources/org/drools/lang/DRL.g:606:1: auto_focus : auto_focus_key ( BOOL )? ;
    public final DRLParser.auto_focus_return auto_focus() throws RecognitionException {
        DRLParser.auto_focus_return retval = new DRLParser.auto_focus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL99=null;
        DRLParser.auto_focus_key_return auto_focus_key98 = null;


        Object BOOL99_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:607:2: ( auto_focus_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:607:4: auto_focus_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_auto_focus_key_in_auto_focus1982);
            auto_focus_key98=auto_focus_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(auto_focus_key98.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:607:76: ( BOOL )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BOOL) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:607:76: BOOL
                    {
                    BOOL99=(Token)match(input,BOOL,FOLLOW_BOOL_in_auto_focus1987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL99_tree = (Object)adaptor.create(BOOL99);
                    adaptor.addChild(root_0, BOOL99_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL99, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus"

    public static class activation_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group"
    // src/main/resources/org/drools/lang/DRL.g:611:1: activation_group : activation_group_key STRING ;
    public final DRLParser.activation_group_return activation_group() throws RecognitionException {
        DRLParser.activation_group_return retval = new DRLParser.activation_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING101=null;
        DRLParser.activation_group_key_return activation_group_key100 = null;


        Object STRING101_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:612:2: ( activation_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:612:4: activation_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_activation_group_key_in_activation_group2004);
            activation_group_key100=activation_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(activation_group_key100.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING101=(Token)match(input,STRING,FOLLOW_STRING_in_activation_group2009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING101_tree = (Object)adaptor.create(STRING101);
            adaptor.addChild(root_0, STRING101_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING101, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group"

    public static class ruleflow_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group"
    // src/main/resources/org/drools/lang/DRL.g:616:1: ruleflow_group : ruleflow_group_key STRING ;
    public final DRLParser.ruleflow_group_return ruleflow_group() throws RecognitionException {
        DRLParser.ruleflow_group_return retval = new DRLParser.ruleflow_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING103=null;
        DRLParser.ruleflow_group_key_return ruleflow_group_key102 = null;


        Object STRING103_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:617:2: ( ruleflow_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:617:4: ruleflow_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_ruleflow_group_key_in_ruleflow_group2023);
            ruleflow_group_key102=ruleflow_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(ruleflow_group_key102.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING103=(Token)match(input,STRING,FOLLOW_STRING_in_ruleflow_group2028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING103_tree = (Object)adaptor.create(STRING103);
            adaptor.addChild(root_0, STRING103_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING103, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group"

    public static class agenda_group_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group"
    // src/main/resources/org/drools/lang/DRL.g:621:1: agenda_group : agenda_group_key STRING ;
    public final DRLParser.agenda_group_return agenda_group() throws RecognitionException {
        DRLParser.agenda_group_return retval = new DRLParser.agenda_group_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING105=null;
        DRLParser.agenda_group_key_return agenda_group_key104 = null;


        Object STRING105_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:622:2: ( agenda_group_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:622:4: agenda_group_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_agenda_group_key_in_agenda_group2042);
            agenda_group_key104=agenda_group_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(agenda_group_key104.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING105=(Token)match(input,STRING,FOLLOW_STRING_in_agenda_group2047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING105_tree = (Object)adaptor.create(STRING105);
            adaptor.addChild(root_0, STRING105_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING105, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group"

    public static class timer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer"
    // src/main/resources/org/drools/lang/DRL.g:626:1: timer : ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) ;
    public final DRLParser.timer_return timer() throws RecognitionException {
        DRLParser.timer_return retval = new DRLParser.timer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.duration_key_return duration_key106 = null;

        DRLParser.timer_key_return timer_key107 = null;

        DRLParser.signed_decimal_return signed_decimal108 = null;

        DRLParser.paren_chunk_return paren_chunk109 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:627:2: ( ( duration_key | timer_key ) ( signed_decimal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:627:4: ( duration_key | timer_key ) ( signed_decimal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:627:4: ( duration_key | timer_key )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {
                int LA35_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                    alt35=1;
                }
                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }
            switch (alt35) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:627:5: duration_key
                    {
                    pushFollow(FOLLOW_duration_key_in_timer2062);
                    duration_key106=duration_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(duration_key106.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:627:19: timer_key
                    {
                    pushFollow(FOLLOW_timer_key_in_timer2065);
                    timer_key107=timer_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(timer_key107.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:628:3: ( signed_decimal | paren_chunk )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DECIMAL||(LA36_0>=PLUS && LA36_0<=MINUS)) ) {
                alt36=1;
            }
            else if ( (LA36_0==LEFT_PAREN) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:628:5: signed_decimal
                    {
                    pushFollow(FOLLOW_signed_decimal_in_timer2076);
                    signed_decimal108=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal108.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:629:9: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_timer2087);
                    paren_chunk109=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk109.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer"

    public static class calendars_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars"
    // src/main/resources/org/drools/lang/DRL.g:633:1: calendars : calendars_key string_list ;
    public final DRLParser.calendars_return calendars() throws RecognitionException {
        DRLParser.calendars_return retval = new DRLParser.calendars_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.calendars_key_return calendars_key110 = null;

        DRLParser.string_list_return string_list111 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:634:2: ( calendars_key string_list )
            // src/main/resources/org/drools/lang/DRL.g:634:4: calendars_key string_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_calendars_key_in_calendars2108);
            calendars_key110=calendars_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(calendars_key110.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            pushFollow(FOLLOW_string_list_in_calendars2113);
            string_list111=string_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_list111.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars"

    public static class dialect_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect"
    // src/main/resources/org/drools/lang/DRL.g:637:1: dialect : dialect_key STRING ;
    public final DRLParser.dialect_return dialect() throws RecognitionException {
        DRLParser.dialect_return retval = new DRLParser.dialect_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING113=null;
        DRLParser.dialect_key_return dialect_key112 = null;


        Object STRING113_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:638:2: ( dialect_key STRING )
            // src/main/resources/org/drools/lang/DRL.g:638:4: dialect_key STRING
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_dialect_key_in_dialect2124);
            dialect_key112=dialect_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(dialect_key112.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            STRING113=(Token)match(input,STRING,FOLLOW_STRING_in_dialect2129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING113_tree = (Object)adaptor.create(STRING113);
            adaptor.addChild(root_0, STRING113_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(STRING113, DroolsEditorType.STRING_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect"

    public static class lock_on_active_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active"
    // src/main/resources/org/drools/lang/DRL.g:642:1: lock_on_active : lock_on_active_key ( BOOL )? ;
    public final DRLParser.lock_on_active_return lock_on_active() throws RecognitionException {
        DRLParser.lock_on_active_return retval = new DRLParser.lock_on_active_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token BOOL115=null;
        DRLParser.lock_on_active_key_return lock_on_active_key114 = null;


        Object BOOL115_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:643:2: ( lock_on_active_key ( BOOL )? )
            // src/main/resources/org/drools/lang/DRL.g:643:4: lock_on_active_key ( BOOL )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lock_on_active_key_in_lock_on_active2147);
            lock_on_active_key114=lock_on_active_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(lock_on_active_key114.getTree(), root_0);
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_RULE_HEADER_KEYWORD);	
            }
            // src/main/resources/org/drools/lang/DRL.g:643:80: ( BOOL )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==BOOL) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:643:80: BOOL
                    {
                    BOOL115=(Token)match(input,BOOL,FOLLOW_BOOL_in_lock_on_active2152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL115_tree = (Object)adaptor.create(BOOL115);
                    adaptor.addChild(root_0, BOOL115_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(BOOL115, DroolsEditorType.BOOLEAN_CONST );	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active"

    public static class normal_lhs_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normal_lhs_block"
    // src/main/resources/org/drools/lang/DRL.g:650:1: normal_lhs_block : ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) ;
    public final DRLParser.normal_lhs_block_return normal_lhs_block() throws RecognitionException {
        DRLParser.normal_lhs_block_return retval = new DRLParser.normal_lhs_block_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_return lhs116 = null;


        RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs");
        try {
            // src/main/resources/org/drools/lang/DRL.g:651:2: ( ( lhs )* -> ^( VT_AND_IMPLICIT ( lhs )* ) )
            // src/main/resources/org/drools/lang/DRL.g:651:4: ( lhs )*
            {
            // src/main/resources/org/drools/lang/DRL.g:651:4: ( lhs )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==ID) ) {
                    int LA38_1 = input.LA(2);

                    if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) ) {
                        alt38=1;
                    }


                }
                else if ( (LA38_0==LEFT_PAREN) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:651:4: lhs
            	    {
            	    pushFollow(FOLLOW_lhs_in_normal_lhs_block2170);
            	    lhs116=lhs();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_lhs.add(lhs116.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);



            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 652:2: -> ^( VT_AND_IMPLICIT ( lhs )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:652:5: ^( VT_AND_IMPLICIT ( lhs )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_IMPLICIT, "VT_AND_IMPLICIT"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:652:23: ( lhs )*
                while ( stream_lhs.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs.nextTree());

                }
                stream_lhs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "normal_lhs_block"

    public static class lhs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs"
    // src/main/resources/org/drools/lang/DRL.g:655:1: lhs : lhs_or ;
    public final DRLParser.lhs_return lhs() throws RecognitionException {
        DRLParser.lhs_return retval = new DRLParser.lhs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.lhs_or_return lhs_or117 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:655:5: ( lhs_or )
            // src/main/resources/org/drools/lang/DRL.g:655:7: lhs_or
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_or_in_lhs2191);
            lhs_or117=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or117.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs"

    public static class lhs_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_or"
    // src/main/resources/org/drools/lang/DRL.g:658:1: lhs_or : ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* );
    public final DRLParser.lhs_or_return lhs_or() throws RecognitionException {
        DRLParser.lhs_or_return retval = new DRLParser.lhs_or_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN118=null;
        Token RIGHT_PAREN120=null;
        DRLParser.or_key_return or = null;

        DRLParser.or_key_return value = null;

        DRLParser.lhs_and_return lhs_and119 = null;

        DRLParser.lhs_and_return lhs_and121 = null;

        DRLParser.lhs_and_return lhs_and122 = null;


        Object LEFT_PAREN118_tree=null;
        Object RIGHT_PAREN120_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_lhs_and=new RewriteRuleSubtreeStream(adaptor,"rule lhs_and");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:661:3: ( ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN ) | ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )* )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==LEFT_PAREN) ) {
                int LA41_1 = input.LA(2);

                if ( (synpred1_DRL()) ) {
                    alt41=1;
                }
                else if ( (true) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA41_0==ID) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:661:5: ( LEFT_PAREN or_key )=> LEFT_PAREN or= or_key ( lhs_and )+ RIGHT_PAREN
                    {
                    LEFT_PAREN118=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_or2215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN118);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN118, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_key_in_lhs_or2225);
                    or=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:665:4: ( lhs_and )+
                    int cnt39=0;
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==ID||LA39_0==LEFT_PAREN) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:665:4: lhs_and
                    	    {
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2233);
                    	    lhs_and119=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and119.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt39 >= 1 ) break loop39;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(39, input);
                                throw eee;
                        }
                        cnt39++;
                    } while (true);

                    RIGHT_PAREN120=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_or2239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN120);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN120, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: RIGHT_PAREN, lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 667:3: -> ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:667:6: ^( VT_OR_PREFIX[$or.start] ( lhs_and )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_PREFIX, (or!=null?((Token)or.start):null)), root_1);

                        if ( !(stream_lhs_and.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_and.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_and.nextTree());

                        }
                        stream_lhs_and.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:668:4: ( lhs_and -> lhs_and ) ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:668:4: ( lhs_and -> lhs_and )
                    // src/main/resources/org/drools/lang/DRL.g:668:5: lhs_and
                    {
                    pushFollow(FOLLOW_lhs_and_in_lhs_or2262);
                    lhs_and121=lhs_and();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and121.getTree());


                    // AST REWRITE
                    // elements: lhs_and
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 668:13: -> lhs_and
                    {
                        adaptor.addChild(root_0, stream_lhs_and.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:669:3: ( ( or_key )=> (value= or_key ) lhs_and -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and ) )*
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ID) ) {
                            int LA40_1 = input.LA(2);

                            if ( ((synpred2_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) ) {
                                alt40=1;
                            }


                        }


                        switch (alt40) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:669:5: ( or_key )=> (value= or_key ) lhs_and
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:669:16: (value= or_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:669:17: value= or_key
                    	    {
                    	    pushFollow(FOLLOW_or_key_in_lhs_or2282);
                    	    value=or_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      orToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_and_in_lhs_or2294);
                    	    lhs_and122=lhs_and();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_and.add(lhs_and122.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_or, lhs_and
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 672:3: -> ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:672:6: ^( VT_OR_INFIX[orToken] $lhs_or lhs_and )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_OR_INFIX, orToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_and.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_or"

    public static class lhs_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_and"
    // src/main/resources/org/drools/lang/DRL.g:675:1: lhs_and : ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* );
    public final DRLParser.lhs_and_return lhs_and() throws RecognitionException {
        DRLParser.lhs_and_return retval = new DRLParser.lhs_and_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN123=null;
        Token RIGHT_PAREN125=null;
        DRLParser.and_key_return and = null;

        DRLParser.and_key_return value = null;

        DRLParser.lhs_unary_return lhs_unary124 = null;

        DRLParser.lhs_unary_return lhs_unary126 = null;

        DRLParser.lhs_unary_return lhs_unary127 = null;


        Object LEFT_PAREN123_tree=null;
        Object RIGHT_PAREN125_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_unary=new RewriteRuleSubtreeStream(adaptor,"rule lhs_unary");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");

        	Token andToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:678:3: ( ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN ) | ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )* )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==LEFT_PAREN) ) {
                int LA44_1 = input.LA(2);

                if ( (synpred3_DRL()) ) {
                    alt44=1;
                }
                else if ( (true) ) {
                    alt44=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA44_0==ID) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:678:5: ( LEFT_PAREN and_key )=> LEFT_PAREN and= and_key ( lhs_unary )+ RIGHT_PAREN
                    {
                    LEFT_PAREN123=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_and2335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN123);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN123, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_and_key_in_lhs_and2345);
                    and=and_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_and_key.add(and.getTree());
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:682:4: ( lhs_unary )+
                    int cnt42=0;
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==ID||LA42_0==LEFT_PAREN) ) {
                            alt42=1;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:682:4: lhs_unary
                    	    {
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2353);
                    	    lhs_unary124=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary124.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt42 >= 1 ) break loop42;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(42, input);
                                throw eee;
                        }
                        cnt42++;
                    } while (true);

                    RIGHT_PAREN125=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_and2359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN125);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN125, DroolsEditorType.SYMBOL);	
                    }


                    // AST REWRITE
                    // elements: lhs_unary, RIGHT_PAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 684:3: -> ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:684:6: ^( VT_AND_PREFIX[$and.start] ( lhs_unary )+ RIGHT_PAREN )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_PREFIX, (and!=null?((Token)and.start):null)), root_1);

                        if ( !(stream_lhs_unary.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lhs_unary.hasNext() ) {
                            adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                        }
                        stream_lhs_unary.reset();
                        adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:685:4: ( lhs_unary -> lhs_unary ) ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    {
                    // src/main/resources/org/drools/lang/DRL.g:685:4: ( lhs_unary -> lhs_unary )
                    // src/main/resources/org/drools/lang/DRL.g:685:5: lhs_unary
                    {
                    pushFollow(FOLLOW_lhs_unary_in_lhs_and2383);
                    lhs_unary126=lhs_unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary126.getTree());


                    // AST REWRITE
                    // elements: lhs_unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 685:15: -> lhs_unary
                    {
                        adaptor.addChild(root_0, stream_lhs_unary.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // src/main/resources/org/drools/lang/DRL.g:686:3: ( ( and_key )=> (value= and_key ) lhs_unary -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary ) )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==ID) ) {
                            int LA43_2 = input.LA(2);

                            if ( ((synpred4_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.AND))))) ) {
                                alt43=1;
                            }


                        }


                        switch (alt43) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:686:5: ( and_key )=> (value= and_key ) lhs_unary
                    	    {
                    	    // src/main/resources/org/drools/lang/DRL.g:686:17: (value= and_key )
                    	    // src/main/resources/org/drools/lang/DRL.g:686:18: value= and_key
                    	    {
                    	    pushFollow(FOLLOW_and_key_in_lhs_and2403);
                    	    value=and_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_and_key.add(value.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      andToken = (value!=null?((Token)value.start):null);
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_AND_OR);	
                    	    }
                    	    pushFollow(FOLLOW_lhs_unary_in_lhs_and2415);
                    	    lhs_unary127=lhs_unary();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lhs_unary.add(lhs_unary127.getTree());


                    	    // AST REWRITE
                    	    // elements: lhs_and, lhs_unary
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (Object)adaptor.nil();
                    	    // 689:3: -> ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	    {
                    	        // src/main/resources/org/drools/lang/DRL.g:689:6: ^( VT_AND_INFIX[andToken] $lhs_and lhs_unary )
                    	        {
                    	        Object root_1 = (Object)adaptor.nil();
                    	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_AND_INFIX, andToken), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());
                    	        adaptor.addChild(root_1, stream_lhs_unary.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_and"

    public static class lhs_unary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_unary"
    // src/main/resources/org/drools/lang/DRL.g:692:1: lhs_unary : ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) ;
    public final DRLParser.lhs_unary_return lhs_unary() throws RecognitionException {
        DRLParser.lhs_unary_return retval = new DRLParser.lhs_unary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN134=null;
        Token RIGHT_PAREN136=null;
        DRLParser.lhs_exist_return lhs_exist128 = null;

        DRLParser.lhs_not_binding_return lhs_not_binding129 = null;

        DRLParser.lhs_not_return lhs_not130 = null;

        DRLParser.lhs_eval_return lhs_eval131 = null;

        DRLParser.lhs_forall_return lhs_forall132 = null;

        DRLParser.lhs_for_return lhs_for133 = null;

        DRLParser.lhs_or_return lhs_or135 = null;

        DRLParser.pattern_source_return pattern_source137 = null;


        Object LEFT_PAREN134_tree=null;
        Object RIGHT_PAREN136_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:693:2: ( ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source ) )
            // src/main/resources/org/drools/lang/DRL.g:693:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:693:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )
            int alt45=8;
            alt45 = dfa45.predict(input);
            switch (alt45) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:693:6: lhs_exist
                    {
                    pushFollow(FOLLOW_lhs_exist_in_lhs_unary2446);
                    lhs_exist128=lhs_exist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_exist128.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:694:4: {...}? => lhs_not_binding
                    {
                    if ( !((helper.validateNotWithBinding())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "lhs_unary", "helper.validateNotWithBinding()");
                    }
                    pushFollow(FOLLOW_lhs_not_binding_in_lhs_unary2454);
                    lhs_not_binding129=lhs_not_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not_binding129.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:695:5: lhs_not
                    {
                    pushFollow(FOLLOW_lhs_not_in_lhs_unary2460);
                    lhs_not130=lhs_not();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_not130.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:696:5: lhs_eval
                    {
                    pushFollow(FOLLOW_lhs_eval_in_lhs_unary2466);
                    lhs_eval131=lhs_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_eval131.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:697:5: lhs_forall
                    {
                    pushFollow(FOLLOW_lhs_forall_in_lhs_unary2472);
                    lhs_forall132=lhs_forall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_forall132.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:698:6: lhs_for
                    {
                    pushFollow(FOLLOW_lhs_for_in_lhs_unary2479);
                    lhs_for133=lhs_for();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_for133.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:699:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN134=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_unary2485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN134, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_unary2496);
                    lhs_or135=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_or135.getTree());
                    RIGHT_PAREN136=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_unary2502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN136_tree = (Object)adaptor.create(RIGHT_PAREN136);
                    adaptor.addChild(root_0, RIGHT_PAREN136_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN136, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:702:5: pattern_source
                    {
                    pushFollow(FOLLOW_pattern_source_in_lhs_unary2510);
                    pattern_source137=pattern_source();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_source137.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_unary"

    public static class lhs_exist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_exist"
    // src/main/resources/org/drools/lang/DRL.g:706:1: lhs_exist : exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_exist_return lhs_exist() throws RecognitionException {
        DRLParser.lhs_exist_return retval = new DRLParser.lhs_exist_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN140=null;
        Token RIGHT_PAREN142=null;
        DRLParser.exists_key_return exists_key138 = null;

        DRLParser.lhs_or_return lhs_or139 = null;

        DRLParser.lhs_or_return lhs_or141 = null;

        DRLParser.lhs_pattern_return lhs_pattern143 = null;


        Object LEFT_PAREN140_tree=null;
        Object RIGHT_PAREN142_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_exists_key=new RewriteRuleSubtreeStream(adaptor,"rule exists_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:707:2: ( exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:707:4: exists_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_exists_key_in_lhs_exist2525);
            exists_key138=exists_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exists_key.add(exists_key138.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_EXISTS);	
            }
            // src/main/resources/org/drools/lang/DRL.g:709:10: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt46=3;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==LEFT_PAREN) ) {
                int LA46_1 = input.LA(2);

                if ( (synpred5_DRL()) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA46_0==ID) ) {
                int LA46_2 = input.LA(2);

                if ( (((synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))))||synpred5_DRL()||((synpred5_DRL()&&(helper.validateNotWithBinding()))&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))))||(synpred5_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))))) ) {
                    alt46=1;
                }
                else if ( (true) ) {
                    alt46=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:709:12: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2552);
                    lhs_or139=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or139.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:710:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN140=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_exist2559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN140);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN140, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_exist2567);
                    lhs_or141=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or141.getTree());
                    RIGHT_PAREN142=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_exist2574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN142);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN142, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:713:12: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_exist2589);
                    lhs_pattern143=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern143.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lhs_pattern, exists_key, lhs_or, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 715:10: -> ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:715:13: ^( exists_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exists_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:715:26: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:715:34: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:715:47: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_exist"

    public static class lhs_not_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not_binding"
    // src/main/resources/org/drools/lang/DRL.g:718:1: lhs_not_binding : not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) ;
    public final DRLParser.lhs_not_binding_return lhs_not_binding() throws RecognitionException {
        DRLParser.lhs_not_binding_return retval = new DRLParser.lhs_not_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.not_key_return not_key144 = null;

        DRLParser.fact_binding_return fact_binding145 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:719:2: ( not_key fact_binding -> ^( not_key ^( VT_PATTERN fact_binding ) ) )
            // src/main/resources/org/drools/lang/DRL.g:719:4: not_key fact_binding
            {
            pushFollow(FOLLOW_not_key_in_lhs_not_binding2635);
            not_key144=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key144.getTree());
            pushFollow(FOLLOW_fact_binding_in_lhs_not_binding2637);
            fact_binding145=fact_binding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding145.getTree());


            // AST REWRITE
            // elements: fact_binding, not_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 720:2: -> ^( not_key ^( VT_PATTERN fact_binding ) )
            {
                // src/main/resources/org/drools/lang/DRL.g:720:5: ^( not_key ^( VT_PATTERN fact_binding ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:720:15: ^( VT_PATTERN fact_binding )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_2);

                adaptor.addChild(root_2, stream_fact_binding.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not_binding"

    public static class lhs_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_not"
    // src/main/resources/org/drools/lang/DRL.g:723:1: lhs_not : not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.lhs_not_return lhs_not() throws RecognitionException {
        DRLParser.lhs_not_return retval = new DRLParser.lhs_not_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN148=null;
        Token RIGHT_PAREN150=null;
        DRLParser.not_key_return not_key146 = null;

        DRLParser.lhs_or_return lhs_or147 = null;

        DRLParser.lhs_or_return lhs_or149 = null;

        DRLParser.lhs_pattern_return lhs_pattern151 = null;


        Object LEFT_PAREN148_tree=null;
        Object RIGHT_PAREN150_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_lhs_pattern=new RewriteRuleSubtreeStream(adaptor,"rule lhs_pattern");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        try {
            // src/main/resources/org/drools/lang/DRL.g:723:9: ( not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern ) -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:723:11: not_key ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            {
            pushFollow(FOLLOW_not_key_in_lhs_not2660);
            not_key146=not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key146.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION_NOT);	
            }
            // src/main/resources/org/drools/lang/DRL.g:725:3: ( ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or | LEFT_PAREN lhs_or RIGHT_PAREN | lhs_pattern )
            int alt47=3;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==LEFT_PAREN) ) {
                int LA47_1 = input.LA(2);

                if ( (synpred6_DRL()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA47_0==ID) ) {
                int LA47_2 = input.LA(2);

                if ( (synpred6_DRL()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:725:5: ( LEFT_PAREN ( or_key | and_key ) )=> lhs_or
                    {
                    if ( state.backtracking==0 ) {
                      	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2682);
                    lhs_or147=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or147.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:726:5: LEFT_PAREN lhs_or RIGHT_PAREN
                    {
                    LEFT_PAREN148=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_not2689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN148);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN148, DroolsEditorType.SYMBOL); helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION );	
                    }
                    pushFollow(FOLLOW_lhs_or_in_lhs_not2698);
                    lhs_or149=lhs_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or149.getTree());
                    RIGHT_PAREN150=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_not2704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN150);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN150, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:729:6: lhs_pattern
                    {
                    pushFollow(FOLLOW_lhs_pattern_in_lhs_not2714);
                    lhs_pattern151=lhs_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lhs_pattern.add(lhs_pattern151.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: RIGHT_PAREN, lhs_or, not_key, lhs_pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 730:10: -> ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:730:13: ^( not_key ( lhs_or )? ( lhs_pattern )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_not_key.nextNode(), root_1);

                // src/main/resources/org/drools/lang/DRL.g:730:23: ( lhs_or )?
                if ( stream_lhs_or.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_or.nextTree());

                }
                stream_lhs_or.reset();
                // src/main/resources/org/drools/lang/DRL.g:730:31: ( lhs_pattern )?
                if ( stream_lhs_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_lhs_pattern.nextTree());

                }
                stream_lhs_pattern.reset();
                // src/main/resources/org/drools/lang/DRL.g:730:44: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_not"

    public static class lhs_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_eval"
    // src/main/resources/org/drools/lang/DRL.g:733:1: lhs_eval : ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) ;
    public final DRLParser.lhs_eval_return lhs_eval() throws RecognitionException {
        DRLParser.lhs_eval_return retval = new DRLParser.lhs_eval_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.eval_key_return ev = null;

        DRLParser.paren_chunk_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_eval_key=new RewriteRuleSubtreeStream(adaptor,"rule eval_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:734:2: (ev= eval_key pc= paren_chunk -> ^( eval_key paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:734:4: ev= eval_key pc= paren_chunk
            {
            pushFollow(FOLLOW_eval_key_in_lhs_eval2753);
            ev=eval_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eval_key.add(ev.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_EVAL);	
            }
            pushFollow(FOLLOW_paren_chunk_in_lhs_eval2762);
            pc=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(pc.getTree());
            if ( state.backtracking==0 ) {
              	if (((DroolsTree) (pc!=null?((Object)pc.tree):null)).getText() != null){
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	            		
              		}
              	
            }
            if ( state.backtracking==0 ) {
              	String body = helper.safeSubstring( (pc!=null?input.toString(pc.start,pc.stop):null), 1, (pc!=null?input.toString(pc.start,pc.stop):null).length()-1 );
              		helper.checkTrailingSemicolon( body, (ev!=null?((Token)ev.start):null) );	
            }


            // AST REWRITE
            // elements: eval_key, paren_chunk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 743:3: -> ^( eval_key paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:743:6: ^( eval_key paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_eval_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_eval"

    public static class lhs_forall_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_forall"
    // src/main/resources/org/drools/lang/DRL.g:746:1: lhs_forall : forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) ;
    public final DRLParser.lhs_forall_return lhs_forall() throws RecognitionException {
        DRLParser.lhs_forall_return retval = new DRLParser.lhs_forall_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN153=null;
        Token RIGHT_PAREN155=null;
        DRLParser.forall_key_return forall_key152 = null;

        DRLParser.pattern_source_return pattern_source154 = null;


        Object LEFT_PAREN153_tree=null;
        Object RIGHT_PAREN155_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:747:2: ( forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN -> ^( forall_key ( pattern_source )+ RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:747:4: forall_key LEFT_PAREN ( pattern_source )+ RIGHT_PAREN
            {
            pushFollow(FOLLOW_forall_key_in_lhs_forall2789);
            forall_key152=forall_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forall_key.add(forall_key152.getTree());
            LEFT_PAREN153=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_forall2794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN153);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN153, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:749:4: ( pattern_source )+
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==ID) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:749:4: pattern_source
            	    {
            	    pushFollow(FOLLOW_pattern_source_in_lhs_forall2802);
            	    pattern_source154=pattern_source();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source154.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);

            RIGHT_PAREN155=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_forall2808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN155);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN155, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, pattern_source, forall_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 751:3: -> ^( forall_key ( pattern_source )+ RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:751:6: ^( forall_key ( pattern_source )+ RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_forall_key.nextNode(), root_1);

                if ( !(stream_pattern_source.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pattern_source.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern_source.nextTree());

                }
                stream_pattern_source.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_forall"

    public static class lhs_for_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_for"
    // src/main/resources/org/drools/lang/DRL.g:754:1: lhs_for : for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN -> ^( VT_FOR_CE lhs_or for_functions ( constraints )? ) ;
    public final DRLParser.lhs_for_return lhs_for() throws RecognitionException {
        DRLParser.lhs_for_return retval = new DRLParser.lhs_for_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN157=null;
        Token SEMICOLON159=null;
        Token SEMICOLON161=null;
        Token RIGHT_PAREN163=null;
        DRLParser.for_key_return for_key156 = null;

        DRLParser.lhs_or_return lhs_or158 = null;

        DRLParser.for_functions_return for_functions160 = null;

        DRLParser.constraints_return constraints162 = null;


        Object LEFT_PAREN157_tree=null;
        Object SEMICOLON159_tree=null;
        Object SEMICOLON161_tree=null;
        Object RIGHT_PAREN163_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        RewriteRuleSubtreeStream stream_for_functions=new RewriteRuleSubtreeStream(adaptor,"rule for_functions");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:755:2: ( for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN -> ^( VT_FOR_CE lhs_or for_functions ( constraints )? ) )
            // src/main/resources/org/drools/lang/DRL.g:755:4: for_key LEFT_PAREN lhs_or SEMICOLON for_functions ( SEMICOLON constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_for_key_in_lhs_for2834);
            for_key156=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key156.getTree());
            LEFT_PAREN157=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_lhs_for2839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN157);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN157, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_lhs_for2847);
            lhs_or158=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or158.getTree());
            SEMICOLON159=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON159);

            pushFollow(FOLLOW_for_functions_in_lhs_for2854);
            for_functions160=for_functions();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_functions.add(for_functions160.getTree());
            // src/main/resources/org/drools/lang/DRL.g:759:4: ( SEMICOLON constraints )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SEMICOLON) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:759:5: SEMICOLON constraints
                    {
                    SEMICOLON161=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_lhs_for2860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON161);

                    pushFollow(FOLLOW_constraints_in_lhs_for2862);
                    constraints162=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints162.getTree());

                    }
                    break;

            }

            RIGHT_PAREN163=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_lhs_for2868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN163);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN163, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: for_functions, constraints, lhs_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 761:3: -> ^( VT_FOR_CE lhs_or for_functions ( constraints )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:761:6: ^( VT_FOR_CE lhs_or for_functions ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FOR_CE, "VT_FOR_CE"), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                adaptor.addChild(root_1, stream_for_functions.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:761:39: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_for"

    public static class for_functions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_functions"
    // src/main/resources/org/drools/lang/DRL.g:764:1: for_functions : for_function ( COMMA for_function )* -> ^( VT_FOR_FUNCTIONS ( for_function )+ ) ;
    public final DRLParser.for_functions_return for_functions() throws RecognitionException {
        DRLParser.for_functions_return retval = new DRLParser.for_functions_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA165=null;
        DRLParser.for_function_return for_function164 = null;

        DRLParser.for_function_return for_function166 = null;


        Object COMMA165_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_for_function=new RewriteRuleSubtreeStream(adaptor,"rule for_function");
        try {
            // src/main/resources/org/drools/lang/DRL.g:765:2: ( for_function ( COMMA for_function )* -> ^( VT_FOR_FUNCTIONS ( for_function )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:765:4: for_function ( COMMA for_function )*
            {
            pushFollow(FOLLOW_for_function_in_for_functions2897);
            for_function164=for_function();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_function.add(for_function164.getTree());
            // src/main/resources/org/drools/lang/DRL.g:765:17: ( COMMA for_function )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:765:19: COMMA for_function
            	    {
            	    COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_for_functions2901); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA165);

            	    pushFollow(FOLLOW_for_function_in_for_functions2903);
            	    for_function166=for_function();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_for_function.add(for_function166.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: for_function
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 766:3: -> ^( VT_FOR_FUNCTIONS ( for_function )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:766:6: ^( VT_FOR_FUNCTIONS ( for_function )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FOR_FUNCTIONS, "VT_FOR_FUNCTIONS"), root_1);

                if ( !(stream_for_function.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_for_function.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_function.nextTree());

                }
                stream_for_function.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_functions"

    public static class for_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_function"
    // src/main/resources/org/drools/lang/DRL.g:769:1: for_function : label ID arguments_as_string -> ^( ID label arguments_as_string ) ;
    public final DRLParser.for_function_return for_function() throws RecognitionException {
        DRLParser.for_function_return retval = new DRLParser.for_function_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID168=null;
        DRLParser.label_return label167 = null;

        DRLParser.arguments_as_string_return arguments_as_string169 = null;


        Object ID168_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_arguments_as_string=new RewriteRuleSubtreeStream(adaptor,"rule arguments_as_string");
        try {
            // src/main/resources/org/drools/lang/DRL.g:770:2: ( label ID arguments_as_string -> ^( ID label arguments_as_string ) )
            // src/main/resources/org/drools/lang/DRL.g:770:5: label ID arguments_as_string
            {
            pushFollow(FOLLOW_label_in_for_function2932);
            label167=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label.add(label167.getTree());
            ID168=(Token)match(input,ID,FOLLOW_ID_in_for_function2934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID168);

            pushFollow(FOLLOW_arguments_as_string_in_for_function2936);
            arguments_as_string169=arguments_as_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments_as_string.add(arguments_as_string169.getTree());


            // AST REWRITE
            // elements: arguments_as_string, label, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 771:2: -> ^( ID label arguments_as_string )
            {
                // src/main/resources/org/drools/lang/DRL.g:771:5: ^( ID label arguments_as_string )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ID.nextNode(), root_1);

                adaptor.addChild(root_1, stream_label.nextTree());
                adaptor.addChild(root_1, stream_arguments_as_string.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_function"

    public static class arguments_as_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments_as_string"
    // src/main/resources/org/drools/lang/DRL.g:774:1: arguments_as_string options {backtrack=true; memoize=true; } : LEFT_PAREN ( expression_as_string ( COMMA expression_as_string )* )? RIGHT_PAREN -> ^( VT_ARGUMENTS ( expression_as_string )* ) ;
    public final DRLParser.arguments_as_string_return arguments_as_string() throws RecognitionException {
        DRLParser.arguments_as_string_return retval = new DRLParser.arguments_as_string_return();
        retval.start = input.LT(1);
        int arguments_as_string_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN170=null;
        Token COMMA172=null;
        Token RIGHT_PAREN174=null;
        DRLParser.expression_as_string_return expression_as_string171 = null;

        DRLParser.expression_as_string_return expression_as_string173 = null;


        Object LEFT_PAREN170_tree=null;
        Object COMMA172_tree=null;
        Object RIGHT_PAREN174_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression_as_string=new RewriteRuleSubtreeStream(adaptor,"rule expression_as_string");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:776:3: ( LEFT_PAREN ( expression_as_string ( COMMA expression_as_string )* )? RIGHT_PAREN -> ^( VT_ARGUMENTS ( expression_as_string )* ) )
            // src/main/resources/org/drools/lang/DRL.g:776:5: LEFT_PAREN ( expression_as_string ( COMMA expression_as_string )* )? RIGHT_PAREN
            {
            LEFT_PAREN170=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments_as_string2976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN170);

            // src/main/resources/org/drools/lang/DRL.g:776:16: ( expression_as_string ( COMMA expression_as_string )* )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ID||LA52_0==STRING||(LA52_0>=BOOL && LA52_0<=LEFT_PAREN)||LA52_0==DECIMAL||LA52_0==LESS||LA52_0==LEFT_SQUARE||(LA52_0>=NULL && LA52_0<=FLOAT)||(LA52_0>=INCR && LA52_0<=NEGATION)) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:776:17: expression_as_string ( COMMA expression_as_string )*
                    {
                    pushFollow(FOLLOW_expression_as_string_in_arguments_as_string2979);
                    expression_as_string171=expression_as_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_as_string.add(expression_as_string171.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:776:38: ( COMMA expression_as_string )*
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( (LA51_0==COMMA) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:776:39: COMMA expression_as_string
                    	    {
                    	    COMMA172=(Token)match(input,COMMA,FOLLOW_COMMA_in_arguments_as_string2982); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA172);

                    	    pushFollow(FOLLOW_expression_as_string_in_arguments_as_string2984);
                    	    expression_as_string173=expression_as_string();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression_as_string.add(expression_as_string173.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop51;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_PAREN174=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments_as_string2990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN174);



            // AST REWRITE
            // elements: expression_as_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 777:3: -> ^( VT_ARGUMENTS ( expression_as_string )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:777:6: ^( VT_ARGUMENTS ( expression_as_string )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ARGUMENTS, "VT_ARGUMENTS"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:777:21: ( expression_as_string )*
                while ( stream_expression_as_string.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression_as_string.nextTree());

                }
                stream_expression_as_string.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, arguments_as_string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments_as_string"

    public static class expression_as_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_as_string"
    // src/main/resources/org/drools/lang/DRL.g:780:1: expression_as_string : ex= expression -> VT_EXPRESSION[$ex.start, $ex.text] ;
    public final DRLParser.expression_as_string_return expression_as_string() throws RecognitionException {
        DRLParser.expression_as_string_return retval = new DRLParser.expression_as_string_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.expression_return ex = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // src/main/resources/org/drools/lang/DRL.g:781:3: (ex= expression -> VT_EXPRESSION[$ex.start, $ex.text] )
            // src/main/resources/org/drools/lang/DRL.g:781:5: ex= expression
            {
            pushFollow(FOLLOW_expression_in_expression_as_string3018);
            ex=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(ex.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 782:3: -> VT_EXPRESSION[$ex.start, $ex.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_EXPRESSION, (ex!=null?((Token)ex.start):null), (ex!=null?input.toString(ex.start,ex.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression_as_string"

    public static class pattern_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_source"
    // src/main/resources/org/drools/lang/DRL.g:785:1: pattern_source : lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? ;
    public final DRLParser.pattern_source_return pattern_source() throws RecognitionException {
        DRLParser.pattern_source_return retval = new DRLParser.pattern_source_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FROM177=null;
        DRLParser.lhs_pattern_return lhs_pattern175 = null;

        DRLParser.over_clause_return over_clause176 = null;

        DRLParser.accumulate_statement_return accumulate_statement178 = null;

        DRLParser.collect_statement_return collect_statement179 = null;

        DRLParser.entrypoint_statement_return entrypoint_statement180 = null;

        DRLParser.from_source_return from_source181 = null;


        Object FROM177_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:788:2: ( lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )? )
            // src/main/resources/org/drools/lang/DRL.g:788:4: lhs_pattern ( over_clause )? ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lhs_pattern_in_pattern_source3049);
            lhs_pattern175=lhs_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs_pattern175.getTree());
            // src/main/resources/org/drools/lang/DRL.g:789:3: ( over_clause )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==OVER) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:789:3: over_clause
                    {
                    pushFollow(FOLLOW_over_clause_in_pattern_source3053);
                    over_clause176=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause176.getTree());

                    }
                    break;

            }

            // src/main/resources/org/drools/lang/DRL.g:790:3: ( FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source ) )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==FROM) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:791:4: FROM ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    {
                    FROM177=(Token)match(input,FROM,FOLLOW_FROM_in_pattern_source3063); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FROM177_tree = (Object)adaptor.create(FROM177);
                    root_0 = (Object)adaptor.becomeRoot(FROM177_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FROM177, DroolsEditorType.KEYWORD);
                      			helper.emit(Location.LOCATION_LHS_FROM);	
                    }
                    // src/main/resources/org/drools/lang/DRL.g:794:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )
                    int alt54=4;
                    alt54 = dfa54.predict(input);
                    switch (alt54) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:794:14: accumulate_statement
                            {
                            pushFollow(FOLLOW_accumulate_statement_in_pattern_source3083);
                            accumulate_statement178=accumulate_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_statement178.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:795:15: collect_statement
                            {
                            pushFollow(FOLLOW_collect_statement_in_pattern_source3099);
                            collect_statement179=collect_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collect_statement179.getTree());

                            }
                            break;
                        case 3 :
                            // src/main/resources/org/drools/lang/DRL.g:796:15: entrypoint_statement
                            {
                            pushFollow(FOLLOW_entrypoint_statement_in_pattern_source3116);
                            entrypoint_statement180=entrypoint_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, entrypoint_statement180.getTree());

                            }
                            break;
                        case 4 :
                            // src/main/resources/org/drools/lang/DRL.g:797:15: from_source
                            {
                            pushFollow(FOLLOW_from_source_in_pattern_source3132);
                            from_source181=from_source();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_source181.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ACCUMULATE) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_ACCUMULATE);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == COLLECT) {
            			helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            			helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_FROM_COLLECT);
            	}

        }
        return retval;
    }
    // $ANTLR end "pattern_source"

    public static class over_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_clause"
    // src/main/resources/org/drools/lang/DRL.g:815:1: over_clause : OVER over_elements ( COMMA over_elements )* ;
    public final DRLParser.over_clause_return over_clause() throws RecognitionException {
        DRLParser.over_clause_return retval = new DRLParser.over_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OVER182=null;
        Token COMMA184=null;
        DRLParser.over_elements_return over_elements183 = null;

        DRLParser.over_elements_return over_elements185 = null;


        Object OVER182_tree=null;
        Object COMMA184_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:816:2: ( OVER over_elements ( COMMA over_elements )* )
            // src/main/resources/org/drools/lang/DRL.g:816:4: OVER over_elements ( COMMA over_elements )*
            {
            root_0 = (Object)adaptor.nil();

            OVER182=(Token)match(input,OVER,FOLLOW_OVER_in_over_clause3164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OVER182_tree = (Object)adaptor.create(OVER182);
            root_0 = (Object)adaptor.becomeRoot(OVER182_tree, root_0);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(OVER182, DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_over_elements_in_over_clause3169);
            over_elements183=over_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements183.getTree());
            // src/main/resources/org/drools/lang/DRL.g:817:4: ( COMMA over_elements )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    int LA56_2 = input.LA(2);

                    if ( (LA56_2==ID) ) {
                        int LA56_3 = input.LA(3);

                        if ( (LA56_3==COLON) ) {
                            alt56=1;
                        }


                    }


                }


                switch (alt56) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:817:5: COMMA over_elements
            	    {
            	    COMMA184=(Token)match(input,COMMA,FOLLOW_COMMA_in_over_clause3176); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA184, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_over_elements_in_over_clause3181);
            	    over_elements185=over_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_elements185.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_clause"

    public static class over_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "over_elements"
    // src/main/resources/org/drools/lang/DRL.g:820:1: over_elements : id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) ;
    public final DRLParser.over_elements_return over_elements() throws RecognitionException {
        DRLParser.over_elements_return retval = new DRLParser.over_elements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token id2=null;
        Token t=null;
        Token COLON186=null;
        Token LEFT_PAREN187=null;
        Token RIGHT_PAREN188=null;

        Object id1_tree=null;
        Object id2_tree=null;
        Object t_tree=null;
        Object COLON186_tree=null;
        Object LEFT_PAREN187_tree=null;
        Object RIGHT_PAREN188_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_TimePeriod=new RewriteRuleTokenStream(adaptor,"token TimePeriod");

        try {
            // src/main/resources/org/drools/lang/DRL.g:821:2: (id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] ) )
            // src/main/resources/org/drools/lang/DRL.g:821:4: id1= ID COLON id2= ID LEFT_PAREN (t= TimePeriod | t= DECIMAL ) RIGHT_PAREN
            {
            id1=(Token)match(input,ID,FOLLOW_ID_in_over_elements3196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.IDENTIFIER);	
            }
            COLON186=(Token)match(input,COLON,FOLLOW_COLON_in_over_elements3203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON186);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON186, DroolsEditorType.SYMBOL);	
            }
            id2=(Token)match(input,ID,FOLLOW_ID_in_over_elements3212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              	helper.emit(id2, DroolsEditorType.IDENTIFIER);	
            }
            LEFT_PAREN187=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_over_elements3219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN187);

            // src/main/resources/org/drools/lang/DRL.g:825:4: (t= TimePeriod | t= DECIMAL )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==TimePeriod) ) {
                alt57=1;
            }
            else if ( (LA57_0==DECIMAL) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:826:5: t= TimePeriod
                    {
                    t=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_over_elements3234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TimePeriod.add(t);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:826:20: t= DECIMAL
                    {
                    t=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_over_elements3240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(t);


                    }
                    break;

            }

            RIGHT_PAREN188=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_over_elements3250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN188);



            // AST REWRITE
            // elements: id1, id2
            // token labels: id2, id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 829:2: -> ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
            {
                // src/main/resources/org/drools/lang/DRL.g:829:5: ^( VT_BEHAVIOR $id1 $id2 VT_PAREN_CHUNK[$t] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BEHAVIOR, "VT_BEHAVIOR"), root_1);

                adaptor.addChild(root_1, stream_id1.nextNode());
                adaptor.addChild(root_1, stream_id2.nextNode());
                adaptor.addChild(root_1, (Object)adaptor.create(VT_PAREN_CHUNK, t));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "over_elements"

    public static class accumulate_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_statement"
    // src/main/resources/org/drools/lang/DRL.g:832:1: accumulate_statement : ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) ;
    public final DRLParser.accumulate_statement_return accumulate_statement() throws RecognitionException {
        DRLParser.accumulate_statement_return retval = new DRLParser.accumulate_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ACCUMULATE189=null;
        Token LEFT_PAREN190=null;
        Token COMMA192=null;
        Token RIGHT_PAREN195=null;
        DRLParser.lhs_or_return lhs_or191 = null;

        DRLParser.accumulate_init_clause_return accumulate_init_clause193 = null;

        DRLParser.accumulate_id_clause_return accumulate_id_clause194 = null;


        Object ACCUMULATE189_tree=null;
        Object LEFT_PAREN190_tree=null;
        Object COMMA192_tree=null;
        Object RIGHT_PAREN195_tree=null;
        RewriteRuleTokenStream stream_ACCUMULATE=new RewriteRuleTokenStream(adaptor,"token ACCUMULATE");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_accumulate_init_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_init_clause");
        RewriteRuleSubtreeStream stream_accumulate_id_clause=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_id_clause");
        RewriteRuleSubtreeStream stream_lhs_or=new RewriteRuleSubtreeStream(adaptor,"rule lhs_or");
        try {
            // src/main/resources/org/drools/lang/DRL.g:833:2: ( ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:833:4: ACCUMULATE LEFT_PAREN lhs_or ( COMMA )? ( accumulate_init_clause | accumulate_id_clause ) RIGHT_PAREN
            {
            ACCUMULATE189=(Token)match(input,ACCUMULATE,FOLLOW_ACCUMULATE_in_accumulate_statement3277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ACCUMULATE.add(ACCUMULATE189);

            if ( state.backtracking==0 ) {
              	helper.emit(ACCUMULATE189, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE);	
            }
            LEFT_PAREN190=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_statement3286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN190);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN190, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_lhs_or_in_accumulate_statement3294);
            lhs_or191=lhs_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lhs_or.add(lhs_or191.getTree());
            // src/main/resources/org/drools/lang/DRL.g:837:3: ( COMMA )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==COMMA) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:837:3: COMMA
                    {
                    COMMA192=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_statement3299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA192);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(COMMA192, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:838:3: ( accumulate_init_clause | accumulate_id_clause )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==ID) ) {
                int LA59_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                    alt59=1;
                }
                else if ( (true) ) {
                    alt59=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:838:5: accumulate_init_clause
                    {
                    pushFollow(FOLLOW_accumulate_init_clause_in_accumulate_statement3309);
                    accumulate_init_clause193=accumulate_init_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_init_clause.add(accumulate_init_clause193.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:839:5: accumulate_id_clause
                    {
                    pushFollow(FOLLOW_accumulate_id_clause_in_accumulate_statement3315);
                    accumulate_id_clause194=accumulate_id_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_id_clause.add(accumulate_id_clause194.getTree());

                    }
                    break;

            }

            RIGHT_PAREN195=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_statement3323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN195);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN195, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, lhs_or, accumulate_init_clause, ACCUMULATE, accumulate_id_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 843:3: -> ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:843:6: ^( ACCUMULATE lhs_or ( accumulate_init_clause )? ( accumulate_id_clause )? RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_ACCUMULATE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_lhs_or.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:843:26: ( accumulate_init_clause )?
                if ( stream_accumulate_init_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_init_clause.nextTree());

                }
                stream_accumulate_init_clause.reset();
                // src/main/resources/org/drools/lang/DRL.g:843:50: ( accumulate_id_clause )?
                if ( stream_accumulate_id_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_accumulate_id_clause.nextTree());

                }
                stream_accumulate_id_clause.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_statement"

    public static class accumulate_init_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_init_clause"
    // src/main/resources/org/drools/lang/DRL.g:847:1: accumulate_init_clause : init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) ;
    public final DRLParser.accumulate_init_clause_return accumulate_init_clause() throws RecognitionException {
        DRLParser.accumulate_init_clause_return retval = new DRLParser.accumulate_init_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token cm1=null;
        Token cm2=null;
        Token cm3=null;
        DRLParser.accumulate_paren_chunk_return pc1 = null;

        DRLParser.accumulate_paren_chunk_return pc2 = null;

        DRLParser.accumulate_paren_chunk_return pc3 = null;

        DRLParser.result_key_return res1 = null;

        DRLParser.accumulate_paren_chunk_return pc4 = null;

        DRLParser.init_key_return init_key196 = null;

        DRLParser.action_key_return action_key197 = null;

        DRLParser.reverse_key_return reverse_key198 = null;


        Object cm1_tree=null;
        Object cm2_tree=null;
        Object cm3_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_action_key=new RewriteRuleSubtreeStream(adaptor,"rule action_key");
        RewriteRuleSubtreeStream stream_accumulate_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk");
        RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_init_key=new RewriteRuleSubtreeStream(adaptor,"rule init_key");
         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:850:2: ( init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE] -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) ) )
            // src/main/resources/org/drools/lang/DRL.g:850:4: init_key pc1= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE] (cm1= COMMA )? action_key pc2= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE] (cm2= COMMA )? ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )? res1= result_key pc4= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE]
            {
            pushFollow(FOLLOW_init_key_in_accumulate_init_clause3369);
            init_key196=init_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_init_key.add(init_key196.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3379);
            pc1=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_INIT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc1.getTree());
            // src/main/resources/org/drools/lang/DRL.g:852:84: (cm1= COMMA )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==COMMA) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:852:84: cm1= COMMA
                    {
                    cm1=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm1, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION);	
            }
            pushFollow(FOLLOW_action_key_in_accumulate_init_clause3395);
            action_key197=action_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_action_key.add(action_key197.getTree());
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3399);
            pc2=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc2.getTree());
            // src/main/resources/org/drools/lang/DRL.g:854:97: (cm2= COMMA )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==COMMA) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:854:97: cm2= COMMA
                    {
                    cm2=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(cm2);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(cm2, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	if (pc1 != null && ((DroolsTree) pc1.getTree()).getText() != null && pc2 != null && ((DroolsTree) pc2.getTree()).getText() != null ) helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE);	
            }
            // src/main/resources/org/drools/lang/DRL.g:856:2: ( reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )? )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==ID) ) {
                int LA63_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                    alt63=1;
                }
            }
            switch (alt63) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:856:4: reverse_key pc3= accumulate_paren_chunk[Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE] (cm3= COMMA )?
                    {
                    pushFollow(FOLLOW_reverse_key_in_accumulate_init_clause3416);
                    reverse_key198=reverse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reverse_key.add(reverse_key198.getTree());
                    pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3420);
                    pc3=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_REVERSE_INSIDE);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc3.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:856:100: (cm3= COMMA )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==COMMA) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:856:100: cm3= COMMA
                            {
                            cm3=(Token)match(input,COMMA,FOLLOW_COMMA_in_accumulate_init_clause3425); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(cm3);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      	helper.emit(cm3, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if ((pc1 != null && ((DroolsTree) pc1.tree).getText() != null) &&
                          			(pc2 != null && ((DroolsTree) pc2.tree).getText() != null) &&
                          			(pc3 != null && ((DroolsTree) pc3.tree).getText() != null)) {
              			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT);
              		}	
              	
            }
            pushFollow(FOLLOW_result_key_in_accumulate_init_clause3441);
            res1=result_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_key.add(res1.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit((res1!=null?((Token)res1.start):null), DroolsEditorType.KEYWORD);	
            }
            pushFollow(FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3447);
            pc4=accumulate_paren_chunk(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk.add(pc4.getTree());


            // AST REWRITE
            // elements: pc4, result_key, pc3, action_key, pc1, init_key, reverse_key, pc2
            // token labels: 
            // rule labels: pc4, pc3, retval, pc1, pc2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_pc4=new RewriteRuleSubtreeStream(adaptor,"rule pc4",pc4!=null?pc4.tree:null);
            RewriteRuleSubtreeStream stream_pc3=new RewriteRuleSubtreeStream(adaptor,"rule pc3",pc3!=null?pc3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_pc1=new RewriteRuleSubtreeStream(adaptor,"rule pc1",pc1!=null?pc1.tree:null);
            RewriteRuleSubtreeStream stream_pc2=new RewriteRuleSubtreeStream(adaptor,"rule pc2",pc2!=null?pc2.tree:null);

            root_0 = (Object)adaptor.nil();
            // 865:2: -> ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
            {
                // src/main/resources/org/drools/lang/DRL.g:865:5: ^( VT_ACCUMULATE_INIT_CLAUSE ^( init_key $pc1) ^( action_key $pc2) ( ^( reverse_key $pc3) )? ^( result_key $pc4) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_INIT_CLAUSE, "VT_ACCUMULATE_INIT_CLAUSE"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:865:33: ^( init_key $pc1)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_init_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc1.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:865:50: ^( action_key $pc2)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_action_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc2.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // src/main/resources/org/drools/lang/DRL.g:865:69: ( ^( reverse_key $pc3) )?
                if ( stream_pc3.hasNext()||stream_reverse_key.hasNext() ) {
                    // src/main/resources/org/drools/lang/DRL.g:865:69: ^( reverse_key $pc3)
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_reverse_key.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_pc3.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_pc3.reset();
                stream_reverse_key.reset();
                // src/main/resources/org/drools/lang/DRL.g:865:90: ^( result_key $pc4)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_result_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_pc4.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.RESULT)) {
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		if (input.LA(1) == LEFT_PAREN){
            			input.consume();
            			helper.emit(Location.LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "accumulate_init_clause"

    public static class accumulate_paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:878:1: accumulate_paren_chunk[int locationType] : pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.accumulate_paren_chunk_return accumulate_paren_chunk(int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_return retval = new DRLParser.accumulate_paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accumulate_paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_accumulate_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule accumulate_paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:881:3: (pc= accumulate_paren_chunk_data[false,$locationType] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:881:5: pc= accumulate_paren_chunk_data[false,$locationType]
            {
            pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3505);
            pc=accumulate_paren_chunk_data(false, locationType);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accumulate_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 882:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk"

    public static class accumulate_paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:885:1: accumulate_paren_chunk_data[boolean isRecursive, int locationType] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN ;
    public final DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data(boolean isRecursive, int locationType) throws RecognitionException {
        DRLParser.accumulate_paren_chunk_data_return retval = new DRLParser.accumulate_paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.accumulate_paren_chunk_data_return accumulate_paren_chunk_data199 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:886:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:886:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              				helper.emit(locationType);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:894:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | accumulate_paren_chunk_data[true,-1] )*
            loop64:
            do {
                int alt64=3;
                int LA64_0 = input.LA(1);

                if ( ((LA64_0>=VT_COMPILATION_UNIT && LA64_0<=BOOL)||(LA64_0>=FROM && LA64_0<=MISC)) ) {
                    alt64=1;
                }
                else if ( (LA64_0==LEFT_PAREN) ) {
                    alt64=2;
                }


                switch (alt64) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:894:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:894:94: accumulate_paren_chunk_data[true,-1]
            	    {
            	    pushFollow(FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3557);
            	    accumulate_paren_chunk_data199=accumulate_paren_chunk_data(true, -1);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, accumulate_paren_chunk_data199.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_paren_chunk_data"

    public static class accumulate_id_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accumulate_id_clause"
    // src/main/resources/org/drools/lang/DRL.g:904:1: accumulate_id_clause : ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) ;
    public final DRLParser.accumulate_id_clause_return accumulate_id_clause() throws RecognitionException {
        DRLParser.accumulate_id_clause_return retval = new DRLParser.accumulate_id_clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID200=null;
        DRLParser.paren_chunk_return paren_chunk201 = null;


        Object ID200_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:905:2: ( ID paren_chunk -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:905:4: ID paren_chunk
            {
            ID200=(Token)match(input,ID,FOLLOW_ID_in_accumulate_id_clause3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID200);

            if ( state.backtracking==0 ) {
              	helper.emit(ID200, DroolsEditorType.IDENTIFIER);	
            }
            pushFollow(FOLLOW_paren_chunk_in_accumulate_id_clause3590);
            paren_chunk201=paren_chunk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk201.getTree());


            // AST REWRITE
            // elements: paren_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 907:2: -> ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
            {
                // src/main/resources/org/drools/lang/DRL.g:907:5: ^( VT_ACCUMULATE_ID_CLAUSE ID paren_chunk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCUMULATE_ID_CLAUSE, "VT_ACCUMULATE_ID_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accumulate_id_clause"

    public static class collect_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collect_statement"
    // src/main/resources/org/drools/lang/DRL.g:910:1: collect_statement : COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) ;
    public final DRLParser.collect_statement_return collect_statement() throws RecognitionException {
        DRLParser.collect_statement_return retval = new DRLParser.collect_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLLECT202=null;
        Token LEFT_PAREN203=null;
        Token RIGHT_PAREN205=null;
        DRLParser.pattern_source_return pattern_source204 = null;


        Object COLLECT202_tree=null;
        Object LEFT_PAREN203_tree=null;
        Object RIGHT_PAREN205_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COLLECT=new RewriteRuleTokenStream(adaptor,"token COLLECT");
        RewriteRuleSubtreeStream stream_pattern_source=new RewriteRuleSubtreeStream(adaptor,"rule pattern_source");
        try {
            // src/main/resources/org/drools/lang/DRL.g:911:2: ( COLLECT LEFT_PAREN pattern_source RIGHT_PAREN -> ^( COLLECT pattern_source RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:911:4: COLLECT LEFT_PAREN pattern_source RIGHT_PAREN
            {
            COLLECT202=(Token)match(input,COLLECT,FOLLOW_COLLECT_in_collect_statement3612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLLECT.add(COLLECT202);

            if ( state.backtracking==0 ) {
              	helper.emit(COLLECT202, DroolsEditorType.KEYWORD);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            LEFT_PAREN203=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_collect_statement3621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN203);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN203, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_pattern_source_in_collect_statement3628);
            pattern_source204=pattern_source();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_source.add(pattern_source204.getTree());
            RIGHT_PAREN205=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_collect_statement3633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN205);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN205, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, COLLECT, pattern_source
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 917:2: -> ^( COLLECT pattern_source RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:917:5: ^( COLLECT pattern_source RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_COLLECT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_pattern_source.nextTree());
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "collect_statement"

    public static class entrypoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_statement"
    // src/main/resources/org/drools/lang/DRL.g:920:1: entrypoint_statement : entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) ;
    public final DRLParser.entrypoint_statement_return entrypoint_statement() throws RecognitionException {
        DRLParser.entrypoint_statement_return retval = new DRLParser.entrypoint_statement_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.entry_point_key_return entry_point_key206 = null;

        DRLParser.entrypoint_id_return entrypoint_id207 = null;


        RewriteRuleSubtreeStream stream_entrypoint_id=new RewriteRuleSubtreeStream(adaptor,"rule entrypoint_id");
        RewriteRuleSubtreeStream stream_entry_point_key=new RewriteRuleSubtreeStream(adaptor,"rule entry_point_key");
        try {
            // src/main/resources/org/drools/lang/DRL.g:921:2: ( entry_point_key entrypoint_id -> ^( entry_point_key entrypoint_id ) )
            // src/main/resources/org/drools/lang/DRL.g:921:4: entry_point_key entrypoint_id
            {
            pushFollow(FOLLOW_entry_point_key_in_entrypoint_statement3660);
            entry_point_key206=entry_point_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entry_point_key.add(entry_point_key206.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_FROM_COLLECT);	
            }
            pushFollow(FOLLOW_entrypoint_id_in_entrypoint_statement3668);
            entrypoint_id207=entrypoint_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_entrypoint_id.add(entrypoint_id207.getTree());
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);	
            }


            // AST REWRITE
            // elements: entrypoint_id, entry_point_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 925:2: -> ^( entry_point_key entrypoint_id )
            {
                // src/main/resources/org/drools/lang/DRL.g:925:5: ^( entry_point_key entrypoint_id )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_entry_point_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_entrypoint_id.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_statement"

    public static class entrypoint_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entrypoint_id"
    // src/main/resources/org/drools/lang/DRL.g:928:1: entrypoint_id : (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] );
    public final DRLParser.entrypoint_id_return entrypoint_id() throws RecognitionException {
        DRLParser.entrypoint_id_return retval = new DRLParser.entrypoint_id_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;

        Object value_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");

        try {
            // src/main/resources/org/drools/lang/DRL.g:929:2: (value= ID -> VT_ENTRYPOINT_ID[$value] | value= STRING -> VT_ENTRYPOINT_ID[$value] )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==ID) ) {
                alt65=1;
            }
            else if ( (LA65_0==STRING) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:929:5: value= ID
                    {
                    value=(Token)match(input,ID,FOLLOW_ID_in_entrypoint_id3694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 930:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:931:5: value= STRING
                    {
                    value=(Token)match(input,STRING,FOLLOW_STRING_in_entrypoint_id3711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING.add(value);

                    if ( state.backtracking==0 ) {
                      	helper.emit(value, DroolsEditorType.IDENTIFIER);	
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 932:3: -> VT_ENTRYPOINT_ID[$value]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_ENTRYPOINT_ID, value));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entrypoint_id"

    public static class from_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_source"
    // src/main/resources/org/drools/lang/DRL.g:936:1: from_source options {backtrack=true; memoize=true; } : fs= expression -> VT_FROM_SOURCE[$fs.text] ;
    public final DRLParser.from_source_return from_source() throws RecognitionException {
        DRLParser.from_source_return retval = new DRLParser.from_source_return();
        retval.start = input.LT(1);
        int from_source_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.expression_return fs = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:938:2: (fs= expression -> VT_FROM_SOURCE[$fs.text] )
            // src/main/resources/org/drools/lang/DRL.g:938:4: fs= expression
            {
            pushFollow(FOLLOW_expression_in_from_source3748);
            fs=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(fs.getTree());
            if ( state.backtracking==0 ) {
               if ( input.LA(1) != EOF || input.get(input.index() - 1).getType() == WS ) { helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION); } 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 939:10: -> VT_FROM_SOURCE[$fs.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_FROM_SOURCE, (fs!=null?input.toString(fs.start,fs.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, from_source_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_source"

    public static class lhs_pattern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lhs_pattern"
    // src/main/resources/org/drools/lang/DRL.g:945:1: lhs_pattern : ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) );
    public final DRLParser.lhs_pattern_return lhs_pattern() throws RecognitionException {
        DRLParser.lhs_pattern_return retval = new DRLParser.lhs_pattern_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.fact_binding_return fact_binding208 = null;

        DRLParser.fact_return fact209 = null;


        RewriteRuleSubtreeStream stream_fact_binding=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        try {
            // src/main/resources/org/drools/lang/DRL.g:946:2: ( fact_binding -> ^( VT_PATTERN fact_binding ) | fact -> ^( VT_PATTERN fact ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==ID) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==COLON) ) {
                    alt66=1;
                }
                else if ( (LA66_1==DOT||LA66_1==LEFT_PAREN||LA66_1==LEFT_SQUARE) ) {
                    alt66=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:946:4: fact_binding
                    {
                    pushFollow(FOLLOW_fact_binding_in_lhs_pattern3779);
                    fact_binding208=fact_binding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding.add(fact_binding208.getTree());


                    // AST REWRITE
                    // elements: fact_binding
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 946:17: -> ^( VT_PATTERN fact_binding )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:946:20: ^( VT_PATTERN fact_binding )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact_binding.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:947:4: fact
                    {
                    pushFollow(FOLLOW_fact_in_lhs_pattern3792);
                    fact209=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact209.getTree());


                    // AST REWRITE
                    // elements: fact
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 947:9: -> ^( VT_PATTERN fact )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:947:12: ^( VT_PATTERN fact )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN, "VT_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_fact.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lhs_pattern"

    public static class fact_binding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding"
    // src/main/resources/org/drools/lang/DRL.g:950:1: fact_binding : label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) ;
    public final DRLParser.fact_binding_return fact_binding() throws RecognitionException {
        DRLParser.fact_binding_return retval = new DRLParser.fact_binding_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN212=null;
        Token RIGHT_PAREN214=null;
        DRLParser.label_return label210 = null;

        DRLParser.fact_return fact211 = null;

        DRLParser.fact_binding_expression_return fact_binding_expression213 = null;


        Object LEFT_PAREN212_tree=null;
        Object RIGHT_PAREN214_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        RewriteRuleSubtreeStream stream_fact_binding_expression=new RewriteRuleSubtreeStream(adaptor,"rule fact_binding_expression");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        try {
            // src/main/resources/org/drools/lang/DRL.g:951:3: ( label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN ) -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? ) )
            // src/main/resources/org/drools/lang/DRL.g:951:5: label ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            {
            pushFollow(FOLLOW_label_in_fact_binding3812);
            label210=label();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label.add(label210.getTree());
            // src/main/resources/org/drools/lang/DRL.g:952:3: ( fact | LEFT_PAREN fact_binding_expression RIGHT_PAREN )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==ID) ) {
                alt67=1;
            }
            else if ( (LA67_0==LEFT_PAREN) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:952:5: fact
                    {
                    pushFollow(FOLLOW_fact_in_fact_binding3818);
                    fact211=fact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact.add(fact211.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:953:6: LEFT_PAREN fact_binding_expression RIGHT_PAREN
                    {
                    LEFT_PAREN212=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact_binding3825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN212);

                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN212, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_fact_binding_expression_in_fact_binding3833);
                    fact_binding_expression213=fact_binding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fact_binding_expression.add(fact_binding_expression213.getTree());
                    RIGHT_PAREN214=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact_binding3841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN214);

                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN214, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: label, RIGHT_PAREN, fact_binding_expression, fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 957:3: -> ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:957:6: ^( VT_FACT_BINDING label ( fact )? ( fact_binding_expression )? ( RIGHT_PAREN )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_BINDING, "VT_FACT_BINDING"), root_1);

                adaptor.addChild(root_1, stream_label.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:957:30: ( fact )?
                if ( stream_fact.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact.nextTree());

                }
                stream_fact.reset();
                // src/main/resources/org/drools/lang/DRL.g:957:36: ( fact_binding_expression )?
                if ( stream_fact_binding_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_fact_binding_expression.nextTree());

                }
                stream_fact_binding_expression.reset();
                // src/main/resources/org/drools/lang/DRL.g:957:61: ( RIGHT_PAREN )?
                if ( stream_RIGHT_PAREN.hasNext() ) {
                    adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                }
                stream_RIGHT_PAREN.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding"

    public static class fact_binding_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact_binding_expression"
    // src/main/resources/org/drools/lang/DRL.g:960:1: fact_binding_expression : ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* ;
    public final DRLParser.fact_binding_expression_return fact_binding_expression() throws RecognitionException {
        DRLParser.fact_binding_expression_return retval = new DRLParser.fact_binding_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token pipe=null;
        DRLParser.or_key_return value = null;

        DRLParser.fact_return fact215 = null;

        DRLParser.fact_return fact216 = null;


        Object pipe_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PIPE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PIPE");
        RewriteRuleSubtreeStream stream_fact=new RewriteRuleSubtreeStream(adaptor,"rule fact");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

        	Token orToken = null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:963:3: ( ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )* )
            // src/main/resources/org/drools/lang/DRL.g:963:5: ( fact -> fact ) ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            {
            // src/main/resources/org/drools/lang/DRL.g:963:5: ( fact -> fact )
            // src/main/resources/org/drools/lang/DRL.g:963:6: fact
            {
            pushFollow(FOLLOW_fact_in_fact_binding_expression3882);
            fact215=fact();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fact.add(fact215.getTree());


            // AST REWRITE
            // elements: fact
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 963:11: -> fact
            {
                adaptor.addChild(root_0, stream_fact.nextTree());

            }

            retval.tree = root_0;}
            }

            // src/main/resources/org/drools/lang/DRL.g:963:20: ( (value= or_key | pipe= DOUBLE_PIPE ) fact -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact ) )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
                    alt69=1;
                }
                else if ( (LA69_0==DOUBLE_PIPE) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:963:22: (value= or_key | pipe= DOUBLE_PIPE ) fact
            	    {
            	    // src/main/resources/org/drools/lang/DRL.g:963:22: (value= or_key | pipe= DOUBLE_PIPE )
            	    int alt68=2;
            	    int LA68_0 = input.LA(1);

            	    if ( (LA68_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.OR))))) {
            	        alt68=1;
            	    }
            	    else if ( (LA68_0==DOUBLE_PIPE) ) {
            	        alt68=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 68, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt68) {
            	        case 1 :
            	            // src/main/resources/org/drools/lang/DRL.g:963:23: value= or_key
            	            {
            	            pushFollow(FOLLOW_or_key_in_fact_binding_expression3894);
            	            value=or_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_or_key.add(value.getTree());
            	            if ( state.backtracking==0 ) {
            	              orToken = (value!=null?((Token)value.start):null);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/main/resources/org/drools/lang/DRL.g:963:62: pipe= DOUBLE_PIPE
            	            {
            	            pipe=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3900); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOUBLE_PIPE.add(pipe);

            	            if ( state.backtracking==0 ) {
            	              orToken = pipe;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_fact_in_fact_binding_expression3905);
            	    fact216=fact();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_fact.add(fact216.getTree());


            	    // AST REWRITE
            	    // elements: fact, fact_binding_expression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (Object)adaptor.nil();
            	    // 964:3: -> ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	    {
            	        // src/main/resources/org/drools/lang/DRL.g:964:6: ^( VT_FACT_OR[orToken] $fact_binding_expression fact )
            	        {
            	        Object root_1 = (Object)adaptor.nil();
            	        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT_OR, orToken), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_fact.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fact_binding_expression"

    public static class fact_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fact"
    // src/main/resources/org/drools/lang/DRL.g:967:1: fact : pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) ;
    public final DRLParser.fact_return fact() throws RecognitionException {
        DRLParser.fact_return retval = new DRLParser.fact_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN218=null;
        Token RIGHT_PAREN220=null;
        DRLParser.pattern_type_return pattern_type217 = null;

        DRLParser.constraints_return constraints219 = null;


        Object LEFT_PAREN218_tree=null;
        Object RIGHT_PAREN220_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_constraints=new RewriteRuleSubtreeStream(adaptor,"rule constraints");
        RewriteRuleSubtreeStream stream_pattern_type=new RewriteRuleSubtreeStream(adaptor,"rule pattern_type");
         boolean isFailedOnConstraints = true; helper.pushParaphrases(DroolsParaphraseTypes.PATTERN); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:970:2: ( pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN -> ^( VT_FACT pattern_type ( constraints )? ) )
            // src/main/resources/org/drools/lang/DRL.g:970:4: pattern_type LEFT_PAREN ( constraints )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_pattern_type_in_fact3945);
            pattern_type217=pattern_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern_type.add(pattern_type217.getTree());
            LEFT_PAREN218=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_fact3950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN218);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN218, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            }
            // src/main/resources/org/drools/lang/DRL.g:973:4: ( constraints )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID||LA70_0==LEFT_PAREN) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:973:4: constraints
                    {
                    pushFollow(FOLLOW_constraints_in_fact3961);
                    constraints219=constraints();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints.add(constraints219.getTree());

                    }
                    break;

            }

            RIGHT_PAREN220=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_fact3967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN220);

            if ( state.backtracking==0 ) {
              	isFailedOnConstraints = false;	
            }
            if ( state.backtracking==0 ) {
              	if ((RIGHT_PAREN220!=null?RIGHT_PAREN220.getText():null).equals(")") ){ //WORKAROUND FOR ANTLR BUG!
              			helper.emit(RIGHT_PAREN220, DroolsEditorType.SYMBOL);
              			helper.emit(Location.LOCATION_LHS_BEGIN_OF_CONDITION);
              		}	
            }


            // AST REWRITE
            // elements: constraints, pattern_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 979:2: -> ^( VT_FACT pattern_type ( constraints )? )
            {
                // src/main/resources/org/drools/lang/DRL.g:979:5: ^( VT_FACT pattern_type ( constraints )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FACT, "VT_FACT"), root_1);

                adaptor.addChild(root_1, stream_pattern_type.nextTree());
                // src/main/resources/org/drools/lang/DRL.g:979:28: ( constraints )?
                if ( stream_constraints.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraints.nextTree());

                }
                stream_constraints.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               helper.popParaphrases();	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && isFailedOnConstraints && input.LA(1) == EOF && input.get(input.index() - 1).getType() == WS){
            		if (!(helper.getActiveSentence().getContent().getLast() instanceof Integer) && input.LA(-1) != COLON) {
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "fact"

    public static class constraints_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraints"
    // src/main/resources/org/drools/lang/DRL.g:989:1: constraints : constraint ( COMMA constraint )* ;
    public final DRLParser.constraints_return constraints() throws RecognitionException {
        DRLParser.constraints_return retval = new DRLParser.constraints_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA222=null;
        DRLParser.constraint_return constraint221 = null;

        DRLParser.constraint_return constraint223 = null;


        Object COMMA222_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:990:2: ( constraint ( COMMA constraint )* )
            // src/main/resources/org/drools/lang/DRL.g:990:4: constraint ( COMMA constraint )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_in_constraints3999);
            constraint221=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint221.getTree());
            // src/main/resources/org/drools/lang/DRL.g:990:15: ( COMMA constraint )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:990:17: COMMA constraint
            	    {
            	    COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_constraints4003); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA222, DroolsEditorType.SYMBOL);
            	      		helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_START);	
            	    }
            	    pushFollow(FOLLOW_constraint_in_constraints4010);
            	    constraint223=constraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint223.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraints"

    public static class constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // src/main/resources/org/drools/lang/DRL.g:995:1: constraint : or_constr ;
    public final DRLParser.constraint_return constraint() throws RecognitionException {
        DRLParser.constraint_return retval = new DRLParser.constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.or_constr_return or_constr224 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:996:2: ( or_constr )
            // src/main/resources/org/drools/lang/DRL.g:996:4: or_constr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_or_constr_in_constraint4024);
            or_constr224=or_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr224.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint"

    public static class or_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_constr"
    // src/main/resources/org/drools/lang/DRL.g:999:1: or_constr : and_constr ( DOUBLE_PIPE and_constr )* ;
    public final DRLParser.or_constr_return or_constr() throws RecognitionException {
        DRLParser.or_constr_return retval = new DRLParser.or_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE226=null;
        DRLParser.and_constr_return and_constr225 = null;

        DRLParser.and_constr_return and_constr227 = null;


        Object DOUBLE_PIPE226_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1000:2: ( and_constr ( DOUBLE_PIPE and_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:1000:4: and_constr ( DOUBLE_PIPE and_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_constr_in_or_constr4035);
            and_constr225=and_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr225.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1000:15: ( DOUBLE_PIPE and_constr )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==DOUBLE_PIPE) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1000:17: DOUBLE_PIPE and_constr
            	    {
            	    DOUBLE_PIPE226=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_constr4039); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE226_tree = (Object)adaptor.create(DOUBLE_PIPE226);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE226_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE226, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_constr_in_or_constr4046);
            	    and_constr227=and_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_constr227.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_constr"

    public static class and_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_constr"
    // src/main/resources/org/drools/lang/DRL.g:1004:1: and_constr : unary_constr ( DOUBLE_AMPER unary_constr )* ;
    public final DRLParser.and_constr_return and_constr() throws RecognitionException {
        DRLParser.and_constr_return retval = new DRLParser.and_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER229=null;
        DRLParser.unary_constr_return unary_constr228 = null;

        DRLParser.unary_constr_return unary_constr230 = null;


        Object DOUBLE_AMPER229_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1005:2: ( unary_constr ( DOUBLE_AMPER unary_constr )* )
            // src/main/resources/org/drools/lang/DRL.g:1005:4: unary_constr ( DOUBLE_AMPER unary_constr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unary_constr_in_and_constr4061);
            unary_constr228=unary_constr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr228.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1005:17: ( DOUBLE_AMPER unary_constr )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==DOUBLE_AMPER) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1005:19: DOUBLE_AMPER unary_constr
            	    {
            	    DOUBLE_AMPER229=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_constr4065); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER229_tree = (Object)adaptor.create(DOUBLE_AMPER229);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER229_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER229, DroolsEditorType.SYMBOL);;	
            	    }
            	    pushFollow(FOLLOW_unary_constr_in_and_constr4072);
            	    unary_constr230=unary_constr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_constr230.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_constr"

    public static class unary_constr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_constr"
    // src/main/resources/org/drools/lang/DRL.g:1009:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );
    public final DRLParser.unary_constr_return unary_constr() throws RecognitionException {
        DRLParser.unary_constr_return retval = new DRLParser.unary_constr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN234=null;
        Token RIGHT_PAREN236=null;
        DRLParser.eval_key_return eval_key231 = null;

        DRLParser.paren_chunk_return paren_chunk232 = null;

        DRLParser.field_constraint_return field_constraint233 = null;

        DRLParser.or_constr_return or_constr235 = null;


        Object LEFT_PAREN234_tree=null;
        Object RIGHT_PAREN236_tree=null;

         boolean isFailed = true;	
        try {
            // src/main/resources/org/drools/lang/DRL.g:1013:2: ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN )
            int alt74=3;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1013:4: eval_key paren_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_eval_key_in_unary_constr4105);
                    eval_key231=eval_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(eval_key231.getTree(), root_0);
                    pushFollow(FOLLOW_paren_chunk_in_unary_constr4108);
                    paren_chunk232=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk232.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1014:4: field_constraint
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_field_constraint_in_unary_constr4113);
                    field_constraint233=field_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_constraint233.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1015:5: LEFT_PAREN or_constr RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN234=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_constr4119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN234, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_constr_in_unary_constr4129);
                    or_constr235=or_constr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_constr235.getTree());
                    RIGHT_PAREN236=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_constr4134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN236_tree = (Object)adaptor.create(RIGHT_PAREN236);
                    adaptor.addChild(root_0, RIGHT_PAREN236_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN236, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               isFailed = false;	
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && isFailed && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(input.LT(1), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS)
            			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}

        }
        return retval;
    }
    // $ANTLR end "unary_constr"

    public static class field_constraint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_constraint"
    // src/main/resources/org/drools/lang/DRL.g:1028:1: field_constraint : ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) );
    public final DRLParser.field_constraint_return field_constraint() throws RecognitionException {
        DRLParser.field_constraint_return retval = new DRLParser.field_constraint_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token arw=null;
        DRLParser.label_return label237 = null;

        DRLParser.accessor_path_return accessor_path238 = null;

        DRLParser.or_restr_connective_return or_restr_connective239 = null;

        DRLParser.paren_chunk_return paren_chunk240 = null;

        DRLParser.accessor_path_return accessor_path241 = null;

        DRLParser.or_restr_connective_return or_restr_connective242 = null;


        Object arw_tree=null;
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleSubtreeStream stream_paren_chunk=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk");
        RewriteRuleSubtreeStream stream_or_restr_connective=new RewriteRuleSubtreeStream(adaptor,"rule or_restr_connective");
        RewriteRuleSubtreeStream stream_label=new RewriteRuleSubtreeStream(adaptor,"rule label");
        RewriteRuleSubtreeStream stream_accessor_path=new RewriteRuleSubtreeStream(adaptor,"rule accessor_path");

        	boolean isArrow = false;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1031:3: ( label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )? -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )? -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) ) | accessor_path or_restr_connective -> ^( VT_FIELD accessor_path or_restr_connective ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ID) ) {
                int LA76_1 = input.LA(2);

                if ( (LA76_1==COLON) ) {
                    alt76=1;
                }
                else if ( ((LA76_1>=ID && LA76_1<=DOT)||LA76_1==LEFT_PAREN||(LA76_1>=EQUALS && LA76_1<=LEFT_SQUARE)) ) {
                    alt76=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1031:5: label accessor_path ( or_restr_connective | arw= ARROW paren_chunk )?
                    {
                    pushFollow(FOLLOW_label_in_field_constraint4154);
                    label237=label();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label.add(label237.getTree());
                    pushFollow(FOLLOW_accessor_path_in_field_constraint4156);
                    accessor_path238=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path238.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1032:3: ( or_restr_connective | arw= ARROW paren_chunk )?
                    int alt75=3;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {
                        alt75=1;
                    }
                    else if ( (LA75_0==LEFT_PAREN||(LA75_0>=EQUALS && LA75_0<=NOT_EQUALS)) ) {
                        alt75=1;
                    }
                    else if ( (LA75_0==ARROW) ) {
                        alt75=2;
                    }
                    switch (alt75) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1032:5: or_restr_connective
                            {
                            pushFollow(FOLLOW_or_restr_connective_in_field_constraint4163);
                            or_restr_connective239=or_restr_connective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective239.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1032:27: arw= ARROW paren_chunk
                            {
                            arw=(Token)match(input,ARROW,FOLLOW_ARROW_in_field_constraint4169); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ARROW.add(arw);

                            if ( state.backtracking==0 ) {
                              	helper.emit(arw, DroolsEditorType.SYMBOL);	
                            }
                            pushFollow(FOLLOW_paren_chunk_in_field_constraint4173);
                            paren_chunk240=paren_chunk();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_paren_chunk.add(paren_chunk240.getTree());
                            if ( state.backtracking==0 ) {
                              isArrow = true;
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: paren_chunk, label, accessor_path, accessor_path, or_restr_connective, label
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1033:3: -> {isArrow}? ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) ) ( ^( VK_EVAL[$arw] paren_chunk ) )?
                    if (isArrow) {
                        // src/main/resources/org/drools/lang/DRL.g:1033:17: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1033:39: ^( VT_FIELD accessor_path )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }
                        // src/main/resources/org/drools/lang/DRL.g:1033:66: ( ^( VK_EVAL[$arw] paren_chunk ) )?
                        if ( stream_paren_chunk.hasNext() ) {
                            // src/main/resources/org/drools/lang/DRL.g:1033:66: ^( VK_EVAL[$arw] paren_chunk )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VK_EVAL, arw), root_1);

                            adaptor.addChild(root_1, stream_paren_chunk.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_paren_chunk.reset();

                    }
                    else // 1034:3: -> ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:1034:6: ^( VT_BIND_FIELD label ^( VT_FIELD accessor_path ( or_restr_connective )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_BIND_FIELD, "VT_BIND_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_label.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1034:28: ^( VT_FIELD accessor_path ( or_restr_connective )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_2);

                        adaptor.addChild(root_2, stream_accessor_path.nextTree());
                        // src/main/resources/org/drools/lang/DRL.g:1034:53: ( or_restr_connective )?
                        if ( stream_or_restr_connective.hasNext() ) {
                            adaptor.addChild(root_2, stream_or_restr_connective.nextTree());

                        }
                        stream_or_restr_connective.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1035:4: accessor_path or_restr_connective
                    {
                    pushFollow(FOLLOW_accessor_path_in_field_constraint4227);
                    accessor_path241=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessor_path.add(accessor_path241.getTree());
                    pushFollow(FOLLOW_or_restr_connective_in_field_constraint4229);
                    or_restr_connective242=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_restr_connective.add(or_restr_connective242.getTree());


                    // AST REWRITE
                    // elements: accessor_path, or_restr_connective
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1036:3: -> ^( VT_FIELD accessor_path or_restr_connective )
                    {
                        // src/main/resources/org/drools/lang/DRL.g:1036:6: ^( VT_FIELD accessor_path or_restr_connective )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_FIELD, "VT_FIELD"), root_1);

                        adaptor.addChild(root_1, stream_accessor_path.nextTree());
                        adaptor.addChild(root_1, stream_or_restr_connective.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "field_constraint"

    public static class label_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label"
    // src/main/resources/org/drools/lang/DRL.g:1039:1: label : value= ID COLON -> VT_LABEL[$value] ;
    public final DRLParser.label_return label() throws RecognitionException {
        DRLParser.label_return retval = new DRLParser.label_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token value=null;
        Token COLON243=null;

        Object value_tree=null;
        Object COLON243_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1040:2: (value= ID COLON -> VT_LABEL[$value] )
            // src/main/resources/org/drools/lang/DRL.g:1040:4: value= ID COLON
            {
            value=(Token)match(input,ID,FOLLOW_ID_in_label4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(value);

            if ( state.backtracking==0 ) {
              	helper.emit(value, DroolsEditorType.IDENTIFIER_VARIABLE);	
            }
            COLON243=(Token)match(input,COLON,FOLLOW_COLON_in_label4261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON243);

            if ( state.backtracking==0 ) {
              	helper.emit(COLON243, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1042:3: -> VT_LABEL[$value]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_LABEL, value));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "label"

    public static class or_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:1045:1: or_restr_connective : and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* ;
    public final DRLParser.or_restr_connective_return or_restr_connective() throws RecognitionException {
        DRLParser.or_restr_connective_return retval = new DRLParser.or_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE245=null;
        DRLParser.and_restr_connective_return and_restr_connective244 = null;

        DRLParser.and_restr_connective_return and_restr_connective246 = null;


        Object DOUBLE_PIPE245_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1046:2: ( and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )* )
            // src/main/resources/org/drools/lang/DRL.g:1046:4: and_restr_connective ({...}? => DOUBLE_PIPE and_restr_connective )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4282);
            and_restr_connective244=and_restr_connective();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective244.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1046:25: ({...}? => DOUBLE_PIPE and_restr_connective )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==DOUBLE_PIPE) ) {
                    int LA77_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt77=1;
                    }


                }


                switch (alt77) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1046:26: {...}? => DOUBLE_PIPE and_restr_connective
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "or_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_PIPE245=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_or_restr_connective4288); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE245_tree = (Object)adaptor.create(DOUBLE_PIPE245);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_PIPE245_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_PIPE245, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_and_restr_connective_in_or_restr_connective4296);
            	    and_restr_connective246=and_restr_connective();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_restr_connective246.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_restr_connective"

    public static class and_restr_connective_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_restr_connective"
    // src/main/resources/org/drools/lang/DRL.g:1059:1: and_restr_connective : constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* ;
    public final DRLParser.and_restr_connective_return and_restr_connective() throws RecognitionException {
        DRLParser.and_restr_connective_return retval = new DRLParser.and_restr_connective_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER248=null;
        DRLParser.constraint_expression_return constraint_expression247 = null;

        DRLParser.constraint_expression_return constraint_expression249 = null;


        Object DOUBLE_AMPER248_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1060:2: ( constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )* )
            // src/main/resources/org/drools/lang/DRL.g:1060:4: constraint_expression ({...}? => DOUBLE_AMPER constraint_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4317);
            constraint_expression247=constraint_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression247.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1060:26: ({...}? => DOUBLE_AMPER constraint_expression )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==DOUBLE_AMPER) ) {
                    int LA78_2 = input.LA(2);

                    if ( (((helper.validateRestr()))) ) {
                        alt78=1;
                    }


                }


                switch (alt78) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1060:27: {...}? => DOUBLE_AMPER constraint_expression
            	    {
            	    if ( !(((helper.validateRestr()))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "and_restr_connective", "(helper.validateRestr())");
            	    }
            	    DOUBLE_AMPER248=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_and_restr_connective4323); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER248_tree = (Object)adaptor.create(DOUBLE_AMPER248);
            	    root_0 = (Object)adaptor.becomeRoot(DOUBLE_AMPER248_tree, root_0);
            	    }
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOUBLE_AMPER248, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_constraint_expression_in_and_restr_connective4330);
            	    constraint_expression249=constraint_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_expression249.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_restr_connective"

    public static class constraint_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_expression"
    // src/main/resources/org/drools/lang/DRL.g:1073:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );
    public final DRLParser.constraint_expression_return constraint_expression() throws RecognitionException {
        DRLParser.constraint_expression_return retval = new DRLParser.constraint_expression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN252=null;
        Token RIGHT_PAREN254=null;
        DRLParser.compound_operator_return compound_operator250 = null;

        DRLParser.simple_operator_return simple_operator251 = null;

        DRLParser.or_restr_connective_return or_restr_connective253 = null;


        Object LEFT_PAREN252_tree=null;
        Object RIGHT_PAREN254_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1075:2: ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN )
            int alt79=3;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1075:4: compound_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_compound_operator_in_constraint_expression4360);
                    compound_operator250=compound_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_operator250.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1076:4: simple_operator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_operator_in_constraint_expression4365);
                    simple_operator251=simple_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_operator251.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1077:4: LEFT_PAREN or_restr_connective RIGHT_PAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN252=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constraint_expression4370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	helper.emit(LEFT_PAREN252, DroolsEditorType.SYMBOL);	
                    }
                    pushFollow(FOLLOW_or_restr_connective_in_constraint_expression4379);
                    or_restr_connective253=or_restr_connective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, or_restr_connective253.getTree());
                    RIGHT_PAREN254=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constraint_expression4384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN254_tree = (Object)adaptor.create(RIGHT_PAREN254);
                    adaptor.addChild(root_0, RIGHT_PAREN254_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(RIGHT_PAREN254, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch ( RecognitionException re ) {

            	if (!helper.lookaheadTest){
                    helper.reportError(re);
                    recover(input,re);
                	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
            	} else {
            		throw re;
            	}

        }
        finally {

            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID && 
            				input.LA(2) == ID && helper.validateLT(1, DroolsSoftKeywords.NOT)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.KEYWORD);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF  && input.LA(1) == ID && helper.validateLT(1, DroolsSoftKeywords.IN)) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.SYMBOL);
            		input.consume();
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);
            	} else if (helper.isEditorInterfaceEnabled && input.LA(3) == EOF && input.LA(1) == ID) {
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		helper.emit(input.LT(1), DroolsEditorType.KEYWORD);
            		helper.emit(input.LT(2), DroolsEditorType.IDENTIFIER);
            		input.consume();
            		input.consume();
            		if (input.get(input.index() - 1).getType() == WS){
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_END);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "constraint_expression"

    public static class simple_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_operator"
    // src/main/resources/org/drools/lang/DRL.g:1123:1: simple_operator : ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value ;
    public final DRLParser.simple_operator_return simple_operator() throws RecognitionException {
        DRLParser.simple_operator_return retval = new DRLParser.simple_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS255=null;
        Token GREATER256=null;
        Token GREATER_EQUALS257=null;
        Token LESS258=null;
        Token LESS_EQUALS259=null;
        Token NOT_EQUALS260=null;
        DRLParser.not_key_return not_key261 = null;

        DRLParser.operator_key_return operator_key262 = null;

        DRLParser.operator_params_return operator_params263 = null;

        DRLParser.expression_value_return expression_value264 = null;


        Object EQUALS255_tree=null;
        Object GREATER256_tree=null;
        Object GREATER_EQUALS257_tree=null;
        Object LESS258_tree=null;
        Object LESS_EQUALS259_tree=null;
        Object NOT_EQUALS260_tree=null;

        if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
        try {
            // src/main/resources/org/drools/lang/DRL.g:1125:2: ( ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value )
            // src/main/resources/org/drools/lang/DRL.g:1126:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) ) expression_value
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1126:2: ( EQUALS | GREATER | GREATER_EQUALS | LESS | LESS_EQUALS | NOT_EQUALS | ( not_key )? ( operator_key ( operator_params )? ) )
            int alt82=7;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==EQUALS) ) {
                alt82=1;
            }
            else if ( (LA82_0==GREATER) ) {
                alt82=2;
            }
            else if ( (LA82_0==GREATER_EQUALS) ) {
                alt82=3;
            }
            else if ( (LA82_0==LESS) ) {
                alt82=4;
            }
            else if ( (LA82_0==LESS_EQUALS) ) {
                alt82=5;
            }
            else if ( (LA82_0==NOT_EQUALS) ) {
                alt82=6;
            }
            else if ( (LA82_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {
                alt82=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1127:3: EQUALS
                    {
                    EQUALS255=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_simple_operator4419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS255_tree = (Object)adaptor.create(EQUALS255);
                    root_0 = (Object)adaptor.becomeRoot(EQUALS255_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(EQUALS255, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1128:4: GREATER
                    {
                    GREATER256=(Token)match(input,GREATER,FOLLOW_GREATER_in_simple_operator4427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER256_tree = (Object)adaptor.create(GREATER256);
                    root_0 = (Object)adaptor.becomeRoot(GREATER256_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER256, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1129:4: GREATER_EQUALS
                    {
                    GREATER_EQUALS257=(Token)match(input,GREATER_EQUALS,FOLLOW_GREATER_EQUALS_in_simple_operator4435); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_EQUALS257_tree = (Object)adaptor.create(GREATER_EQUALS257);
                    root_0 = (Object)adaptor.becomeRoot(GREATER_EQUALS257_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(GREATER_EQUALS257, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1130:4: LESS
                    {
                    LESS258=(Token)match(input,LESS,FOLLOW_LESS_in_simple_operator4443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS258_tree = (Object)adaptor.create(LESS258);
                    root_0 = (Object)adaptor.becomeRoot(LESS258_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS258, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1131:4: LESS_EQUALS
                    {
                    LESS_EQUALS259=(Token)match(input,LESS_EQUALS,FOLLOW_LESS_EQUALS_in_simple_operator4451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_EQUALS259_tree = (Object)adaptor.create(LESS_EQUALS259);
                    root_0 = (Object)adaptor.becomeRoot(LESS_EQUALS259_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(LESS_EQUALS259, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1132:4: NOT_EQUALS
                    {
                    NOT_EQUALS260=(Token)match(input,NOT_EQUALS,FOLLOW_NOT_EQUALS_in_simple_operator4459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EQUALS260_tree = (Object)adaptor.create(NOT_EQUALS260);
                    root_0 = (Object)adaptor.becomeRoot(NOT_EQUALS260_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NOT_EQUALS260, DroolsEditorType.SYMBOL);	
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1133:4: ( not_key )? ( operator_key ( operator_params )? )
                    {
                    // src/main/resources/org/drools/lang/DRL.g:1133:4: ( not_key )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {
                        int LA80_1 = input.LA(2);

                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                            alt80=1;
                        }
                    }
                    switch (alt80) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1133:4: not_key
                            {
                            pushFollow(FOLLOW_not_key_in_simple_operator4467);
                            not_key261=not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key261.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1134:3: ( operator_key ( operator_params )? )
                    // src/main/resources/org/drools/lang/DRL.g:1134:5: operator_key ( operator_params )?
                    {
                    pushFollow(FOLLOW_operator_key_in_simple_operator4474);
                    operator_key262=operator_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(operator_key262.getTree(), root_0);
                    // src/main/resources/org/drools/lang/DRL.g:1134:19: ( operator_params )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==LEFT_SQUARE) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1134:20: operator_params
                            {
                            pushFollow(FOLLOW_operator_params_in_simple_operator4478);
                            operator_params263=operator_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_params263.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            pushFollow(FOLLOW_expression_value_in_simple_operator4491);
            expression_value264=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value264.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_operator"

    public static class operator_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_params"
    // src/main/resources/org/drools/lang/DRL.g:1140:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );
    public final DRLParser.operator_params_return operator_params() throws RecognitionException {
        DRLParser.operator_params_return retval = new DRLParser.operator_params_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.operator_args_return ops = null;

        DRLParser.square_chunk_return square_chunk265 = null;


        RewriteRuleSubtreeStream stream_operator_args=new RewriteRuleSubtreeStream(adaptor,"rule operator_args");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1141:2: ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk )
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1141:4: ( operator_args )=>ops= operator_args
                    {
                    pushFollow(FOLLOW_operator_args_in_operator_params4510);
                    ops=operator_args();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_operator_args.add(ops.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1142:2: -> VT_SQUARE_CHUNK[$ops.start, $ops.text]
                    {
                        adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (ops!=null?((Token)ops.start):null), (ops!=null?input.toString(ops.start,ops.stop):null)));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1143:4: square_chunk
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_square_chunk_in_operator_params4522);
                    square_chunk265=square_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk265.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_params"

    public static class operator_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_args"
    // src/main/resources/org/drools/lang/DRL.g:1146:1: operator_args : LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE ;
    public final DRLParser.operator_args_return operator_args() throws RecognitionException {
        DRLParser.operator_args_return retval = new DRLParser.operator_args_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE266=null;
        Token COMMA268=null;
        Token RIGHT_SQUARE270=null;
        DRLParser.operator_arg_return operator_arg267 = null;

        DRLParser.operator_arg_return operator_arg269 = null;


        Object LEFT_SQUARE266_tree=null;
        Object COMMA268_tree=null;
        Object RIGHT_SQUARE270_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1147:2: ( LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1147:4: LEFT_SQUARE operator_arg ( COMMA operator_arg )* RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE266=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_operator_args4533); if (state.failed) return retval;
            pushFollow(FOLLOW_operator_arg_in_operator_args4536);
            operator_arg267=operator_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg267.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1147:30: ( COMMA operator_arg )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1147:31: COMMA operator_arg
            	    {
            	    COMMA268=(Token)match(input,COMMA,FOLLOW_COMMA_in_operator_args4539); if (state.failed) return retval;
            	    pushFollow(FOLLOW_operator_arg_in_operator_args4542);
            	    operator_arg269=operator_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_arg269.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            RIGHT_SQUARE270=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_operator_args4546); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_args"

    public static class operator_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_arg"
    // src/main/resources/org/drools/lang/DRL.g:1150:1: operator_arg : TimePeriod ;
    public final DRLParser.operator_arg_return operator_arg() throws RecognitionException {
        DRLParser.operator_arg_return retval = new DRLParser.operator_arg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TimePeriod271=null;

        Object TimePeriod271_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1151:2: ( TimePeriod )
            // src/main/resources/org/drools/lang/DRL.g:1151:4: TimePeriod
            {
            root_0 = (Object)adaptor.nil();

            TimePeriod271=(Token)match(input,TimePeriod,FOLLOW_TimePeriod_in_operator_arg4559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TimePeriod271_tree = (Object)adaptor.create(TimePeriod271);
            adaptor.addChild(root_0, TimePeriod271_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_arg"

    public static class compound_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_operator"
    // src/main/resources/org/drools/lang/DRL.g:1155:1: compound_operator : ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN ;
    public final DRLParser.compound_operator_return compound_operator() throws RecognitionException {
        DRLParser.compound_operator_return retval = new DRLParser.compound_operator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN275=null;
        Token COMMA277=null;
        Token RIGHT_PAREN279=null;
        DRLParser.in_key_return in_key272 = null;

        DRLParser.not_key_return not_key273 = null;

        DRLParser.in_key_return in_key274 = null;

        DRLParser.expression_value_return expression_value276 = null;

        DRLParser.expression_value_return expression_value278 = null;


        Object LEFT_PAREN275_tree=null;
        Object COMMA277_tree=null;
        Object RIGHT_PAREN279_tree=null;

         if ( state.backtracking==0 ) helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR); 
        try {
            // src/main/resources/org/drools/lang/DRL.g:1157:2: ( ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1158:2: ( in_key | not_key in_key ) LEFT_PAREN expression_value ( COMMA expression_value )* RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1158:2: ( in_key | not_key in_key )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))))) {
                int LA85_1 = input.LA(2);

                if ( (LA85_1==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.IN))))) {
                    alt85=1;
                }
                else if ( (LA85_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1158:4: in_key
                    {
                    pushFollow(FOLLOW_in_key_in_compound_operator4582);
                    in_key272=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key272.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1158:14: not_key in_key
                    {
                    pushFollow(FOLLOW_not_key_in_compound_operator4587);
                    not_key273=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_key273.getTree());
                    pushFollow(FOLLOW_in_key_in_compound_operator4589);
                    in_key274=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(in_key274.getTree(), root_0);

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_ARGUMENT);	
            }
            LEFT_PAREN275=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_compound_operator4600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN275, DroolsEditorType.SYMBOL);	
            }
            pushFollow(FOLLOW_expression_value_in_compound_operator4608);
            expression_value276=expression_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value276.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1161:21: ( COMMA expression_value )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==COMMA) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1161:23: COMMA expression_value
            	    {
            	    COMMA277=(Token)match(input,COMMA,FOLLOW_COMMA_in_compound_operator4612); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      	helper.emit(COMMA277, DroolsEditorType.SYMBOL);	
            	    }
            	    pushFollow(FOLLOW_expression_value_in_compound_operator4617);
            	    expression_value278=expression_value();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_value278.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);

            RIGHT_PAREN279=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_compound_operator4625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN279_tree = (Object)adaptor.create(RIGHT_PAREN279);
            adaptor.addChild(root_0, RIGHT_PAREN279_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN279, DroolsEditorType.SYMBOL);	
            }
            if ( state.backtracking==0 ) {
              	helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF && input.LA(1) == DOUBLE_PIPE) {
            		helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            		input.consume();
            		helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            	}	
        }
        return retval;
    }
    // $ANTLR end "compound_operator"

    public static class expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_value"
    // src/main/resources/org/drools/lang/DRL.g:1172:1: expression_value : ( accessor_path | signed_literal | paren_chunk ) ;
    public final DRLParser.expression_value_return expression_value() throws RecognitionException {
        DRLParser.expression_value_return retval = new DRLParser.expression_value_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.accessor_path_return accessor_path280 = null;

        DRLParser.signed_literal_return signed_literal281 = null;

        DRLParser.paren_chunk_return paren_chunk282 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1173:2: ( ( accessor_path | signed_literal | paren_chunk ) )
            // src/main/resources/org/drools/lang/DRL.g:1173:4: ( accessor_path | signed_literal | paren_chunk )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1173:4: ( accessor_path | signed_literal | paren_chunk )
            int alt87=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt87=1;
                }
                break;
            case STRING:
            case BOOL:
            case DECIMAL:
            case NULL:
            case PLUS:
            case MINUS:
            case HEX:
            case FLOAT:
                {
                alt87=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1173:5: accessor_path
                    {
                    pushFollow(FOLLOW_accessor_path_in_expression_value4646);
                    accessor_path280=accessor_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_path280.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1174:4: signed_literal
                    {
                    pushFollow(FOLLOW_signed_literal_in_expression_value4651);
                    signed_literal281=signed_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_literal281.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1175:4: paren_chunk
                    {
                    pushFollow(FOLLOW_paren_chunk_in_expression_value4657);
                    paren_chunk282=paren_chunk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk282.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	if (helper.isEditorInterfaceEnabled && !(input.LA(1) == EOF && input.get(input.index() - 1).getType() != WS))
              			helper.emit(Location.LOCATION_LHS_INSIDE_CONDITION_END);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
             
            	if (helper.isEditorInterfaceEnabled && input.LA(2) == EOF) {
            		if (input.LA(1) == DOUBLE_PIPE) {
            			helper.emit(input.LT(1), DroolsEditorType.SYMBOL);
            			input.consume();
            			helper.emit(true, Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR);
            		}
            	}

        }
        return retval;
    }
    // $ANTLR end "expression_value"

    public static class signed_literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_literal"
    // src/main/resources/org/drools/lang/DRL.g:1189:1: signed_literal : ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL );
    public final DRLParser.signed_literal_return signed_literal() throws RecognitionException {
        DRLParser.signed_literal_return retval = new DRLParser.signed_literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING283=null;
        Token BOOL287=null;
        Token NULL288=null;
        DRLParser.signed_decimal_return signed_decimal284 = null;

        DRLParser.signed_hex_return signed_hex285 = null;

        DRLParser.signed_float_return signed_float286 = null;


        Object STRING283_tree=null;
        Object BOOL287_tree=null;
        Object NULL288_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1190:9: ( STRING | signed_decimal | signed_hex | signed_float | BOOL | NULL )
            int alt88=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt88=1;
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case DECIMAL:
                    {
                    alt88=2;
                    }
                    break;
                case HEX:
                    {
                    alt88=3;
                    }
                    break;
                case FLOAT:
                    {
                    alt88=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 2, input);

                    throw nvae;
                }

                }
                break;
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case DECIMAL:
                    {
                    alt88=2;
                    }
                    break;
                case HEX:
                    {
                    alt88=3;
                    }
                    break;
                case FLOAT:
                    {
                    alt88=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 3, input);

                    throw nvae;
                }

                }
                break;
            case DECIMAL:
                {
                alt88=2;
                }
                break;
            case HEX:
                {
                alt88=3;
                }
                break;
            case FLOAT:
                {
                alt88=4;
                }
                break;
            case BOOL:
                {
                alt88=5;
                }
                break;
            case NULL:
                {
                alt88=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1190:17: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING283=(Token)match(input,STRING,FOLLOW_STRING_in_signed_literal4689); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING283_tree = (Object)adaptor.create(STRING283);
                    adaptor.addChild(root_0, STRING283_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(STRING283, DroolsEditorType.STRING_CONST);  
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1191:17: signed_decimal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_decimal_in_signed_literal4726);
                    signed_decimal284=signed_decimal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_decimal284.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1192:17: signed_hex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_hex_in_signed_literal4744);
                    signed_hex285=signed_hex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_hex285.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1193:17: signed_float
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_signed_float_in_signed_literal4762);
                    signed_float286=signed_float();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, signed_float286.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1194:17: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL287=(Token)match(input,BOOL,FOLLOW_BOOL_in_signed_literal4780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL287_tree = (Object)adaptor.create(BOOL287);
                    adaptor.addChild(root_0, BOOL287_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(BOOL287, DroolsEditorType.BOOLEAN_CONST); 
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1195:17: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL288=(Token)match(input,NULL,FOLLOW_NULL_in_signed_literal4819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL288_tree = (Object)adaptor.create(NULL288);
                    adaptor.addChild(root_0, NULL288_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(NULL288, DroolsEditorType.NULL_CONST); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_literal"

    public static class signed_decimal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal"
    // src/main/resources/org/drools/lang/DRL.g:1198:1: signed_decimal : sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] ;
    public final DRLParser.signed_decimal_return signed_decimal() throws RecognitionException {
        DRLParser.signed_decimal_return retval = new DRLParser.signed_decimal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_decimal_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_decimal_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_decimal_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1199:9: (sdm= signed_decimal_match -> SIGNED_DECIMAL[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1199:17: sdm= signed_decimal_match
            {
            pushFollow(FOLLOW_signed_decimal_match_in_signed_decimal4873);
            sdm=signed_decimal_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_decimal_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1199:42: -> SIGNED_DECIMAL[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_DECIMAL, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal"

    public static class signed_decimal_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_decimal_match"
    // src/main/resources/org/drools/lang/DRL.g:1202:1: signed_decimal_match : ( PLUS | MINUS )? DECIMAL ;
    public final DRLParser.signed_decimal_match_return signed_decimal_match() throws RecognitionException {
        DRLParser.signed_decimal_match_return retval = new DRLParser.signed_decimal_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS289=null;
        Token MINUS290=null;
        Token DECIMAL291=null;

        Object PLUS289_tree=null;
        Object MINUS290_tree=null;
        Object DECIMAL291_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1203:9: ( ( PLUS | MINUS )? DECIMAL )
            // src/main/resources/org/drools/lang/DRL.g:1203:17: ( PLUS | MINUS )? DECIMAL
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1203:17: ( PLUS | MINUS )?
            int alt89=3;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==PLUS) ) {
                alt89=1;
            }
            else if ( (LA89_0==MINUS) ) {
                alt89=2;
            }
            switch (alt89) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1203:18: PLUS
                    {
                    PLUS289=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_decimal_match4910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS289_tree = (Object)adaptor.create(PLUS289);
                    adaptor.addChild(root_0, PLUS289_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS289, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1203:81: MINUS
                    {
                    MINUS290=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_decimal_match4916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS290_tree = (Object)adaptor.create(MINUS290);
                    adaptor.addChild(root_0, MINUS290_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS290, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            DECIMAL291=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_signed_decimal_match4938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECIMAL291_tree = (Object)adaptor.create(DECIMAL291);
            adaptor.addChild(root_0, DECIMAL291_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(DECIMAL291, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_decimal_match"

    public static class signed_hex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex"
    // src/main/resources/org/drools/lang/DRL.g:1207:1: signed_hex : sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] ;
    public final DRLParser.signed_hex_return signed_hex() throws RecognitionException {
        DRLParser.signed_hex_return retval = new DRLParser.signed_hex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_hex_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_hex_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_hex_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1208:9: (sdm= signed_hex_match -> SIGNED_HEX[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1208:17: sdm= signed_hex_match
            {
            pushFollow(FOLLOW_signed_hex_match_in_signed_hex4973);
            sdm=signed_hex_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_hex_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1208:38: -> SIGNED_HEX[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_HEX, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex"

    public static class signed_hex_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_hex_match"
    // src/main/resources/org/drools/lang/DRL.g:1211:1: signed_hex_match : ( PLUS | MINUS )? HEX ;
    public final DRLParser.signed_hex_match_return signed_hex_match() throws RecognitionException {
        DRLParser.signed_hex_match_return retval = new DRLParser.signed_hex_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS292=null;
        Token MINUS293=null;
        Token HEX294=null;

        Object PLUS292_tree=null;
        Object MINUS293_tree=null;
        Object HEX294_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1212:9: ( ( PLUS | MINUS )? HEX )
            // src/main/resources/org/drools/lang/DRL.g:1212:17: ( PLUS | MINUS )? HEX
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1212:17: ( PLUS | MINUS )?
            int alt90=3;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==PLUS) ) {
                alt90=1;
            }
            else if ( (LA90_0==MINUS) ) {
                alt90=2;
            }
            switch (alt90) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1212:18: PLUS
                    {
                    PLUS292=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_hex_match5010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS292_tree = (Object)adaptor.create(PLUS292);
                    adaptor.addChild(root_0, PLUS292_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS292, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1212:81: MINUS
                    {
                    MINUS293=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_hex_match5016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS293_tree = (Object)adaptor.create(MINUS293);
                    adaptor.addChild(root_0, MINUS293_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS293, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            HEX294=(Token)match(input,HEX,FOLLOW_HEX_in_signed_hex_match5038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            HEX294_tree = (Object)adaptor.create(HEX294);
            adaptor.addChild(root_0, HEX294_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(HEX294, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_hex_match"

    public static class signed_float_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float"
    // src/main/resources/org/drools/lang/DRL.g:1216:1: signed_float : sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] ;
    public final DRLParser.signed_float_return signed_float() throws RecognitionException {
        DRLParser.signed_float_return retval = new DRLParser.signed_float_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.signed_float_match_return sdm = null;


        RewriteRuleSubtreeStream stream_signed_float_match=new RewriteRuleSubtreeStream(adaptor,"rule signed_float_match");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1217:9: (sdm= signed_float_match -> SIGNED_FLOAT[$sdm.text] )
            // src/main/resources/org/drools/lang/DRL.g:1217:17: sdm= signed_float_match
            {
            pushFollow(FOLLOW_signed_float_match_in_signed_float5073);
            sdm=signed_float_match();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_signed_float_match.add(sdm.getTree());


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1217:40: -> SIGNED_FLOAT[$sdm.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(SIGNED_FLOAT, (sdm!=null?input.toString(sdm.start,sdm.stop):null)));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float"

    public static class signed_float_match_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "signed_float_match"
    // src/main/resources/org/drools/lang/DRL.g:1220:1: signed_float_match : ( PLUS | MINUS )? FLOAT ;
    public final DRLParser.signed_float_match_return signed_float_match() throws RecognitionException {
        DRLParser.signed_float_match_return retval = new DRLParser.signed_float_match_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS295=null;
        Token MINUS296=null;
        Token FLOAT297=null;

        Object PLUS295_tree=null;
        Object MINUS296_tree=null;
        Object FLOAT297_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1221:9: ( ( PLUS | MINUS )? FLOAT )
            // src/main/resources/org/drools/lang/DRL.g:1221:17: ( PLUS | MINUS )? FLOAT
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1221:17: ( PLUS | MINUS )?
            int alt91=3;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==PLUS) ) {
                alt91=1;
            }
            else if ( (LA91_0==MINUS) ) {
                alt91=2;
            }
            switch (alt91) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1221:18: PLUS
                    {
                    PLUS295=(Token)match(input,PLUS,FOLLOW_PLUS_in_signed_float_match5110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS295_tree = (Object)adaptor.create(PLUS295);
                    adaptor.addChild(root_0, PLUS295_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(PLUS295, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1221:81: MINUS
                    {
                    MINUS296=(Token)match(input,MINUS,FOLLOW_MINUS_in_signed_float_match5116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS296_tree = (Object)adaptor.create(MINUS296);
                    adaptor.addChild(root_0, MINUS296_tree);
                    }
                    if ( state.backtracking==0 ) {
                       helper.emit(MINUS296, DroolsEditorType.NUMERIC_CONST); 
                    }

                    }
                    break;

            }

            FLOAT297=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_signed_float_match5138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLOAT297_tree = (Object)adaptor.create(FLOAT297);
            adaptor.addChild(root_0, FLOAT297_tree);
            }
            if ( state.backtracking==0 ) {
               helper.emit(FLOAT297, DroolsEditorType.NUMERIC_CONST); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "signed_float_match"

    public static class pattern_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_type"
    // src/main/resources/org/drools/lang/DRL.g:1224:1: pattern_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.pattern_type_return pattern_type() throws RecognitionException {
        DRLParser.pattern_type_return retval = new DRLParser.pattern_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition298 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1225:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1225:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type5159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1225:11: (id+= DOT id+= ID )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==DOT) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1225:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_type5165); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_pattern_type5169); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PATTERN, helper.buildStringFromTokens(list_id));	
            }
            // src/main/resources/org/drools/lang/DRL.g:1228:6: ( dimension_definition )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==LEFT_SQUARE) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1228:6: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_pattern_type5184);
            	    dimension_definition298=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition298.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);



            // AST REWRITE
            // elements: ID, dimension_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1229:3: -> ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1229:6: ^( VT_PATTERN_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PATTERN_TYPE, "VT_PATTERN_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1229:28: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern_type"

    public static class data_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // src/main/resources/org/drools/lang/DRL.g:1232:1: data_type : id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) ;
    public final DRLParser.data_type_return data_type() throws RecognitionException {
        DRLParser.data_type_return retval = new DRLParser.data_type_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;
        DRLParser.dimension_definition_return dimension_definition299 = null;


        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dimension_definition=new RewriteRuleSubtreeStream(adaptor,"rule dimension_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1233:2: (id+= ID (id+= DOT id+= ID )* ( dimension_definition )* -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1233:4: id+= ID (id+= DOT id+= ID )* ( dimension_definition )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_data_type5212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1233:11: (id+= DOT id+= ID )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==DOT) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1233:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_data_type5218); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_data_type5222); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // src/main/resources/org/drools/lang/DRL.g:1233:31: ( dimension_definition )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==LEFT_SQUARE) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1233:31: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_data_type5227);
            	    dimension_definition299=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dimension_definition.add(dimension_definition299.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);	
            }


            // AST REWRITE
            // elements: ID, dimension_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1235:3: -> ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1235:6: ^( VT_DATA_TYPE ( ID )+ ( dimension_definition )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_DATA_TYPE, "VT_DATA_TYPE"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();
                // src/main/resources/org/drools/lang/DRL.g:1235:25: ( dimension_definition )*
                while ( stream_dimension_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_dimension_definition.nextTree());

                }
                stream_dimension_definition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class dimension_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dimension_definition"
    // src/main/resources/org/drools/lang/DRL.g:1238:1: dimension_definition : LEFT_SQUARE RIGHT_SQUARE ;
    public final DRLParser.dimension_definition_return dimension_definition() throws RecognitionException {
        DRLParser.dimension_definition_return retval = new DRLParser.dimension_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE300=null;
        Token RIGHT_SQUARE301=null;

        Object LEFT_SQUARE300_tree=null;
        Object RIGHT_SQUARE301_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1239:2: ( LEFT_SQUARE RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1239:4: LEFT_SQUARE RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE300=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_dimension_definition5256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE300_tree = (Object)adaptor.create(LEFT_SQUARE300);
            adaptor.addChild(root_0, LEFT_SQUARE300_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_SQUARE300, DroolsEditorType.SYMBOL);	
            }
            RIGHT_SQUARE301=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_dimension_definition5263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE301_tree = (Object)adaptor.create(RIGHT_SQUARE301);
            adaptor.addChild(root_0, RIGHT_SQUARE301_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_SQUARE301, DroolsEditorType.SYMBOL);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dimension_definition"

    public static class accessor_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_path"
    // src/main/resources/org/drools/lang/DRL.g:1243:1: accessor_path : accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) ;
    public final DRLParser.accessor_path_return accessor_path() throws RecognitionException {
        DRLParser.accessor_path_return retval = new DRLParser.accessor_path_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT303=null;
        DRLParser.accessor_element_return accessor_element302 = null;

        DRLParser.accessor_element_return accessor_element304 = null;


        Object DOT303_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_accessor_element=new RewriteRuleSubtreeStream(adaptor,"rule accessor_element");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1244:2: ( accessor_element ( DOT accessor_element )* -> ^( VT_ACCESSOR_PATH ( accessor_element )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1244:4: accessor_element ( DOT accessor_element )*
            {
            pushFollow(FOLLOW_accessor_element_in_accessor_path5277);
            accessor_element302=accessor_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element302.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1244:21: ( DOT accessor_element )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==DOT) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1244:23: DOT accessor_element
            	    {
            	    DOT303=(Token)match(input,DOT,FOLLOW_DOT_in_accessor_path5281); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT303);

            	    if ( state.backtracking==0 ) {
            	      	helper.emit(DOT303, DroolsEditorType.IDENTIFIER);	
            	    }
            	    pushFollow(FOLLOW_accessor_element_in_accessor_path5285);
            	    accessor_element304=accessor_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_accessor_element.add(accessor_element304.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);



            // AST REWRITE
            // elements: accessor_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1245:2: -> ^( VT_ACCESSOR_PATH ( accessor_element )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1245:5: ^( VT_ACCESSOR_PATH ( accessor_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_PATH, "VT_ACCESSOR_PATH"), root_1);

                if ( !(stream_accessor_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_accessor_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessor_element.nextTree());

                }
                stream_accessor_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_path"

    public static class accessor_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_element"
    // src/main/resources/org/drools/lang/DRL.g:1248:1: accessor_element : ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) ;
    public final DRLParser.accessor_element_return accessor_element() throws RecognitionException {
        DRLParser.accessor_element_return retval = new DRLParser.accessor_element_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID305=null;
        DRLParser.square_chunk_return square_chunk306 = null;


        Object ID305_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_square_chunk=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1249:2: ( ID ( square_chunk )* -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1249:4: ID ( square_chunk )*
            {
            ID305=(Token)match(input,ID,FOLLOW_ID_in_accessor_element5309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID305);

            if ( state.backtracking==0 ) {
              	helper.emit(ID305, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1250:3: ( square_chunk )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==LEFT_SQUARE) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1250:3: square_chunk
            	    {
            	    pushFollow(FOLLOW_square_chunk_in_accessor_element5315);
            	    square_chunk306=square_chunk();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_square_chunk.add(square_chunk306.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);



            // AST REWRITE
            // elements: square_chunk, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1251:2: -> ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
            {
                // src/main/resources/org/drools/lang/DRL.g:1251:5: ^( VT_ACCESSOR_ELEMENT ID ( square_chunk )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_ACCESSOR_ELEMENT, "VT_ACCESSOR_ELEMENT"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // src/main/resources/org/drools/lang/DRL.g:1251:30: ( square_chunk )*
                while ( stream_square_chunk.hasNext() ) {
                    adaptor.addChild(root_1, stream_square_chunk.nextTree());

                }
                stream_square_chunk.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessor_element"

    public static class rhs_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1257:1: rhs_chunk : rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] ;
    public final DRLParser.rhs_chunk_return rhs_chunk() throws RecognitionException {
        DRLParser.rhs_chunk_return retval = new DRLParser.rhs_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.rhs_chunk_data_return rc = null;


        RewriteRuleSubtreeStream stream_rhs_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule rhs_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1260:3: (rc= rhs_chunk_data -> VT_RHS_CHUNK[$rc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1260:5: rc= rhs_chunk_data
            {
            pushFollow(FOLLOW_rhs_chunk_data_in_rhs_chunk5347);
            rc=rhs_chunk_data();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rhs_chunk_data.add(rc.getTree());
            if ( state.backtracking==0 ) {
              text = (rc!=null?input.toString(rc.start,rc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1261:2: -> VT_RHS_CHUNK[$rc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_RHS_CHUNK, (rc!=null?((Token)rc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk"

    public static class rhs_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rhs_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1264:1: rhs_chunk_data : THEN ( not_end_key )* end_key ( SEMICOLON )? ;
    public final DRLParser.rhs_chunk_data_return rhs_chunk_data() throws RecognitionException {
        DRLParser.rhs_chunk_data_return retval = new DRLParser.rhs_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token THEN307=null;
        Token SEMICOLON310=null;
        DRLParser.not_end_key_return not_end_key308 = null;

        DRLParser.end_key_return end_key309 = null;


        Object THEN307_tree=null;
        Object SEMICOLON310_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1265:2: ( THEN ( not_end_key )* end_key ( SEMICOLON )? )
            // src/main/resources/org/drools/lang/DRL.g:1265:4: THEN ( not_end_key )* end_key ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();

            THEN307=(Token)match(input,THEN,FOLLOW_THEN_in_rhs_chunk_data5366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEN307_tree = (Object)adaptor.create(THEN307);
            adaptor.addChild(root_0, THEN307_tree);
            }
            if ( state.backtracking==0 ) {
              	if ((THEN307!=null?THEN307.getText():null).equalsIgnoreCase("then")){
              			helper.emit(THEN307, DroolsEditorType.KEYWORD);
              			helper.emit(Location.LOCATION_RHS);
              		}	
            }
            // src/main/resources/org/drools/lang/DRL.g:1270:4: ( not_end_key )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.END)))||(!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))))) {
                    int LA98_1 = input.LA(2);

                    if ( ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                        alt98=1;
                    }


                }
                else if ( ((LA98_0>=VT_COMPILATION_UNIT && LA98_0<=SEMICOLON)||(LA98_0>=DOT && LA98_0<=MISC)) && ((!(helper.validateIdentifierKey(DroolsSoftKeywords.END))))) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1270:4: not_end_key
            	    {
            	    pushFollow(FOLLOW_not_end_key_in_rhs_chunk_data5375);
            	    not_end_key308=not_end_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_end_key308.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            pushFollow(FOLLOW_end_key_in_rhs_chunk_data5381);
            end_key309=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, end_key309.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1272:3: ( SEMICOLON )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==SEMICOLON) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1272:3: SEMICOLON
                    {
                    SEMICOLON310=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_rhs_chunk_data5386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMICOLON310_tree = (Object)adaptor.create(SEMICOLON310);
                    adaptor.addChild(root_0, SEMICOLON310_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              	helper.emit(SEMICOLON310, DroolsEditorType.KEYWORD);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rhs_chunk_data"

    public static class curly_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1275:1: curly_chunk : cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] ;
    public final DRLParser.curly_chunk_return curly_chunk() throws RecognitionException {
        DRLParser.curly_chunk_return retval = new DRLParser.curly_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.curly_chunk_data_return cc = null;


        RewriteRuleSubtreeStream stream_curly_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule curly_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1278:3: (cc= curly_chunk_data[false] -> VT_CURLY_CHUNK[$cc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1278:5: cc= curly_chunk_data[false]
            {
            pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk5405);
            cc=curly_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_curly_chunk_data.add(cc.getTree());
            if ( state.backtracking==0 ) {
              text = (cc!=null?input.toString(cc.start,cc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1279:2: -> VT_CURLY_CHUNK[$cc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_CURLY_CHUNK, (cc!=null?((Token)cc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk"

    public static class curly_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "curly_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1282:1: curly_chunk_data[boolean isRecursive] : lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY ;
    public final DRLParser.curly_chunk_data_return curly_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.curly_chunk_data_return retval = new DRLParser.curly_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lc1=null;
        Token any=null;
        Token rc1=null;
        DRLParser.curly_chunk_data_return curly_chunk_data311 = null;


        Object lc1_tree=null;
        Object any_tree=null;
        Object rc1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1283:2: (lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1283:4: lc1= LEFT_CURLY (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )* rc1= RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            lc1=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_curly_chunk_data5428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lc1_tree = (Object)adaptor.create(lc1);
            adaptor.addChild(root_0, lc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1290:4: (any=~ ( LEFT_CURLY | RIGHT_CURLY ) | curly_chunk_data[true] )*
            loop100:
            do {
                int alt100=3;
                int LA100_0 = input.LA(1);

                if ( ((LA100_0>=VT_COMPILATION_UNIT && LA100_0<=THEN)||(LA100_0>=QUESTION && LA100_0<=MISC)) ) {
                    alt100=1;
                }
                else if ( (LA100_0==LEFT_CURLY) ) {
                    alt100=2;
                }


                switch (alt100) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1290:5: any=~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=THEN)||(input.LA(1)>=QUESTION && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1290:94: curly_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_curly_chunk_data_in_curly_chunk_data5456);
            	    curly_chunk_data311=curly_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, curly_chunk_data311.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            rc1=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_curly_chunk_data5467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rc1_tree = (Object)adaptor.create(rc1);
            adaptor.addChild(root_0, rc1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rc1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rc1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "curly_chunk_data"

    public static class paren_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1300:1: paren_chunk : pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] ;
    public final DRLParser.paren_chunk_return paren_chunk() throws RecognitionException {
        DRLParser.paren_chunk_return retval = new DRLParser.paren_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.paren_chunk_data_return pc = null;


        RewriteRuleSubtreeStream stream_paren_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule paren_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1303:3: (pc= paren_chunk_data[false] -> VT_PAREN_CHUNK[$pc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1303:5: pc= paren_chunk_data[false]
            {
            pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk5488);
            pc=paren_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_paren_chunk_data.add(pc.getTree());
            if ( state.backtracking==0 ) {
              text = (pc!=null?input.toString(pc.start,pc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1304:2: -> VT_PAREN_CHUNK[$pc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_PAREN_CHUNK, (pc!=null?((Token)pc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk"

    public static class paren_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1307:1: paren_chunk_data[boolean isRecursive] : lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN ;
    public final DRLParser.paren_chunk_data_return paren_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.paren_chunk_data_return retval = new DRLParser.paren_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token lp1=null;
        Token any=null;
        Token rp1=null;
        DRLParser.paren_chunk_data_return paren_chunk_data312 = null;


        Object lp1_tree=null;
        Object any_tree=null;
        Object rp1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1308:2: (lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1308:4: lp1= LEFT_PAREN (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )* rp1= RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            lp1=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_paren_chunk_data5512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lp1_tree = (Object)adaptor.create(lp1);
            adaptor.addChild(root_0, lp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(lp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(lp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1315:4: (any=~ ( LEFT_PAREN | RIGHT_PAREN ) | paren_chunk_data[true] )*
            loop101:
            do {
                int alt101=3;
                int LA101_0 = input.LA(1);

                if ( ((LA101_0>=VT_COMPILATION_UNIT && LA101_0<=BOOL)||(LA101_0>=FROM && LA101_0<=MISC)) ) {
                    alt101=1;
                }
                else if ( (LA101_0==LEFT_PAREN) ) {
                    alt101=2;
                }


                switch (alt101) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1315:5: any=~ ( LEFT_PAREN | RIGHT_PAREN )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=BOOL)||(input.LA(1)>=FROM && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1315:94: paren_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_paren_chunk_data_in_paren_chunk_data5540);
            	    paren_chunk_data312=paren_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_chunk_data312.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            rp1=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_paren_chunk_data5551); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rp1_tree = (Object)adaptor.create(rp1);
            adaptor.addChild(root_0, rp1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rp1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rp1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "paren_chunk_data"

    public static class square_chunk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk"
    // src/main/resources/org/drools/lang/DRL.g:1325:1: square_chunk : sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] ;
    public final DRLParser.square_chunk_return square_chunk() throws RecognitionException {
        DRLParser.square_chunk_return retval = new DRLParser.square_chunk_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.square_chunk_data_return sc = null;


        RewriteRuleSubtreeStream stream_square_chunk_data=new RewriteRuleSubtreeStream(adaptor,"rule square_chunk_data");

        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:1328:3: (sc= square_chunk_data[false] -> VT_SQUARE_CHUNK[$sc.start,text] )
            // src/main/resources/org/drools/lang/DRL.g:1328:5: sc= square_chunk_data[false]
            {
            pushFollow(FOLLOW_square_chunk_data_in_square_chunk5572);
            sc=square_chunk_data(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_square_chunk_data.add(sc.getTree());
            if ( state.backtracking==0 ) {
              text = (sc!=null?input.toString(sc.start,sc.stop):null);
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1329:2: -> VT_SQUARE_CHUNK[$sc.start,text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_SQUARE_CHUNK, (sc!=null?((Token)sc.start):null), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk"

    public static class square_chunk_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "square_chunk_data"
    // src/main/resources/org/drools/lang/DRL.g:1332:1: square_chunk_data[boolean isRecursive] : ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE ;
    public final DRLParser.square_chunk_data_return square_chunk_data(boolean isRecursive) throws RecognitionException {
        DRLParser.square_chunk_data_return retval = new DRLParser.square_chunk_data_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ls1=null;
        Token any=null;
        Token rs1=null;
        DRLParser.square_chunk_data_return square_chunk_data313 = null;


        Object ls1_tree=null;
        Object any_tree=null;
        Object rs1_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1333:2: (ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1333:4: ls1= LEFT_SQUARE (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )* rs1= RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            ls1=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_square_chunk_data5595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ls1_tree = (Object)adaptor.create(ls1);
            adaptor.addChild(root_0, ls1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(ls1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(ls1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }
            // src/main/resources/org/drools/lang/DRL.g:1340:4: (any=~ ( LEFT_SQUARE | RIGHT_SQUARE ) | square_chunk_data[true] )*
            loop102:
            do {
                int alt102=3;
                int LA102_0 = input.LA(1);

                if ( ((LA102_0>=VT_COMPILATION_UNIT && LA102_0<=NOT_EQUALS)||(LA102_0>=NULL && LA102_0<=MISC)) ) {
                    alt102=1;
                }
                else if ( (LA102_0==LEFT_SQUARE) ) {
                    alt102=2;
                }


                switch (alt102) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1340:5: any=~ ( LEFT_SQUARE | RIGHT_SQUARE )
            	    {
            	    any=(Token)input.LT(1);
            	    if ( (input.LA(1)>=VT_COMPILATION_UNIT && input.LA(1)<=NOT_EQUALS)||(input.LA(1)>=NULL && input.LA(1)<=MISC) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(any));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       helper.emit(any, DroolsEditorType.CODE_CHUNK); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // src/main/resources/org/drools/lang/DRL.g:1340:95: square_chunk_data[true]
            	    {
            	    pushFollow(FOLLOW_square_chunk_data_in_square_chunk_data5622);
            	    square_chunk_data313=square_chunk_data(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, square_chunk_data313.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            rs1=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_square_chunk_data5633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            rs1_tree = (Object)adaptor.create(rs1);
            adaptor.addChild(root_0, rs1_tree);
            }
            if ( state.backtracking==0 ) {
              	if (!isRecursive) {
              				helper.emit(rs1, DroolsEditorType.SYMBOL);
              			} else {
              				helper.emit(rs1, DroolsEditorType.CODE_CHUNK);
              			}	
              		
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "square_chunk_data"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // src/main/resources/org/drools/lang/DRL.g:1353:1: literal : ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL );
    public final DRLParser.literal_return literal() throws RecognitionException {
        DRLParser.literal_return retval = new DRLParser.literal_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STRING314=null;
        Token DECIMAL315=null;
        Token HEX316=null;
        Token FLOAT317=null;
        Token BOOL318=null;
        Token NULL319=null;

        Object STRING314_tree=null;
        Object DECIMAL315_tree=null;
        Object HEX316_tree=null;
        Object FLOAT317_tree=null;
        Object BOOL318_tree=null;
        Object NULL319_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1354:2: ( STRING | DECIMAL | HEX | FLOAT | BOOL | NULL )
            int alt103=6;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt103=1;
                }
                break;
            case DECIMAL:
                {
                alt103=2;
                }
                break;
            case HEX:
                {
                alt103=3;
                }
                break;
            case FLOAT:
                {
                alt103=4;
                }
                break;
            case BOOL:
                {
                alt103=5;
                }
                break;
            case NULL:
                {
                alt103=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1354:4: STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    STRING314=(Token)match(input,STRING,FOLLOW_STRING_in_literal5651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING314_tree = (Object)adaptor.create(STRING314);
                    adaptor.addChild(root_0, STRING314_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(STRING314, DroolsEditorType.STRING_CONST);	
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1355:4: DECIMAL
                    {
                    root_0 = (Object)adaptor.nil();

                    DECIMAL315=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_literal5674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL315_tree = (Object)adaptor.create(DECIMAL315);
                    adaptor.addChild(root_0, DECIMAL315_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(DECIMAL315, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1356:4: HEX
                    {
                    root_0 = (Object)adaptor.nil();

                    HEX316=(Token)match(input,HEX,FOLLOW_HEX_in_literal5683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HEX316_tree = (Object)adaptor.create(HEX316);
                    adaptor.addChild(root_0, HEX316_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(HEX316, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1357:4: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();

                    FLOAT317=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_literal5696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT317_tree = (Object)adaptor.create(FLOAT317);
                    adaptor.addChild(root_0, FLOAT317_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(FLOAT317, DroolsEditorType.NUMERIC_CONST);	
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1358:4: BOOL
                    {
                    root_0 = (Object)adaptor.nil();

                    BOOL318=(Token)match(input,BOOL,FOLLOW_BOOL_in_literal5707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL318_tree = (Object)adaptor.create(BOOL318);
                    adaptor.addChild(root_0, BOOL318_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(BOOL318, DroolsEditorType.BOOLEAN_CONST);	
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1359:4: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL319=(Token)match(input,NULL,FOLLOW_NULL_in_literal5732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL319_tree = (Object)adaptor.create(NULL319);
                    adaptor.addChild(root_0, NULL319_tree);
                    }
                    if ( state.backtracking==0 ) {
                      	helper.emit(NULL319, DroolsEditorType.NULL_CONST);	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // src/main/resources/org/drools/lang/DRL.g:1362:1: typeList : type ( COMMA type )* ;
    public final DRLParser.typeList_return typeList() throws RecognitionException {
        DRLParser.typeList_return retval = new DRLParser.typeList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA321=null;
        DRLParser.type_return type320 = null;

        DRLParser.type_return type322 = null;


        Object COMMA321_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1363:2: ( type ( COMMA type )* )
            // src/main/resources/org/drools/lang/DRL.g:1363:4: type ( COMMA type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5763);
            type320=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type320.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1363:9: ( COMMA type )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==COMMA) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1363:10: COMMA type
            	    {
            	    COMMA321=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5766); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA321_tree = (Object)adaptor.create(COMMA321);
            	    adaptor.addChild(root_0, COMMA321_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList5768);
            	    type322=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type322.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class typeNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeNameList"
    // src/main/resources/org/drools/lang/DRL.g:1366:1: typeNameList : typeName ( COMMA typeName )* ;
    public final DRLParser.typeNameList_return typeNameList() throws RecognitionException {
        DRLParser.typeNameList_return retval = new DRLParser.typeNameList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA324=null;
        DRLParser.typeName_return typeName323 = null;

        DRLParser.typeName_return typeName325 = null;


        Object COMMA324_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1367:2: ( typeName ( COMMA typeName )* )
            // src/main/resources/org/drools/lang/DRL.g:1367:4: typeName ( COMMA typeName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeName_in_typeNameList5782);
            typeName323=typeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName323.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1367:13: ( COMMA typeName )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1367:14: COMMA typeName
            	    {
            	    COMMA324=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeNameList5785); if (state.failed) return retval;
            	    pushFollow(FOLLOW_typeName_in_typeNameList5788);
            	    typeName325=typeName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeName325.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeNameList"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // src/main/resources/org/drools/lang/DRL.g:1371:1: type options {backtrack=true; memoize=true; } : ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) );
    public final DRLParser.type_return type() throws RecognitionException {
        DRLParser.type_return retval = new DRLParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE327=null;
        Token RIGHT_SQUARE328=null;
        Token ID329=null;
        Token DOT331=null;
        Token ID332=null;
        Token LEFT_SQUARE334=null;
        Token RIGHT_SQUARE335=null;
        DRLParser.primitiveType_return primitiveType326 = null;

        DRLParser.typeArguments_return typeArguments330 = null;

        DRLParser.typeArguments_return typeArguments333 = null;


        Object LEFT_SQUARE327_tree=null;
        Object RIGHT_SQUARE328_tree=null;
        Object ID329_tree=null;
        Object DOT331_tree=null;
        Object ID332_tree=null;
        Object LEFT_SQUARE334_tree=null;
        Object RIGHT_SQUARE335_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1373:2: ( ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) | ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ID) ) {
                int LA111_1 = input.LA(2);

                if ( (((synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred8_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))))) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1373:5: ( primitiveType )=> ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1373:24: ( primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1373:26: primitiveType ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type5828);
                    primitiveType326=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType326.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1373:40: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==LEFT_SQUARE) ) {
                            int LA106_2 = input.LA(2);

                            if ( (LA106_2==RIGHT_SQUARE) ) {
                                int LA106_3 = input.LA(3);

                                if ( (synpred9_DRL()) ) {
                                    alt106=1;
                                }


                            }


                        }


                        switch (alt106) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1373:41: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE327=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5838); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE327_tree = (Object)adaptor.create(LEFT_SQUARE327);
                    	    adaptor.addChild(root_0, LEFT_SQUARE327_tree);
                    	    }
                    	    RIGHT_SQUARE328=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5840); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE328_tree = (Object)adaptor.create(RIGHT_SQUARE328);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE328_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1374:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1374:4: ( ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
                    // src/main/resources/org/drools/lang/DRL.g:1374:6: ID ( ( typeArguments )=> typeArguments )? ( DOT ID ( ( typeArguments )=> typeArguments )? )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    ID329=(Token)match(input,ID,FOLLOW_ID_in_type5851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID329_tree = (Object)adaptor.create(ID329);
                    adaptor.addChild(root_0, ID329_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1374:9: ( ( typeArguments )=> typeArguments )?
                    int alt107=2;
                    alt107 = dfa107.predict(input);
                    switch (alt107) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1374:10: ( typeArguments )=> typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_type5858);
                            typeArguments330=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments330.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1374:43: ( DOT ID ( ( typeArguments )=> typeArguments )? )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==DOT) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1374:44: DOT ID ( ( typeArguments )=> typeArguments )?
                    	    {
                    	    DOT331=(Token)match(input,DOT,FOLLOW_DOT_in_type5863); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT331_tree = (Object)adaptor.create(DOT331);
                    	    adaptor.addChild(root_0, DOT331_tree);
                    	    }
                    	    ID332=(Token)match(input,ID,FOLLOW_ID_in_type5865); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID332_tree = (Object)adaptor.create(ID332);
                    	    adaptor.addChild(root_0, ID332_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1374:51: ( ( typeArguments )=> typeArguments )?
                    	    int alt108=2;
                    	    alt108 = dfa108.predict(input);
                    	    switch (alt108) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1374:52: ( typeArguments )=> typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_type5872);
                    	            typeArguments333=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments333.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1374:88: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==LEFT_SQUARE) ) {
                            int LA110_2 = input.LA(2);

                            if ( (LA110_2==RIGHT_SQUARE) ) {
                                int LA110_3 = input.LA(3);

                                if ( (synpred12_DRL()) ) {
                                    alt110=1;
                                }


                            }


                        }


                        switch (alt110) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1374:89: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE334=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_type5887); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE334_tree = (Object)adaptor.create(LEFT_SQUARE334);
                    	    adaptor.addChild(root_0, LEFT_SQUARE334_tree);
                    	    }
                    	    RIGHT_SQUARE335=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_type5889); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE335_tree = (Object)adaptor.create(RIGHT_SQUARE335);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE335_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop110;
                        }
                    } while (true);


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // src/main/resources/org/drools/lang/DRL.g:1377:1: typeName : ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] ;
    public final DRLParser.typeName_return typeName() throws RecognitionException {
        DRLParser.typeName_return retval = new DRLParser.typeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID336=null;
        Token DOT337=null;
        Token ID338=null;

        Object ID336_tree=null;
        Object DOT337_tree=null;
        Object ID338_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1378:2: ( ID ( DOT ID )* -> VT_TYPE_NAME[$typeName.text] )
            // src/main/resources/org/drools/lang/DRL.g:1378:6: ID ( DOT ID )*
            {
            ID336=(Token)match(input,ID,FOLLOW_ID_in_typeName5906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID336);

            // src/main/resources/org/drools/lang/DRL.g:1378:9: ( DOT ID )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==DOT) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1378:10: DOT ID
            	    {
            	    DOT337=(Token)match(input,DOT,FOLLOW_DOT_in_typeName5909); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT337);

            	    ID338=(Token)match(input,ID,FOLLOW_ID_in_typeName5911); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(ID338);


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1378:19: -> VT_TYPE_NAME[$typeName.text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VT_TYPE_NAME, input.toString(retval.start,input.LT(-1))));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // src/main/resources/org/drools/lang/DRL.g:1383:1: packageOrTypeName : id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) ;
    public final DRLParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        DRLParser.packageOrTypeName_return retval = new DRLParser.packageOrTypeName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;
        List list_id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // src/main/resources/org/drools/lang/DRL.g:1384:2: (id+= ID (id+= DOT id+= ID )* -> ^( VT_PACKAGE_ID ( ID )+ ) )
            // src/main/resources/org/drools/lang/DRL.g:1384:4: id+= ID (id+= DOT id+= ID )*
            {
            id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if (list_id==null) list_id=new ArrayList();
            list_id.add(id);

            // src/main/resources/org/drools/lang/DRL.g:1384:11: (id+= DOT id+= ID )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==DOT) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1384:13: id+= DOT id+= ID
            	    {
            	    id=(Token)match(input,DOT,FOLLOW_DOT_in_packageOrTypeName5945); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);

            	    id=(Token)match(input,ID,FOLLOW_ID_in_packageOrTypeName5949); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ID.add(id);

            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id);


            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              	helper.emit(list_id, DroolsEditorType.IDENTIFIER);
              		helper.setParaphrasesValue(DroolsParaphraseTypes.PACKAGE, helper.buildStringFromTokens(list_id));	
            }


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1387:3: -> ^( VT_PACKAGE_ID ( ID )+ )
            {
                // src/main/resources/org/drools/lang/DRL.g:1387:6: ^( VT_PACKAGE_ID ( ID )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PACKAGE_ID, "VT_PACKAGE_ID"), root_1);

                if ( !(stream_ID.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, stream_ID.nextNode());

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1390:1: typeArguments : LESS typeArgument ( COMMA typeArgument )* GREATER ;
    public final DRLParser.typeArguments_return typeArguments() throws RecognitionException {
        DRLParser.typeArguments_return retval = new DRLParser.typeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS339=null;
        Token COMMA341=null;
        Token GREATER343=null;
        DRLParser.typeArgument_return typeArgument340 = null;

        DRLParser.typeArgument_return typeArgument342 = null;


        Object LESS339_tree=null;
        Object COMMA341_tree=null;
        Object GREATER343_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1391:2: ( LESS typeArgument ( COMMA typeArgument )* GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1391:4: LESS typeArgument ( COMMA typeArgument )* GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS339=(Token)match(input,LESS,FOLLOW_LESS_in_typeArguments5977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS339_tree = (Object)adaptor.create(LESS339);
            adaptor.addChild(root_0, LESS339_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments5979);
            typeArgument340=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument340.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1391:22: ( COMMA typeArgument )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==COMMA) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1391:23: COMMA typeArgument
            	    {
            	    COMMA341=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments5982); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA341_tree = (Object)adaptor.create(COMMA341);
            	    adaptor.addChild(root_0, COMMA341_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments5984);
            	    typeArgument342=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArgument342.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            GREATER343=(Token)match(input,GREATER,FOLLOW_GREATER_in_typeArguments5988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER343_tree = (Object)adaptor.create(GREATER343);
            adaptor.addChild(root_0, GREATER343_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // src/main/resources/org/drools/lang/DRL.g:1394:1: typeArgument : ( type | QUESTION ( ( extends_key | super_key ) type )? );
    public final DRLParser.typeArgument_return typeArgument() throws RecognitionException {
        DRLParser.typeArgument_return retval = new DRLParser.typeArgument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION345=null;
        DRLParser.type_return type344 = null;

        DRLParser.extends_key_return extends_key346 = null;

        DRLParser.super_key_return super_key347 = null;

        DRLParser.type_return type348 = null;


        Object QUESTION345_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1395:2: ( type | QUESTION ( ( extends_key | super_key ) type )? )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==ID) ) {
                alt117=1;
            }
            else if ( (LA117_0==QUESTION) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1395:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument6000);
                    type344=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type344.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1396:4: QUESTION ( ( extends_key | super_key ) type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    QUESTION345=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_typeArgument6005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION345_tree = (Object)adaptor.create(QUESTION345);
                    adaptor.addChild(root_0, QUESTION345_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1396:13: ( ( extends_key | super_key ) type )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1396:14: ( extends_key | super_key ) type
                            {
                            // src/main/resources/org/drools/lang/DRL.g:1396:14: ( extends_key | super_key )
                            int alt115=2;
                            int LA115_0 = input.LA(1);

                            if ( (LA115_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))))) {
                                int LA115_1 = input.LA(2);

                                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                                    alt115=1;
                                }
                                else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                                    alt115=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 115, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 115, 0, input);

                                throw nvae;
                            }
                            switch (alt115) {
                                case 1 :
                                    // src/main/resources/org/drools/lang/DRL.g:1396:15: extends_key
                                    {
                                    pushFollow(FOLLOW_extends_key_in_typeArgument6009);
                                    extends_key346=extends_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extends_key346.getTree());

                                    }
                                    break;
                                case 2 :
                                    // src/main/resources/org/drools/lang/DRL.g:1396:29: super_key
                                    {
                                    pushFollow(FOLLOW_super_key_in_typeArgument6013);
                                    super_key347=super_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key347.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument6016);
                            type348=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type348.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameters"
    // src/main/resources/org/drools/lang/DRL.g:1399:1: parameters : LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) ;
    public final DRLParser.parameters_return parameters() throws RecognitionException {
        DRLParser.parameters_return retval = new DRLParser.parameters_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN349=null;
        Token COMMA351=null;
        Token RIGHT_PAREN353=null;
        DRLParser.param_definition_return param_definition350 = null;

        DRLParser.param_definition_return param_definition352 = null;


        Object LEFT_PAREN349_tree=null;
        Object COMMA351_tree=null;
        Object RIGHT_PAREN353_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_param_definition=new RewriteRuleSubtreeStream(adaptor,"rule param_definition");
        try {
            // src/main/resources/org/drools/lang/DRL.g:1400:2: ( LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN ) )
            // src/main/resources/org/drools/lang/DRL.g:1400:4: LEFT_PAREN ( param_definition ( COMMA param_definition )* )? RIGHT_PAREN
            {
            LEFT_PAREN349=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parameters6029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN349);

            if ( state.backtracking==0 ) {
              	helper.emit(LEFT_PAREN349, DroolsEditorType.SYMBOL);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1401:4: ( param_definition ( COMMA param_definition )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==ID) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1401:6: param_definition ( COMMA param_definition )*
                    {
                    pushFollow(FOLLOW_param_definition_in_parameters6038);
                    param_definition350=param_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_param_definition.add(param_definition350.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1401:23: ( COMMA param_definition )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==COMMA) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1401:24: COMMA param_definition
                    	    {
                    	    COMMA351=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameters6041); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA351);

                    	    if ( state.backtracking==0 ) {
                    	      	helper.emit(COMMA351, DroolsEditorType.SYMBOL);	
                    	    }
                    	    pushFollow(FOLLOW_param_definition_in_parameters6045);
                    	    param_definition352=param_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_param_definition.add(param_definition352.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }

            RIGHT_PAREN353=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parameters6054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN353);

            if ( state.backtracking==0 ) {
              	helper.emit(RIGHT_PAREN353, DroolsEditorType.SYMBOL);	
            }


            // AST REWRITE
            // elements: RIGHT_PAREN, param_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1403:3: -> ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
            {
                // src/main/resources/org/drools/lang/DRL.g:1403:6: ^( VT_PARAM_LIST ( param_definition )* RIGHT_PAREN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VT_PARAM_LIST, "VT_PARAM_LIST"), root_1);

                // src/main/resources/org/drools/lang/DRL.g:1403:22: ( param_definition )*
                while ( stream_param_definition.hasNext() ) {
                    adaptor.addChild(root_1, stream_param_definition.nextTree());

                }
                stream_param_definition.reset();
                adaptor.addChild(root_1, stream_RIGHT_PAREN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameters"

    public static class param_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "param_definition"
    // src/main/resources/org/drools/lang/DRL.g:1406:1: param_definition : ( data_type )? argument ;
    public final DRLParser.param_definition_return param_definition() throws RecognitionException {
        DRLParser.param_definition_return retval = new DRLParser.param_definition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.data_type_return data_type354 = null;

        DRLParser.argument_return argument355 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1407:2: ( ( data_type )? argument )
            // src/main/resources/org/drools/lang/DRL.g:1407:4: ( data_type )? argument
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1407:4: ( data_type )?
            int alt120=2;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1407:4: data_type
                    {
                    pushFollow(FOLLOW_data_type_in_param_definition6080);
                    data_type354=data_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type354.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_argument_in_param_definition6083);
            argument355=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument355.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "param_definition"

    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // src/main/resources/org/drools/lang/DRL.g:1410:1: argument : ID ( dimension_definition )* ;
    public final DRLParser.argument_return argument() throws RecognitionException {
        DRLParser.argument_return retval = new DRLParser.argument_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID356=null;
        DRLParser.dimension_definition_return dimension_definition357 = null;


        Object ID356_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1411:2: ( ID ( dimension_definition )* )
            // src/main/resources/org/drools/lang/DRL.g:1411:4: ID ( dimension_definition )*
            {
            root_0 = (Object)adaptor.nil();

            ID356=(Token)match(input,ID,FOLLOW_ID_in_argument6094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID356_tree = (Object)adaptor.create(ID356);
            adaptor.addChild(root_0, ID356_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(ID356, DroolsEditorType.IDENTIFIER);	
            }
            // src/main/resources/org/drools/lang/DRL.g:1412:3: ( dimension_definition )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==LEFT_SQUARE) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1412:3: dimension_definition
            	    {
            	    pushFollow(FOLLOW_dimension_definition_in_argument6100);
            	    dimension_definition357=dimension_definition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dimension_definition357.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class string_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_list"
    // src/main/resources/org/drools/lang/DRL.g:1415:1: string_list : first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] ;
    public final DRLParser.string_list_return string_list() throws RecognitionException {
        DRLParser.string_list_return retval = new DRLParser.string_list_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token first=null;
        Token next=null;
        Token COMMA358=null;

        Object first_tree=null;
        Object next_tree=null;
        Object COMMA358_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");


            StringBuilder buf = new StringBuilder();

        try {
            // src/main/resources/org/drools/lang/DRL.g:1419:2: (first= STRING ( COMMA next= STRING )* -> STRING[$first,buf.toString()+\" ]\"] )
            // src/main/resources/org/drools/lang/DRL.g:1419:4: first= STRING ( COMMA next= STRING )*
            {
            first=(Token)match(input,STRING,FOLLOW_STRING_in_string_list6119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING.add(first);

            if ( state.backtracking==0 ) {
               buf.append( "[ "+ (first!=null?first.getText():null) ); 
            }
            // src/main/resources/org/drools/lang/DRL.g:1420:5: ( COMMA next= STRING )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==COMMA) ) {
                    int LA122_2 = input.LA(2);

                    if ( (LA122_2==STRING) ) {
                        alt122=1;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1420:6: COMMA next= STRING
            	    {
            	    COMMA358=(Token)match(input,COMMA,FOLLOW_COMMA_in_string_list6128); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA358);

            	    next=(Token)match(input,STRING,FOLLOW_STRING_in_string_list6132); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_STRING.add(next);

            	    if ( state.backtracking==0 ) {
            	       buf.append( ", " + (next!=null?next.getText():null) ); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);



            // AST REWRITE
            // elements: STRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1421:2: -> STRING[$first,buf.toString()+\" ]\"]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(STRING, first, buf.toString()+" ]"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_list"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // src/main/resources/org/drools/lang/DRL.g:1562:1: expression options {backtrack=true; memoize=true; } : conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? ;
    public final DRLParser.expression_return expression() throws RecognitionException {
        DRLParser.expression_return retval = new DRLParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.conditionalExpression_return conditionalExpression359 = null;

        DRLParser.assignmentOperator_return assignmentOperator360 = null;

        DRLParser.expression_return expression361 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1564:2: ( conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )? )
            // src/main/resources/org/drools/lang/DRL.g:1564:4: conditionalExpression ( ( assignmentOperator )=> assignmentOperator expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression6178);
            conditionalExpression359=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression359.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1564:26: ( ( assignmentOperator )=> assignmentOperator expression )?
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1564:27: ( assignmentOperator )=> assignmentOperator expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression6187);
                    assignmentOperator360=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentOperator360.getTree());
                    pushFollow(FOLLOW_expression_in_expression6189);
                    expression361=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression361.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1567:1: conditionalExpression : conditionalOrExpression ( QUESTION expression COLON expression )? ;
    public final DRLParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        DRLParser.conditionalExpression_return retval = new DRLParser.conditionalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token QUESTION363=null;
        Token COLON365=null;
        DRLParser.conditionalOrExpression_return conditionalOrExpression362 = null;

        DRLParser.expression_return expression364 = null;

        DRLParser.expression_return expression366 = null;


        Object QUESTION363_tree=null;
        Object COLON365_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1568:9: ( conditionalOrExpression ( QUESTION expression COLON expression )? )
            // src/main/resources/org/drools/lang/DRL.g:1568:17: conditionalOrExpression ( QUESTION expression COLON expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression6215);
            conditionalOrExpression362=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression362.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1568:41: ( QUESTION expression COLON expression )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==QUESTION) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1568:43: QUESTION expression COLON expression
                    {
                    QUESTION363=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression6219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION363_tree = (Object)adaptor.create(QUESTION363);
                    adaptor.addChild(root_0, QUESTION363_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6221);
                    expression364=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression364.getTree());
                    COLON365=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression6223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON365_tree = (Object)adaptor.create(COLON365);
                    adaptor.addChild(root_0, COLON365_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression6225);
                    expression366=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression366.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1570:1: conditionalOrExpression : conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* ;
    public final DRLParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        DRLParser.conditionalOrExpression_return retval = new DRLParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_PIPE368=null;
        DRLParser.conditionalAndExpression_return conditionalAndExpression367 = null;

        DRLParser.conditionalAndExpression_return conditionalAndExpression369 = null;


        Object DOUBLE_PIPE368_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1571:5: ( conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1571:9: conditionalAndExpression ( DOUBLE_PIPE conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6243);
            conditionalAndExpression367=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression367.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1571:34: ( DOUBLE_PIPE conditionalAndExpression )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==DOUBLE_PIPE) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1571:36: DOUBLE_PIPE conditionalAndExpression
            	    {
            	    DOUBLE_PIPE368=(Token)match(input,DOUBLE_PIPE,FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6247); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_PIPE368_tree = (Object)adaptor.create(DOUBLE_PIPE368);
            	    adaptor.addChild(root_0, DOUBLE_PIPE368_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression6249);
            	    conditionalAndExpression369=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression369.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // src/main/resources/org/drools/lang/DRL.g:1574:1: conditionalAndExpression : inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* ;
    public final DRLParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        DRLParser.conditionalAndExpression_return retval = new DRLParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOUBLE_AMPER371=null;
        DRLParser.inclusiveOrExpression_return inclusiveOrExpression370 = null;

        DRLParser.inclusiveOrExpression_return inclusiveOrExpression372 = null;


        Object DOUBLE_AMPER371_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1575:5: ( inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1575:9: inclusiveOrExpression ( DOUBLE_AMPER inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6268);
            inclusiveOrExpression370=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression370.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1575:31: ( DOUBLE_AMPER inclusiveOrExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==DOUBLE_AMPER) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1575:33: DOUBLE_AMPER inclusiveOrExpression
            	    {
            	    DOUBLE_AMPER371=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression6272); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOUBLE_AMPER371_tree = (Object)adaptor.create(DOUBLE_AMPER371);
            	    adaptor.addChild(root_0, DOUBLE_AMPER371_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6274);
            	    inclusiveOrExpression372=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression372.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1578:1: inclusiveOrExpression : exclusiveOrExpression ( PIPE exclusiveOrExpression )* ;
    public final DRLParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        DRLParser.inclusiveOrExpression_return retval = new DRLParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PIPE374=null;
        DRLParser.exclusiveOrExpression_return exclusiveOrExpression373 = null;

        DRLParser.exclusiveOrExpression_return exclusiveOrExpression375 = null;


        Object PIPE374_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1579:5: ( exclusiveOrExpression ( PIPE exclusiveOrExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1579:9: exclusiveOrExpression ( PIPE exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6293);
            exclusiveOrExpression373=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression373.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1579:31: ( PIPE exclusiveOrExpression )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==PIPE) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1579:33: PIPE exclusiveOrExpression
            	    {
            	    PIPE374=(Token)match(input,PIPE,FOLLOW_PIPE_in_inclusiveOrExpression6297); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE374_tree = (Object)adaptor.create(PIPE374);
            	    adaptor.addChild(root_0, PIPE374_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6299);
            	    exclusiveOrExpression375=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression375.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // src/main/resources/org/drools/lang/DRL.g:1582:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final DRLParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        DRLParser.exclusiveOrExpression_return retval = new DRLParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token XOR377=null;
        DRLParser.andExpression_return andExpression376 = null;

        DRLParser.andExpression_return andExpression378 = null;


        Object XOR377_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1583:5: ( andExpression ( XOR andExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1583:9: andExpression ( XOR andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6318);
            andExpression376=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression376.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1583:23: ( XOR andExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==XOR) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1583:25: XOR andExpression
            	    {
            	    XOR377=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression6322); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR377_tree = (Object)adaptor.create(XOR377);
            	    adaptor.addChild(root_0, XOR377_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression6324);
            	    andExpression378=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression378.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // src/main/resources/org/drools/lang/DRL.g:1586:1: andExpression : equalityExpression ( AMPER equalityExpression )* ;
    public final DRLParser.andExpression_return andExpression() throws RecognitionException {
        DRLParser.andExpression_return retval = new DRLParser.andExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AMPER380=null;
        DRLParser.equalityExpression_return equalityExpression379 = null;

        DRLParser.equalityExpression_return equalityExpression381 = null;


        Object AMPER380_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1587:5: ( equalityExpression ( AMPER equalityExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1587:9: equalityExpression ( AMPER equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression6343);
            equalityExpression379=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression379.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1587:28: ( AMPER equalityExpression )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==AMPER) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1587:30: AMPER equalityExpression
            	    {
            	    AMPER380=(Token)match(input,AMPER,FOLLOW_AMPER_in_andExpression6347); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPER380_tree = (Object)adaptor.create(AMPER380);
            	    adaptor.addChild(root_0, AMPER380_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression6349);
            	    equalityExpression381=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression381.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // src/main/resources/org/drools/lang/DRL.g:1590:1: equalityExpression : instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* ;
    public final DRLParser.equalityExpression_return equalityExpression() throws RecognitionException {
        DRLParser.equalityExpression_return retval = new DRLParser.equalityExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set383=null;
        DRLParser.instanceOfExpression_return instanceOfExpression382 = null;

        DRLParser.instanceOfExpression_return instanceOfExpression384 = null;


        Object set383_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1591:5: ( instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1591:9: instanceOfExpression ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression6368);
            instanceOfExpression382=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression382.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1591:30: ( ( EQUALS | NOT_EQUALS ) instanceOfExpression )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==EQUALS||LA130_0==NOT_EQUALS) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1591:32: ( EQUALS | NOT_EQUALS ) instanceOfExpression
            	    {
            	    set383=(Token)input.LT(1);
            	    if ( input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set383));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression6382);
            	    instanceOfExpression384=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression384.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // src/main/resources/org/drools/lang/DRL.g:1594:1: instanceOfExpression : relationalExpression ( instanceof_key type )? ;
    public final DRLParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        DRLParser.instanceOfExpression_return retval = new DRLParser.instanceOfExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.relationalExpression_return relationalExpression385 = null;

        DRLParser.instanceof_key_return instanceof_key386 = null;

        DRLParser.type_return type387 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1595:5: ( relationalExpression ( instanceof_key type )? )
            // src/main/resources/org/drools/lang/DRL.g:1595:9: relationalExpression ( instanceof_key type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression6401);
            relationalExpression385=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression385.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1595:30: ( instanceof_key type )?
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1595:31: instanceof_key type
                    {
                    pushFollow(FOLLOW_instanceof_key_in_instanceOfExpression6404);
                    instanceof_key386=instanceof_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceof_key386.getTree());
                    pushFollow(FOLLOW_type_in_instanceOfExpression6406);
                    type387=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type387.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // src/main/resources/org/drools/lang/DRL.g:1598:1: relationalExpression : shiftExpression ( ( LESS )=> relationalOp shiftExpression )* ;
    public final DRLParser.relationalExpression_return relationalExpression() throws RecognitionException {
        DRLParser.relationalExpression_return retval = new DRLParser.relationalExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.shiftExpression_return shiftExpression388 = null;

        DRLParser.relationalOp_return relationalOp389 = null;

        DRLParser.shiftExpression_return shiftExpression390 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1599:5: ( shiftExpression ( ( LESS )=> relationalOp shiftExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1599:9: shiftExpression ( ( LESS )=> relationalOp shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression6424);
            shiftExpression388=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression388.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1599:25: ( ( LESS )=> relationalOp shiftExpression )*
            loop132:
            do {
                int alt132=2;
                alt132 = dfa132.predict(input);
                switch (alt132) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1599:27: ( LESS )=> relationalOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression6433);
            	    relationalOp389=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalOp389.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression6435);
            	    shiftExpression390=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression390.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // src/main/resources/org/drools/lang/DRL.g:1602:1: relationalOp : ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) ;
    public final DRLParser.relationalOp_return relationalOp() throws RecognitionException {
        DRLParser.relationalOp_return retval = new DRLParser.relationalOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set391=null;

        Object set391_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1603:2: ( ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER ) )
            // src/main/resources/org/drools/lang/DRL.g:1603:4: ( LESS_EQUALS | GREATER_EQUALS | LESS | GREATER )
            {
            root_0 = (Object)adaptor.nil();

            set391=(Token)input.LT(1);
            if ( (input.LA(1)>=GREATER && input.LA(1)<=LESS_EQUALS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set391));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // src/main/resources/org/drools/lang/DRL.g:1606:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
    public final DRLParser.shiftExpression_return shiftExpression() throws RecognitionException {
        DRLParser.shiftExpression_return retval = new DRLParser.shiftExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.additiveExpression_return additiveExpression392 = null;

        DRLParser.shiftOp_return shiftOp393 = null;

        DRLParser.additiveExpression_return additiveExpression394 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1607:5: ( additiveExpression ( shiftOp additiveExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1607:9: additiveExpression ( shiftOp additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression6482);
            additiveExpression392=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression392.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1607:28: ( shiftOp additiveExpression )*
            loop133:
            do {
                int alt133=2;
                switch ( input.LA(1) ) {
                case SHIFT_LEFT:
                    {
                    int LA133_2 = input.LA(2);

                    if ( (LA133_2==ID||LA133_2==STRING||(LA133_2>=BOOL && LA133_2<=LEFT_PAREN)||LA133_2==DECIMAL||LA133_2==LESS||LA133_2==LEFT_SQUARE||(LA133_2>=NULL && LA133_2<=FLOAT)||(LA133_2>=INCR && LA133_2<=NEGATION)) ) {
                        alt133=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT:
                    {
                    int LA133_3 = input.LA(2);

                    if ( (LA133_3==ID||LA133_3==STRING||(LA133_3>=BOOL && LA133_3<=LEFT_PAREN)||LA133_3==DECIMAL||LA133_3==LESS||LA133_3==LEFT_SQUARE||(LA133_3>=NULL && LA133_3<=FLOAT)||(LA133_3>=INCR && LA133_3<=NEGATION)) ) {
                        alt133=1;
                    }


                    }
                    break;
                case SHIFT_RIGHT_UNSIG:
                    {
                    int LA133_4 = input.LA(2);

                    if ( (LA133_4==ID||LA133_4==STRING||(LA133_4>=BOOL && LA133_4<=LEFT_PAREN)||LA133_4==DECIMAL||LA133_4==LESS||LA133_4==LEFT_SQUARE||(LA133_4>=NULL && LA133_4<=FLOAT)||(LA133_4>=INCR && LA133_4<=NEGATION)) ) {
                        alt133=1;
                    }


                    }
                    break;

                }

                switch (alt133) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1607:30: shiftOp additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression6486);
            	    shiftOp393=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftOp393.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression6488);
            	    additiveExpression394=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression394.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // src/main/resources/org/drools/lang/DRL.g:1610:1: shiftOp : ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) ;
    public final DRLParser.shiftOp_return shiftOp() throws RecognitionException {
        DRLParser.shiftOp_return retval = new DRLParser.shiftOp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set395=null;

        Object set395_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1611:2: ( ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT ) )
            // src/main/resources/org/drools/lang/DRL.g:1611:4: ( SHIFT_LEFT | SHIFT_RIGHT_UNSIG | SHIFT_RIGHT )
            {
            root_0 = (Object)adaptor.nil();

            set395=(Token)input.LT(1);
            if ( (input.LA(1)>=SHIFT_LEFT && input.LA(1)<=SHIFT_RIGHT) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set395));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // src/main/resources/org/drools/lang/DRL.g:1614:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final DRLParser.additiveExpression_return additiveExpression() throws RecognitionException {
        DRLParser.additiveExpression_return retval = new DRLParser.additiveExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set397=null;
        DRLParser.multiplicativeExpression_return multiplicativeExpression396 = null;

        DRLParser.multiplicativeExpression_return multiplicativeExpression398 = null;


        Object set397_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1615:5: ( multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1615:9: multiplicativeExpression ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6529);
            multiplicativeExpression396=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression396.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1615:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*
            loop134:
            do {
                int alt134=2;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1615:36: ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    set397=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set397));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6548);
            	    multiplicativeExpression398=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression398.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // src/main/resources/org/drools/lang/DRL.g:1618:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final DRLParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        DRLParser.multiplicativeExpression_return retval = new DRLParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set400=null;
        DRLParser.unaryExpression_return unaryExpression399 = null;

        DRLParser.unaryExpression_return unaryExpression401 = null;


        Object set400_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1619:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // src/main/resources/org/drools/lang/DRL.g:1619:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6567);
            unaryExpression399=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression399.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1619:25: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==STAR||(LA135_0>=DIV && LA135_0<=MOD)) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1619:27: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    set400=(Token)input.LT(1);
            	    if ( input.LA(1)==STAR||(input.LA(1)>=DIV && input.LA(1)<=MOD) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set400));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6585);
            	    unaryExpression401=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression401.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // src/main/resources/org/drools/lang/DRL.g:1622:1: unaryExpression : ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus );
    public final DRLParser.unaryExpression_return unaryExpression() throws RecognitionException {
        DRLParser.unaryExpression_return retval = new DRLParser.unaryExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS402=null;
        Token MINUS404=null;
        Token INCR406=null;
        Token DECR408=null;
        DRLParser.unaryExpression_return unaryExpression403 = null;

        DRLParser.unaryExpression_return unaryExpression405 = null;

        DRLParser.primary_return primary407 = null;

        DRLParser.primary_return primary409 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus410 = null;


        Object PLUS402_tree=null;
        Object MINUS404_tree=null;
        Object INCR406_tree=null;
        Object DECR408_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1623:5: ( PLUS unaryExpression | MINUS unaryExpression | INCR primary | DECR primary | unaryExpressionNotPlusMinus )
            int alt136=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt136=1;
                }
                break;
            case MINUS:
                {
                alt136=2;
                }
                break;
            case INCR:
                {
                alt136=3;
                }
                break;
            case DECR:
                {
                alt136=4;
                }
                break;
            case ID:
            case STRING:
            case BOOL:
            case LEFT_PAREN:
            case DECIMAL:
            case LESS:
            case LEFT_SQUARE:
            case NULL:
            case HEX:
            case FLOAT:
            case TILDE:
            case NEGATION:
                {
                alt136=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1623:9: PLUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS402=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression6605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS402_tree = (Object)adaptor.create(PLUS402);
                    adaptor.addChild(root_0, PLUS402_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6607);
                    unaryExpression403=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression403.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1624:7: MINUS unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS404=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS404_tree = (Object)adaptor.create(MINUS404);
                    adaptor.addChild(root_0, MINUS404_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6617);
                    unaryExpression405=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression405.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1625:9: INCR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    INCR406=(Token)match(input,INCR,FOLLOW_INCR_in_unaryExpression6627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INCR406_tree = (Object)adaptor.create(INCR406);
                    adaptor.addChild(root_0, INCR406_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression6629);
                    primary407=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary407.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1626:9: DECR primary
                    {
                    root_0 = (Object)adaptor.nil();

                    DECR408=(Token)match(input,DECR,FOLLOW_DECR_in_unaryExpression6639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECR408_tree = (Object)adaptor.create(DECR408);
                    adaptor.addChild(root_0, DECR408_tree);
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpression6641);
                    primary409=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary409.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1627:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6651);
                    unaryExpressionNotPlusMinus410=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus410.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // src/main/resources/org/drools/lang/DRL.g:1630:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );
    public final DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        DRLParser.unaryExpressionNotPlusMinus_return retval = new DRLParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token TILDE411=null;
        Token NEGATION413=null;
        Token set418=null;
        DRLParser.unaryExpression_return unaryExpression412 = null;

        DRLParser.unaryExpression_return unaryExpression414 = null;

        DRLParser.castExpression_return castExpression415 = null;

        DRLParser.primary_return primary416 = null;

        DRLParser.selector_return selector417 = null;


        Object TILDE411_tree=null;
        Object NEGATION413_tree=null;
        Object set418_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1632:5: ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? )
            int alt139=4;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1632:9: TILDE unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    TILDE411=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus6684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE411_tree = (Object)adaptor.create(TILDE411);
                    adaptor.addChild(root_0, TILDE411_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6686);
                    unaryExpression412=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression412.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1633:8: NEGATION unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    NEGATION413=(Token)match(input,NEGATION,FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus6695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEGATION413_tree = (Object)adaptor.create(NEGATION413);
                    adaptor.addChild(root_0, NEGATION413_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6697);
                    unaryExpression414=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression414.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1634:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6707);
                    castExpression415=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression415.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1635:9: primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6717);
                    primary416=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary416.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1635:17: ( ( selector )=> selector )*
                    loop137:
                    do {
                        int alt137=2;
                        alt137 = dfa137.predict(input);
                        switch (alt137) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1635:18: ( selector )=> selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6724);
                    	    selector417=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector417.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1635:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?
                    int alt138=2;
                    alt138 = dfa138.predict(input);
                    switch (alt138) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1635:42: ( INCR | DECR )=> ( INCR | DECR )
                            {
                            set418=(Token)input.LT(1);
                            if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set418));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // src/main/resources/org/drools/lang/DRL.g:1638:1: castExpression options {backtrack=true; memoize=true; } : ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus );
    public final DRLParser.castExpression_return castExpression() throws RecognitionException {
        DRLParser.castExpression_return retval = new DRLParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN419=null;
        Token RIGHT_PAREN421=null;
        Token LEFT_PAREN423=null;
        Token RIGHT_PAREN425=null;
        Token LEFT_PAREN427=null;
        Token RIGHT_PAREN429=null;
        DRLParser.primitiveType_return primitiveType420 = null;

        DRLParser.unaryExpression_return unaryExpression422 = null;

        DRLParser.type_return type424 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus426 = null;

        DRLParser.expression_return expression428 = null;

        DRLParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus430 = null;


        Object LEFT_PAREN419_tree=null;
        Object RIGHT_PAREN421_tree=null;
        Object LEFT_PAREN423_tree=null;
        Object RIGHT_PAREN425_tree=null;
        Object LEFT_PAREN427_tree=null;
        Object RIGHT_PAREN429_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1640:5: ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus | LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus )
            int alt140=3;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==LEFT_PAREN) ) {
                int LA140_1 = input.LA(2);

                if ( (synpred21_DRL()) ) {
                    alt140=1;
                }
                else if ( (synpred22_DRL()) ) {
                    alt140=2;
                }
                else if ( (true) ) {
                    alt140=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 140, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1640:8: ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN419=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN419_tree = (Object)adaptor.create(LEFT_PAREN419);
                    adaptor.addChild(root_0, LEFT_PAREN419_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression6788);
                    primitiveType420=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType420.getTree());
                    RIGHT_PAREN421=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN421_tree = (Object)adaptor.create(RIGHT_PAREN421);
                    adaptor.addChild(root_0, RIGHT_PAREN421_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression6792);
                    unaryExpression422=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression422.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1641:8: ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN423=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN423_tree = (Object)adaptor.create(LEFT_PAREN423);
                    adaptor.addChild(root_0, LEFT_PAREN423_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression6811);
                    type424=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type424.getTree());
                    RIGHT_PAREN425=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN425_tree = (Object)adaptor.create(RIGHT_PAREN425);
                    adaptor.addChild(root_0, RIGHT_PAREN425_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6815);
                    unaryExpressionNotPlusMinus426=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus426.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1642:8: LEFT_PAREN expression RIGHT_PAREN unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_PAREN427=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression6824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_PAREN427_tree = (Object)adaptor.create(LEFT_PAREN427);
                    adaptor.addChild(root_0, LEFT_PAREN427_tree);
                    }
                    pushFollow(FOLLOW_expression_in_castExpression6826);
                    expression428=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression428.getTree());
                    RIGHT_PAREN429=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression6828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_PAREN429_tree = (Object)adaptor.create(RIGHT_PAREN429);
                    adaptor.addChild(root_0, RIGHT_PAREN429_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6830);
                    unaryExpressionNotPlusMinus430=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus430.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // src/main/resources/org/drools/lang/DRL.g:1645:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );
    public final DRLParser.primitiveType_return primitiveType() throws RecognitionException {
        DRLParser.primitiveType_return retval = new DRLParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        DRLParser.boolean_key_return boolean_key431 = null;

        DRLParser.char_key_return char_key432 = null;

        DRLParser.byte_key_return byte_key433 = null;

        DRLParser.short_key_return short_key434 = null;

        DRLParser.int_key_return int_key435 = null;

        DRLParser.long_key_return long_key436 = null;

        DRLParser.float_key_return float_key437 = null;

        DRLParser.double_key_return double_key438 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1647:5: ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key )
            int alt141=8;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1647:9: boolean_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolean_key_in_primitiveType6867);
                    boolean_key431=boolean_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_key431.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1648:7: char_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_char_key_in_primitiveType6875);
                    char_key432=char_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_key432.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1649:7: byte_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_byte_key_in_primitiveType6883);
                    byte_key433=byte_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, byte_key433.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1650:7: short_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_short_key_in_primitiveType6891);
                    short_key434=short_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, short_key434.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1651:7: int_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_int_key_in_primitiveType6899);
                    int_key435=int_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, int_key435.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1652:7: long_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_long_key_in_primitiveType6907);
                    long_key436=long_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, long_key436.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1653:7: float_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_float_key_in_primitiveType6915);
                    float_key437=float_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, float_key437.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1654:7: double_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_double_key_in_primitiveType6923);
                    double_key438=double_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_key438.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // src/main/resources/org/drools/lang/DRL.g:1657:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );
    public final DRLParser.primary_return primary() throws RecognitionException {
        DRLParser.primary_return retval = new DRLParser.primary_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE450=null;
        Token RIGHT_SQUARE451=null;
        Token DOT452=null;
        Token ID456=null;
        Token DOT457=null;
        Token ID458=null;
        DRLParser.parExpression_return parExpression439 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments440 = null;

        DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix441 = null;

        DRLParser.this_key_return this_key442 = null;

        DRLParser.arguments_return arguments443 = null;

        DRLParser.literal_return literal444 = null;

        DRLParser.super_key_return super_key445 = null;

        DRLParser.superSuffix_return superSuffix446 = null;

        DRLParser.new_key_return new_key447 = null;

        DRLParser.creator_return creator448 = null;

        DRLParser.primitiveType_return primitiveType449 = null;

        DRLParser.class_key_return class_key453 = null;

        DRLParser.inlineMapExpression_return inlineMapExpression454 = null;

        DRLParser.inlineListExpression_return inlineListExpression455 = null;

        DRLParser.identifierSuffix_return identifierSuffix459 = null;


        Object LEFT_SQUARE450_tree=null;
        Object RIGHT_SQUARE451_tree=null;
        Object DOT452_tree=null;
        Object ID456_tree=null;
        Object DOT457_tree=null;
        Object ID458_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1659:5: ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? )
            int alt146=9;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1659:7: ( parExpression )=> parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6946);
                    parExpression439=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression439.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1660:9: ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6961);
                    nonWildcardTypeArguments440=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments440.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1660:63: ( explicitGenericInvocationSuffix | this_key arguments )
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==ID) ) {
                        int LA142_1 = input.LA(2);

                        if ( (!((((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))))) ) {
                            alt142=1;
                        }
                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                            alt142=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 142, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 142, 0, input);

                        throw nvae;
                    }
                    switch (alt142) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1660:64: explicitGenericInvocationSuffix
                            {
                            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6964);
                            explicitGenericInvocationSuffix441=explicitGenericInvocationSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix441.getTree());

                            }
                            break;
                        case 2 :
                            // src/main/resources/org/drools/lang/DRL.g:1660:98: this_key arguments
                            {
                            pushFollow(FOLLOW_this_key_in_primary6968);
                            this_key442=this_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, this_key442.getTree());
                            pushFollow(FOLLOW_arguments_in_primary6970);
                            arguments443=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments443.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1661:9: ( literal )=> literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6986);
                    literal444=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal444.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1663:9: ( super_key )=> super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_primary7006);
                    super_key445=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key445.getTree());
                    pushFollow(FOLLOW_superSuffix_in_primary7008);
                    superSuffix446=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix446.getTree());

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1664:9: ( new_key )=> new_key creator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_new_key_in_primary7023);
                    new_key447=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key447.getTree());
                    pushFollow(FOLLOW_creator_in_primary7025);
                    creator448=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, creator448.getTree());

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1665:9: ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_primary7040);
                    primitiveType449=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType449.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1665:41: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop143:
                    do {
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==LEFT_SQUARE) ) {
                            alt143=1;
                        }


                        switch (alt143) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1665:42: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE450=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_primary7043); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE450_tree = (Object)adaptor.create(LEFT_SQUARE450);
                    	    adaptor.addChild(root_0, LEFT_SQUARE450_tree);
                    	    }
                    	    RIGHT_SQUARE451=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_primary7045); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE451_tree = (Object)adaptor.create(RIGHT_SQUARE451);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE451_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop143;
                        }
                    } while (true);

                    DOT452=(Token)match(input,DOT,FOLLOW_DOT_in_primary7049); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT452_tree = (Object)adaptor.create(DOT452);
                    adaptor.addChild(root_0, DOT452_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_primary7051);
                    class_key453=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key453.getTree());

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1667:9: ( inlineMapExpression )=> inlineMapExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineMapExpression_in_primary7071);
                    inlineMapExpression454=inlineMapExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineMapExpression454.getTree());

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1668:9: ( inlineListExpression )=> inlineListExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inlineListExpression_in_primary7086);
                    inlineListExpression455=inlineListExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineListExpression455.getTree());

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1669:9: ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ID456=(Token)match(input,ID,FOLLOW_ID_in_primary7100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID456_tree = (Object)adaptor.create(ID456);
                    adaptor.addChild(root_0, ID456_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1669:18: ( ( DOT ID )=> DOT ID )*
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==DOT) ) {
                            int LA144_2 = input.LA(2);

                            if ( (LA144_2==ID) ) {
                                int LA144_3 = input.LA(3);

                                if ( (synpred39_DRL()) ) {
                                    alt144=1;
                                }


                            }


                        }


                        switch (alt144) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1669:19: ( DOT ID )=> DOT ID
                    	    {
                    	    DOT457=(Token)match(input,DOT,FOLLOW_DOT_in_primary7109); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT457_tree = (Object)adaptor.create(DOT457);
                    	    adaptor.addChild(root_0, DOT457_tree);
                    	    }
                    	    ID458=(Token)match(input,ID,FOLLOW_ID_in_primary7111); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID458_tree = (Object)adaptor.create(ID458);
                    	    adaptor.addChild(root_0, ID458_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop144;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1669:38: ( ( identifierSuffix )=> identifierSuffix )?
                    int alt145=2;
                    alt145 = dfa145.predict(input);
                    switch (alt145) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1669:39: ( identifierSuffix )=> identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary7120);
                            identifierSuffix459=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierSuffix459.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class inlineListExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineListExpression"
    // src/main/resources/org/drools/lang/DRL.g:1672:1: inlineListExpression : LEFT_SQUARE ( expressionList )? RIGHT_SQUARE ;
    public final DRLParser.inlineListExpression_return inlineListExpression() throws RecognitionException {
        DRLParser.inlineListExpression_return retval = new DRLParser.inlineListExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE460=null;
        Token RIGHT_SQUARE462=null;
        DRLParser.expressionList_return expressionList461 = null;


        Object LEFT_SQUARE460_tree=null;
        Object RIGHT_SQUARE462_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1673:5: ( LEFT_SQUARE ( expressionList )? RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1673:9: LEFT_SQUARE ( expressionList )? RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE460=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineListExpression7141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE460_tree = (Object)adaptor.create(LEFT_SQUARE460);
            adaptor.addChild(root_0, LEFT_SQUARE460_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1673:21: ( expressionList )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==ID||LA147_0==STRING||(LA147_0>=BOOL && LA147_0<=LEFT_PAREN)||LA147_0==DECIMAL||LA147_0==LESS||LA147_0==LEFT_SQUARE||(LA147_0>=NULL && LA147_0<=FLOAT)||(LA147_0>=INCR && LA147_0<=NEGATION)) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1673:21: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_inlineListExpression7143);
                    expressionList461=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList461.getTree());

                    }
                    break;

            }

            RIGHT_SQUARE462=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineListExpression7146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE462_tree = (Object)adaptor.create(RIGHT_SQUARE462);
            adaptor.addChild(root_0, RIGHT_SQUARE462_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineListExpression"

    public static class inlineMapExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineMapExpression"
    // src/main/resources/org/drools/lang/DRL.g:1676:1: inlineMapExpression : LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE ;
    public final DRLParser.inlineMapExpression_return inlineMapExpression() throws RecognitionException {
        DRLParser.inlineMapExpression_return retval = new DRLParser.inlineMapExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE463=null;
        Token RIGHT_SQUARE465=null;
        DRLParser.mapExpressionList_return mapExpressionList464 = null;


        Object LEFT_SQUARE463_tree=null;
        Object RIGHT_SQUARE465_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1677:5: ( LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE )
            // src/main/resources/org/drools/lang/DRL.g:1677:7: LEFT_SQUARE ( mapExpressionList )+ RIGHT_SQUARE
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE463=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_inlineMapExpression7168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE463_tree = (Object)adaptor.create(LEFT_SQUARE463);
            adaptor.addChild(root_0, LEFT_SQUARE463_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1677:19: ( mapExpressionList )+
            int cnt148=0;
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==ID||LA148_0==STRING||(LA148_0>=BOOL && LA148_0<=LEFT_PAREN)||LA148_0==DECIMAL||LA148_0==LESS||LA148_0==LEFT_SQUARE||(LA148_0>=NULL && LA148_0<=FLOAT)||(LA148_0>=INCR && LA148_0<=NEGATION)) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1677:19: mapExpressionList
            	    {
            	    pushFollow(FOLLOW_mapExpressionList_in_inlineMapExpression7170);
            	    mapExpressionList464=mapExpressionList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapExpressionList464.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt148 >= 1 ) break loop148;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(148, input);
                        throw eee;
                }
                cnt148++;
            } while (true);

            RIGHT_SQUARE465=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_SQUARE465_tree = (Object)adaptor.create(RIGHT_SQUARE465);
            adaptor.addChild(root_0, RIGHT_SQUARE465_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineMapExpression"

    public static class mapExpressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapExpressionList"
    // src/main/resources/org/drools/lang/DRL.g:1680:1: mapExpressionList : mapEntry ( COMMA mapEntry )* ;
    public final DRLParser.mapExpressionList_return mapExpressionList() throws RecognitionException {
        DRLParser.mapExpressionList_return retval = new DRLParser.mapExpressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA467=null;
        DRLParser.mapEntry_return mapEntry466 = null;

        DRLParser.mapEntry_return mapEntry468 = null;


        Object COMMA467_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1681:5: ( mapEntry ( COMMA mapEntry )* )
            // src/main/resources/org/drools/lang/DRL.g:1681:7: mapEntry ( COMMA mapEntry )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_mapEntry_in_mapExpressionList7190);
            mapEntry466=mapEntry();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry466.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1681:16: ( COMMA mapEntry )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==COMMA) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1681:17: COMMA mapEntry
            	    {
            	    COMMA467=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapExpressionList7193); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA467_tree = (Object)adaptor.create(COMMA467);
            	    adaptor.addChild(root_0, COMMA467_tree);
            	    }
            	    pushFollow(FOLLOW_mapEntry_in_mapExpressionList7195);
            	    mapEntry468=mapEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapEntry468.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapExpressionList"

    public static class mapEntry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mapEntry"
    // src/main/resources/org/drools/lang/DRL.g:1684:1: mapEntry : expression COLON expression ;
    public final DRLParser.mapEntry_return mapEntry() throws RecognitionException {
        DRLParser.mapEntry_return retval = new DRLParser.mapEntry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON470=null;
        DRLParser.expression_return expression469 = null;

        DRLParser.expression_return expression471 = null;


        Object COLON470_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1685:5: ( expression COLON expression )
            // src/main/resources/org/drools/lang/DRL.g:1685:7: expression COLON expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_mapEntry7218);
            expression469=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression469.getTree());
            COLON470=(Token)match(input,COLON,FOLLOW_COLON_in_mapEntry7220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON470_tree = (Object)adaptor.create(COLON470);
            adaptor.addChild(root_0, COLON470_tree);
            }
            pushFollow(FOLLOW_expression_in_mapEntry7222);
            expression471=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression471.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mapEntry"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // src/main/resources/org/drools/lang/DRL.g:1688:1: parExpression : LEFT_PAREN expression RIGHT_PAREN ;
    public final DRLParser.parExpression_return parExpression() throws RecognitionException {
        DRLParser.parExpression_return retval = new DRLParser.parExpression_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_PAREN472=null;
        Token RIGHT_PAREN474=null;
        DRLParser.expression_return expression473 = null;


        Object LEFT_PAREN472_tree=null;
        Object RIGHT_PAREN474_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1689:2: ( LEFT_PAREN expression RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1689:4: LEFT_PAREN expression RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN472=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_parExpression7236); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN472_tree = (Object)adaptor.create(LEFT_PAREN472);
            adaptor.addChild(root_0, LEFT_PAREN472_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression7238);
            expression473=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression473.getTree());
            RIGHT_PAREN474=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_parExpression7240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN474_tree = (Object)adaptor.create(RIGHT_PAREN474);
            adaptor.addChild(root_0, RIGHT_PAREN474_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1692:1: identifierSuffix options {backtrack=true; memoize=true; } : ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments );
    public final DRLParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        DRLParser.identifierSuffix_return retval = new DRLParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_SQUARE475=null;
        Token RIGHT_SQUARE476=null;
        Token DOT477=null;
        Token LEFT_SQUARE479=null;
        Token RIGHT_SQUARE481=null;
        DRLParser.class_key_return class_key478 = null;

        DRLParser.expression_return expression480 = null;

        DRLParser.arguments_return arguments482 = null;


        Object LEFT_SQUARE475_tree=null;
        Object RIGHT_SQUARE476_tree=null;
        Object DOT477_tree=null;
        Object LEFT_SQUARE479_tree=null;
        Object RIGHT_SQUARE481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1694:5: ( ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key | ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+ | arguments )
            int alt152=3;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LEFT_SQUARE) ) {
                int LA152_1 = input.LA(2);

                if ( (LA152_1==RIGHT_SQUARE) ) {
                    alt152=1;
                }
                else if ( (LA152_1==ID||LA152_1==STRING||(LA152_1>=BOOL && LA152_1<=LEFT_PAREN)||LA152_1==DECIMAL||LA152_1==LESS||LA152_1==LEFT_SQUARE||(LA152_1>=NULL && LA152_1<=FLOAT)||(LA152_1>=INCR && LA152_1<=NEGATION)) ) {
                    alt152=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA152_0==LEFT_PAREN) ) {
                alt152=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1694:7: ( LEFT_SQUARE RIGHT_SQUARE )+ DOT class_key
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1694:7: ( LEFT_SQUARE RIGHT_SQUARE )+
                    int cnt150=0;
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==LEFT_SQUARE) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1694:8: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE475=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7270); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE475_tree = (Object)adaptor.create(LEFT_SQUARE475);
                    	    adaptor.addChild(root_0, LEFT_SQUARE475_tree);
                    	    }
                    	    RIGHT_SQUARE476=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7272); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE476_tree = (Object)adaptor.create(RIGHT_SQUARE476);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE476_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt150 >= 1 ) break loop150;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(150, input);
                                throw eee;
                        }
                        cnt150++;
                    } while (true);

                    DOT477=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix7276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT477_tree = (Object)adaptor.create(DOT477);
                    adaptor.addChild(root_0, DOT477_tree);
                    }
                    pushFollow(FOLLOW_class_key_in_identifierSuffix7278);
                    class_key478=class_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_key478.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1695:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // src/main/resources/org/drools/lang/DRL.g:1695:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+
                    int cnt151=0;
                    loop151:
                    do {
                        int alt151=2;
                        alt151 = dfa151.predict(input);
                        switch (alt151) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1695:8: ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE479=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_identifierSuffix7293); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE479_tree = (Object)adaptor.create(LEFT_SQUARE479);
                    	    adaptor.addChild(root_0, LEFT_SQUARE479_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix7295);
                    	    expression480=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression480.getTree());
                    	    RIGHT_SQUARE481=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_identifierSuffix7297); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE481_tree = (Object)adaptor.create(RIGHT_SQUARE481);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE481_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt151 >= 1 ) break loop151;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(151, input);
                                throw eee;
                        }
                        cnt151++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1696:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_identifierSuffix7310);
                    arguments482=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments482.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // src/main/resources/org/drools/lang/DRL.g:1704:1: creator : ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) ;
    public final DRLParser.creator_return creator() throws RecognitionException {
        DRLParser.creator_return retval = new DRLParser.creator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments483 = null;

        DRLParser.createdName_return createdName484 = null;

        DRLParser.arrayCreatorRest_return arrayCreatorRest485 = null;

        DRLParser.classCreatorRest_return classCreatorRest486 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1705:2: ( ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) )
            // src/main/resources/org/drools/lang/DRL.g:1705:4: ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest )
            {
            root_0 = (Object)adaptor.nil();

            // src/main/resources/org/drools/lang/DRL.g:1705:4: ( nonWildcardTypeArguments )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LESS) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1705:4: nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator7328);
                    nonWildcardTypeArguments483=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments483.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_createdName_in_creator7331);
            createdName484=createdName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName484.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1706:9: ( arrayCreatorRest | classCreatorRest )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LEFT_SQUARE) ) {
                alt154=1;
            }
            else if ( (LA154_0==LEFT_PAREN) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1706:10: arrayCreatorRest
                    {
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator7342);
                    arrayCreatorRest485=arrayCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayCreatorRest485.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1706:29: classCreatorRest
                    {
                    pushFollow(FOLLOW_classCreatorRest_in_creator7346);
                    classCreatorRest486=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest486.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // src/main/resources/org/drools/lang/DRL.g:1709:1: createdName : ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType );
    public final DRLParser.createdName_return createdName() throws RecognitionException {
        DRLParser.createdName_return retval = new DRLParser.createdName_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID487=null;
        Token DOT489=null;
        Token ID490=null;
        DRLParser.typeArguments_return typeArguments488 = null;

        DRLParser.typeArguments_return typeArguments491 = null;

        DRLParser.primitiveType_return primitiveType492 = null;


        Object ID487_tree=null;
        Object DOT489_tree=null;
        Object ID490_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1710:2: ( ID ( typeArguments )? ( DOT ID ( typeArguments )? )* | primitiveType )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==ID) && ((!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))||!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))))) {
                int LA158_1 = input.LA(2);

                if ( (!(((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))))) ) {
                    alt158=1;
                }
                else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))||((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1710:4: ID ( typeArguments )? ( DOT ID ( typeArguments )? )*
                    {
                    root_0 = (Object)adaptor.nil();

                    ID487=(Token)match(input,ID,FOLLOW_ID_in_createdName7358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID487_tree = (Object)adaptor.create(ID487);
                    adaptor.addChild(root_0, ID487_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1710:7: ( typeArguments )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==LESS) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1710:7: typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_createdName7360);
                            typeArguments488=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments488.getTree());

                            }
                            break;

                    }

                    // src/main/resources/org/drools/lang/DRL.g:1711:9: ( DOT ID ( typeArguments )? )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==DOT) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1711:11: DOT ID ( typeArguments )?
                    	    {
                    	    DOT489=(Token)match(input,DOT,FOLLOW_DOT_in_createdName7373); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT489_tree = (Object)adaptor.create(DOT489);
                    	    adaptor.addChild(root_0, DOT489_tree);
                    	    }
                    	    ID490=(Token)match(input,ID,FOLLOW_ID_in_createdName7375); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ID490_tree = (Object)adaptor.create(ID490);
                    	    adaptor.addChild(root_0, ID490_tree);
                    	    }
                    	    // src/main/resources/org/drools/lang/DRL.g:1711:18: ( typeArguments )?
                    	    int alt156=2;
                    	    int LA156_0 = input.LA(1);

                    	    if ( (LA156_0==LESS) ) {
                    	        alt156=1;
                    	    }
                    	    switch (alt156) {
                    	        case 1 :
                    	            // src/main/resources/org/drools/lang/DRL.g:1711:18: typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_createdName7377);
                    	            typeArguments491=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments491.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1712:11: primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName7392);
                    primitiveType492=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType492.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // src/main/resources/org/drools/lang/DRL.g:1715:1: innerCreator : {...}? => ID classCreatorRest ;
    public final DRLParser.innerCreator_return innerCreator() throws RecognitionException {
        DRLParser.innerCreator_return retval = new DRLParser.innerCreator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID493=null;
        DRLParser.classCreatorRest_return classCreatorRest494 = null;


        Object ID493_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1716:2: ({...}? => ID classCreatorRest )
            // src/main/resources/org/drools/lang/DRL.g:1716:4: {...}? => ID classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "innerCreator", "!(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            ID493=(Token)match(input,ID,FOLLOW_ID_in_innerCreator7407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID493_tree = (Object)adaptor.create(ID493);
            adaptor.addChild(root_0, ID493_tree);
            }
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator7409);
            classCreatorRest494=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest494.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1719:1: arrayCreatorRest : LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) ;
    public final DRLParser.arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        DRLParser.arrayCreatorRest_return retval = new DRLParser.arrayCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_SQUARE495=null;
        Token RIGHT_SQUARE496=null;
        Token LEFT_SQUARE497=null;
        Token RIGHT_SQUARE498=null;
        Token RIGHT_SQUARE501=null;
        Token LEFT_SQUARE502=null;
        Token RIGHT_SQUARE504=null;
        Token LEFT_SQUARE505=null;
        Token RIGHT_SQUARE506=null;
        DRLParser.arrayInitializer_return arrayInitializer499 = null;

        DRLParser.expression_return expression500 = null;

        DRLParser.expression_return expression503 = null;


        Object LEFT_SQUARE495_tree=null;
        Object RIGHT_SQUARE496_tree=null;
        Object LEFT_SQUARE497_tree=null;
        Object RIGHT_SQUARE498_tree=null;
        Object RIGHT_SQUARE501_tree=null;
        Object LEFT_SQUARE502_tree=null;
        Object RIGHT_SQUARE504_tree=null;
        Object LEFT_SQUARE505_tree=null;
        Object RIGHT_SQUARE506_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1720:2: ( LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* ) )
            // src/main/resources/org/drools/lang/DRL.g:1720:6: LEFT_SQUARE ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            {
            root_0 = (Object)adaptor.nil();

            LEFT_SQUARE495=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_SQUARE495_tree = (Object)adaptor.create(LEFT_SQUARE495);
            adaptor.addChild(root_0, LEFT_SQUARE495_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1721:2: ( RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer | expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )* )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==RIGHT_SQUARE) ) {
                alt162=1;
            }
            else if ( (LA162_0==ID||LA162_0==STRING||(LA162_0>=BOOL && LA162_0<=LEFT_PAREN)||LA162_0==DECIMAL||LA162_0==LESS||LA162_0==LEFT_SQUARE||(LA162_0>=NULL && LA162_0<=FLOAT)||(LA162_0>=INCR && LA162_0<=NEGATION)) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1721:6: RIGHT_SQUARE ( LEFT_SQUARE RIGHT_SQUARE )* arrayInitializer
                    {
                    RIGHT_SQUARE496=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE496_tree = (Object)adaptor.create(RIGHT_SQUARE496);
                    adaptor.addChild(root_0, RIGHT_SQUARE496_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1721:19: ( LEFT_SQUARE RIGHT_SQUARE )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==LEFT_SQUARE) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1721:20: LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE497=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7433); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE497_tree = (Object)adaptor.create(LEFT_SQUARE497);
                    	    adaptor.addChild(root_0, LEFT_SQUARE497_tree);
                    	    }
                    	    RIGHT_SQUARE498=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7435); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE498_tree = (Object)adaptor.create(RIGHT_SQUARE498);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE498_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest7439);
                    arrayInitializer499=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer499.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1722:13: expression RIGHT_SQUARE ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )* ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest7453);
                    expression500=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression500.getTree());
                    RIGHT_SQUARE501=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE501_tree = (Object)adaptor.create(RIGHT_SQUARE501);
                    adaptor.addChild(root_0, RIGHT_SQUARE501_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1722:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*
                    loop160:
                    do {
                        int alt160=2;
                        alt160 = dfa160.predict(input);
                        switch (alt160) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1722:38: {...}? => LEFT_SQUARE expression RIGHT_SQUARE
                    	    {
                    	    if ( !((!helper.validateLT(2,"]"))) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "arrayCreatorRest", "!helper.validateLT(2,\"]\")");
                    	    }
                    	    LEFT_SQUARE502=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7460); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE502_tree = (Object)adaptor.create(LEFT_SQUARE502);
                    	    adaptor.addChild(root_0, LEFT_SQUARE502_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest7462);
                    	    expression503=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression503.getTree());
                    	    RIGHT_SQUARE504=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7464); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE504_tree = (Object)adaptor.create(RIGHT_SQUARE504);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE504_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1722:106: ( ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE )*
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==LEFT_SQUARE) ) {
                            int LA161_2 = input.LA(2);

                            if ( (LA161_2==RIGHT_SQUARE) ) {
                                int LA161_3 = input.LA(3);

                                if ( (synpred44_DRL()) ) {
                                    alt161=1;
                                }


                            }


                        }


                        switch (alt161) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1722:107: ( LEFT_SQUARE RIGHT_SQUARE )=> LEFT_SQUARE RIGHT_SQUARE
                    	    {
                    	    LEFT_SQUARE505=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7476); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    LEFT_SQUARE505_tree = (Object)adaptor.create(LEFT_SQUARE505);
                    	    adaptor.addChild(root_0, LEFT_SQUARE505_tree);
                    	    }
                    	    RIGHT_SQUARE506=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7478); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    RIGHT_SQUARE506_tree = (Object)adaptor.create(RIGHT_SQUARE506);
                    	    adaptor.addChild(root_0, RIGHT_SQUARE506_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayCreatorRest"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1726:1: variableInitializer : ( arrayInitializer | expression );
    public final DRLParser.variableInitializer_return variableInitializer() throws RecognitionException {
        DRLParser.variableInitializer_return retval = new DRLParser.variableInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arrayInitializer_return arrayInitializer507 = null;

        DRLParser.expression_return expression508 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1727:2: ( arrayInitializer | expression )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==LEFT_CURLY) ) {
                alt163=1;
            }
            else if ( (LA163_0==ID||LA163_0==STRING||(LA163_0>=BOOL && LA163_0<=LEFT_PAREN)||LA163_0==DECIMAL||LA163_0==LESS||LA163_0==LEFT_SQUARE||(LA163_0>=NULL && LA163_0<=FLOAT)||(LA163_0>=INCR && LA163_0<=NEGATION)) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1727:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer7501);
                    arrayInitializer507=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer507.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1728:10: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer7512);
                    expression508=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression508.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // src/main/resources/org/drools/lang/DRL.g:1731:1: arrayInitializer : LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY ;
    public final DRLParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        DRLParser.arrayInitializer_return retval = new DRLParser.arrayInitializer_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LEFT_CURLY509=null;
        Token COMMA511=null;
        Token COMMA513=null;
        Token RIGHT_CURLY514=null;
        DRLParser.variableInitializer_return variableInitializer510 = null;

        DRLParser.variableInitializer_return variableInitializer512 = null;


        Object LEFT_CURLY509_tree=null;
        Object COMMA511_tree=null;
        Object COMMA513_tree=null;
        Object RIGHT_CURLY514_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1732:2: ( LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY )
            // src/main/resources/org/drools/lang/DRL.g:1732:4: LEFT_CURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();

            LEFT_CURLY509=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_arrayInitializer7524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY509_tree = (Object)adaptor.create(LEFT_CURLY509);
            adaptor.addChild(root_0, LEFT_CURLY509_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1732:15: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==ID||LA166_0==STRING||(LA166_0>=BOOL && LA166_0<=LEFT_PAREN)||LA166_0==DECIMAL||LA166_0==LESS||LA166_0==LEFT_SQUARE||(LA166_0>=NULL && LA166_0<=FLOAT)||LA166_0==LEFT_CURLY||(LA166_0>=INCR && LA166_0<=NEGATION)) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1732:16: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7527);
                    variableInitializer510=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer510.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1732:36: ( COMMA variableInitializer )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==COMMA) ) {
                            int LA164_1 = input.LA(2);

                            if ( (LA164_1==ID||LA164_1==STRING||(LA164_1>=BOOL && LA164_1<=LEFT_PAREN)||LA164_1==DECIMAL||LA164_1==LESS||LA164_1==LEFT_SQUARE||(LA164_1>=NULL && LA164_1<=FLOAT)||LA164_1==LEFT_CURLY||(LA164_1>=INCR && LA164_1<=NEGATION)) ) {
                                alt164=1;
                            }


                        }


                        switch (alt164) {
                    	case 1 :
                    	    // src/main/resources/org/drools/lang/DRL.g:1732:37: COMMA variableInitializer
                    	    {
                    	    COMMA511=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7530); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA511_tree = (Object)adaptor.create(COMMA511);
                    	    adaptor.addChild(root_0, COMMA511_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7532);
                    	    variableInitializer512=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer512.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);

                    // src/main/resources/org/drools/lang/DRL.g:1732:65: ( COMMA )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==COMMA) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1732:66: COMMA
                            {
                            COMMA513=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7537); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA513_tree = (Object)adaptor.create(COMMA513);
                            adaptor.addChild(root_0, COMMA513_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RIGHT_CURLY514=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_arrayInitializer7544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY514_tree = (Object)adaptor.create(RIGHT_CURLY514);
            adaptor.addChild(root_0, RIGHT_CURLY514_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // src/main/resources/org/drools/lang/DRL.g:1735:1: classCreatorRest : arguments ;
    public final DRLParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        DRLParser.classCreatorRest_return retval = new DRLParser.classCreatorRest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.arguments_return arguments515 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1736:2: ( arguments )
            // src/main/resources/org/drools/lang/DRL.g:1736:4: arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest7555);
            arguments515=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments515.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // src/main/resources/org/drools/lang/DRL.g:1739:1: explicitGenericInvocation : nonWildcardTypeArguments arguments ;
    public final DRLParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        DRLParser.explicitGenericInvocation_return retval = new DRLParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments516 = null;

        DRLParser.arguments_return arguments517 = null;



        try {
            // src/main/resources/org/drools/lang/DRL.g:1740:2: ( nonWildcardTypeArguments arguments )
            // src/main/resources/org/drools/lang/DRL.g:1740:4: nonWildcardTypeArguments arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation7568);
            nonWildcardTypeArguments516=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments516.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation7570);
            arguments517=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments517.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // src/main/resources/org/drools/lang/DRL.g:1743:1: nonWildcardTypeArguments : LESS typeList GREATER ;
    public final DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        DRLParser.nonWildcardTypeArguments_return retval = new DRLParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LESS518=null;
        Token GREATER520=null;
        DRLParser.typeList_return typeList519 = null;


        Object LESS518_tree=null;
        Object GREATER520_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1744:2: ( LESS typeList GREATER )
            // src/main/resources/org/drools/lang/DRL.g:1744:4: LESS typeList GREATER
            {
            root_0 = (Object)adaptor.nil();

            LESS518=(Token)match(input,LESS,FOLLOW_LESS_in_nonWildcardTypeArguments7582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LESS518_tree = (Object)adaptor.create(LESS518);
            adaptor.addChild(root_0, LESS518_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments7584);
            typeList519=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList519.getTree());
            GREATER520=(Token)match(input,GREATER,FOLLOW_GREATER_in_nonWildcardTypeArguments7586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GREATER520_tree = (Object)adaptor.create(GREATER520);
            adaptor.addChild(root_0, GREATER520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1747:1: explicitGenericInvocationSuffix : ( super_key superSuffix | ID arguments );
    public final DRLParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        DRLParser.explicitGenericInvocationSuffix_return retval = new DRLParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID523=null;
        DRLParser.super_key_return super_key521 = null;

        DRLParser.superSuffix_return superSuffix522 = null;

        DRLParser.arguments_return arguments524 = null;


        Object ID523_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1748:2: ( super_key superSuffix | ID arguments )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==ID) ) {
                int LA167_1 = input.LA(2);

                if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                    alt167=1;
                }
                else if ( (true) ) {
                    alt167=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 167, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1748:4: super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_super_key_in_explicitGenericInvocationSuffix7598);
                    super_key521=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key521.getTree());
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix7600);
                    superSuffix522=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix522.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1749:7: ID arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    ID523=(Token)match(input,ID,FOLLOW_ID_in_explicitGenericInvocationSuffix7608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID523_tree = (Object)adaptor.create(ID523);
                    adaptor.addChild(root_0, ID523_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix7610);
                    arguments524=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments524.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // src/main/resources/org/drools/lang/DRL.g:1752:1: selector options {backtrack=true; memoize=true; } : ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE );
    public final DRLParser.selector_return selector() throws RecognitionException {
        DRLParser.selector_return retval = new DRLParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token DOT525=null;
        Token ID526=null;
        Token DOT528=null;
        Token DOT531=null;
        Token LEFT_SQUARE535=null;
        Token RIGHT_SQUARE537=null;
        DRLParser.arguments_return arguments527 = null;

        DRLParser.super_key_return super_key529 = null;

        DRLParser.superSuffix_return superSuffix530 = null;

        DRLParser.new_key_return new_key532 = null;

        DRLParser.nonWildcardTypeArguments_return nonWildcardTypeArguments533 = null;

        DRLParser.innerCreator_return innerCreator534 = null;

        DRLParser.expression_return expression536 = null;


        Object DOT525_tree=null;
        Object ID526_tree=null;
        Object DOT528_tree=null;
        Object DOT531_tree=null;
        Object LEFT_SQUARE535_tree=null;
        Object RIGHT_SQUARE537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1754:2: ( DOT ID ( ( LEFT_PAREN )=> arguments )? | DOT super_key superSuffix | DOT new_key ( nonWildcardTypeArguments )? innerCreator | LEFT_SQUARE expression RIGHT_SQUARE )
            int alt170=4;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==DOT) ) {
                int LA170_1 = input.LA(2);

                if ( (synpred46_DRL()) ) {
                    alt170=1;
                }
                else if ( (synpred47_DRL()) ) {
                    alt170=2;
                }
                else if ( (synpred48_DRL()) ) {
                    alt170=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA170_0==LEFT_SQUARE) ) {
                alt170=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1754:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT525=(Token)match(input,DOT,FOLLOW_DOT_in_selector7637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT525_tree = (Object)adaptor.create(DOT525);
                    adaptor.addChild(root_0, DOT525_tree);
                    }
                    ID526=(Token)match(input,ID,FOLLOW_ID_in_selector7639); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID526_tree = (Object)adaptor.create(ID526);
                    adaptor.addChild(root_0, ID526_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1754:13: ( ( LEFT_PAREN )=> arguments )?
                    int alt168=2;
                    alt168 = dfa168.predict(input);
                    switch (alt168) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1754:14: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector7648);
                            arguments527=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments527.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1756:6: DOT super_key superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT528=(Token)match(input,DOT,FOLLOW_DOT_in_selector7659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT528_tree = (Object)adaptor.create(DOT528);
                    adaptor.addChild(root_0, DOT528_tree);
                    }
                    pushFollow(FOLLOW_super_key_in_selector7661);
                    super_key529=super_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, super_key529.getTree());
                    pushFollow(FOLLOW_superSuffix_in_selector7663);
                    superSuffix530=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix530.getTree());

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1757:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT531=(Token)match(input,DOT,FOLLOW_DOT_in_selector7670); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT531_tree = (Object)adaptor.create(DOT531);
                    adaptor.addChild(root_0, DOT531_tree);
                    }
                    pushFollow(FOLLOW_new_key_in_selector7672);
                    new_key532=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, new_key532.getTree());
                    // src/main/resources/org/drools/lang/DRL.g:1757:18: ( nonWildcardTypeArguments )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==LESS) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1757:19: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7675);
                            nonWildcardTypeArguments533=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments533.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector7679);
                    innerCreator534=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator534.getTree());

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1758:6: LEFT_SQUARE expression RIGHT_SQUARE
                    {
                    root_0 = (Object)adaptor.nil();

                    LEFT_SQUARE535=(Token)match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_selector7686); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT_SQUARE535_tree = (Object)adaptor.create(LEFT_SQUARE535);
                    adaptor.addChild(root_0, LEFT_SQUARE535_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector7688);
                    expression536=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression536.getTree());
                    RIGHT_SQUARE537=(Token)match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_selector7690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT_SQUARE537_tree = (Object)adaptor.create(RIGHT_SQUARE537);
                    adaptor.addChild(root_0, RIGHT_SQUARE537_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // src/main/resources/org/drools/lang/DRL.g:1761:1: superSuffix : ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? );
    public final DRLParser.superSuffix_return superSuffix() throws RecognitionException {
        DRLParser.superSuffix_return retval = new DRLParser.superSuffix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOT539=null;
        Token ID540=null;
        DRLParser.arguments_return arguments538 = null;

        DRLParser.arguments_return arguments541 = null;


        Object DOT539_tree=null;
        Object ID540_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1762:2: ( arguments | DOT ID ( ( LEFT_PAREN )=> arguments )? )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==LEFT_PAREN) ) {
                alt172=1;
            }
            else if ( (LA172_0==DOT) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1762:4: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_superSuffix7702);
                    arguments538=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments538.getTree());

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1763:7: DOT ID ( ( LEFT_PAREN )=> arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    DOT539=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix7710); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT539_tree = (Object)adaptor.create(DOT539);
                    adaptor.addChild(root_0, DOT539_tree);
                    }
                    ID540=(Token)match(input,ID,FOLLOW_ID_in_superSuffix7712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID540_tree = (Object)adaptor.create(ID540);
                    adaptor.addChild(root_0, ID540_tree);
                    }
                    // src/main/resources/org/drools/lang/DRL.g:1763:14: ( ( LEFT_PAREN )=> arguments )?
                    int alt171=2;
                    alt171 = dfa171.predict(input);
                    switch (alt171) {
                        case 1 :
                            // src/main/resources/org/drools/lang/DRL.g:1763:15: ( LEFT_PAREN )=> arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix7721);
                            arguments541=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments541.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // src/main/resources/org/drools/lang/DRL.g:1766:1: arguments options {backtrack=true; memoize=true; } : LEFT_PAREN ( expressionList )? RIGHT_PAREN ;
    public final DRLParser.arguments_return arguments() throws RecognitionException {
        DRLParser.arguments_return retval = new DRLParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token LEFT_PAREN542=null;
        Token RIGHT_PAREN544=null;
        DRLParser.expressionList_return expressionList543 = null;


        Object LEFT_PAREN542_tree=null;
        Object RIGHT_PAREN544_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // src/main/resources/org/drools/lang/DRL.g:1768:2: ( LEFT_PAREN ( expressionList )? RIGHT_PAREN )
            // src/main/resources/org/drools/lang/DRL.g:1768:4: LEFT_PAREN ( expressionList )? RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();

            LEFT_PAREN542=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_arguments7755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN542_tree = (Object)adaptor.create(LEFT_PAREN542);
            adaptor.addChild(root_0, LEFT_PAREN542_tree);
            }
            // src/main/resources/org/drools/lang/DRL.g:1768:15: ( expressionList )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==ID||LA173_0==STRING||(LA173_0>=BOOL && LA173_0<=LEFT_PAREN)||LA173_0==DECIMAL||LA173_0==LESS||LA173_0==LEFT_SQUARE||(LA173_0>=NULL && LA173_0<=FLOAT)||(LA173_0>=INCR && LA173_0<=NEGATION)) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1768:15: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments7757);
                    expressionList543=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList543.getTree());

                    }
                    break;

            }

            RIGHT_PAREN544=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_arguments7760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN544_tree = (Object)adaptor.create(RIGHT_PAREN544);
            adaptor.addChild(root_0, RIGHT_PAREN544_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // src/main/resources/org/drools/lang/DRL.g:1771:1: expressionList : expression ( COMMA expression )* ;
    public final DRLParser.expressionList_return expressionList() throws RecognitionException {
        DRLParser.expressionList_return retval = new DRLParser.expressionList_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COMMA546=null;
        DRLParser.expression_return expression545 = null;

        DRLParser.expression_return expression547 = null;


        Object COMMA546_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1772:5: ( expression ( COMMA expression )* )
            // src/main/resources/org/drools/lang/DRL.g:1772:9: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList7776);
            expression545=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression545.getTree());
            // src/main/resources/org/drools/lang/DRL.g:1772:20: ( COMMA expression )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==COMMA) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // src/main/resources/org/drools/lang/DRL.g:1772:21: COMMA expression
            	    {
            	    COMMA546=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList7779); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList7782);
            	    expression547=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression547.getTree());

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // src/main/resources/org/drools/lang/DRL.g:1775:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );
    public final DRLParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        DRLParser.assignmentOperator_return retval = new DRLParser.assignmentOperator_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS_ASSIGN548=null;
        Token PLUS_ASSIGN549=null;
        Token MINUS_ASSIGN550=null;
        Token MULT_ASSIGN551=null;
        Token DIV_ASSIGN552=null;
        Token AND_ASSIGN553=null;
        Token OR_ASSIGN554=null;
        Token XOR_ASSIGN555=null;
        Token MOD_ASSIGN556=null;
        Token SHIFT_LEFT557=null;
        Token EQUALS_ASSIGN558=null;
        Token SHIFT_RIGHT559=null;
        Token EQUALS_ASSIGN560=null;
        Token SHIFT_RIGHT_UNSIG561=null;
        Token EQUALS_ASSIGN562=null;

        Object EQUALS_ASSIGN548_tree=null;
        Object PLUS_ASSIGN549_tree=null;
        Object MINUS_ASSIGN550_tree=null;
        Object MULT_ASSIGN551_tree=null;
        Object DIV_ASSIGN552_tree=null;
        Object AND_ASSIGN553_tree=null;
        Object OR_ASSIGN554_tree=null;
        Object XOR_ASSIGN555_tree=null;
        Object MOD_ASSIGN556_tree=null;
        Object SHIFT_LEFT557_tree=null;
        Object EQUALS_ASSIGN558_tree=null;
        Object SHIFT_RIGHT559_tree=null;
        Object EQUALS_ASSIGN560_tree=null;
        Object SHIFT_RIGHT_UNSIG561_tree=null;
        Object EQUALS_ASSIGN562_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:1777:2: ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN )
            int alt175=12;
            alt175 = dfa175.predict(input);
            switch (alt175) {
                case 1 :
                    // src/main/resources/org/drools/lang/DRL.g:1777:6: EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    EQUALS_ASSIGN548=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN548_tree = (Object)adaptor.create(EQUALS_ASSIGN548);
                    adaptor.addChild(root_0, EQUALS_ASSIGN548_tree);
                    }

                    }
                    break;
                case 2 :
                    // src/main/resources/org/drools/lang/DRL.g:1778:13: PLUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    PLUS_ASSIGN549=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentOperator7823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS_ASSIGN549_tree = (Object)adaptor.create(PLUS_ASSIGN549);
                    adaptor.addChild(root_0, PLUS_ASSIGN549_tree);
                    }

                    }
                    break;
                case 3 :
                    // src/main/resources/org/drools/lang/DRL.g:1779:13: MINUS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MINUS_ASSIGN550=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentOperator7837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS_ASSIGN550_tree = (Object)adaptor.create(MINUS_ASSIGN550);
                    adaptor.addChild(root_0, MINUS_ASSIGN550_tree);
                    }

                    }
                    break;
                case 4 :
                    // src/main/resources/org/drools/lang/DRL.g:1780:13: MULT_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MULT_ASSIGN551=(Token)match(input,MULT_ASSIGN,FOLLOW_MULT_ASSIGN_in_assignmentOperator7851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MULT_ASSIGN551_tree = (Object)adaptor.create(MULT_ASSIGN551);
                    adaptor.addChild(root_0, MULT_ASSIGN551_tree);
                    }

                    }
                    break;
                case 5 :
                    // src/main/resources/org/drools/lang/DRL.g:1781:13: DIV_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    DIV_ASSIGN552=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentOperator7865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV_ASSIGN552_tree = (Object)adaptor.create(DIV_ASSIGN552);
                    adaptor.addChild(root_0, DIV_ASSIGN552_tree);
                    }

                    }
                    break;
                case 6 :
                    // src/main/resources/org/drools/lang/DRL.g:1782:13: AND_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    AND_ASSIGN553=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentOperator7879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND_ASSIGN553_tree = (Object)adaptor.create(AND_ASSIGN553);
                    adaptor.addChild(root_0, AND_ASSIGN553_tree);
                    }

                    }
                    break;
                case 7 :
                    // src/main/resources/org/drools/lang/DRL.g:1783:13: OR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    OR_ASSIGN554=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentOperator7893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR_ASSIGN554_tree = (Object)adaptor.create(OR_ASSIGN554);
                    adaptor.addChild(root_0, OR_ASSIGN554_tree);
                    }

                    }
                    break;
                case 8 :
                    // src/main/resources/org/drools/lang/DRL.g:1784:13: XOR_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    XOR_ASSIGN555=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentOperator7907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    XOR_ASSIGN555_tree = (Object)adaptor.create(XOR_ASSIGN555);
                    adaptor.addChild(root_0, XOR_ASSIGN555_tree);
                    }

                    }
                    break;
                case 9 :
                    // src/main/resources/org/drools/lang/DRL.g:1785:13: MOD_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    MOD_ASSIGN556=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentOperator7921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOD_ASSIGN556_tree = (Object)adaptor.create(MOD_ASSIGN556);
                    adaptor.addChild(root_0, MOD_ASSIGN556_tree);
                    }

                    }
                    break;
                case 10 :
                    // src/main/resources/org/drools/lang/DRL.g:1786:13: SHIFT_LEFT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_LEFT557=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_assignmentOperator7935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_LEFT557_tree = (Object)adaptor.create(SHIFT_LEFT557);
                    adaptor.addChild(root_0, SHIFT_LEFT557_tree);
                    }
                    EQUALS_ASSIGN558=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN558_tree = (Object)adaptor.create(EQUALS_ASSIGN558);
                    adaptor.addChild(root_0, EQUALS_ASSIGN558_tree);
                    }

                    }
                    break;
                case 11 :
                    // src/main/resources/org/drools/lang/DRL.g:1787:13: SHIFT_RIGHT EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT559=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_assignmentOperator7951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT559_tree = (Object)adaptor.create(SHIFT_RIGHT559);
                    adaptor.addChild(root_0, SHIFT_RIGHT559_tree);
                    }
                    EQUALS_ASSIGN560=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7953); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN560_tree = (Object)adaptor.create(EQUALS_ASSIGN560);
                    adaptor.addChild(root_0, EQUALS_ASSIGN560_tree);
                    }

                    }
                    break;
                case 12 :
                    // src/main/resources/org/drools/lang/DRL.g:1788:13: SHIFT_RIGHT_UNSIG EQUALS_ASSIGN
                    {
                    root_0 = (Object)adaptor.nil();

                    SHIFT_RIGHT_UNSIG561=(Token)match(input,SHIFT_RIGHT_UNSIG,FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT_UNSIG561_tree = (Object)adaptor.create(SHIFT_RIGHT_UNSIG561);
                    adaptor.addChild(root_0, SHIFT_RIGHT_UNSIG561_tree);
                    }
                    EQUALS_ASSIGN562=(Token)match(input,EQUALS_ASSIGN,FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7969); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS_ASSIGN562_tree = (Object)adaptor.create(EQUALS_ASSIGN562);
                    adaptor.addChild(root_0, EQUALS_ASSIGN562_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_key"
    // src/main/resources/org/drools/lang/DRL.g:2099:1: operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.operator_key_return operator_key() throws RecognitionException {
        DRLParser.operator_key_return retval = new DRLParser.operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2100:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2100:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(false)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "operator_key", "(helper.isPluggableEvaluator(false))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_operator_key7999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2102:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operator_key"

    public static class neg_operator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg_operator_key"
    // src/main/resources/org/drools/lang/DRL.g:2105:1: neg_operator_key : {...}? =>id= ID -> VK_OPERATOR[$id] ;
    public final DRLParser.neg_operator_key_return neg_operator_key() throws RecognitionException {
        DRLParser.neg_operator_key_return retval = new DRLParser.neg_operator_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2106:2: ({...}? =>id= ID -> VK_OPERATOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2106:9: {...}? =>id= ID
            {
            if ( !(((helper.isPluggableEvaluator(true)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "neg_operator_key", "(helper.isPluggableEvaluator(true))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_neg_operator_key8043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
               helper.emit(id, DroolsEditorType.IDENTIFIER); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2108:9: -> VK_OPERATOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OPERATOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg_operator_key"

    public static class lock_on_active_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_on_active_key"
    // src/main/resources/org/drools/lang/DRL.g:2111:1: lock_on_active_key : {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] ;
    public final DRLParser.lock_on_active_key_return lock_on_active_key() throws RecognitionException {
        DRLParser.lock_on_active_key_return retval = new DRLParser.lock_on_active_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;
        Token mis2=null;
        Token id3=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        Object mis2_tree=null;
        Object id3_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2114:3: ({...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID -> VK_LOCK_ON_ACTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2114:5: {...}? =>id1= ID mis1= MINUS id2= ID mis2= MINUS id3= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lock_on_active_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, \"-\") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key8088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key8092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key8096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            mis2=(Token)match(input,MINUS,FOLLOW_MINUS_in_lock_on_active_key8100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis2);

            id3=(Token)match(input,ID,FOLLOW_ID_in_lock_on_active_key8104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id3);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);
              		helper.emit(mis2, DroolsEditorType.KEYWORD);
              		helper.emit(id3, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2120:3: -> VK_LOCK_ON_ACTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_LOCK_ON_ACTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lock_on_active_key"

    public static class date_effective_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_effective_key"
    // src/main/resources/org/drools/lang/DRL.g:2123:1: date_effective_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] ;
    public final DRLParser.date_effective_key_return date_effective_key() throws RecognitionException {
        DRLParser.date_effective_key_return retval = new DRLParser.date_effective_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2126:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EFFECTIVE[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2126:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_effective_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key8136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_effective_key8140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_effective_key8144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2130:3: -> VK_DATE_EFFECTIVE[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EFFECTIVE, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_effective_key"

    public static class date_expires_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "date_expires_key"
    // src/main/resources/org/drools/lang/DRL.g:2133:1: date_expires_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] ;
    public final DRLParser.date_expires_key_return date_expires_key() throws RecognitionException {
        DRLParser.date_expires_key_return retval = new DRLParser.date_expires_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2136:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_DATE_EXPIRES[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2136:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "date_expires_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key8176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_date_expires_key8180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_date_expires_key8184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2140:3: -> VK_DATE_EXPIRES[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DATE_EXPIRES, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "date_expires_key"

    public static class no_loop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "no_loop_key"
    // src/main/resources/org/drools/lang/DRL.g:2143:1: no_loop_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] ;
    public final DRLParser.no_loop_key_return no_loop_key() throws RecognitionException {
        DRLParser.no_loop_key_return retval = new DRLParser.no_loop_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2146:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_NO_LOOP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2146:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "no_loop_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.LOOP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key8216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_no_loop_key8220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_no_loop_key8224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2150:3: -> VK_NO_LOOP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NO_LOOP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "no_loop_key"

    public static class auto_focus_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "auto_focus_key"
    // src/main/resources/org/drools/lang/DRL.g:2153:1: auto_focus_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] ;
    public final DRLParser.auto_focus_key_return auto_focus_key() throws RecognitionException {
        DRLParser.auto_focus_key_return retval = new DRLParser.auto_focus_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2156:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AUTO_FOCUS[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2156:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "auto_focus_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.FOCUS))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key8256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_auto_focus_key8260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_auto_focus_key8264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2160:3: -> VK_AUTO_FOCUS[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AUTO_FOCUS, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "auto_focus_key"

    public static class activation_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "activation_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2163:1: activation_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] ;
    public final DRLParser.activation_group_key_return activation_group_key() throws RecognitionException {
        DRLParser.activation_group_key_return retval = new DRLParser.activation_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2166:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ACTIVATION_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2166:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "activation_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key8296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_activation_group_key8300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_activation_group_key8304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2170:3: -> VK_ACTIVATION_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTIVATION_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "activation_group_key"

    public static class agenda_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "agenda_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2173:1: agenda_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] ;
    public final DRLParser.agenda_group_key_return agenda_group_key() throws RecognitionException {
        DRLParser.agenda_group_key_return retval = new DRLParser.agenda_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2176:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_AGENDA_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2176:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "agenda_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key8336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_agenda_group_key8340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_agenda_group_key8344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2180:3: -> VK_AGENDA_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AGENDA_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "agenda_group_key"

    public static class ruleflow_group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ruleflow_group_key"
    // src/main/resources/org/drools/lang/DRL.g:2183:1: ruleflow_group_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] ;
    public final DRLParser.ruleflow_group_key_return ruleflow_group_key() throws RecognitionException {
        DRLParser.ruleflow_group_key_return retval = new DRLParser.ruleflow_group_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2186:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_RULEFLOW_GROUP[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2186:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ruleflow_group_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.GROUP))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key8376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_ruleflow_group_key8380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_ruleflow_group_key8384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2190:3: -> VK_RULEFLOW_GROUP[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULEFLOW_GROUP, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ruleflow_group_key"

    public static class entry_point_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "entry_point_key"
    // src/main/resources/org/drools/lang/DRL.g:2193:1: entry_point_key : {...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] ;
    public final DRLParser.entry_point_key_return entry_point_key() throws RecognitionException {
        DRLParser.entry_point_key_return retval = new DRLParser.entry_point_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1=null;
        Token mis1=null;
        Token id2=null;

        Object id1_tree=null;
        Object mis1_tree=null;
        Object id2_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");


        	String text = "";

        try {
            // src/main/resources/org/drools/lang/DRL.g:2196:3: ({...}? =>id1= ID mis1= MINUS id2= ID -> VK_ENTRY_POINT[$start, text] )
            // src/main/resources/org/drools/lang/DRL.g:2196:5: {...}? =>id1= ID mis1= MINUS id2= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "entry_point_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, \"-\") && helper.validateLT(3, DroolsSoftKeywords.POINT))");
            }
            id1=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key8416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id1);

            mis1=(Token)match(input,MINUS,FOLLOW_MINUS_in_entry_point_key8420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(mis1);

            id2=(Token)match(input,ID,FOLLOW_ID_in_entry_point_key8424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id2);

            if ( state.backtracking==0 ) {
              text = input.toString(retval.start,input.LT(-1));
            }
            if ( state.backtracking==0 ) {
              	helper.emit(id1, DroolsEditorType.KEYWORD);
              		helper.emit(mis1, DroolsEditorType.KEYWORD);
              		helper.emit(id2, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2200:3: -> VK_ENTRY_POINT[$start, text]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENTRY_POINT, ((Token)retval.start), text));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "entry_point_key"

    public static class timer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timer_key"
    // src/main/resources/org/drools/lang/DRL.g:2203:1: timer_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.timer_key_return timer_key() throws RecognitionException {
        DRLParser.timer_key_return retval = new DRLParser.timer_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2204:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2204:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timer_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TIMER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_timer_key8453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2206:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timer_key"

    public static class duration_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "duration_key"
    // src/main/resources/org/drools/lang/DRL.g:2209:1: duration_key : {...}? =>id= ID -> VK_TIMER[$id] ;
    public final DRLParser.duration_key_return duration_key() throws RecognitionException {
        DRLParser.duration_key_return retval = new DRLParser.duration_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2210:2: ({...}? =>id= ID -> VK_TIMER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2210:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "duration_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_duration_key8480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2212:3: -> VK_TIMER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TIMER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_key"

    public static class calendars_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "calendars_key"
    // src/main/resources/org/drools/lang/DRL.g:2215:1: calendars_key : {...}? =>id= ID -> VK_CALENDARS[$id] ;
    public final DRLParser.calendars_key_return calendars_key() throws RecognitionException {
        DRLParser.calendars_key_return retval = new DRLParser.calendars_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2216:2: ({...}? =>id= ID -> VK_CALENDARS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2216:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "calendars_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_calendars_key8507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2218:3: -> VK_CALENDARS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CALENDARS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "calendars_key"

    public static class package_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_key"
    // src/main/resources/org/drools/lang/DRL.g:2221:1: package_key : {...}? =>id= ID -> VK_PACKAGE[$id] ;
    public final DRLParser.package_key_return package_key() throws RecognitionException {
        DRLParser.package_key_return retval = new DRLParser.package_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2222:2: ({...}? =>id= ID -> VK_PACKAGE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2222:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "package_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_package_key8534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2224:3: -> VK_PACKAGE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PACKAGE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "package_key"

    public static class import_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_key"
    // src/main/resources/org/drools/lang/DRL.g:2227:1: import_key : {...}? =>id= ID -> VK_IMPORT[$id] ;
    public final DRLParser.import_key_return import_key() throws RecognitionException {
        DRLParser.import_key_return retval = new DRLParser.import_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2228:2: ({...}? =>id= ID -> VK_IMPORT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2228:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "import_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_import_key8561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2230:3: -> VK_IMPORT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPORT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_key"

    public static class dialect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dialect_key"
    // src/main/resources/org/drools/lang/DRL.g:2233:1: dialect_key : {...}? =>id= ID -> VK_DIALECT[$id] ;
    public final DRLParser.dialect_key_return dialect_key() throws RecognitionException {
        DRLParser.dialect_key_return retval = new DRLParser.dialect_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2234:2: ({...}? =>id= ID -> VK_DIALECT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2234:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dialect_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_dialect_key8588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2236:3: -> VK_DIALECT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DIALECT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dialect_key"

    public static class salience_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "salience_key"
    // src/main/resources/org/drools/lang/DRL.g:2239:1: salience_key : {...}? =>id= ID -> VK_SALIENCE[$id] ;
    public final DRLParser.salience_key_return salience_key() throws RecognitionException {
        DRLParser.salience_key_return retval = new DRLParser.salience_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2240:2: ({...}? =>id= ID -> VK_SALIENCE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2240:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "salience_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_salience_key8615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2242:3: -> VK_SALIENCE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SALIENCE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "salience_key"

    public static class enabled_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enabled_key"
    // src/main/resources/org/drools/lang/DRL.g:2245:1: enabled_key : {...}? =>id= ID -> VK_ENABLED[$id] ;
    public final DRLParser.enabled_key_return enabled_key() throws RecognitionException {
        DRLParser.enabled_key_return retval = new DRLParser.enabled_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2246:2: ({...}? =>id= ID -> VK_ENABLED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2246:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enabled_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enabled_key8642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2248:3: -> VK_ENABLED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENABLED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enabled_key"

    public static class attributes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributes_key"
    // src/main/resources/org/drools/lang/DRL.g:2251:1: attributes_key : {...}? =>id= ID -> VK_ATTRIBUTES[$id] ;
    public final DRLParser.attributes_key_return attributes_key() throws RecognitionException {
        DRLParser.attributes_key_return retval = new DRLParser.attributes_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2252:2: ({...}? =>id= ID -> VK_ATTRIBUTES[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2252:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "attributes_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_attributes_key8669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2254:3: -> VK_ATTRIBUTES[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ATTRIBUTES, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributes_key"

    public static class rule_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule_key"
    // src/main/resources/org/drools/lang/DRL.g:2257:1: rule_key : {...}? =>id= ID -> VK_RULE[$id] ;
    public final DRLParser.rule_key_return rule_key() throws RecognitionException {
        DRLParser.rule_key_return retval = new DRLParser.rule_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2258:2: ({...}? =>id= ID -> VK_RULE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2258:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rule_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RULE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_rule_key8696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2260:3: -> VK_RULE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RULE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rule_key"

    public static class extend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extend_key"
    // src/main/resources/org/drools/lang/DRL.g:2263:1: extend_key : {...}? =>id= ID -> VK_EXTEND[$id] ;
    public final DRLParser.extend_key_return extend_key() throws RecognitionException {
        DRLParser.extend_key_return retval = new DRLParser.extend_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2264:2: ({...}? =>id= ID -> VK_EXTEND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2264:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extend_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extend_key8723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2266:3: -> VK_EXTEND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTEND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extend_key"

    public static class query_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_key"
    // src/main/resources/org/drools/lang/DRL.g:2269:1: query_key : {...}? =>id= ID -> VK_QUERY[$id] ;
    public final DRLParser.query_key_return query_key() throws RecognitionException {
        DRLParser.query_key_return retval = new DRLParser.query_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2270:2: ({...}? =>id= ID -> VK_QUERY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2270:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "query_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.QUERY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_query_key8750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2272:3: -> VK_QUERY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_QUERY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "query_key"

    public static class declare_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_key"
    // src/main/resources/org/drools/lang/DRL.g:2275:1: declare_key : {...}? =>id= ID -> VK_DECLARE[$id] ;
    public final DRLParser.declare_key_return declare_key() throws RecognitionException {
        DRLParser.declare_key_return retval = new DRLParser.declare_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2276:2: ({...}? =>id= ID -> VK_DECLARE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2276:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "declare_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_declare_key8777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2278:3: -> VK_DECLARE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DECLARE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "declare_key"

    public static class function_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_key"
    // src/main/resources/org/drools/lang/DRL.g:2281:1: function_key : {...}? =>id= ID -> VK_FUNCTION[$id] ;
    public final DRLParser.function_key_return function_key() throws RecognitionException {
        DRLParser.function_key_return retval = new DRLParser.function_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2282:2: ({...}? =>id= ID -> VK_FUNCTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2282:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_function_key8804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2284:3: -> VK_FUNCTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FUNCTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_key"

    public static class global_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_key"
    // src/main/resources/org/drools/lang/DRL.g:2287:1: global_key : {...}? =>id= ID -> VK_GLOBAL[$id] ;
    public final DRLParser.global_key_return global_key() throws RecognitionException {
        DRLParser.global_key_return retval = new DRLParser.global_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2288:2: ({...}? =>id= ID -> VK_GLOBAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2288:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "global_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_global_key8831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2290:3: -> VK_GLOBAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_GLOBAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_key"

    public static class eval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eval_key"
    // src/main/resources/org/drools/lang/DRL.g:2293:1: eval_key : {...}? =>id= ID -> VK_EVAL[$id] ;
    public final DRLParser.eval_key_return eval_key() throws RecognitionException {
        DRLParser.eval_key_return retval = new DRLParser.eval_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2294:2: ({...}? =>id= ID -> VK_EVAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2294:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "eval_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EVAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_eval_key8858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2296:3: -> VK_EVAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EVAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eval_key"

    public static class not_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_key"
    // src/main/resources/org/drools/lang/DRL.g:2299:1: not_key : {...}? =>id= ID -> VK_NOT[$id] ;
    public final DRLParser.not_key_return not_key() throws RecognitionException {
        DRLParser.not_key_return retval = new DRLParser.not_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2300:2: ({...}? =>id= ID -> VK_NOT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2300:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NOT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_not_key8885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2302:3: -> VK_NOT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NOT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_key"

    public static class in_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_key"
    // src/main/resources/org/drools/lang/DRL.g:2305:1: in_key : {...}? =>id= ID -> VK_IN[$id] ;
    public final DRLParser.in_key_return in_key() throws RecognitionException {
        DRLParser.in_key_return retval = new DRLParser.in_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2306:2: ({...}? =>id= ID -> VK_IN[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2306:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "in_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_in_key8912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2308:3: -> VK_IN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_key"

    public static class or_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_key"
    // src/main/resources/org/drools/lang/DRL.g:2311:1: or_key : {...}? =>id= ID -> VK_OR[$id] ;
    public final DRLParser.or_key_return or_key() throws RecognitionException {
        DRLParser.or_key_return retval = new DRLParser.or_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2312:2: ({...}? =>id= ID -> VK_OR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2312:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "or_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.OR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_or_key8939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2314:3: -> VK_OR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_OR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_key"

    public static class and_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_key"
    // src/main/resources/org/drools/lang/DRL.g:2317:1: and_key : {...}? =>id= ID -> VK_AND[$id] ;
    public final DRLParser.and_key_return and_key() throws RecognitionException {
        DRLParser.and_key_return retval = new DRLParser.and_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2318:2: ({...}? =>id= ID -> VK_AND[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2318:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "and_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.AND))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_and_key8966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2320:3: -> VK_AND[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_AND, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_key"

    public static class exists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exists_key"
    // src/main/resources/org/drools/lang/DRL.g:2323:1: exists_key : {...}? =>id= ID -> VK_EXISTS[$id] ;
    public final DRLParser.exists_key_return exists_key() throws RecognitionException {
        DRLParser.exists_key_return retval = new DRLParser.exists_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2324:2: ({...}? =>id= ID -> VK_EXISTS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2324:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exists_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_exists_key8993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2326:3: -> VK_EXISTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXISTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exists_key"

    public static class forall_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forall_key"
    // src/main/resources/org/drools/lang/DRL.g:2329:1: forall_key : {...}? =>id= ID -> VK_FORALL[$id] ;
    public final DRLParser.forall_key_return forall_key() throws RecognitionException {
        DRLParser.forall_key_return retval = new DRLParser.forall_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2330:2: ({...}? =>id= ID -> VK_FORALL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2330:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "forall_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FORALL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_forall_key9020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2332:3: -> VK_FORALL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FORALL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forall_key"

    public static class action_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "action_key"
    // src/main/resources/org/drools/lang/DRL.g:2335:1: action_key : {...}? =>id= ID -> VK_ACTION[$id] ;
    public final DRLParser.action_key_return action_key() throws RecognitionException {
        DRLParser.action_key_return retval = new DRLParser.action_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2336:2: ({...}? =>id= ID -> VK_ACTION[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2336:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ACTION)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "action_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ACTION))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_action_key9047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2338:3: -> VK_ACTION[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ACTION, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "action_key"

    public static class reverse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reverse_key"
    // src/main/resources/org/drools/lang/DRL.g:2341:1: reverse_key : {...}? =>id= ID -> VK_REVERSE[$id] ;
    public final DRLParser.reverse_key_return reverse_key() throws RecognitionException {
        DRLParser.reverse_key_return retval = new DRLParser.reverse_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2342:2: ({...}? =>id= ID -> VK_REVERSE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2342:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reverse_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.REVERSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_reverse_key9074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2344:3: -> VK_REVERSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_REVERSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reverse_key"

    public static class result_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "result_key"
    // src/main/resources/org/drools/lang/DRL.g:2347:1: result_key : {...}? =>id= ID -> VK_RESULT[$id] ;
    public final DRLParser.result_key_return result_key() throws RecognitionException {
        DRLParser.result_key_return retval = new DRLParser.result_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2348:2: ({...}? =>id= ID -> VK_RESULT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2348:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RESULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RESULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_result_key9101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2350:3: -> VK_RESULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RESULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "result_key"

    public static class end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "end_key"
    // src/main/resources/org/drools/lang/DRL.g:2353:1: end_key : {...}? =>id= ID -> VK_END[$id] ;
    public final DRLParser.end_key_return end_key() throws RecognitionException {
        DRLParser.end_key_return retval = new DRLParser.end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2354:2: ({...}? =>id= ID -> VK_END[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2354:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "end_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_end_key9128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2356:3: -> VK_END[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_END, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "end_key"

    public static class not_end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_end_key"
    // src/main/resources/org/drools/lang/DRL.g:2359:1: not_end_key : {...}? =>any= . ;
    public final DRLParser.not_end_key_return not_end_key() throws RecognitionException {
        DRLParser.not_end_key_return retval = new DRLParser.not_end_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token any=null;

        Object any_tree=null;

        try {
            // src/main/resources/org/drools/lang/DRL.g:2360:2: ({...}? =>any= . )
            // src/main/resources/org/drools/lang/DRL.g:2360:4: {...}? =>any= .
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!(helper.validateIdentifierKey(DroolsSoftKeywords.END)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "not_end_key", "!(helper.validateIdentifierKey(DroolsSoftKeywords.END))");
            }
            any=(Token)input.LT(1);
            matchAny(input); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            any_tree = (Object)adaptor.create(any);
            adaptor.addChild(root_0, any_tree);
            }
            if ( state.backtracking==0 ) {
              	helper.emit(any, DroolsEditorType.CODE_CHUNK);	
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_end_key"

    public static class init_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "init_key"
    // src/main/resources/org/drools/lang/DRL.g:2364:1: init_key : {...}? =>id= ID -> VK_INIT[$id] ;
    public final DRLParser.init_key_return init_key() throws RecognitionException {
        DRLParser.init_key_return retval = new DRLParser.init_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2365:2: ({...}? =>id= ID -> VK_INIT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2365:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INIT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "init_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INIT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_init_key9175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2367:3: -> VK_INIT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INIT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "init_key"

    public static class instanceof_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceof_key"
    // src/main/resources/org/drools/lang/DRL.g:2370:1: instanceof_key : {...}? =>id= ID -> VK_INSTANCEOF[$id] ;
    public final DRLParser.instanceof_key_return instanceof_key() throws RecognitionException {
        DRLParser.instanceof_key_return retval = new DRLParser.instanceof_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2371:2: ({...}? =>id= ID -> VK_INSTANCEOF[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2371:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instanceof_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_instanceof_key9202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2373:3: -> VK_INSTANCEOF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INSTANCEOF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "instanceof_key"

    public static class extends_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extends_key"
    // src/main/resources/org/drools/lang/DRL.g:2376:1: extends_key : {...}? =>id= ID -> VK_EXTENDS[$id] ;
    public final DRLParser.extends_key_return extends_key() throws RecognitionException {
        DRLParser.extends_key_return retval = new DRLParser.extends_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2377:2: ({...}? =>id= ID -> VK_EXTENDS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2377:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extends_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.EXTENDS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_extends_key9229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2379:3: -> VK_EXTENDS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_EXTENDS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extends_key"

    public static class implements_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implements_key"
    // src/main/resources/org/drools/lang/DRL.g:2382:1: implements_key : {...}? =>id= ID -> VK_IMPLEMENTS[$id] ;
    public final DRLParser.implements_key_return implements_key() throws RecognitionException {
        DRLParser.implements_key_return retval = new DRLParser.implements_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2383:2: ({...}? =>id= ID -> VK_IMPLEMENTS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2383:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "implements_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IMPLEMENTS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_implements_key9256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2385:3: -> VK_IMPLEMENTS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IMPLEMENTS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implements_key"

    public static class super_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "super_key"
    // src/main/resources/org/drools/lang/DRL.g:2388:1: super_key : {...}? =>id= ID -> VK_SUPER[$id] ;
    public final DRLParser.super_key_return super_key() throws RecognitionException {
        DRLParser.super_key_return retval = new DRLParser.super_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2389:2: ({...}? =>id= ID -> VK_SUPER[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2389:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "super_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_super_key9283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2391:3: -> VK_SUPER[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SUPER, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "super_key"

    public static class boolean_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_key"
    // src/main/resources/org/drools/lang/DRL.g:2394:1: boolean_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.boolean_key_return boolean_key() throws RecognitionException {
        DRLParser.boolean_key_return retval = new DRLParser.boolean_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2395:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2395:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "boolean_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_boolean_key9311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2397:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "boolean_key"

    public static class char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "char_key"
    // src/main/resources/org/drools/lang/DRL.g:2400:1: char_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.char_key_return char_key() throws RecognitionException {
        DRLParser.char_key_return retval = new DRLParser.char_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2401:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2401:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_char_key9339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2403:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "char_key"

    public static class byte_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "byte_key"
    // src/main/resources/org/drools/lang/DRL.g:2406:1: byte_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.byte_key_return byte_key() throws RecognitionException {
        DRLParser.byte_key_return retval = new DRLParser.byte_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2407:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2407:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "byte_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_byte_key9367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2409:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "byte_key"

    public static class short_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "short_key"
    // src/main/resources/org/drools/lang/DRL.g:2412:1: short_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.short_key_return short_key() throws RecognitionException {
        DRLParser.short_key_return retval = new DRLParser.short_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2413:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2413:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "short_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_short_key9395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2415:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_key"

    public static class int_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "int_key"
    // src/main/resources/org/drools/lang/DRL.g:2418:1: int_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.int_key_return int_key() throws RecognitionException {
        DRLParser.int_key_return retval = new DRLParser.int_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2419:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2419:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "int_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_int_key9423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2421:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "int_key"

    public static class long_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "long_key"
    // src/main/resources/org/drools/lang/DRL.g:2424:1: long_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.long_key_return long_key() throws RecognitionException {
        DRLParser.long_key_return retval = new DRLParser.long_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2425:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2425:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.LONG)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "long_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.LONG))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_long_key9451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2427:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "long_key"

    public static class float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "float_key"
    // src/main/resources/org/drools/lang/DRL.g:2430:1: float_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.float_key_return float_key() throws RecognitionException {
        DRLParser.float_key_return retval = new DRLParser.float_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2431:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2431:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "float_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_float_key9479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2433:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "float_key"

    public static class double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_key"
    // src/main/resources/org/drools/lang/DRL.g:2436:1: double_key : {...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] ;
    public final DRLParser.double_key_return double_key() throws RecognitionException {
        DRLParser.double_key_return retval = new DRLParser.double_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2437:2: ({...}? =>id= ID -> VK_PRIMITIVE_TYPE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2437:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "double_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_double_key9507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2439:3: -> VK_PRIMITIVE_TYPE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIMITIVE_TYPE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_key"

    public static class this_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "this_key"
    // src/main/resources/org/drools/lang/DRL.g:2442:1: this_key : {...}? =>id= ID -> VK_THIS[$id] ;
    public final DRLParser.this_key_return this_key() throws RecognitionException {
        DRLParser.this_key_return retval = new DRLParser.this_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2443:2: ({...}? =>id= ID -> VK_THIS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2443:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THIS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "this_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THIS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_this_key9535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2445:3: -> VK_THIS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THIS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "this_key"

    public static class void_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "void_key"
    // src/main/resources/org/drools/lang/DRL.g:2448:1: void_key : {...}? =>id= ID -> VK_VOID[$id] ;
    public final DRLParser.void_key_return void_key() throws RecognitionException {
        DRLParser.void_key_return retval = new DRLParser.void_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2449:2: ({...}? =>id= ID -> VK_VOID[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2449:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOID)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "void_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOID))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_void_key9563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2451:3: -> VK_VOID[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOID, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "void_key"

    public static class class_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_key"
    // src/main/resources/org/drools/lang/DRL.g:2454:1: class_key : {...}? =>id= ID -> VK_CLASS[$id] ;
    public final DRLParser.class_key_return class_key() throws RecognitionException {
        DRLParser.class_key_return retval = new DRLParser.class_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2455:2: ({...}? =>id= ID -> VK_CLASS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2455:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CLASS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "class_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CLASS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_class_key9591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2457:3: -> VK_CLASS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CLASS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "class_key"

    public static class new_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "new_key"
    // src/main/resources/org/drools/lang/DRL.g:2460:1: new_key : {...}? =>id= ID -> VK_NEW[$id] ;
    public final DRLParser.new_key_return new_key() throws RecognitionException {
        DRLParser.new_key_return retval = new DRLParser.new_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2461:2: ({...}? =>id= ID -> VK_NEW[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2461:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NEW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "new_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NEW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_new_key9619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2463:3: -> VK_NEW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NEW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "new_key"

    public static class final_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "final_key"
    // src/main/resources/org/drools/lang/DRL.g:2467:1: final_key : {...}? =>id= ID -> VK_FINAL[$id] ;
    public final DRLParser.final_key_return final_key() throws RecognitionException {
        DRLParser.final_key_return retval = new DRLParser.final_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2468:2: ({...}? =>id= ID -> VK_FINAL[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2468:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINAL)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "final_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINAL))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_final_key9648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2470:2: -> VK_FINAL[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINAL, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "final_key"

    public static class if_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_key"
    // src/main/resources/org/drools/lang/DRL.g:2474:1: if_key : {...}? =>id= ID -> VK_IF[$id] ;
    public final DRLParser.if_key_return if_key() throws RecognitionException {
        DRLParser.if_key_return retval = new DRLParser.if_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2475:2: ({...}? =>id= ID -> VK_IF[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2475:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.IF)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "if_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.IF))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_if_key9674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2477:2: -> VK_IF[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_IF, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_key"

    public static class else_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_key"
    // src/main/resources/org/drools/lang/DRL.g:2481:1: else_key : {...}? =>id= ID -> VK_ELSE[$id] ;
    public final DRLParser.else_key_return else_key() throws RecognitionException {
        DRLParser.else_key_return retval = new DRLParser.else_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2482:2: ({...}? =>id= ID -> VK_ELSE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2482:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ELSE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "else_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ELSE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_else_key9700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2484:2: -> VK_ELSE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ELSE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_key"

    public static class for_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_key"
    // src/main/resources/org/drools/lang/DRL.g:2488:1: for_key : {...}? =>id= ID -> VK_FOR[$id] ;
    public final DRLParser.for_key_return for_key() throws RecognitionException {
        DRLParser.for_key_return retval = new DRLParser.for_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2489:2: ({...}? =>id= ID -> VK_FOR[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2489:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "for_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FOR))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_for_key9726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2491:2: -> VK_FOR[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FOR, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_key"

    public static class while_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_key"
    // src/main/resources/org/drools/lang/DRL.g:2495:1: while_key : {...}? =>id= ID -> VK_WHILE[$id] ;
    public final DRLParser.while_key_return while_key() throws RecognitionException {
        DRLParser.while_key_return retval = new DRLParser.while_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2496:2: ({...}? =>id= ID -> VK_WHILE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2496:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.WHILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "while_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.WHILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_while_key9752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2498:2: -> VK_WHILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_WHILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_key"

    public static class do_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "do_key"
    // src/main/resources/org/drools/lang/DRL.g:2502:1: do_key : {...}? =>id= ID -> VK_DO[$id] ;
    public final DRLParser.do_key_return do_key() throws RecognitionException {
        DRLParser.do_key_return retval = new DRLParser.do_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2503:2: ({...}? =>id= ID -> VK_DO[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2503:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DO)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "do_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DO))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_do_key9778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2505:2: -> VK_DO[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DO, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "do_key"

    public static class case_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_key"
    // src/main/resources/org/drools/lang/DRL.g:2509:1: case_key : {...}? =>id= ID -> VK_CASE[$id] ;
    public final DRLParser.case_key_return case_key() throws RecognitionException {
        DRLParser.case_key_return retval = new DRLParser.case_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2510:2: ({...}? =>id= ID -> VK_CASE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2510:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CASE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "case_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CASE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_case_key9804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2512:2: -> VK_CASE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CASE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_key"

    public static class default_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_key"
    // src/main/resources/org/drools/lang/DRL.g:2516:1: default_key : {...}? =>id= ID -> VK_DEFAULT[$id] ;
    public final DRLParser.default_key_return default_key() throws RecognitionException {
        DRLParser.default_key_return retval = new DRLParser.default_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2517:2: ({...}? =>id= ID -> VK_DEFAULT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2517:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "default_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.DEFAULT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_default_key9830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2519:2: -> VK_DEFAULT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_DEFAULT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "default_key"

    public static class try_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_key"
    // src/main/resources/org/drools/lang/DRL.g:2523:1: try_key : {...}? =>id= ID -> VK_TRY[$id] ;
    public final DRLParser.try_key_return try_key() throws RecognitionException {
        DRLParser.try_key_return retval = new DRLParser.try_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2524:2: ({...}? =>id= ID -> VK_TRY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2524:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "try_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_try_key9856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2526:2: -> VK_TRY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_key"

    public static class catch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catch_key"
    // src/main/resources/org/drools/lang/DRL.g:2530:1: catch_key : {...}? =>id= ID -> VK_CATCH[$id] ;
    public final DRLParser.catch_key_return catch_key() throws RecognitionException {
        DRLParser.catch_key_return retval = new DRLParser.catch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2531:2: ({...}? =>id= ID -> VK_CATCH[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2531:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CATCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "catch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CATCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_catch_key9882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2533:2: -> VK_CATCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CATCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "catch_key"

    public static class finally_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finally_key"
    // src/main/resources/org/drools/lang/DRL.g:2537:1: finally_key : {...}? =>id= ID -> VK_FINALLY[$id] ;
    public final DRLParser.finally_key_return finally_key() throws RecognitionException {
        DRLParser.finally_key_return retval = new DRLParser.finally_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2538:2: ({...}? =>id= ID -> VK_FINALLY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2538:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "finally_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.FINALLY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_finally_key9908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2540:2: -> VK_FINALLY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_FINALLY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "finally_key"

    public static class switch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_key"
    // src/main/resources/org/drools/lang/DRL.g:2544:1: switch_key : {...}? =>id= ID -> VK_SWITCH[$id] ;
    public final DRLParser.switch_key_return switch_key() throws RecognitionException {
        DRLParser.switch_key_return retval = new DRLParser.switch_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2545:2: ({...}? =>id= ID -> VK_SWITCH[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2545:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "switch_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SWITCH))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_switch_key9934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2547:2: -> VK_SWITCH[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SWITCH, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "switch_key"

    public static class synchronized_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "synchronized_key"
    // src/main/resources/org/drools/lang/DRL.g:2551:1: synchronized_key : {...}? =>id= ID -> VK_SYNCHRONIZED[$id] ;
    public final DRLParser.synchronized_key_return synchronized_key() throws RecognitionException {
        DRLParser.synchronized_key_return retval = new DRLParser.synchronized_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2552:2: ({...}? =>id= ID -> VK_SYNCHRONIZED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2552:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "synchronized_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.SYNCHRONIZED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_synchronized_key9960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2554:2: -> VK_SYNCHRONIZED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_SYNCHRONIZED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "synchronized_key"

    public static class return_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_key"
    // src/main/resources/org/drools/lang/DRL.g:2558:1: return_key : {...}? =>id= ID -> VK_RETURN[$id] ;
    public final DRLParser.return_key_return return_key() throws RecognitionException {
        DRLParser.return_key_return retval = new DRLParser.return_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2559:2: ({...}? =>id= ID -> VK_RETURN[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2559:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.RETURN)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "return_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.RETURN))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_return_key9986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2561:2: -> VK_RETURN[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_RETURN, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "return_key"

    public static class throw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throw_key"
    // src/main/resources/org/drools/lang/DRL.g:2565:1: throw_key : {...}? =>id= ID -> VK_THROW[$id] ;
    public final DRLParser.throw_key_return throw_key() throws RecognitionException {
        DRLParser.throw_key_return retval = new DRLParser.throw_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2566:2: ({...}? =>id= ID -> VK_THROW[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2566:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROW)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throw_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROW))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throw_key10012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2568:2: -> VK_THROW[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROW, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throw_key"

    public static class break_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "break_key"
    // src/main/resources/org/drools/lang/DRL.g:2572:1: break_key : {...}? =>id= ID -> VK_BREAK[$id] ;
    public final DRLParser.break_key_return break_key() throws RecognitionException {
        DRLParser.break_key_return retval = new DRLParser.break_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2573:2: ({...}? =>id= ID -> VK_BREAK[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2573:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.BREAK)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "break_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.BREAK))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_break_key10038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2575:2: -> VK_BREAK[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_BREAK, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "break_key"

    public static class continue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_key"
    // src/main/resources/org/drools/lang/DRL.g:2579:1: continue_key : {...}? =>id= ID -> VK_CONTINUE[$id] ;
    public final DRLParser.continue_key_return continue_key() throws RecognitionException {
        DRLParser.continue_key_return retval = new DRLParser.continue_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2580:2: ({...}? =>id= ID -> VK_CONTINUE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2580:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "continue_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.CONTINUE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_continue_key10064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2582:2: -> VK_CONTINUE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_CONTINUE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "continue_key"

    public static class assert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assert_key"
    // src/main/resources/org/drools/lang/DRL.g:2585:1: assert_key : {...}? =>id= ID -> VK_ASSERT[$id] ;
    public final DRLParser.assert_key_return assert_key() throws RecognitionException {
        DRLParser.assert_key_return retval = new DRLParser.assert_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2586:2: ({...}? =>id= ID -> VK_ASSERT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2586:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "assert_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ASSERT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_assert_key10089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2588:2: -> VK_ASSERT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ASSERT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assert_key"

    public static class static_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "static_key"
    // src/main/resources/org/drools/lang/DRL.g:2591:1: static_key : {...}? =>id= ID -> VK_STATIC[$id] ;
    public final DRLParser.static_key_return static_key() throws RecognitionException {
        DRLParser.static_key_return retval = new DRLParser.static_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2592:2: ({...}? =>id= ID -> VK_STATIC[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2592:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STATIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "static_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STATIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_static_key10114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2594:2: -> VK_STATIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STATIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "static_key"

    public static class modify_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify_key"
    // src/main/resources/org/drools/lang/DRL.g:2597:1: modify_key : {...}? =>id= ID -> VK_MODIFY[$id] ;
    public final DRLParser.modify_key_return modify_key() throws RecognitionException {
        DRLParser.modify_key_return retval = new DRLParser.modify_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2598:2: ({...}? =>id= ID -> VK_MODIFY[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2598:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "modify_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.MODIFY))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_modify_key10139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2600:2: -> VK_MODIFY[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_MODIFY, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modify_key"

    public static class public_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "public_key"
    // src/main/resources/org/drools/lang/DRL.g:2603:1: public_key : {...}? =>id= ID -> VK_PUBLIC[$id] ;
    public final DRLParser.public_key_return public_key() throws RecognitionException {
        DRLParser.public_key_return retval = new DRLParser.public_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2604:2: ({...}? =>id= ID -> VK_PUBLIC[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2604:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "public_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PUBLIC))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_public_key10165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2606:2: -> VK_PUBLIC[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PUBLIC, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "public_key"

    public static class protected_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_key"
    // src/main/resources/org/drools/lang/DRL.g:2610:1: protected_key : {...}? =>id= ID -> VK_PROTECTED[$id] ;
    public final DRLParser.protected_key_return protected_key() throws RecognitionException {
        DRLParser.protected_key_return retval = new DRLParser.protected_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2611:2: ({...}? =>id= ID -> VK_PROTECTED[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2611:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "protected_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PROTECTED))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_protected_key10191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2613:2: -> VK_PROTECTED[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PROTECTED, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_key"

    public static class private_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_key"
    // src/main/resources/org/drools/lang/DRL.g:2617:1: private_key : {...}? =>id= ID -> VK_PRIVATE[$id] ;
    public final DRLParser.private_key_return private_key() throws RecognitionException {
        DRLParser.private_key_return retval = new DRLParser.private_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2618:2: ({...}? =>id= ID -> VK_PRIVATE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2618:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "private_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.PRIVATE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_private_key10217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2620:2: -> VK_PRIVATE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_PRIVATE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_key"

    public static class abstract_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_key"
    // src/main/resources/org/drools/lang/DRL.g:2624:1: abstract_key : {...}? =>id= ID -> VK_ABSTRACT[$id] ;
    public final DRLParser.abstract_key_return abstract_key() throws RecognitionException {
        DRLParser.abstract_key_return retval = new DRLParser.abstract_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2625:2: ({...}? =>id= ID -> VK_ABSTRACT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2625:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "abstract_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ABSTRACT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_abstract_key10243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2627:2: -> VK_ABSTRACT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ABSTRACT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstract_key"

    public static class native_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "native_key"
    // src/main/resources/org/drools/lang/DRL.g:2631:1: native_key : {...}? =>id= ID -> VK_NATIVE[$id] ;
    public final DRLParser.native_key_return native_key() throws RecognitionException {
        DRLParser.native_key_return retval = new DRLParser.native_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2632:2: ({...}? =>id= ID -> VK_NATIVE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2632:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "native_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.NATIVE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_native_key10269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2634:2: -> VK_NATIVE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_NATIVE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "native_key"

    public static class transient_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "transient_key"
    // src/main/resources/org/drools/lang/DRL.g:2638:1: transient_key : {...}? =>id= ID -> VK_TRANSIENT[$id] ;
    public final DRLParser.transient_key_return transient_key() throws RecognitionException {
        DRLParser.transient_key_return retval = new DRLParser.transient_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2639:2: ({...}? =>id= ID -> VK_TRANSIENT[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2639:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "transient_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.TRANSIENT))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_transient_key10295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2641:2: -> VK_TRANSIENT[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_TRANSIENT, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "transient_key"

    public static class volatile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volatile_key"
    // src/main/resources/org/drools/lang/DRL.g:2645:1: volatile_key : {...}? =>id= ID -> VK_VOLATILE[$id] ;
    public final DRLParser.volatile_key_return volatile_key() throws RecognitionException {
        DRLParser.volatile_key_return retval = new DRLParser.volatile_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2646:2: ({...}? =>id= ID -> VK_VOLATILE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2646:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "volatile_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.VOLATILE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_volatile_key10321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2648:2: -> VK_VOLATILE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_VOLATILE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volatile_key"

    public static class strictfp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "strictfp_key"
    // src/main/resources/org/drools/lang/DRL.g:2652:1: strictfp_key : {...}? =>id= ID -> VK_STRICTFP[$id] ;
    public final DRLParser.strictfp_key_return strictfp_key() throws RecognitionException {
        DRLParser.strictfp_key_return retval = new DRLParser.strictfp_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2653:2: ({...}? =>id= ID -> VK_STRICTFP[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2653:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "strictfp_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.STRICTFP))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_strictfp_key10347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2655:2: -> VK_STRICTFP[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_STRICTFP, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "strictfp_key"

    public static class throws_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throws_key"
    // src/main/resources/org/drools/lang/DRL.g:2659:1: throws_key : {...}? =>id= ID -> VK_THROWS[$id] ;
    public final DRLParser.throws_key_return throws_key() throws RecognitionException {
        DRLParser.throws_key_return retval = new DRLParser.throws_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2660:2: ({...}? =>id= ID -> VK_THROWS[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2660:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.THROWS)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "throws_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.THROWS))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_throws_key10373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2662:2: -> VK_THROWS[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_THROWS, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "throws_key"

    public static class interface_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_key"
    // src/main/resources/org/drools/lang/DRL.g:2666:1: interface_key : {...}? =>id= ID -> VK_INTERFACE[$id] ;
    public final DRLParser.interface_key_return interface_key() throws RecognitionException {
        DRLParser.interface_key_return retval = new DRLParser.interface_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2667:2: ({...}? =>id= ID -> VK_INTERFACE[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2667:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "interface_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.INTERFACE))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_interface_key10399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2669:2: -> VK_INTERFACE[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_INTERFACE, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "interface_key"

    public static class enum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_key"
    // src/main/resources/org/drools/lang/DRL.g:2673:1: enum_key : {...}? =>id= ID -> VK_ENUM[$id] ;
    public final DRLParser.enum_key_return enum_key() throws RecognitionException {
        DRLParser.enum_key_return retval = new DRLParser.enum_key_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id=null;

        Object id_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // src/main/resources/org/drools/lang/DRL.g:2674:2: ({...}? =>id= ID -> VK_ENUM[$id] )
            // src/main/resources/org/drools/lang/DRL.g:2674:4: {...}? =>id= ID
            {
            if ( !(((helper.validateIdentifierKey(DroolsSoftKeywords.ENUM)))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enum_key", "(helper.validateIdentifierKey(DroolsSoftKeywords.ENUM))");
            }
            id=(Token)match(input,ID,FOLLOW_ID_in_enum_key10425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(id);

            if ( state.backtracking==0 ) {
              	helper.emit(id, DroolsEditorType.KEYWORD);	
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2676:2: -> VK_ENUM[$id]
            {
                adaptor.addChild(root_0, (Object)adaptor.create(VK_ENUM, id));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enum_key"

    // $ANTLR start synpred1_DRL
    public final void synpred1_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:661:5: ( LEFT_PAREN or_key )
        // src/main/resources/org/drools/lang/DRL.g:661:6: LEFT_PAREN or_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred1_DRL2206); if (state.failed) return ;
        pushFollow(FOLLOW_or_key_in_synpred1_DRL2208);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_DRL

    // $ANTLR start synpred2_DRL
    public final void synpred2_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:669:5: ( or_key )
        // src/main/resources/org/drools/lang/DRL.g:669:6: or_key
        {
        pushFollow(FOLLOW_or_key_in_synpred2_DRL2275);
        or_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_DRL

    // $ANTLR start synpred3_DRL
    public final void synpred3_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:678:5: ( LEFT_PAREN and_key )
        // src/main/resources/org/drools/lang/DRL.g:678:6: LEFT_PAREN and_key
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred3_DRL2326); if (state.failed) return ;
        pushFollow(FOLLOW_and_key_in_synpred3_DRL2328);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_DRL

    // $ANTLR start synpred4_DRL
    public final void synpred4_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:686:5: ( and_key )
        // src/main/resources/org/drools/lang/DRL.g:686:6: and_key
        {
        pushFollow(FOLLOW_and_key_in_synpred4_DRL2396);
        and_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_DRL

    // $ANTLR start synpred5_DRL
    public final void synpred5_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:709:12: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:709:13: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred5_DRL2542); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:709:24: ( or_key | and_key )
        int alt176=2;
        int LA176_0 = input.LA(1);

        if ( (LA176_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))))) {
            int LA176_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt176=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 176, 0, input);

            throw nvae;
        }
        switch (alt176) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:709:25: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred5_DRL2545);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:709:32: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred5_DRL2547);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred5_DRL

    // $ANTLR start synpred6_DRL
    public final void synpred6_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:725:5: ( LEFT_PAREN ( or_key | and_key ) )
        // src/main/resources/org/drools/lang/DRL.g:725:6: LEFT_PAREN ( or_key | and_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred6_DRL2670); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:725:17: ( or_key | and_key )
        int alt177=2;
        int LA177_0 = input.LA(1);

        if ( (LA177_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))))) {
            int LA177_1 = input.LA(2);

            if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.OR)))) ) {
                alt177=1;
            }
            else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AND)))) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 177, 0, input);

            throw nvae;
        }
        switch (alt177) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:725:18: or_key
                {
                pushFollow(FOLLOW_or_key_in_synpred6_DRL2673);
                or_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // src/main/resources/org/drools/lang/DRL.g:725:25: and_key
                {
                pushFollow(FOLLOW_and_key_in_synpred6_DRL2675);
                and_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred6_DRL

    // $ANTLR start synpred7_DRL
    public final void synpred7_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1141:4: ( operator_args )
        // src/main/resources/org/drools/lang/DRL.g:1141:5: operator_args
        {
        pushFollow(FOLLOW_operator_args_in_synpred7_DRL4503);
        operator_args();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_DRL

    // $ANTLR start synpred8_DRL
    public final void synpred8_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1373:5: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1373:6: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred8_DRL5821);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_DRL

    // $ANTLR start synpred9_DRL
    public final void synpred9_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1373:41: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1373:42: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred9_DRL5832); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred9_DRL5834); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_DRL

    // $ANTLR start synpred10_DRL
    public final void synpred10_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1374:10: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1374:11: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred10_DRL5855);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_DRL

    // $ANTLR start synpred11_DRL
    public final void synpred11_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1374:52: ( typeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1374:53: typeArguments
        {
        pushFollow(FOLLOW_typeArguments_in_synpred11_DRL5869);
        typeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_DRL

    // $ANTLR start synpred12_DRL
    public final void synpred12_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1374:89: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1374:90: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred12_DRL5881); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5883); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_DRL

    // $ANTLR start synpred13_DRL
    public final void synpred13_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1564:27: ( assignmentOperator )
        // src/main/resources/org/drools/lang/DRL.g:1564:28: assignmentOperator
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred13_DRL6182);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_DRL

    // $ANTLR start synpred14_DRL
    public final void synpred14_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1599:27: ( LESS )
        // src/main/resources/org/drools/lang/DRL.g:1599:28: LESS
        {
        match(input,LESS,FOLLOW_LESS_in_synpred14_DRL6429); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_DRL

    // $ANTLR start synpred15_DRL
    public final void synpred15_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1615:36: ( PLUS | MINUS )
        // src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred15_DRL

    // $ANTLR start synpred18_DRL
    public final void synpred18_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1634:9: ( castExpression )
        // src/main/resources/org/drools/lang/DRL.g:1634:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred18_DRL6707);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_DRL

    // $ANTLR start synpred19_DRL
    public final void synpred19_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1635:18: ( selector )
        // src/main/resources/org/drools/lang/DRL.g:1635:19: selector
        {
        pushFollow(FOLLOW_selector_in_synpred19_DRL6721);
        selector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_DRL

    // $ANTLR start synpred20_DRL
    public final void synpred20_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1635:42: ( INCR | DECR )
        // src/main/resources/org/drools/lang/DRL.g:
        {
        if ( (input.LA(1)>=INCR && input.LA(1)<=DECR) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred20_DRL

    // $ANTLR start synpred21_DRL
    public final void synpred21_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1640:8: ( LEFT_PAREN primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1640:9: LEFT_PAREN primitiveType
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred21_DRL6779); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred21_DRL6781);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_DRL

    // $ANTLR start synpred22_DRL
    public final void synpred22_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1641:8: ( LEFT_PAREN type )
        // src/main/resources/org/drools/lang/DRL.g:1641:9: LEFT_PAREN type
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred22_DRL6802); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred22_DRL6804);
        type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_DRL

    // $ANTLR start synpred23_DRL
    public final void synpred23_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1647:9: ( boolean_key )
        // src/main/resources/org/drools/lang/DRL.g:1647:9: boolean_key
        {
        pushFollow(FOLLOW_boolean_key_in_synpred23_DRL6867);
        boolean_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_DRL

    // $ANTLR start synpred24_DRL
    public final void synpred24_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1648:7: ( char_key )
        // src/main/resources/org/drools/lang/DRL.g:1648:7: char_key
        {
        pushFollow(FOLLOW_char_key_in_synpred24_DRL6875);
        char_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_DRL

    // $ANTLR start synpred25_DRL
    public final void synpred25_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1649:7: ( byte_key )
        // src/main/resources/org/drools/lang/DRL.g:1649:7: byte_key
        {
        pushFollow(FOLLOW_byte_key_in_synpred25_DRL6883);
        byte_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_DRL

    // $ANTLR start synpred26_DRL
    public final void synpred26_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1650:7: ( short_key )
        // src/main/resources/org/drools/lang/DRL.g:1650:7: short_key
        {
        pushFollow(FOLLOW_short_key_in_synpred26_DRL6891);
        short_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_DRL

    // $ANTLR start synpred27_DRL
    public final void synpred27_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1651:7: ( int_key )
        // src/main/resources/org/drools/lang/DRL.g:1651:7: int_key
        {
        pushFollow(FOLLOW_int_key_in_synpred27_DRL6899);
        int_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_DRL

    // $ANTLR start synpred28_DRL
    public final void synpred28_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1652:7: ( long_key )
        // src/main/resources/org/drools/lang/DRL.g:1652:7: long_key
        {
        pushFollow(FOLLOW_long_key_in_synpred28_DRL6907);
        long_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_DRL

    // $ANTLR start synpred29_DRL
    public final void synpred29_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1653:7: ( float_key )
        // src/main/resources/org/drools/lang/DRL.g:1653:7: float_key
        {
        pushFollow(FOLLOW_float_key_in_synpred29_DRL6915);
        float_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_DRL

    // $ANTLR start synpred30_DRL
    public final void synpred30_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1659:7: ( parExpression )
        // src/main/resources/org/drools/lang/DRL.g:1659:8: parExpression
        {
        pushFollow(FOLLOW_parExpression_in_synpred30_DRL6942);
        parExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_DRL

    // $ANTLR start synpred31_DRL
    public final void synpred31_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1660:9: ( nonWildcardTypeArguments )
        // src/main/resources/org/drools/lang/DRL.g:1660:10: nonWildcardTypeArguments
        {
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred31_DRL6957);
        nonWildcardTypeArguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_DRL

    // $ANTLR start synpred32_DRL
    public final void synpred32_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1661:9: ( literal )
        // src/main/resources/org/drools/lang/DRL.g:1661:10: literal
        {
        pushFollow(FOLLOW_literal_in_synpred32_DRL6982);
        literal();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_DRL

    // $ANTLR start synpred33_DRL
    public final void synpred33_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1663:9: ( super_key )
        // src/main/resources/org/drools/lang/DRL.g:1663:10: super_key
        {
        pushFollow(FOLLOW_super_key_in_synpred33_DRL7002);
        super_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_DRL

    // $ANTLR start synpred34_DRL
    public final void synpred34_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1664:9: ( new_key )
        // src/main/resources/org/drools/lang/DRL.g:1664:10: new_key
        {
        pushFollow(FOLLOW_new_key_in_synpred34_DRL7019);
        new_key();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_DRL

    // $ANTLR start synpred35_DRL
    public final void synpred35_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1665:9: ( primitiveType )
        // src/main/resources/org/drools/lang/DRL.g:1665:10: primitiveType
        {
        pushFollow(FOLLOW_primitiveType_in_synpred35_DRL7036);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_DRL

    // $ANTLR start synpred36_DRL
    public final void synpred36_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1667:9: ( inlineMapExpression )
        // src/main/resources/org/drools/lang/DRL.g:1667:10: inlineMapExpression
        {
        pushFollow(FOLLOW_inlineMapExpression_in_synpred36_DRL7067);
        inlineMapExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_DRL

    // $ANTLR start synpred37_DRL
    public final void synpred37_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1668:9: ( inlineListExpression )
        // src/main/resources/org/drools/lang/DRL.g:1668:10: inlineListExpression
        {
        pushFollow(FOLLOW_inlineListExpression_in_synpred37_DRL7082);
        inlineListExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_DRL

    // $ANTLR start synpred38_DRL
    public final void synpred38_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1669:9: ( ID )
        // src/main/resources/org/drools/lang/DRL.g:1669:10: ID
        {
        match(input,ID,FOLLOW_ID_in_synpred38_DRL7097); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_DRL

    // $ANTLR start synpred39_DRL
    public final void synpred39_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1669:19: ( DOT ID )
        // src/main/resources/org/drools/lang/DRL.g:1669:20: DOT ID
        {
        match(input,DOT,FOLLOW_DOT_in_synpred39_DRL7104); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred39_DRL7106); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_DRL

    // $ANTLR start synpred40_DRL
    public final void synpred40_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1669:39: ( identifierSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1669:40: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred40_DRL7117);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_DRL

    // $ANTLR start synpred42_DRL
    public final void synpred42_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1695:8: ( LEFT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1695:9: LEFT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred42_DRL7288); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_DRL

    // $ANTLR start synpred44_DRL
    public final void synpred44_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1722:107: ( LEFT_SQUARE RIGHT_SQUARE )
        // src/main/resources/org/drools/lang/DRL.g:1722:108: LEFT_SQUARE RIGHT_SQUARE
        {
        match(input,LEFT_SQUARE,FOLLOW_LEFT_SQUARE_in_synpred44_DRL7470); if (state.failed) return ;
        match(input,RIGHT_SQUARE,FOLLOW_RIGHT_SQUARE_in_synpred44_DRL7472); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_DRL

    // $ANTLR start synpred45_DRL
    public final void synpred45_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1754:14: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1754:15: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred45_DRL7643); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_DRL

    // $ANTLR start synpred46_DRL
    public final void synpred46_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1754:6: ( DOT ID ( ( LEFT_PAREN )=> arguments )? )
        // src/main/resources/org/drools/lang/DRL.g:1754:6: DOT ID ( ( LEFT_PAREN )=> arguments )?
        {
        match(input,DOT,FOLLOW_DOT_in_synpred46_DRL7637); if (state.failed) return ;
        match(input,ID,FOLLOW_ID_in_synpred46_DRL7639); if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1754:13: ( ( LEFT_PAREN )=> arguments )?
        int alt180=2;
        int LA180_0 = input.LA(1);

        if ( (LA180_0==LEFT_PAREN) && (synpred45_DRL())) {
            alt180=1;
        }
        switch (alt180) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1754:14: ( LEFT_PAREN )=> arguments
                {
                pushFollow(FOLLOW_arguments_in_synpred46_DRL7648);
                arguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred46_DRL

    // $ANTLR start synpred47_DRL
    public final void synpred47_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1756:6: ( DOT super_key superSuffix )
        // src/main/resources/org/drools/lang/DRL.g:1756:6: DOT super_key superSuffix
        {
        match(input,DOT,FOLLOW_DOT_in_synpred47_DRL7659); if (state.failed) return ;
        pushFollow(FOLLOW_super_key_in_synpred47_DRL7661);
        super_key();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred47_DRL7663);
        superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_DRL

    // $ANTLR start synpred48_DRL
    public final void synpred48_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1757:6: ( DOT new_key ( nonWildcardTypeArguments )? innerCreator )
        // src/main/resources/org/drools/lang/DRL.g:1757:6: DOT new_key ( nonWildcardTypeArguments )? innerCreator
        {
        match(input,DOT,FOLLOW_DOT_in_synpred48_DRL7670); if (state.failed) return ;
        pushFollow(FOLLOW_new_key_in_synpred48_DRL7672);
        new_key();

        state._fsp--;
        if (state.failed) return ;
        // src/main/resources/org/drools/lang/DRL.g:1757:18: ( nonWildcardTypeArguments )?
        int alt181=2;
        int LA181_0 = input.LA(1);

        if ( (LA181_0==LESS) ) {
            alt181=1;
        }
        switch (alt181) {
            case 1 :
                // src/main/resources/org/drools/lang/DRL.g:1757:19: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred48_DRL7675);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_innerCreator_in_synpred48_DRL7679);
        innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_DRL

    // $ANTLR start synpred49_DRL
    public final void synpred49_DRL_fragment() throws RecognitionException {   
        // src/main/resources/org/drools/lang/DRL.g:1763:15: ( LEFT_PAREN )
        // src/main/resources/org/drools/lang/DRL.g:1763:16: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred49_DRL7716); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_DRL

    // Delegated rules

    public final boolean synpred36_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_DRL() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_DRL_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA175 dfa175 = new DFA175(this);
    static final String DFA1_eotS =
        "\13\uffff";
    static final String DFA1_eofS =
        "\1\2\12\uffff";
    static final String DFA1_minS =
        "\2\u0082\2\uffff\1\0\6\uffff";
    static final String DFA1_maxS =
        "\1\u0082\1\u00a1\2\uffff\1\0\6\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\2\2\1\uffff\5\2\1\1";
    static final String DFA1_specialS =
        "\1\0\1\2\2\uffff\1\1\6\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1",
            "\1\4\2\uffff\1\11\5\uffff\1\10\1\7\4\uffff\1\6\16\uffff\1\5"+
            "\1\3",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "224:4: ( package_statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_0 = input.LA(1);

                         
                        int index1_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))))) {s = 1;}

                        else if ( (LA1_0==EOF) ) {s = 2;}

                         
                        input.seek(index1_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_4 = input.LA(1);

                         
                        int index1_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))) ) {s = 10;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE))))) ) {s = 9;}

                         
                        input.seek(index1_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA1_1 = input.LA(1);

                         
                        int index1_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 3;}

                        else if ( (LA1_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.PACKAGE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))))) {s = 4;}

                        else if ( (LA1_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 5;}

                        else if ( (LA1_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 6;}

                        else if ( (LA1_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 7;}

                        else if ( (LA1_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 8;}

                        else if ( (LA1_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 9;}

                         
                        input.seek(index1_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\20\uffff";
    static final String DFA4_eofS =
        "\20\uffff";
    static final String DFA4_minS =
        "\2\u0082\5\uffff\2\0\7\uffff";
    static final String DFA4_maxS =
        "\1\u0082\1\u00a1\5\uffff\2\0\7\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\5\1\2\uffff\1\7\1\10\1\2\1\3\1\4\1\5\1\6";
    static final String DFA4_specialS =
        "\1\0\1\1\5\uffff\1\2\1\3\7\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1",
            "\1\10\2\uffff\1\7\5\uffff\1\6\1\5\4\uffff\1\4\16\uffff\1\3"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "303:1: statement options {k=2; } : ( rule_attribute | function_import_statement | import_statement | global | function | type_declaration | rule | query );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_0 = input.LA(1);

                         
                        int index4_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))))) {s = 1;}

                         
                        input.seek(index4_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 2;}

                        else if ( (LA4_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 3;}

                        else if ( (LA4_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 4;}

                        else if ( (LA4_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 5;}

                        else if ( (LA4_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 6;}

                        else if ( (LA4_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 7;}

                        else if ( (LA4_1==ID) && ((((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))||((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))))) {s = 8;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 10;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateLT(1, DroolsSoftKeywords.IMPORT) && helper.validateLT(2, DroolsSoftKeywords.FUNCTION))&&((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT))))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IMPORT)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.GLOBAL)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FUNCTION)))) ) {s = 14;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DECLARE)))) ) {s = 15;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULE)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.QUERY)))) ) {s = 10;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\16\uffff";
    static final String DFA11_eofS =
        "\16\uffff";
    static final String DFA11_minS =
        "\2\u0082\1\uffff\1\u0082\1\uffff\1\u0082\1\u009e\3\u0082\2\u009e"+
        "\1\u008a\1\u0082";
    static final String DFA11_maxS =
        "\1\u008c\1\u008d\1\uffff\1\u009d\1\uffff\1\u0082\1\u009e\3\u009d"+
        "\2\u009e\2\u009d";
    static final String DFA11_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\11\uffff";
    static final String DFA11_specialS =
        "\16\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\2\11\uffff\1\1",
            "\1\3\11\uffff\1\2\1\4",
            "",
            "\1\7\1\5\3\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1"+
            "\6",
            "",
            "\1\10",
            "\1\11",
            "\2\2\3\uffff\1\2\2\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\12",
            "\1\4\1\5\10\uffff\1\2\20\uffff\1\13",
            "\1\4\7\uffff\1\4\1\uffff\1\2\1\4\17\uffff\1\6",
            "\1\14",
            "\1\15",
            "\1\4\1\uffff\1\2\1\4\17\uffff\1\12",
            "\1\4\11\uffff\1\2\20\uffff\1\13"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "386:3: ( parameters )?";
        }
    }
    static final String DFA21_eotS =
        "\13\uffff";
    static final String DFA21_eofS =
        "\13\uffff";
    static final String DFA21_minS =
        "\2\u0082\3\uffff\1\0\5\uffff";
    static final String DFA21_maxS =
        "\1\u00a4\1\u00a1\3\uffff\1\0\5\uffff";
    static final String DFA21_acceptS =
        "\2\uffff\2\2\1\1\1\uffff\5\2";
    static final String DFA21_specialS =
        "\1\2\1\1\3\uffff\1\0\5\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\1\3\uffff\1\2\2\uffff\1\2\32\uffff\1\2",
            "\1\4\2\uffff\1\5\1\uffff\1\6\3\uffff\1\12\1\11\4\uffff\1\10"+
            "\16\uffff\1\7\1\3",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "482:3: ( extend_key rule_id )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT))))) ) {s = 10;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_1 = input.LA(1);

                         
                        int index21_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_1==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 3;}

                        else if ( (LA21_1==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND))))) {s = 4;}

                        else if ( (LA21_1==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))))) {s = 5;}

                        else if ( (LA21_1==COLON) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES))))) {s = 6;}

                        else if ( (LA21_1==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 7;}

                        else if ( (LA21_1==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))))) {s = 8;}

                        else if ( (LA21_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))))) {s = 9;}

                        else if ( (LA21_1==BOOL) && (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED))))) {s = 10;}

                         
                        input.seek(index21_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_0 = input.LA(1);

                         
                        int index21_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ATTRIBUTES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.EXTEND)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 1;}

                        else if ( (LA21_0==AT||LA21_0==WHEN||LA21_0==THEN) ) {s = 2;}

                         
                        input.seek(index21_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\17\uffff";
    static final String DFA30_eofS =
        "\17\uffff";
    static final String DFA30_minS =
        "\1\u0082\1\0\15\uffff";
    static final String DFA30_maxS =
        "\1\u0082\1\0\15\uffff";
    static final String DFA30_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA30_specialS =
        "\1\0\1\1\15\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "552:1: rule_attribute : ( salience | no_loop | agenda_group | timer | activation_group | auto_focus | date_effective | date_expires | enabled | ruleflow_group | lock_on_active | dialect | calendars );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_0 = input.LA(1);

                         
                        int index30_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA30_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))||((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))||((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))||((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))))) {s = 1;}

                         
                        input.seek(index30_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_1 = input.LA(1);

                         
                        int index30_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.SALIENCE)))) ) {s = 2;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.LOOP)))) ) {s = 3;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AGENDA) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 4;}

                        else if ( ((((helper.validateIdentifierKey(DroolsSoftKeywords.TIMER)))||((helper.validateIdentifierKey(DroolsSoftKeywords.DURATION))))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ACTIVATION) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.AUTO) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.FOCUS)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EFFECTIVE)))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DATE) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.EXPIRES)))) ) {s = 9;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENABLED)))) ) {s = 10;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.RULEFLOW) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.GROUP)))) ) {s = 11;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.LOCK) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.ON) && helper.validateLT(4, "-") && helper.validateLT(5, DroolsSoftKeywords.ACTIVE)))) ) {s = 12;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DIALECT)))) ) {s = 13;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.CALENDARS)))) ) {s = 14;}

                         
                        input.seek(index30_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\12\uffff";
    static final String DFA45_eofS =
        "\12\uffff";
    static final String DFA45_minS =
        "\1\u0082\1\0\10\uffff";
    static final String DFA45_maxS =
        "\1\u008c\1\0\10\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\7\1\1\1\2\1\3\1\4\1\5\1\6\1\10";
    static final String DFA45_specialS =
        "\1\uffff\1\0\10\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\11\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "693:4: ( lhs_exist | {...}? => lhs_not_binding | lhs_not | lhs_eval | lhs_forall | lhs_for | LEFT_PAREN lhs_or RIGHT_PAREN | pattern_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_1 = input.LA(1);

                         
                        int index45_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EXISTS)))) ) {s = 3;}

                        else if ( (((helper.validateNotWithBinding())&&((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) ) {s = 4;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 5;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 6;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FORALL)))) ) {s = 7;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.FOR)))) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index45_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\24\uffff";
    static final String DFA54_eofS =
        "\24\uffff";
    static final String DFA54_minS =
        "\1\u0082\2\uffff\1\0\20\uffff";
    static final String DFA54_maxS =
        "\1\u00b3\2\uffff\1\0\20\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\16\uffff\1\3";
    static final String DFA54_specialS =
        "\3\uffff\1\0\20\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\3\2\uffff\1\4\5\uffff\2\4\4\uffff\1\4\1\1\1\2\6\uffff\1\4"+
            "\2\uffff\1\4\1\uffff\5\4\14\uffff\4\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "794:11: ( accumulate_statement | collect_statement | entrypoint_statement | from_source )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.ENTRY) && helper.validateLT(2, "-") && helper.validateLT(3, DroolsSoftKeywords.POINT)))) ) {s = 19;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA74_eotS =
        "\17\uffff";
    static final String DFA74_eofS =
        "\17\uffff";
    static final String DFA74_minS =
        "\2\u0082\1\uffff\1\0\13\uffff";
    static final String DFA74_maxS =
        "\1\u008c\1\u009d\1\uffff\1\0\13\uffff";
    static final String DFA74_acceptS =
        "\2\uffff\1\3\1\uffff\1\2\11\uffff\1\1";
    static final String DFA74_specialS =
        "\3\uffff\1\0\13\uffff}>";
    static final String[] DFA74_transitionS = {
            "\1\1\11\uffff\1\2",
            "\2\4\3\uffff\1\4\4\uffff\1\3\12\uffff\7\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "1009:1: unary_constr options {k=2; } : ( eval_key paren_chunk | field_constraint | LEFT_PAREN or_constr RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_3 = input.LA(1);

                         
                        int index74_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.EVAL)))) ) {s = 14;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index74_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA79_eotS =
        "\61\uffff";
    static final String DFA79_eofS =
        "\61\uffff";
    static final String DFA79_minS =
        "\2\u0082\7\uffff\1\4\1\u0082\11\uffff\12\0\2\uffff\1\0\20\uffff";
    static final String DFA79_maxS =
        "\1\u009c\1\u00a3\7\uffff\1\u00ca\1\u00a3\11\uffff\12\0\2\uffff\1"+
        "\0\20\uffff";
    static final String DFA79_acceptS =
        "\2\uffff\1\2\5\uffff\1\3\2\uffff\1\2\25\uffff\2\2\10\uffff\1\2\4"+
        "\uffff\1\1";
    static final String DFA79_specialS =
        "\1\0\1\1\7\uffff\1\2\1\3\11\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\2\uffff\1\16\20\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1\11\uffff\1\10\12\uffff\6\2",
            "\1\12\2\uffff\1\13\5\uffff\1\13\1\11\4\uffff\1\13\13\uffff"+
            "\1\13\1\uffff\5\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\176\13\1\24\2\13\1\25\5\13\1\33\1\35\4\13\1\30\15\13\1\34"+
            "\1\26\1\27\1\31\1\32\47\13",
            "\1\42\1\53\1\uffff\1\42\4\uffff\1\53\1\42\1\40\1\53\3\uffff"+
            "\1\42\2\uffff\2\53\7\uffff\1\41\1\uffff\5\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "1073:1: constraint_expression options {k=3; } : ( compound_operator | simple_operator | LEFT_PAREN or_restr_connective RIGHT_PAREN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_0 = input.LA(1);

                         
                        int index79_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_0==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 1;}

                        else if ( ((LA79_0>=EQUALS && LA79_0<=NOT_EQUALS)) ) {s = 2;}

                        else if ( (LA79_0==LEFT_PAREN) ) {s = 8;}

                         
                        input.seek(index79_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA79_1 = input.LA(1);

                         
                        int index79_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_1==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 9;}

                        else if ( (LA79_1==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {s = 10;}

                        else if ( (LA79_1==STRING||LA79_1==BOOL||LA79_1==DECIMAL||LA79_1==LEFT_SQUARE||(LA79_1>=NULL && LA79_1<=FLOAT)) && (((helper.isPluggableEvaluator(false))))) {s = 11;}

                         
                        input.seek(index79_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA79_9 = input.LA(1);

                         
                        int index79_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_9==ID) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 20;}

                        else if ( (LA79_9==STRING) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 21;}

                        else if ( (LA79_9==PLUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 22;}

                        else if ( (LA79_9==MINUS) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 23;}

                        else if ( (LA79_9==DECIMAL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 24;}

                        else if ( (LA79_9==HEX) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 25;}

                        else if ( (LA79_9==FLOAT) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 26;}

                        else if ( (LA79_9==BOOL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 27;}

                        else if ( (LA79_9==NULL) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 28;}

                        else if ( (LA79_9==LEFT_PAREN) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))||((helper.isPluggableEvaluator(false)))))) {s = 29;}

                        else if ( ((LA79_9>=VT_COMPILATION_UNIT && LA79_9<=SEMICOLON)||(LA79_9>=DOT && LA79_9<=STAR)||(LA79_9>=AT && LA79_9<=COMMA)||(LA79_9>=RIGHT_PAREN && LA79_9<=TimePeriod)||(LA79_9>=ACCUMULATE && LA79_9<=RIGHT_SQUARE)||(LA79_9>=THEN && LA79_9<=MISC)) && (((helper.isPluggableEvaluator(false))))) {s = 11;}

                         
                        input.seek(index79_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA79_10 = input.LA(1);

                         
                        int index79_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_10==LEFT_PAREN) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 32;}

                        else if ( (LA79_10==LEFT_SQUARE) && ((((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))||((helper.isPluggableEvaluator(false)))))) {s = 33;}

                        else if ( (LA79_10==ID||LA79_10==STRING||LA79_10==BOOL||LA79_10==DECIMAL||(LA79_10>=NULL && LA79_10<=FLOAT)) && (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT))))) {s = 34;}

                        else if ( (LA79_10==DOT||LA79_10==COMMA||LA79_10==RIGHT_PAREN||(LA79_10>=DOUBLE_PIPE && LA79_10<=DOUBLE_AMPER)) && (((helper.isPluggableEvaluator(false))))) {s = 43;}

                         
                        input.seek(index79_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA79_20 = input.LA(1);

                         
                        int index79_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA79_21 = input.LA(1);

                         
                        int index79_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA79_22 = input.LA(1);

                         
                        int index79_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA79_23 = input.LA(1);

                         
                        int index79_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA79_24 = input.LA(1);

                         
                        int index79_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA79_25 = input.LA(1);

                         
                        int index79_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA79_26 = input.LA(1);

                         
                        int index79_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA79_27 = input.LA(1);

                         
                        int index79_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA79_28 = input.LA(1);

                         
                        int index79_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA79_29 = input.LA(1);

                         
                        int index79_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.IN)))) ) {s = 48;}

                        else if ( (((helper.isPluggableEvaluator(false)))) ) {s = 43;}

                         
                        input.seek(index79_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA79_32 = input.LA(1);

                         
                        int index79_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 48;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.NOT)))) ) {s = 43;}

                         
                        input.seek(index79_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\10\uffff";
    static final String DFA83_eofS =
        "\10\uffff";
    static final String DFA83_minS =
        "\1\u009d\2\4\1\uffff\1\4\1\0\1\4\1\uffff";
    static final String DFA83_maxS =
        "\1\u009d\2\u00ca\1\uffff\1\u00ca\1\0\1\u00ca\1\uffff";
    static final String DFA83_acceptS =
        "\3\uffff\1\2\3\uffff\1\1";
    static final String DFA83_specialS =
        "\5\uffff\1\0\2\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\1",
            "\u008c\3\1\2\72\3",
            "\u0086\3\1\4\23\3\1\5\54\3",
            "",
            "\u008c\3\1\6\72\3",
            "\1\uffff",
            "\u0086\3\1\4\23\3\1\5\54\3",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "1140:1: operator_params : ( ( operator_args )=>ops= operator_args -> VT_SQUARE_CHUNK[$ops.start, $ops.text] | square_chunk );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_5 = input.LA(1);

                         
                        int index83_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_DRL()) ) {s = 7;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index83_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\57\uffff";
    static final String DFA107_eofS =
        "\1\2\56\uffff";
    static final String DFA107_minS =
        "\1\u0081\1\0\55\uffff";
    static final String DFA107_maxS =
        "\1\u00bb\1\0\55\uffff";
    static final String DFA107_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA107_specialS =
        "\1\uffff\1\0\55\uffff}>";
    static final String[] DFA107_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\2\2\1\uffff\1\1\1\uffff\11\2\1\uffff\10\2\2\uffff"+
            "\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "1374:9: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\57\uffff";
    static final String DFA108_eofS =
        "\1\2\56\uffff";
    static final String DFA108_minS =
        "\1\u0081\1\0\55\uffff";
    static final String DFA108_maxS =
        "\1\u00bb\1\0\55\uffff";
    static final String DFA108_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA108_specialS =
        "\1\uffff\1\0\55\uffff}>";
    static final String[] DFA108_transitionS = {
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\2\2\1\uffff\1\1\1\uffff\11\2\1\uffff\10\2\2\uffff"+
            "\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "1374:51: ( ( typeArguments )=> typeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_1 = input.LA(1);

                         
                        int index108_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\6\uffff";
    static final String DFA120_eofS =
        "\6\uffff";
    static final String DFA120_minS =
        "\2\u0082\1\uffff\1\u009e\1\uffff\1\u0082";
    static final String DFA120_maxS =
        "\1\u0082\1\u009d\1\uffff\1\u009e\1\uffff\1\u009d";
    static final String DFA120_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA120_specialS =
        "\6\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\1",
            "\2\2\6\uffff\1\4\2\uffff\1\4\17\uffff\1\3",
            "",
            "\1\5",
            "",
            "\1\2\7\uffff\1\4\2\uffff\1\4\17\uffff\1\3"
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "1407:4: ( data_type )?";
        }
    }
    static final String DFA123_eotS =
        "\17\uffff";
    static final String DFA123_eofS =
        "\17\uffff";
    static final String DFA123_minS =
        "\1\u0081\14\0\2\uffff";
    static final String DFA123_maxS =
        "\1\u00bb\14\0\2\uffff";
    static final String DFA123_acceptS =
        "\15\uffff\1\2\1\1";
    static final String DFA123_specialS =
        "\1\uffff\1\2\1\7\1\6\1\12\1\11\1\3\1\5\1\0\1\1\1\13\1\10\1\4\2\uffff}>";
    static final String[] DFA123_transitionS = {
            "\2\15\2\uffff\1\15\1\uffff\1\15\1\1\1\uffff\4\15\3\uffff\1\15"+
            "\10\uffff\1\15\2\uffff\10\15\1\uffff\1\15\4\uffff\1\12\1\14"+
            "\1\13\2\uffff\4\15\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "1564:26: ( ( assignmentOperator )=> assignmentOperator expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_8 = input.LA(1);

                         
                        int index123_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_9 = input.LA(1);

                         
                        int index123_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA123_6 = input.LA(1);

                         
                        int index123_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA123_12 = input.LA(1);

                         
                        int index123_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA123_7 = input.LA(1);

                         
                        int index123_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA123_11 = input.LA(1);

                         
                        int index123_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA123_5 = input.LA(1);

                         
                        int index123_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA123_10 = input.LA(1);

                         
                        int index123_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_DRL()) ) {s = 14;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index123_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\54\uffff";
    static final String DFA131_eofS =
        "\54\uffff";
    static final String DFA131_minS =
        "\1\u0081\1\0\52\uffff";
    static final String DFA131_maxS =
        "\1\u00bb\1\0\52\uffff";
    static final String DFA131_acceptS =
        "\2\uffff\1\2\50\uffff\1\1";
    static final String DFA131_specialS =
        "\1\uffff\1\0\52\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\2\1\1\2\uffff\1\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\1\2\2\uffff\1\2\1\uffff\11\2\1\uffff\10\2\2\uffff"+
            "\14\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "1595:30: ( instanceof_key type )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_1 = input.LA(1);

                         
                        int index131_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.INSTANCEOF)))) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\54\uffff";
    static final String DFA132_eofS =
        "\54\uffff";
    static final String DFA132_minS =
        "\1\u0081\41\uffff\1\0\11\uffff";
    static final String DFA132_maxS =
        "\1\u00bb\41\uffff\1\0\11\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\2\51\uffff\1\1";
    static final String DFA132_specialS =
        "\1\0\41\uffff\1\1\11\uffff}>";
    static final String[] DFA132_transitionS = {
            "\2\1\2\uffff\1\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2\uffff"+
            "\2\1\1\uffff\1\1\2\53\1\42\1\53\11\1\1\uffff\10\1\2\uffff\14"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 1599:25: ( ( LESS )=> relationalOp shiftExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_0 = input.LA(1);

                         
                        int index132_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA132_0>=SEMICOLON && LA132_0<=ID)||LA132_0==STRING||(LA132_0>=COLON && LA132_0<=EQUALS_ASSIGN)||(LA132_0>=COMMA && LA132_0<=RIGHT_PAREN)||LA132_0==DECIMAL||(LA132_0>=DOUBLE_PIPE && LA132_0<=DOUBLE_AMPER)||LA132_0==EQUALS||(LA132_0>=NOT_EQUALS && LA132_0<=THEN)||(LA132_0>=RIGHT_CURLY && LA132_0<=SHIFT_RIGHT)||(LA132_0>=INCR && LA132_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA132_0==LESS) ) {s = 34;}

                        else if ( ((LA132_0>=GREATER && LA132_0<=GREATER_EQUALS)||LA132_0==LESS_EQUALS) && (synpred14_DRL())) {s = 43;}

                         
                        input.seek(index132_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_34 = input.LA(1);

                         
                        int index132_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_DRL()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\55\uffff";
    static final String DFA134_eofS =
        "\55\uffff";
    static final String DFA134_minS =
        "\1\u0081\34\uffff\2\0\16\uffff";
    static final String DFA134_maxS =
        "\1\u00bb\34\uffff\2\0\16\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA134_specialS =
        "\35\uffff\1\0\1\1\16\uffff}>";
    static final String[] DFA134_transitionS = {
            "\2\1\2\uffff\1\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2\uffff"+
            "\2\1\1\uffff\11\1\1\35\1\36\3\1\1\uffff\10\1\2\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 1615:34: ( ( PLUS | MINUS )=> ( PLUS | MINUS ) multiplicativeExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_29 = input.LA(1);

                         
                        int index134_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_DRL()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_30 = input.LA(1);

                         
                        int index134_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_DRL()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index134_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA139_eotS =
        "\16\uffff";
    static final String DFA139_eofS =
        "\16\uffff";
    static final String DFA139_minS =
        "\1\u0082\2\uffff\1\0\12\uffff";
    static final String DFA139_maxS =
        "\1\u00b3\2\uffff\1\0\12\uffff";
    static final String DFA139_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\10\uffff\1\3";
    static final String DFA139_specialS =
        "\3\uffff\1\0\12\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\4\2\uffff\1\4\5\uffff\1\4\1\3\4\uffff\1\4\10\uffff\1\4\2"+
            "\uffff\1\4\1\uffff\1\4\2\uffff\2\4\16\uffff\1\1\1\2",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "1630:1: unaryExpressionNotPlusMinus options {backtrack=true; memoize=true; } : ( TILDE unaryExpression | NEGATION unaryExpression | castExpression | primary ( ( selector )=> selector )* ( ( INCR | DECR )=> ( INCR | DECR ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_3 = input.LA(1);

                         
                        int index139_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_DRL()) ) {s = 13;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index139_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\57\uffff";
    static final String DFA137_eofS =
        "\1\1\56\uffff";
    static final String DFA137_minS =
        "\1\u0081\52\uffff\1\0\3\uffff";
    static final String DFA137_maxS =
        "\1\u00bb\52\uffff\1\0\3\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\2\54\uffff\1\1";
    static final String DFA137_specialS =
        "\1\0\52\uffff\1\1\3\uffff}>";
    static final String[] DFA137_transitionS = {
            "\2\1\1\56\2\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2"+
            "\1\1\uffff\6\1\1\53\7\1\1\uffff\26\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()* loopback of 1635:17: ( ( selector )=> selector )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_0 = input.LA(1);

                         
                        int index137_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA137_0==EOF||(LA137_0>=SEMICOLON && LA137_0<=ID)||(LA137_0>=STAR && LA137_0<=STRING)||(LA137_0>=COLON && LA137_0<=EQUALS_ASSIGN)||(LA137_0>=COMMA && LA137_0<=RIGHT_PAREN)||LA137_0==DECIMAL||(LA137_0>=DOUBLE_PIPE && LA137_0<=DOUBLE_AMPER)||(LA137_0>=EQUALS && LA137_0<=NOT_EQUALS)||(LA137_0>=RIGHT_SQUARE && LA137_0<=THEN)||(LA137_0>=RIGHT_CURLY && LA137_0<=MOD_ASSIGN)) ) {s = 1;}

                        else if ( (LA137_0==LEFT_SQUARE) ) {s = 43;}

                        else if ( (LA137_0==DOT) && (synpred19_DRL())) {s = 46;}

                         
                        input.seek(index137_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA137_43 = input.LA(1);

                         
                        int index137_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA138_eotS =
        "\57\uffff";
    static final String DFA138_eofS =
        "\1\2\56\uffff";
    static final String DFA138_minS =
        "\1\u0081\1\0\37\uffff\1\0\15\uffff";
    static final String DFA138_maxS =
        "\1\u00bb\1\0\37\uffff\1\0\15\uffff";
    static final String DFA138_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA138_specialS =
        "\1\uffff\1\0\37\uffff\1\1\15\uffff}>";
    static final String[] DFA138_transitionS = {
            "\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
            "\2\2\1\uffff\16\2\1\uffff\12\2\1\1\1\41\12\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "1635:41: ( ( INCR | DECR )=> ( INCR | DECR ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_1 = input.LA(1);

                         
                        int index138_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA138_33 = input.LA(1);

                         
                        int index138_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_DRL()) ) {s = 46;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\12\uffff";
    static final String DFA141_eofS =
        "\12\uffff";
    static final String DFA141_minS =
        "\1\u0082\1\0\10\uffff";
    static final String DFA141_maxS =
        "\1\u0082\1\0\10\uffff";
    static final String DFA141_acceptS =
        "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA141_specialS =
        "\1\0\1\1\10\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "1645:1: primitiveType options {backtrack=true; memoize=true; } : ( boolean_key | char_key | byte_key | short_key | int_key | long_key | float_key | double_key );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_0 = input.LA(1);

                         
                        int index141_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA141_0==ID) && (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))) {s = 1;}

                         
                        input.seek(index141_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred23_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))) ) {s = 2;}

                        else if ( ((synpred24_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR))))) ) {s = 3;}

                        else if ( ((synpred25_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))) ) {s = 4;}

                        else if ( ((synpred26_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))) ) {s = 5;}

                        else if ( ((synpred27_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))) ) {s = 6;}

                        else if ( ((synpred28_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))) ) {s = 7;}

                        else if ( ((synpred29_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))) ) {s = 8;}

                        else if ( (((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE)))) ) {s = 9;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\21\uffff";
    static final String DFA146_eofS =
        "\21\uffff";
    static final String DFA146_minS =
        "\1\u0082\10\uffff\2\0\6\uffff";
    static final String DFA146_maxS =
        "\1\u00a3\10\uffff\2\0\6\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\2\6\3\2\uffff\1\4\1\5\1\6\1\11\1\7\1\10";
    static final String DFA146_specialS =
        "\1\0\10\uffff\1\1\1\2\6\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\11\2\uffff\1\3\5\uffff\1\7\1\1\4\uffff\1\4\10\uffff\1\2\2"+
            "\uffff\1\12\1\uffff\1\10\2\uffff\1\5\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "1657:1: primary : ( ( parExpression )=> parExpression | ( nonWildcardTypeArguments )=> nonWildcardTypeArguments ( explicitGenericInvocationSuffix | this_key arguments ) | ( literal )=> literal | ( super_key )=> super_key superSuffix | ( new_key )=> new_key creator | ( primitiveType )=> primitiveType ( LEFT_SQUARE RIGHT_SQUARE )* DOT class_key | ( inlineMapExpression )=> inlineMapExpression | ( inlineListExpression )=> inlineListExpression | ( ID )=> ID ( ( DOT ID )=> DOT ID )* ( ( identifierSuffix )=> identifierSuffix )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA146_0==LEFT_PAREN) && (synpred30_DRL())) {s = 1;}

                        else if ( (LA146_0==LESS) && (synpred31_DRL())) {s = 2;}

                        else if ( (LA146_0==STRING) && (synpred32_DRL())) {s = 3;}

                        else if ( (LA146_0==DECIMAL) && (synpred32_DRL())) {s = 4;}

                        else if ( (LA146_0==HEX) && (synpred32_DRL())) {s = 5;}

                        else if ( (LA146_0==FLOAT) && (synpred32_DRL())) {s = 6;}

                        else if ( (LA146_0==BOOL) && (synpred32_DRL())) {s = 7;}

                        else if ( (LA146_0==NULL) && (synpred32_DRL())) {s = 8;}

                        else if ( (LA146_0==ID) ) {s = 9;}

                        else if ( (LA146_0==LEFT_SQUARE) ) {s = 10;}

                         
                        input.seek(index146_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_9 = input.LA(1);

                         
                        int index146_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred33_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SUPER))))) ) {s = 11;}

                        else if ( ((synpred34_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.NEW))))) ) {s = 12;}

                        else if ( (((synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.DOUBLE))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.FLOAT))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BYTE))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.LONG))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.INT))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.SHORT))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.BOOLEAN))))||(synpred35_DRL()&&((helper.validateIdentifierKey(DroolsSoftKeywords.CHAR)))))) ) {s = 13;}

                        else if ( (synpred38_DRL()) ) {s = 14;}

                         
                        input.seek(index146_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_10 = input.LA(1);

                         
                        int index146_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_DRL()) ) {s = 15;}

                        else if ( (synpred37_DRL()) ) {s = 16;}

                         
                        input.seek(index146_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA145_eotS =
        "\60\uffff";
    static final String DFA145_eofS =
        "\1\3\57\uffff";
    static final String DFA145_minS =
        "\1\u0081\2\0\55\uffff";
    static final String DFA145_maxS =
        "\1\u00bb\2\0\55\uffff";
    static final String DFA145_acceptS =
        "\3\uffff\1\2\53\uffff\1\1";
    static final String DFA145_specialS =
        "\1\uffff\1\0\1\1\55\uffff}>";
    static final String[] DFA145_transitionS = {
            "\5\3\1\uffff\2\3\1\uffff\2\3\1\2\1\3\3\uffff\1\3\2\uffff\2\3"+
            "\1\uffff\6\3\1\1\7\3\1\uffff\26\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "1669:38: ( ( identifierSuffix )=> identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA145_2 = input.LA(1);

                         
                        int index145_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index145_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA151_eotS =
        "\60\uffff";
    static final String DFA151_eofS =
        "\1\1\57\uffff";
    static final String DFA151_minS =
        "\1\u0081\52\uffff\1\0\4\uffff";
    static final String DFA151_maxS =
        "\1\u00bb\52\uffff\1\0\4\uffff";
    static final String DFA151_acceptS =
        "\1\uffff\1\2\55\uffff\1\1";
    static final String DFA151_specialS =
        "\53\uffff\1\0\4\uffff}>";
    static final String[] DFA151_transitionS = {
            "\5\1\1\uffff\2\1\1\uffff\4\1\3\uffff\1\1\2\uffff\2\1\1\uffff"+
            "\6\1\1\53\7\1\1\uffff\26\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1695:7: ( ( LEFT_SQUARE )=> LEFT_SQUARE expression RIGHT_SQUARE )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_43 = input.LA(1);

                         
                        int index151_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index151_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA160_eotS =
        "\60\uffff";
    static final String DFA160_eofS =
        "\1\2\57\uffff";
    static final String DFA160_minS =
        "\1\u0081\1\0\56\uffff";
    static final String DFA160_maxS =
        "\1\u00bb\1\0\56\uffff";
    static final String DFA160_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA160_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA160_transitionS = {
            "\5\2\1\uffff\2\2\1\uffff\4\2\3\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\6\2\1\1\7\2\1\uffff\26\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "()* loopback of 1722:37: ({...}? => LEFT_SQUARE expression RIGHT_SQUARE )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!helper.validateLT(2,"]"))) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\60\uffff";
    static final String DFA168_eofS =
        "\1\2\57\uffff";
    static final String DFA168_minS =
        "\1\u0081\1\0\56\uffff";
    static final String DFA168_maxS =
        "\1\u00bb\1\0\56\uffff";
    static final String DFA168_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA168_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA168_transitionS = {
            "\5\2\1\uffff\2\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2\2\uffff\2\2"+
            "\1\uffff\16\2\1\uffff\26\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "1754:13: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_1 = input.LA(1);

                         
                        int index168_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index168_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA171_eotS =
        "\60\uffff";
    static final String DFA171_eofS =
        "\1\2\57\uffff";
    static final String DFA171_minS =
        "\1\u0081\1\0\56\uffff";
    static final String DFA171_maxS =
        "\1\u00bb\1\0\56\uffff";
    static final String DFA171_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA171_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA171_transitionS = {
            "\5\2\1\uffff\2\2\1\uffff\2\2\1\1\1\2\3\uffff\1\2\2\uffff\2\2"+
            "\1\uffff\16\2\1\uffff\26\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "1763:14: ( ( LEFT_PAREN )=> arguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_1 = input.LA(1);

                         
                        int index171_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_DRL()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index171_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA175_eotS =
        "\15\uffff";
    static final String DFA175_eofS =
        "\15\uffff";
    static final String DFA175_minS =
        "\1\u0088\14\uffff";
    static final String DFA175_maxS =
        "\1\u00bb\14\uffff";
    static final String DFA175_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA175_specialS =
        "\15\uffff}>";
    static final String[] DFA175_transitionS = {
            "\1\1\42\uffff\1\12\1\14\1\13\6\uffff\1\2\1\3\1\4\1\5\1\6\1\7"+
            "\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "1775:1: assignmentOperator options {k=1; } : ( EQUALS_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT EQUALS_ASSIGN | SHIFT_RIGHT EQUALS_ASSIGN | SHIFT_RIGHT_UNSIG EQUALS_ASSIGN );";
        }
    }
 

    public static final BitSet FOLLOW_package_statement_in_compilation_unit618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_resync_in_compilation_unit637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_compilation_unit644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_resync_in_compilation_unit646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_key_in_package_statement747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_packageOrTypeName_in_package_statement751 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_statement753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_attribute_in_statement793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_import_statement_in_statement798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_in_statement817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_statement823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_statement828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_statement833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_in_statement838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_import_statement864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_import_name_in_import_statement866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_import_statement869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_key_in_function_import_statement909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_function_key_in_function_import_statement911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_import_name_in_function_import_statement923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_import_statement926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_name960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_import_name966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_import_name970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_import_name978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_STAR_in_import_name982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_key_in_global1026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_data_type_in_global1028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_global_id_in_global1030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_global1032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_id1061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_function1096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_data_type_in_function1098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_function_id_in_function1101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_parameters_in_function1103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_curly_chunk_in_function1105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_id1135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_key_in_query1170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_query_id_in_query1172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_parameters_in_query1180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_normal_lhs_block_in_query1189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_end_key_in_query1196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_query1198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_id1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_query_id1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_type_declaration1282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_declare_id_in_type_declaration1285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_type_decl_extends_in_type_declaration1287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_type_decl_implements_in_type_declaration1290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_decl_metadata_in_type_declaration1295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001044L});
    public static final BitSet FOLLOW_decl_field_in_type_declaration1300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_end_key_in_type_declaration1306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_declare_id1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extends_key_in_type_decl_extends1367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeName_in_type_decl_extends1370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_key_in_type_decl_implements1382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeNameList_in_type_decl_implements1385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_decl_metadata1404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_decl_metadata1412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_metadata1419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_decl_field1444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_decl_field_initialization_in_decl_field1450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_decl_field1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_data_type_in_decl_field1462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_decl_metadata_in_decl_field1466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_decl_field_initialization1494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_decl_field_initialization1500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_key_in_rule1538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_rule_id_in_rule1556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_extend_key_in_rule1565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_rule_id_in_rule1567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_decl_metadata_in_rule1571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_rule_attributes_in_rule1574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_when_part_in_rule1577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000244L});
    public static final BitSet FOLLOW_rhs_chunk_in_rule1580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_when_part1624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001084L});
    public static final BitSet FOLLOW_COLON_in_when_part1630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_normal_lhs_block_in_when_part1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_id1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_rule_id1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_key_in_rule_attributes1698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_rule_attributes1700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_rule_attributes1714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_rule_attribute_in_rule_attributes1721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_salience_in_rule_attribute1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_in_rule_attribute1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_in_rule_attribute1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timer_in_rule_attribute1778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_in_rule_attribute1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_in_rule_attribute1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_in_rule_attribute1797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_in_rule_attribute1803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_in_rule_attribute1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_in_rule_attribute1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_in_rule_attribute1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_in_rule_attribute1826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_in_rule_attribute1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_effective_key_in_date_effective1848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_date_effective1853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_date_expires_key_in_date_expires1867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_date_expires1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enabled_key_in_enabled1887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_BOOL_in_enabled1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_enabled1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_salience_key_in_salience1931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300021000L});
    public static final BitSet FOLLOW_signed_decimal_in_salience1940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_salience1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_loop_key_in_no_loop1962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BOOL_in_no_loop1967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_auto_focus_key_in_auto_focus1982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BOOL_in_auto_focus1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_activation_group_key_in_activation_group2004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_activation_group2009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleflow_group_key_in_ruleflow_group2023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_ruleflow_group2028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agenda_group_key_in_agenda_group2042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_agenda_group2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_key_in_timer2062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300021000L});
    public static final BitSet FOLLOW_timer_key_in_timer2065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300021000L});
    public static final BitSet FOLLOW_signed_decimal_in_timer2076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_timer2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_calendars_key_in_calendars2108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_string_list_in_calendars2113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dialect_key_in_dialect2124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_dialect2129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_on_active_key_in_lock_on_active2147 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_BOOL_in_lock_on_active2152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_in_normal_lhs_block2170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_or2215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_or2239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_lhs_or2282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_and_in_lhs_or2294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_and2335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_and2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_and_key_in_lhs_and2403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_unary_in_lhs_and2415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_lhs_exist_in_lhs_unary2446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_not_binding_in_lhs_unary2454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_not_in_lhs_unary2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_eval_in_lhs_unary2466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_forall_in_lhs_unary2472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_for_in_lhs_unary2479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_unary2485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_unary2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_unary2502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_unary2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exists_key_in_lhs_exist2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_exist2559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_exist2567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_exist2574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_exist2589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not_binding2635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_not_binding2637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_lhs_not2660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_not2689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_not2698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_not2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_lhs_not2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eval_key_in_lhs_eval2753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_lhs_eval2762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_key_in_lhs_forall2789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_forall2794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_pattern_source_in_lhs_forall2802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_forall2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_lhs_for2834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_lhs_for2839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_lhs_for2847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_for2849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_functions_in_lhs_for2854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002002L});
    public static final BitSet FOLLOW_SEMICOLON_in_lhs_for2860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_constraints_in_lhs_for2862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_lhs_for2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_function_in_for_functions2897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_for_functions2901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_function_in_for_functions2903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_in_for_function2932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_for_function2934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_as_string_in_for_function2936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_arguments_as_string2976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4023824L});
    public static final BitSet FOLLOW_expression_as_string_in_arguments_as_string2979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_COMMA_in_arguments_as_string2982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_as_string_in_arguments_as_string2984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_arguments_as_string2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_as_string3018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lhs_pattern_in_pattern_source3049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_over_clause_in_pattern_source3053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_FROM_in_pattern_source3063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA40E1824L});
    public static final BitSet FOLLOW_accumulate_statement_in_pattern_source3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_statement_in_pattern_source3099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entrypoint_statement_in_pattern_source3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_source_in_pattern_source3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVER_in_over_clause3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_over_elements_in_over_clause3169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_over_clause3176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_over_elements_in_over_clause3181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ID_in_over_elements3196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_over_elements3203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_over_elements3212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_over_elements3219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_TimePeriod_in_over_elements3234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_DECIMAL_in_over_elements3240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_over_elements3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ACCUMULATE_in_accumulate_statement3277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_statement3286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_lhs_or_in_accumulate_statement3294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_statement3299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_accumulate_init_clause_in_accumulate_statement3309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_accumulate_id_clause_in_accumulate_statement3315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_statement3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_key_in_accumulate_init_clause3369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_action_key_in_accumulate_init_clause3395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_reverse_key_in_accumulate_init_clause3416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_COMMA_in_accumulate_init_clause3425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000404L});
    public static final BitSet FOLLOW_result_key_in_accumulate_init_clause3441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_in_accumulate_init_clause3447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk3505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_accumulate_paren_chunk_data3529 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_accumulate_paren_chunk_data3541 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_accumulate_paren_chunk_data_in_accumulate_paren_chunk_data3557 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_accumulate_paren_chunk_data3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_accumulate_id_clause3584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_accumulate_id_clause3590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECT_in_collect_statement3612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_collect_statement3621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_pattern_source_in_collect_statement3628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_collect_statement3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_entry_point_key_in_entrypoint_statement3660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_entrypoint_id_in_entrypoint_statement3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entrypoint_id3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_entrypoint_id3711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_from_source3748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_binding_in_lhs_pattern3779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_lhs_pattern3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_fact_binding3812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_fact_in_fact_binding3818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact_binding3825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_fact_binding_expression_in_fact_binding3833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact_binding3841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100004L});
    public static final BitSet FOLLOW_or_key_in_fact_binding_expression3894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_fact_binding_expression3900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_fact_in_fact_binding_expression3905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100004L});
    public static final BitSet FOLLOW_pattern_type_in_fact3945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_fact3950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003004L});
    public static final BitSet FOLLOW_constraints_in_fact3961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_fact3967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_constraints3999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_constraints4003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_constraint_in_constraints4010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_or_constr_in_constraint4024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_constr_in_or_constr4035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_constr4039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_and_constr_in_or_constr4046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr4061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_constr4065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_unary_constr_in_and_constr4072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eval_key_in_unary_constr4105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_unary_constr4108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_constraint_in_unary_constr4113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_constr4119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_or_constr_in_unary_constr4129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_constr4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_in_field_constraint4154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint4156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000001FC01004L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint4163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARROW_in_field_constraint4169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_paren_chunk_in_field_constraint4173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_field_constraint4227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_or_restr_connective_in_field_constraint4229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_label4254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_label4261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_or_restr_connective4288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_and_restr_connective_in_or_restr_connective4296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4317 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_and_restr_connective4323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_constraint_expression_in_and_restr_connective4330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_compound_operator_in_constraint_expression4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_operator_in_constraint_expression4365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_constraint_expression4370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F801004L});
    public static final BitSet FOLLOW_or_restr_connective_in_constraint_expression4379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_constraint_expression4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_simple_operator4419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_GREATER_in_simple_operator4427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_GREATER_EQUALS_in_simple_operator4435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_LESS_in_simple_operator4443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_LESS_EQUALS_in_simple_operator4451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_NOT_EQUALS_in_simple_operator4459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_not_key_in_simple_operator4467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001F800004L});
    public static final BitSet FOLLOW_operator_key_in_simple_operator4474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000FA0021824L});
    public static final BitSet FOLLOW_operator_params_in_simple_operator4478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_expression_value_in_simple_operator4491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_operator_params4510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_in_operator_params4522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_operator_args4533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000400L});
    public static final BitSet FOLLOW_COMMA_in_operator_args4539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_operator_arg_in_operator_args4542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000400L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_operator_args4546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TimePeriod_in_operator_arg4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_not_key_in_compound_operator4587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_in_key_in_compound_operator4589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_compound_operator4600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_COMMA_in_compound_operator4612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000F80021824L});
    public static final BitSet FOLLOW_expression_value_in_compound_operator4617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_compound_operator4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_path_in_expression_value4646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_literal_in_expression_value4651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_in_expression_value4657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_signed_literal4689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_in_signed_literal4726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_in_signed_literal4744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_in_signed_literal4762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_signed_literal4780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_signed_literal4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_decimal_match_in_signed_decimal4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_decimal_match4910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_MINUS_in_signed_decimal_match4916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_DECIMAL_in_signed_decimal_match4938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_hex_match_in_signed_hex4973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_hex_match5010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_hex_match5016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_HEX_in_signed_hex_match5038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signed_float_match_in_signed_float5073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_signed_float_match5110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MINUS_in_signed_float_match5116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_FLOAT_in_signed_float_match5138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_pattern_type5159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_pattern_type5165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_pattern_type5169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_dimension_definition_in_pattern_type5184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ID_in_data_type5212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_data_type5218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_data_type5222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_dimension_definition_in_data_type5227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_dimension_definition5256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_dimension_definition5263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_accessor_path5281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_accessor_element_in_accessor_path5285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ID_in_accessor_element5309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_square_chunk_in_accessor_element5315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_rhs_chunk_data_in_rhs_chunk5347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_rhs_chunk_data5366 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_not_end_key_in_rhs_chunk_data5375 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_end_key_in_rhs_chunk_data5381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_rhs_chunk_data5386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk5405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_curly_chunk_data5428 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_curly_chunk_data5440 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_curly_chunk_data_in_curly_chunk_data5456 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_curly_chunk_data5467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_paren_chunk_data5512 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_paren_chunk_data5524 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_paren_chunk_data_in_paren_chunk_data5540 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_paren_chunk_data5551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk5572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_square_chunk_data5595 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_square_chunk_data5607 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_square_chunk_data_in_square_chunk_data5622 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_square_chunk_data5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_literal5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_literal5674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_in_literal5683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_literal5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_literal5707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_literal5732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_typeList5766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typeList5768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_typeNameList5785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeName_in_typeNameList5788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_primitiveType_in_type5828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ID_in_type5851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000024000008L});
    public static final BitSet FOLLOW_typeArguments_in_type5858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_type5863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_type5865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000024000008L});
    public static final BitSet FOLLOW_typeArguments_in_type5872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_type5887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_type5889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ID_in_typeName5906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_typeName5909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_typeName5911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_packageOrTypeName5945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_packageOrTypeName5949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LESS_in_typeArguments5977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000400L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments5982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000004L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000400L});
    public static final BitSet FOLLOW_GREATER_in_typeArguments5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument6000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_typeArgument6005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_extends_key_in_typeArgument6009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_super_key_in_typeArgument6013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_typeArgument6016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parameters6029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002004L});
    public static final BitSet FOLLOW_param_definition_in_parameters6038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_COMMA_in_parameters6041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_param_definition_in_parameters6045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parameters6054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_data_type_in_param_definition6080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_argument_in_param_definition6083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_argument6094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_dimension_definition_in_argument6100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_STRING_in_string_list6119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_string_list6128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STRING_in_string_list6132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression6178 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0FF0380000000100L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression6187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_expression6189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression6215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression6219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression6223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression6225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PIPE_in_conditionalOrExpression6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression6249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOUBLE_AMPER_in_conditionalAndExpression6272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression6274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_PIPE_in_inclusiveOrExpression6297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression6299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression6318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression6322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression6324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression6343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_AMPER_in_andExpression6347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression6349 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression6368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_set_in_equalityExpression6372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression6382 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression6401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_instanceof_key_in_instanceOfExpression6404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression6406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression6424 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression6433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression6435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_set_in_relationalOp6453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression6482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression6486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression6488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_set_in_shiftOp6502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_set_in_additiveExpression6540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000C00000000010L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression6571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000C00000000010L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression6605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression6615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCR_in_unaryExpression6627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_primary_in_unaryExpression6629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECR_in_unaryExpression6639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_primary_in_unaryExpression6641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unaryExpressionNotPlusMinus6684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEGATION_in_unaryExpressionNotPlusMinus6695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus6717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0003000020000008L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus6724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0003000020000008L});
    public static final BitSet FOLLOW_set_in_unaryExpressionNotPlusMinus6736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_castExpression6811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_castExpression6824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_castExpression6826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_castExpression6828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_primitiveType6867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_primitiveType6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_primitiveType6883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_primitiveType6891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_primitiveType6899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_primitiveType6907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_primitiveType6915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_double_key_in_primitiveType6923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_this_key_in_primary6968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_primary6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_primary7006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_primary7008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_primary7023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_creator_in_primary7025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary7040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_primary7043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_primary7045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_primary7049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_class_key_in_primary7051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_primary7071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_primary7086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_primary7100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020001008L});
    public static final BitSet FOLLOW_DOT_in_primary7109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_primary7111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020001008L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary7120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineListExpression7141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FE4021824L});
    public static final BitSet FOLLOW_expressionList_in_inlineListExpression7143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineListExpression7146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_inlineMapExpression7168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_mapExpressionList_in_inlineMapExpression7170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FE4021824L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_inlineMapExpression7173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_mapExpressionList7193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_mapEntry_in_mapExpressionList7195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_mapEntry7218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_mapEntry7220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_mapEntry7222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_parExpression7236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_parExpression7238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_parExpression7240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix7270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix7272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000008L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix7276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_class_key_in_identifierSuffix7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_identifierSuffix7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_identifierSuffix7297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix7310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator7328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_createdName_in_creator7331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020001000L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator7342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator7346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_createdName7358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_typeArguments_in_createdName7360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_createdName7373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_createdName7375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000008L});
    public static final BitSet FOLLOW_typeArguments_in_createdName7377 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_primitiveType_in_createdName7392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_innerCreator7407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020001000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator7409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FE4021824L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest7439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest7453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest7462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_arrayCreatorRest7476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_arrayCreatorRest7478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer7501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer7512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_arrayInitializer7524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F006FA4021824L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000400L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F002FA4021824L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000400L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_arrayInitializer7544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest7555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation7568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation7570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_nonWildcardTypeArguments7582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments7584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_GREATER_in_nonWildcardTypeArguments7586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_explicitGenericInvocationSuffix7598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix7600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_explicitGenericInvocationSuffix7608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix7610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_selector7639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_selector7648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_super_key_in_selector7661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_selector7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector7670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_new_key_in_selector7672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_innerCreator_in_selector7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_selector7686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_selector7688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_selector7690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_superSuffix7710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_superSuffix7712 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_arguments7755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4023824L});
    public static final BitSet FOLLOW_expressionList_in_arguments7757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_arguments7760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList7776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_expressionList7779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000F000FA4021824L});
    public static final BitSet FOLLOW_expression_in_expressionList7782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentOperator7823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentOperator7837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULT_ASSIGN_in_assignmentOperator7851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentOperator7865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentOperator7879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentOperator7893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentOperator7907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentOperator7921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_assignmentOperator7935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_assignmentOperator7951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_UNSIG_in_assignmentOperator7967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_ASSIGN_in_assignmentOperator7969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_operator_key7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_neg_operator_key8043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key8088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key8092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key8096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_lock_on_active_key8100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_lock_on_active_key8104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_effective_key8136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_date_effective_key8140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_date_effective_key8144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_date_expires_key8176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_date_expires_key8180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_date_expires_key8184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_no_loop_key8216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_no_loop_key8220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_no_loop_key8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key8256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_auto_focus_key8260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_auto_focus_key8264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_activation_group_key8296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_activation_group_key8300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_activation_group_key8304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key8336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_agenda_group_key8340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_agenda_group_key8344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key8376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_ruleflow_group_key8380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_ruleflow_group_key8384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_entry_point_key8416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MINUS_in_entry_point_key8420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_entry_point_key8424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_timer_key8453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_duration_key8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_calendars_key8507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_package_key8534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_import_key8561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_dialect_key8588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_salience_key8615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enabled_key8642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_attributes_key8669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_rule_key8696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extend_key8723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_query_key8750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_declare_key8777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_function_key8804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_global_key8831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_eval_key8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_not_key8885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_in_key8912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_or_key8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_and_key8966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_exists_key8993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_forall_key9020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_action_key9047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_reverse_key9074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_result_key9101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_end_key9128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_init_key9175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_instanceof_key9202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_extends_key9229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_implements_key9256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_super_key9283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_boolean_key9311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_char_key9339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_byte_key9367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_short_key9395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_int_key9423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_long_key9451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_float_key9479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_double_key9507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_this_key9535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_void_key9563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_key9591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_new_key9619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_final_key9648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_if_key9674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_else_key9700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_for_key9726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_while_key9752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_do_key9778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_key9804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_default_key9830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_try_key9856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_catch_key9882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_finally_key9908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_switch_key9934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synchronized_key9960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_return_key9986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throw_key10012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_break_key10038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_continue_key10064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_assert_key10089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_static_key10114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_modify_key10139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_public_key10165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protected_key10191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_private_key10217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_abstract_key10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_native_key10269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_transient_key10295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_volatile_key10321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_strictfp_key10347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_throws_key10373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_key10399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_enum_key10425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred1_DRL2206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_synpred1_DRL2208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_key_in_synpred2_DRL2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred3_DRL2326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_and_key_in_synpred3_DRL2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred4_DRL2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred5_DRL2542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_synpred5_DRL2545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred5_DRL2547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred6_DRL2670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_or_key_in_synpred6_DRL2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_key_in_synpred6_DRL2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_args_in_synpred7_DRL4503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred8_DRL5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred9_DRL5832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred9_DRL5834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred10_DRL5855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_synpred11_DRL5869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred12_DRL5881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred12_DRL5883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred13_DRL6182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_synpred14_DRL6429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred15_DRL6533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred18_DRL6707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_synpred19_DRL6721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred20_DRL6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred21_DRL6779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_primitiveType_in_synpred21_DRL6781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred22_DRL6802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_synpred22_DRL6804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_key_in_synpred23_DRL6867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_char_key_in_synpred24_DRL6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_byte_key_in_synpred25_DRL6883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_short_key_in_synpred26_DRL6891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_int_key_in_synpred27_DRL6899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_long_key_in_synpred28_DRL6907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_float_key_in_synpred29_DRL6915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred30_DRL6942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred31_DRL6957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred32_DRL6982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_super_key_in_synpred33_DRL7002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_synpred34_DRL7019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred35_DRL7036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineMapExpression_in_synpred36_DRL7067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineListExpression_in_synpred37_DRL7082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred38_DRL7097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred39_DRL7104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_synpred39_DRL7106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred40_DRL7117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred42_DRL7288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_SQUARE_in_synpred44_DRL7470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_SQUARE_in_synpred44_DRL7472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred45_DRL7643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred46_DRL7637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_synpred46_DRL7639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_arguments_in_synpred46_DRL7648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred47_DRL7659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_super_key_in_synpred47_DRL7661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001008L});
    public static final BitSet FOLLOW_superSuffix_in_synpred47_DRL7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred48_DRL7670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_new_key_in_synpred48_DRL7672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred48_DRL7675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_innerCreator_in_synpred48_DRL7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred49_DRL7716 = new BitSet(new long[]{0x0000000000000002L});

}