package org.drools.compiler.trait.test;
 
 
import org.drools.core.factmodel.traits.Thing;
import org.drools.core.factmodel.traits.Entity;
import java.util.*;


global java.util.List list;



declare trait SimpleTrait
    name : String
end
 
declare trait ComplexTrait
//    doubles : double[]
//    names   : String[]
    ages    : List
    addrex  : Set
    nested  : SimpleTrait
    nest2   : AnotherTrait
end

 
 
 
declare Bean
@Traitable
    id      : String           @key
//    names   : String[]
    addrex  : Set               = new java.util.HashSet()
end

declare trait AnotherTrait
    field : List
end





rule "Init"
when
then
 Bean core = new Bean( );
    core.setId( "asd" );
 insert( core );
end


rule "Compose"
no-loop
when
    $core : Bean()
then
    ComplexTrait complex = drools.don( $core, ComplexTrait.class, true );

    Entity i1 = new Entity();
    SimpleTrait st = drools.don( i1, SimpleTrait.class, true );
    st.setName("xyz");

    Entity i2 = new Entity();
    AnotherTrait at = drools.don( i2, AnotherTrait.class, true );
    at.setField(new LinkedList());
    at.getField().add("aaa");

    modify ( complex ) {
        setAges( new ArrayList() ),
        getAges().add(22),
        getAges().add(18),

        getAddrex().add( "here" ),

        setNested( st ),
        setNest2( at );
    }

    System.out.println( complex );
end


rule "Check"
when
    ComplexTrait( ages contains 22, ages contains 18,
                  addrex.size == 1, addrex contains "here" ,
                  nested.name == "xyz",
                  nest2.field contains "aaa" )
then
    list.add("OK");
end






