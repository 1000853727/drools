#created on: 12 juin 2006
package Number

import org.drools.IndexedNumber;
import java.util.List;

global java.util.List orderedNumbers;
global java.util.List errors;
 
rule "Order1"
salience 210
	when
	    # testing join node + eval
		n1 : IndexedNumber($nb1 : number);
		n2 : IndexedNumber(number < $nb1);
		eval(n1.getIndex() < n2.getIndex());
	then
	    System.out.println(" R1 : "+n1.toString()+" , "+n2.toString() );
		if ( ! (n1.getIndex() < n2.getIndex())) {
		    errors.add("{1} Shouldn't fire for: " + n1 + " " + n2);
       }
end		

rule "Order2"
salience 200
	when
	    #testing pure join nodes
		n1 : IndexedNumber($nb1 : number, $index : index);
		n2 : IndexedNumber(number < $nb1, index > $index );
	then
	    System.out.println(" R2 : "+n1.toString()+" , "+n2.toString() );
		if ( ! (n1.getIndex() < n2.getIndex())) {
		    errors.add("{2} Shouldn't fire for: " + n1 + " " + n2);
        }
		swap(n1, n2);
	    System.out.println(" AS : "+n1.toString()+" , "+n2.toString() );
		retract(n1);
		retract(n2);	    
		assert(n1);
		assert(n2);	    		
		//modify(n1);
		//modify(n2);
end		

rule "Debug"
salience 10
	when
		n : IndexedNumber($idx : index);
		not IndexedNumber(index < $idx);
	then
	    System.out.println(" R3 : "+n.toString() );
		orderedNumbers.add(n);
		retract(n);
end

function void swap(IndexedNumber n1, IndexedNumber n2) {
	int tmp = n1.getIndex();
	n1.setIndex(n2.getIndex());
	n2.setIndex(tmp);
}