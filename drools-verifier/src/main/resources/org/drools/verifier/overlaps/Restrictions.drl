#created on: 2.2.2008
package org.drools.verifier.overlaps

#list any import classes here.
import java.util.Collection;
import java.util.ArrayList;

import org.drools.verifier.data.VerifierReport;

import org.drools.verifier.components.LiteralRestriction;
import org.drools.verifier.components.NumberRestriction;

import org.drools.verifier.report.components.Subsumption;
import org.drools.verifier.report.components.Severity;
import org.drools.verifier.report.components.MessageType;
import org.drools.verifier.report.components.Overlap;

#declare any global variables here
global VerifierReport result;

#
# Fires when two restrictions are overlapping.
# Reports these restrictions as overlapping.
#
# Dependencies: Needs at least one rule.
#
#		package org.drools.verifier.subsumption.patterns
#			rule "Find subsumptant restrictions, greater than"
#			rule "Find subsumptant restrictions, less than"
#
# Example 1: Pattern1( a > 10 ) and Pattern1( a > 100 )
#
rule "Find overlapping number restrictions"
	when
		# There is subsumption between two restrictions
		
		$left :NumberRestriction()
		$right :NumberRestriction(
			path != $left.path
		)
		
		$subsumption :Subsumption(
			left.path == $left.path,
			left.verifierComponentType == $left.verifierComponentType,
			right.path == $right.path,
			right.verifierComponentType == $right.verifierComponentType
		)
		
		# There is no restriction between these two restrictions.
		not	$center :NumberRestriction(
				fieldPath == $left.fieldPath,
				value == $left.value,
				value > $right.value
		)
	then 
		insert( new Overlap( $left, $right ) );
end

rule "Find overlapping literal restrictions"
	when
		# There is subsumption between two restrictions
		
		$left :LiteralRestriction()
		$right :LiteralRestriction(
			path != $left.path
		)
		
		$subsumption :Subsumption(
			left.path == $left.path,
			left.verifierComponentType == $left.verifierComponentType,
			right.path == $right.path,
			right.verifierComponentType == $right.verifierComponentType
		)
		
		# There is no restriction between these two restrictions.
		not	$center :LiteralRestriction(
				fieldPath == $left.fieldPath,
				valueAsString == $left.valueAsString,
				valueAsString == $right.valueAsString
		)
	then 
		insert( new Overlap( $left, $right ) );
end

rule "Finddsds overlapping literal restrictions"
	when
		# There is subsumption between two restrictions
		
		$left :LiteralRestriction()
		$right :LiteralRestriction(
			path != $left.path
		)
	then 
		System.out.println( "-----" + $left +" "+ $right);
end


