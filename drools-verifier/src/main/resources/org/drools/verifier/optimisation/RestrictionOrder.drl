#created on: 25.10.2007
package org.drools.verifier.optimisation.drl

#list any import classes here.
import java.util.Collection;
import java.util.ArrayList;

import org.drools.base.evaluators.Operator;
import org.drools.base.evaluators.MatchesEvaluatorsDefinition;

import org.drools.verifier.components.SubPattern;
import org.drools.verifier.components.Restriction;
import org.drools.verifier.components.Constraint;
import org.drools.verifier.components.Pattern;
import org.drools.verifier.components.VerifierRule;
import org.drools.verifier.components.OperatorDescr;
import org.drools.verifier.components.VerifierPredicateDescr;
import org.drools.verifier.data.VerifierComponent;
import org.drools.verifier.components.VerifierComponentType;
import org.drools.verifier.components.RuleComponent;
import org.drools.verifier.report.components.VerifierMessage;
import org.drools.verifier.report.components.Severity;
import org.drools.verifier.report.components.MessageType;
import org.drools.verifier.data.VerifierReport;

import java.util.Map;
import java.util.HashMap;

#declare any global variables here
global VerifierReport result;


# Informs that rule would be more effective if the less expensive
# component was on the left side.
#
# Type: Note
# Dependencies: None
# Example: { a:bar } < { baz == 1 } < { baz > 1 || < 1 } < { baz != 1 }
#
rule "Optimise restrictions inside operator"
	when

		$sp : SubPattern()
	
		(
				$r1 :Restriction(
					( operator == Operator.EQUAL || == MatchesEvaluatorsDefinition.MATCHES )
				) from $sp.items
			and
				$r2 :Restriction(
					guid != $r1.guid,
					( operator == Operator.GREATER || == Operator.LESS || == Operator.GREATER_OR_EQUAL || == Operator.LESS_OR_EQUAL || == MatchesEvaluatorsDefinition.NOT_MATCHES || == Operator.NOT_EQUAL )
				) from $sp.items
		) or (
				$r1 :Restriction(
					( operator == Operator.GREATER || == Operator.LESS )
				) from $sp.items
			and
				$r2 :Restriction(
					guid != $r1.guid,
					( operator == Operator.GREATER_OR_EQUAL || == Operator.LESS_OR_EQUAL || == MatchesEvaluatorsDefinition.NOT_MATCHES || == Operator.NOT_EQUAL )
				) from $sp.items
		) or (
				$r1 :Restriction(
					( operator == Operator.GREATER_OR_EQUAL || == Operator.LESS_OR_EQUAL )
				) from $sp.items
			and
				$r2 :Restriction(
					guid != $r1.guid,
					( operator == MatchesEvaluatorsDefinition.NOT_MATCHES || == Operator.NOT_EQUAL )
				) from $sp.items
		)
		
		$c :Constraint(
			guid matches $r1.parentGuid,
			verifierComponentType == $r1.parentType
		)
		
		Constraint(
			guid matches $r2.parentGuid,
			orderNumber < $c.orderNumber,
			verifierComponentType == $r2.parentType
		)

		$pattern :Pattern(
			guid == $sp.patternGuid
		)
	then
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put( $pattern.getRuleGuid(), $pattern.getRuleName());
	
		Collection list = new ArrayList();
		list.add( $r1 );
		list.add( $r2 );
		result.add( new VerifierMessage(
								impactedRules,
								Severity.NOTE,
								MessageType.OPTIMISATION,
								$pattern,
								"Rule \"" + $r1.getRuleName() +
								"\" would be more effective if the more restrictive component (" +
								$r2 +
								") could be before (" +
								$r1 + ").",
								list ) );
end


# Informs that rule would be more effective if the less expensive
# component was on the left side.
#
# Type: Note
# Dependencies: None
# Example: { a:bar } < { baz == 1 } < { baz > 1 || < 1 } < { baz != 1 }
#
rule "Optimise restrictions inside constraint"
	when
		(
				$r1 :Restriction(
					( operator == Operator.EQUAL || == MatchesEvaluatorsDefinition.MATCHES )
				)
			and
				$r2 :Restriction(
					parentGuid == $r1.parentGuid,
					parentType == $r1.parentType,
					orderNumber < $r1.orderNumber,
					( operator 	== Operator.GREATER || 
								== Operator.LESS || 
								== Operator.GREATER_OR_EQUAL || 
								== Operator.LESS_OR_EQUAL || 
								== MatchesEvaluatorsDefinition.NOT_MATCHES || 
								== Operator.NOT_EQUAL )
				)
		) or (
				$r1 :Restriction(
					( operator 	== Operator.GREATER || 
								== Operator.LESS )
				)
			and
				$r2 :Restriction(
					parentGuid == $r1.parentGuid,
					parentType == $r1.parentType,
					orderNumber < $r1.orderNumber,
					( operator 	== Operator.GREATER_OR_EQUAL || 
								== Operator.LESS_OR_EQUAL || 
								== MatchesEvaluatorsDefinition.NOT_MATCHES || 
								== Operator.NOT_EQUAL )
				)
		) 
		or (
				$r1 :Restriction(
					( operator == Operator.GREATER_OR_EQUAL || == Operator.LESS_OR_EQUAL )
				)
			and
				$r2 :Restriction(
					parentGuid == $r1.parentGuid,
					parentType == $r1.parentType,
					orderNumber < $r1.orderNumber,
					( operator == MatchesEvaluatorsDefinition.NOT_MATCHES || == Operator.NOT_EQUAL )
				)
		)

		$pattern :Pattern(
			guid == $r1.patternGuid
		)
	then
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put( $pattern.getGuid(), $pattern.getRuleName());
	
		Collection list = new ArrayList();
		list.add( $r1 );
		list.add( $r2 );
		result.add( new VerifierMessage(
								impactedRules,
								Severity.NOTE,
								MessageType.OPTIMISATION,
								$pattern,
								"Rule \"" + $r1.getRuleName() +
								"\" would be more effective if the more restrictive component (" +
								$r2 +
								") could be before (" +
								$r1 + ").",
								list ) );
end

# VerifierPredicateDescr should be last.
#
# Type: Note
# Dependencies: None
# Example: Foo( eval( bar == 1), bar == 1 )
#
rule "Optimise predicates inside operator"
	when
		$operator :OperatorDescr()

		$predicate :VerifierPredicateDescr(
			parentGuid matches $operator.guid,
			parentType == $operator.verifierComponentType
		)

		# Any other VerifierComponent that is not predicate or operator
		$other :RuleComponent(
			parentGuid matches $operator.guid,
			parentType == $operator.verifierComponentType,
			orderNumber > $predicate.orderNumber,
			( verifierComponentType != VerifierComponentType.OPERATOR && != VerifierComponentType.PREDICATE )
		)

		$rule :VerifierRule(
			guid == $predicate.ruleGuid
		)
	then
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put( $rule.getGuid(), $rule.getRuleName());
	
		Collection list = new ArrayList();
		list.add( $predicate );
		list.add( $other );
		result.add( new VerifierMessage(
								impactedRules,
								Severity.NOTE,
								MessageType.OPTIMISATION,
								$rule,
								"Rule \"" + $predicate.getRuleName() +
								"\" would be more effective if the less expensive component, (" +
								$other +
								"), could be before (" +
								$predicate + ").",
								list ) );
end
