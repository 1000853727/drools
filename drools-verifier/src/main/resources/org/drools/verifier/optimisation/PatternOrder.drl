#created on: 27.10.2007
package org.drools.verifier.optimisation

#list any import classes here.
import java.util.Collection;
import java.util.ArrayList;

import org.drools.verifier.components.Pattern;
import org.drools.verifier.components.VerifierRule;
import org.drools.verifier.components.OperatorDescr;
import org.drools.verifier.components.VerifierEvalDescr;
import org.drools.verifier.components.RuleComponent;
import org.drools.verifier.data.VerifierComponent;
import org.drools.verifier.components.VerifierComponentType;
import org.drools.verifier.report.components.VerifierMessage;
import org.drools.verifier.report.components.Severity;
import org.drools.verifier.report.components.MessageType;
import org.drools.verifier.data.VerifierReport;

import java.util.Map;
import java.util.HashMap;

#declare any global variables here
global VerifierReport result;




# Informs that rule would be more effective if eval
# was after fact patterns.
#
# Type: Note
# Dependencies: None
# Example: 
#		eval(function( $something )) 
#		Pattern()
#
rule "Optimise evals inside pattern"
	when
		$operator :OperatorDescr()

		$eval :VerifierEvalDescr(
			parentGuid matches $operator.guid,
			parentType == $operator.verifierComponentType
		)

		# Any other RuleComponent that is not predicate or operator
		$other :RuleComponent(
			parentGuid matches $operator.guid,
			parentType == $operator.verifierComponentType,
			orderNumber > $eval.orderNumber,
			( verifierComponentType != VerifierComponentType.OPERATOR && != VerifierComponentType.EVAL )
		)

		$rule :VerifierRule(
			guid matches $eval.ruleGuid
		)
	then	
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put( $rule.getGuid(), $rule.getRuleName());
	
		Collection list = new ArrayList();
		list.add( $eval );
		list.add( $other );
		result.add( new VerifierMessage(
								impactedRules,
								Severity.NOTE,
								MessageType.OPTIMISATION,
								$rule,
								"Rule \"" + $eval.getRuleName() +
								"\" would be more effective if the less expensive component, (" +
								$other +
								"), could be before (" +
								$eval + ").",
								list ) );
end