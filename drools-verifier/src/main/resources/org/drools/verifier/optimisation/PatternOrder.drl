#created on: 27.10.2007
package org.drools.verifier.optimisation

#list any import classes here.
import java.util.Collection;
import java.util.ArrayList;

import org.drools.verifier.components.Pattern;
import org.drools.verifier.components.VerifierRule;
import org.drools.verifier.components.PatternOperatorDescr;
import org.drools.verifier.components.Eval;
import org.drools.verifier.components.SubRule;
import org.drools.verifier.components.SubPattern;
import org.drools.verifier.components.RuleComponent;
import org.drools.verifier.data.VerifierComponent;
import org.drools.verifier.components.VerifierComponentType;
import org.drools.verifier.report.components.VerifierMessage;
import org.drools.verifier.report.components.Severity;
import org.drools.verifier.report.components.MessageType;
import org.drools.verifier.data.VerifierReport;

import java.util.Map;
import java.util.HashMap;

#declare any global variables here
global VerifierReport result;




# Informs that rule would be more effective if eval
# was after fact patterns.
#
# Type: Note
# Dependencies: None
# Example: 
#		eval(function( $something )) 
#		Pattern()
#
rule "Optimise evals inside pattern"
	when
		$subRule : SubRule()
		
		$eval :Eval(
			this memberOf $subRule.items
		)

		$subPattern : SubPattern(
			this memberOf $subRule.items,
			patternPath == $subPattern.patternPath,
			pattern.orderNumber > $eval.orderNumber,
			$pattern : pattern
		)
	then	
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put(  $subRule.getRule().getPath(), 
							$subRule.getRule().getName());
	
		Collection list = new ArrayList();
		list.add( $eval );
		list.add( $pattern );
		result.add( new VerifierMessage(
								impactedRules,
								Severity.NOTE,
								MessageType.OPTIMISATION,
								$subRule.getRule(),
								"Rule \"" + $subRule.getRuleName() +
								"\" would be more effective if the less expensive component, (" +
								$pattern +
								"), could be before (" +
								$eval + ").",
								list ) );
end