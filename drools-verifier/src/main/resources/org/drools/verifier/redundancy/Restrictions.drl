#created on: 7.9.2007
package org.drools.verifier.redundancy.restrictions

import org.drools.verifier.components.*;
import org.drools.verifier.report.components.Redundancy;
import org.drools.verifier.report.components.RedundancyType;

#
# Dependencies: None
#
rule "Find redundant VariableRestriction"
	when
		# Check that Restrictions $left and $right have redundant fields.
		$left :VariableRestriction()
		$right :VariableRestriction(
			guid not matches $left.guid,
			operator == $left.operator,
			variable.objectTypeType == $left.variable.objectTypeType,
			variable.objectTypeGuid matches $left.variable.objectTypeGuid
		)
		# Check that there is not already a pair with these values.
		not Redundancy(
			left == $left,
			right == $right
		)
		not Redundancy(
			left == $right,
			right == $left
		)
	then
		insert( new Redundancy( RedundancyType.STRONG, $left, $right ) );
end

#
# Dependencies: None
#
rule "Find redundant LiteralRestriction"
	when
		# Check that Restrictions $left and $right have redundant fields.
		$left :LiteralRestriction()
		and
		(
				$right :LiteralRestriction(
					guid not matches $left.guid,
					operator == $left.operator,
					valueType == $left.valueType,
					valueType == Field.FieldType.BOOLEAN,
					booleanValue == $left.booleanValue
				)
			or
				$right :LiteralRestriction(
					guid not matches $left.guid,
					operator == $left.operator,
					valueType == $left.valueType,
					valueType == Field.FieldType.STRING,
					valueAsString matches $left.valueAsString
				)
			or
				$right :LiteralRestriction(
					guid not matches $left.guid,
					operator == $left.operator,
					valueType == $left.valueType,
					valueType == Field.FieldType.INT,
					intValue == $left.intValue
				)
			or
				$right :LiteralRestriction(
					guid not matches $left.guid,
					operator == $left.operator,
					valueType == $left.valueType,
					valueType == Field.FieldType.DOUBLE,
					doubleValue == $left.doubleValue
				)
			or
				$right :LiteralRestriction(
					guid not matches $left.guid,
					operator == $left.operator,
					valueType == $left.valueType,
					valueType == Field.FieldType.DATE,
					eval( dateValue.equals($left.getDateValue()) )
				)
			or
			(
				$right :LiteralRestriction(
					guid not matches $left.guid,
					operator == $left.operator,
					valueType == $left.valueType,
					valueType == Field.FieldType.VARIABLE
				)
				and
					$v :Variable(
						objectTypeType == VerifierComponentType.FIELD,
						objectTypeGuid matches $left.guid
					)
				and
					Variable(
						objectTypeType == VerifierComponentType.FIELD,
						objectTypeGuid matches $right.guid,
						objectTypeName == $v.objectTypeName,
						name matches $v.name
					)
			)
		)
		# Check that there is not already a pair with these values.
		not Redundancy(
			left == $left,
			right == $right
		)
		not Redundancy(
			left == $right,
			right == $left
		)
	then
		insert( new Redundancy( RedundancyType.STRONG, $left, $right ) );
end