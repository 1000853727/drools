#created on: 9.12.2007
package org.drools.verifier.redundancy

#list any import classes here.
global VerifierReport result;



#declare any global variables here
import java.util.Collection;
import java.util.ArrayList;

import org.drools.verifier.components.SubRule;
import org.drools.verifier.components.VerifierRule;
import org.drools.verifier.components.Consequence;

import org.drools.verifier.data.VerifierReport;

import org.drools.verifier.components.RuleComponent;
import org.drools.verifier.report.components.Redundancy;
import org.drools.verifier.report.components.Equivalence;
import org.drools.verifier.report.components.Subsumption;
import org.drools.verifier.report.components.VerifierMessage;
import org.drools.verifier.report.components.Cause;
import org.drools.verifier.report.components.Severity;
import org.drools.verifier.report.components.MessageType;

import java.util.Map;
import java.util.HashMap;



rule "Find redundant LHS"
	@verifying_scopes(knowledge-package, decision-table)
	when
		# Check that VerifierRule $left and $right have redundant fields.
		$left :VerifierRule()
		
		$right :VerifierRule( 
			guid != $left.guid 
		)
		
		$leftSubRules : ArrayList() 
			from collect( 
				SubRule(
					ruleGuid == $left.guid
				)
			)

		$rightSubRules : ArrayList() 
			from collect( 
				SubRule(
					ruleGuid == $right.guid
				)
			)
		
		forall (
			$subRule :SubRule(
			) from $leftSubRules 
			
			Subsumption(
				left == $subRule,
				right memberOf $rightSubRules
			) 
		)
		forall (
			$subRule :SubRule(
			) from $rightSubRules 
			
			Subsumption(
				left == $subRule,
				right memberOf $leftSubRules
			) 
		)
	then
end

rule "Find equivalent Rules" extends "Find redundant LHS"
	# This rule needs to fire after "Find redundant rules"
	# or the not Reduncancy( ... ) does not check correctly.
	salience -1
	when
		
		not Equivalence(
			items contains $left,
			items contains $right
		)
		
		# RHS should not be redundant		
		$leftConsequence : Consequence(
			guid == $left.consequenceGuid,
			consequenceType == $left.consequenceType
		)
		$rightConsequence : Consequence(
			guid == $right.consequenceGuid,
			consequenceType == $right.consequenceType
		)
		not Redundancy(
			items contains $leftConsequence,
			items contains $rightConsequence
		)
		
		$causes : ArrayList()
        	from collect( 
              	Subsumption( 
              		left memberOf $rightSubRules, 
              		right memberOf $leftSubRules 
              	) 
            )
	then
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put( $leftConsequence.getRuleGuid(), $leftConsequence.getRuleName());
		impactedRules.put( $rightConsequence.getRuleGuid(), $rightConsequence.getRuleName());

		Equivalence equivalence = new Equivalence( $left, $right, $causes );
		insert( equivalence );

		result.add(new VerifierMessage(
						impactedRules,
						Severity.WARNING, 
						MessageType.EQUIVALANCE,
						null, 
						"Rule is equivalent to rule " + $right.getRuleName() + ".", 
						equivalence ) );
end


#
# Dependencies:
#
#	Needs at least one rule from these packages:
#		package org.drools.verifier.equivalency.rules
#			rule "Find equivalent Rules"
#		package org.drools.verifier.redundancy.rules
#			rule "Find redundant Rules, strong redundancy"
#
#	And this rule:
#		package org.drools.verifier.redundancy.possibilities
#			rule "Find rule possibility redundancy"
#
rule "Find redundant rules" extends "Find redundant LHS"
	when
		
		not Redundancy(
			items contains $left,
			items contains $right
		)
		
		# RHS needs to be redundant		
		$leftConsequence : Consequence(
			guid == $left.consequenceGuid,
			consequenceType == $left.consequenceType
		)
		$rightConsequence : Consequence(
			guid == $right.consequenceGuid,
			consequenceType == $right.consequenceType
		)
		exists Redundancy(
			items contains $leftConsequence,
			items contains $rightConsequence
		)

		$causes : ArrayList()
        	from collect( 
              	Subsumption( 
              		(
              			left memberOf $rightSubRules 
              			&& 
              			right memberOf $leftSubRules
              		) || (
	              		right memberOf $rightSubRules
	              		&& 
    	          		left memberOf $leftSubRules 
              		) 
              	) 
            )
	then
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put( $leftConsequence.getRuleGuid(), $leftConsequence.getRuleName());
		impactedRules.put( $rightConsequence.getRuleGuid(), $rightConsequence.getRuleName());
		
		Redundancy redundancy = new Redundancy( $left, $right, $causes );
		insert( redundancy );
		
		result.add(new VerifierMessage(
						impactedRules,
						Severity.WARNING, 
						MessageType.REDUNDANCY,
						null, 
						"Rules " + $right.getRuleName() + " and.", 
						redundancy ) );
end


#
# Dependencies:
#
#	Needs at least one rule from these packages:
#		package org.drools.verifier.equivalency.rules
#			rule "Find equivalent Rules"
#		package org.drools.verifier.redundancy.rules
#			rule "Find redundant Rules, strong redundancy"
#
#	And this rule:
#		package org.drools.verifier.redundancy.possibilities
#			rule "Find rule possibility redundancy"
#
rule "Find subsumptant rule possibilities from different rules"
	@verifying_scopes(knowledge-package, decision-table)
	salience -100
	when
		$left :VerifierRule()
		$right :VerifierRule( 
			guid != $left.guid 
		)
		
		$subsumption :Subsumption(
			left == $left,
			right == $right
		)
		
		# No redundacy
		not Subsumption(
			left == $subsumption.right,
			right == $subsumption.left
		)

	then
		Map<String,String> impactedRules = new HashMap<String,String>();
		impactedRules.put( $left.getGuid(), $left.getRuleName());
		impactedRules.put( $right.getGuid(), $right.getRuleName());
		
		Collection causes = new ArrayList();
		causes.add( $subsumption );

		result.add(new VerifierMessage(
						impactedRules,
						Severity.WARNING, 
						MessageType.SUBSUMPTION,
						null, 
						"Rules are subsumptant.", 
						causes ) );
end

