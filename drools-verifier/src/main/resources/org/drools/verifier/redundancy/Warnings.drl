#created on: 9.12.2007
package org.drools.verifier.redundancy

#list any import classes here.
global VerifierReport result;



#declare any global variables here
import java.util.Collection;
import java.util.ArrayList;

import org.drools.verifier.components.SubRule;
import org.drools.verifier.components.VerifierRule;
import org.drools.verifier.components.Consequence;

import org.drools.verifier.data.VerifierReport;

import org.drools.verifier.report.components.Redundancy;
import org.drools.verifier.report.components.Subsumption;
import org.drools.verifier.report.components.VerifierMessage;
import org.drools.verifier.report.components.Cause;
import org.drools.verifier.report.components.CauseType;
import org.drools.verifier.report.components.Severity;
import org.drools.verifier.report.components.MessageType;


rule "Find redundant LHS"
	when
		# Check that VerifierRule $left and $right have redundant fields.
		$left :VerifierRule()
		
		$right :VerifierRule( 
			guid != $left.guid 
		)
		
		
		$leftSubRules : ArrayList() 
			from collect( 
				SubRule(
					ruleGuid == $left.guid
				)
			)

		$rightSubRules : ArrayList() 
			from collect( 
				SubRule(
					ruleGuid == $right.guid
				)
			)
		
		forall (
			$subRule :SubRule(
			) from $leftSubRules 
			
			Subsumption(
				left == $subRule,
				right memberOf $rightSubRules
			) 
		)
		forall (
			$subRule :SubRule(
			) from $rightSubRules 
			
			Subsumption(
				left == $subRule,
				right memberOf $leftSubRules
			) 
		)
	then
end

rule "Find equivalent Rules" extends "Find redundant LHS"
	when
		
		# RHS should not be redundant		
		$leftConsequence : Consequence(
			guid == $left.consequenceGuid,
			consequenceType == $left.consequenceType
		)
		$rightConsequence : Consequence(
			guid == $right.consequenceGuid,
			consequenceType == $right.consequenceType
		)
		not Redundancy(
			items contains $leftConsequence,
			items contains $rightConsequence
		)
	then
		Collection causes = new ArrayList();
		causes.add( $left );
		causes.add( $right );

		result.add(new VerifierMessage(
						Severity.WARNING, MessageType.EQUIVALANCE,
						$left, "Rule is equivalent to rule " + $right.getRuleName() + ".", causes ) );
end


#
# Dependencies:
#
#	Needs at least one rule from these packages:
#		package org.drools.verifier.equivalency.rules
#			rule "Find equivalent Rules"
#		package org.drools.verifier.redundancy.rules
#			rule "Find redundant Rules, strong redundancy"
#
#	And this rule:
#		package org.drools.verifier.redundancy.possibilities
#			rule "Find rule possibility redundancy"
#
rule "Find redundant rules" extends "Find redundant LHS"
	when
	
		# RHS need to be redundant		
		$leftConsequence : Consequence(
			guid == $left.consequenceGuid,
			consequenceType == $left.consequenceType
		)
		$rightConsequence : Consequence(
			guid == $right.consequenceGuid,
			consequenceType == $right.consequenceType
		)
		exists Redundancy(
			items contains $leftConsequence,
			items contains $rightConsequence
		)

	then
		Collection causes = new ArrayList();
		causes.add( $left );
		causes.add( $right );

		result.add(new VerifierMessage(
						Severity.WARNING, MessageType.REDUNDANCY,
						$left, "Rule is redundant to rule " + $right.getRuleName() + ".", causes ) );
end


#
# Dependencies:
#
#	Needs at least one rule from these packages:
#		package org.drools.verifier.equivalency.rules
#			rule "Find equivalent Rules"
#		package org.drools.verifier.redundancy.rules
#			rule "Find redundant Rules, strong redundancy"
#
#	And this rule:
#		package org.drools.verifier.redundancy.possibilities
#			rule "Find rule possibility redundancy"
#
rule "Find subsumptant rule possibilities from different rules"
	salience -100
	when
		$subsumption:Subsumption(
			left.causeType == CauseType.SUB_RULE
		)
		
		# No redundacy
		not Subsumption(
			left.causeType == CauseType.SUB_RULE,
			left == $subsumption.right,
			right == $subsumption.left
		)

	then
		Collection causes = new ArrayList();
		causes.add( $subsumption.getLeft() );
		causes.add( $subsumption.getRight() );

		result.add(new VerifierMessage(
						Severity.WARNING, MessageType.SUBSUMPTION,
						$subsumption, "Rules are subsumptant.", causes ) );
end

