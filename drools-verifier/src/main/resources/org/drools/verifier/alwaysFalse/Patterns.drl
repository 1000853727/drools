#
# created on: 5.6.2008
#
# Rules in this package look for patterns and rules that can never be satisfied.
#
#
package org.drools.verifier.alwaysFalse
#list any import classes here.
import org.drools.verifier.components.Pattern;
import org.drools.verifier.components.PatternPossibility;

import org.drools.verifier.report.components.Severity;
import org.drools.verifier.report.components.MessageType;
import org.drools.verifier.report.components.Incompatibility;
import org.drools.verifier.report.components.VerifierMessage;

import org.drools.verifier.dao.VerifierResult;

#declare any global variables here
global VerifierResult result;

#
# Finds patterns that are always false.
#
# Example:
#		Pattern( a == b && a != b )
#
rule "Pattern that is always false"
	when
		$p :Pattern()
		
		# All the pattern possibilities for pattern need to be in conflict
		forall( 
			$pp :PatternPossibility(
				patternId == $p.id
			)
			
			Incompatibility( 
				left memberOf $pp.items,
				right memberOf $pp.items
			)
		)
	then 
		# Report an error
		result.add( new VerifierMessage(
								Severity.ERROR,
								MessageType.MISSING_COMPONENT,
								$p,
								$p + " can never be satisfied." ) );
		System.out.println( "jee" );
end
