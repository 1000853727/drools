#created on: 7.6.2007
package org.drools.verifier.rangeChecks.doubles;

#list any import classes here.
import org.drools.base.evaluators.Operator;

import org.drools.verifier.components.*;
import org.drools.verifier.report.components.Gap;

import org.drools.verifier.data.VerifierReport;

#declare any global variables here
global VerifierReport result;


# If all ranges are not checked for a field.
# 
# Type: Warning
# Dependencies: None
# Example: in "Rule 1" Foo( bar > 42 ) 
#						and in Foo( <= 42 || == 42 ) is missing.
#
rule "Range check for doubles, if smaller than or equal is missing"
	@verifying_scopes(knowledge-package, decision-table)
	when
		$f :Field( fieldType == Field.DOUBLE )
		
		# Foo( bar > 42 )
		$r :NumberRestriction( 
			fieldPath == $f.path, 
			operator == Operator.GREATER
		)
		
		# Check if Foo( bar == 42 || <= 42 ) is missing.
		not	NumberRestriction( 
			fieldPath == $f.path, 
			( operator  == Operator.EQUAL || == Operator.LESS_OR_EQUAL ), 
			patternIsNot == $r.patternIsNot, 
			value == $r.value 
		)
	then
		Gap gap = new Gap( $f, Operator.LESS_OR_EQUAL, $r );
		
		result.add( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
# 
# Type: Warning
# Dependencies: None
# Example: in "Rule 1" Foo( bar < 42 ) 
#						and in Foo( >= 42 || == 42 ) is missing.
#
rule "Range check for doubles, if greater than or equal is missing"
	@verifying_scopes(knowledge-package, decision-table)
	when
		$f :Field( fieldType == Field.DOUBLE )
		
		# Foo( bar > 42 )
		$r :NumberRestriction( 
			fieldPath == $f.path, 
			operator == Operator.LESS
		)
		
		# Check if Foo( bar == 42 || <= 42 ) is missing.
		not	NumberRestriction( 
			fieldPath == $f.path, 
			( operator  == Operator.EQUAL || == Operator.GREATER_OR_EQUAL ), 
			patternIsNot == $r.patternIsNot, 
			value == $r.value 
		)
	then
		Gap gap = new Gap( $f, Operator.GREATER_OR_EQUAL, $r );
		
		result.add( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
#
# Type: Warning
# Dependencies: None
# Example: in "Rule 1" Foo( bar == 42 || bar <= 42 ) 
# 					and no Foo( bar > 42 || >= 42 || >= 43 || == 43 ) 
#						then Foo( bar > 42 ) is missing.
#
rule "Range check for doubles, equal and greater than"
	@verifying_scopes(knowledge-package, decision-table)
	when
		$f :Field( fieldType == Field.DOUBLE )

		# Foo( bar == 42 ) 
		$r :NumberRestriction( 
			fieldPath == $f.path, 
			( operator == Operator.EQUAL || == Operator.LESS_OR_EQUAL )
		)

		# Check if Foo( bar > 42 || >= 42 ) is missing.
		not	NumberRestriction( 
			fieldPath == $f.path, 
			( operator == Operator.GREATER || == Operator.GREATER_OR_EQUAL ), 
			patternIsNot == $r.patternIsNot, 
			value == $r.value 
		)
	then
		Gap gap =  new Gap( $f, Operator.GREATER, $r );
		
		result.add( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
#
# Type: Warning
# Dependencies: None
# Example: in "Rule 1" Foo( bar == 42 || bar >= 42 ) 
# 					and no Foo( bar < 42 || <= 42 || <= 41 || == 41 ) 
#						then Foo( bar < 42 ) is missing.
#
rule "Range check for doubles, equal and smaller than"
	@verifying_scopes(knowledge-package, decision-table)
	when
		$f :Field( fieldType == Field.DOUBLE )

		# Foo( bar == 42 ) 
		$r :NumberRestriction( 
			fieldPath == $f.path, 
			( operator == Operator.EQUAL || == Operator.GREATER_OR_EQUAL )
		)

		# Check if Foo( bar < 42 || <= 42 ) is missing.
		not	NumberRestriction( 
			fieldPath == $f.path, 
			( operator == Operator.LESS || == Operator.LESS_OR_EQUAL ), 
			patternIsNot == $r.patternIsNot, 
			value == $r.value 
		)
	then
		Gap gap =  new Gap( $f, Operator.LESS, $r );
		
		result.add( gap );
		insert( gap );
end
