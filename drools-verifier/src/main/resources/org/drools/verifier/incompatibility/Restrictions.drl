#created on: 23.02.2008
package org.drools.verifier.incompatibility

#list any import classes here.
import org.drools.verifier.components.LiteralRestriction;
import org.drools.verifier.components.VariableRestriction;

import org.drools.verifier.report.components.Incompatibility;

import org.drools.base.evaluators.Operator;


#
# If two LiteralRestrictions are in conflict.
#
# Dependencies: None
# Example: IncorencePattern( a < 1 && a == 10 )
#
rule "Incompatible LiteralRestrictions with ranges in pattern possibility, impossible equality less or equal"
	when
		$r1 :LiteralRestriction(
			operator == Operator.EQUAL
		)

		$r2 :LiteralRestriction(
			restrictionType == $r1.restrictionType,
			fieldGuid matches $r1.fieldGuid,
			valueType == $r1.valueType,
			( operator == Operator.LESS_OR_EQUAL || == Operator.LESS || == Operator.EQUAL ),
			guid not matches $r1.guid
		)

		eval( $r1.compareValues( $r2 ) == 1 )
	then
		insert( new Incompatibility( $r1, $r2 ) );
end

#
# If two LiteralRestrictions are in conflict.
#
# Dependencies: None
# Example: IncorencePattern( a > 10 && a == 1 )
#
rule "Incompatible LiteralRestrictions with ranges in pattern possibility, impossible equality greater"
	when
		$r1 :LiteralRestriction(
			( operator == Operator.GREATER || == Operator.GREATER_OR_EQUAL )
		)

		$r2 :LiteralRestriction(
			restrictionType == $r1.restrictionType,
			fieldGuid matches $r1.fieldGuid,
			valueType == $r1.valueType,
			operator == Operator.EQUAL,
			guid not matches $r1.guid
		)

		eval( $r1.compareValues( $r2 ) == 1 )
	then
		insert( new Incompatibility( $r1, $r2 ) );
end

#
# If two LiteralRestrictions are in conflict.
#
# Dependencies: None
# Example: IncorencePattern( a < "12-Dec-2007", a > "12-Dec-2007" )
#
rule "Incompatible LiteralRestrictions with ranges in pattern possibility, impossible range"
	when
		$r1 :LiteralRestriction(
			operator == Operator.LESS
		)

		$r2 :LiteralRestriction(
			restrictionType == $r1.restrictionType,
			fieldGuid matches $r1.fieldGuid,
			valueType == $r1.valueType,
			operator == Operator.GREATER,
			guid not matches $r1.guid
		)

		eval( $r1.compareValues( $r2 ) == 0 )
	then
		insert( new Incompatibility( $r1, $r2 ) );
end

#
# If two VariableRestrictions are in conflict.
#
# Dependencies: None
# Example: Pattern( a > $var, a < $var )
#
rule "Incoherent VariableRestrictions in pattern possibility, impossible range"
	when
		$r1 :VariableRestriction(
			operator == Operator.LESS
		)

		$r2 :VariableRestriction(
			fieldGuid matches $r1.fieldGuid,
			operator == Operator.GREATER,
			variable.objectTypeGuid == $r1.variable.objectTypeGuid,
			variable.objectTypeType == $r1.variable.objectTypeType,
			guid not matches $r1.guid
		)
	then
		insert( new Incompatibility( $r1, $r2 ) );
end
