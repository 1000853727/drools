#created on: 1.12.2009
package org.drools.verifier.subsumption.patterns

import org.drools.verifier.components.Restriction;
import org.drools.verifier.components.Pattern;
import org.drools.verifier.components.PatternComponent;
import org.drools.verifier.components.SubPattern;
import org.drools.verifier.components.SubRule;
import org.drools.verifier.components.Consequence;
import org.drools.verifier.report.components.Redundancy;
import org.drools.verifier.report.components.Subsumption;

import org.drools.verifier.data.VerifierReport;

import java.util.ArrayList

global VerifierReport result;

#
#
rule "Find subsumptant sub rules"
	when
	
		$subRule1 :SubRule()
		$subRule2 :SubRule( 
			path != $subRule1.path,
			attributes["ruleflow-group"] == $subRule1.attributes["ruleflow-group"],
			attributes["agenda-group"] == $subRule1.attributes["agenda-group"],
			attributes["xor-group"] == $subRule1.attributes["xor-group"]
		)
		
		# For every restriction in $subRule1 there is a subsumption to a restriction in $subRule2.
		forall (
			$subPattern :SubPattern(
			) from $subRule1.items
			
			Subsumption(
				left == $subPattern,
				right memberOf $subRule2.items
			)
		)
		
		$causes : ArrayList()
        	from collect( 
              	Subsumption(
      				left memberOf $subRule1.items,  			
          			right memberOf $subRule2.items
              	) 
            )
	then
		insert( 
			new Subsumption( 
				$subRule1, 
				$subRule2,
				$causes 
			) 
		);
end

