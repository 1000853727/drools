#created on: 28.1.2008
package org.drools.verifier.subsumption.patterns

import org.drools.base.evaluators.Operator;
import org.drools.verifier.components.Field;

import org.drools.verifier.components.LiteralRestriction;
import org.drools.verifier.report.components.Subsumption;

import org.drools.verifier.data.VerifierReport;

global VerifierReport result;

#
# Fires when two restrictions are subsumptant.
# Creates a Subsumption object.
#
# Dependencies: None
#
# Example 1: P( x > 10 ) and P( x > 100 )
#
rule "Find subsumptant restrictions, greater than"
	when
		# Covered x > 10
		$lower:LiteralRestriction(
			( valueType == Field.INT || == Field.DOUBLE || == Field.DATE ),
			( operator == Operator.GREATER || == Operator.GREATER_OR_EQUAL )
		)

		# Covered x > 100
		$higher :LiteralRestriction( 
			fieldPath == $lower.fieldPath,
			( operator == Operator.GREATER || == Operator.GREATER_OR_EQUAL || == Operator.EQUAL )
		)
		
		eval( $lower.compareValues( $higher ) == -1 )
	then 
		insert( new Subsumption( $higher, $lower ) );
end

rule "Find subsumptant restrictions, equal"
	when
		# Covered x > 10
		$left :LiteralRestriction( )

		# Covered x > 10
		$right :LiteralRestriction( 
			path != $left.path,
			fieldPath == $left.fieldPath,
			operator == $left.operator
		)
		
		eval( $left.compareValues( $right ) == 0 )
	then 
		insert( new Subsumption( $left, $right ) );
end

#
# Fires when two restrictions are subsumptant.
# Creates a Subsumption object.
#
# Dependencies: None
#
# Example 1: P( x < 10 ) and P( x < 100 )
#
rule "Find subsumptant restrictions, less than"
	when
		# Covered x < 10
		$higher :LiteralRestriction(
			( valueType == Field.INT || == Field.DOUBLE || == Field.DATE ),
			( operator == Operator.LESS || == Operator.LESS_OR_EQUAL )
		)

		# Covered x < 100
		$lower :LiteralRestriction( 
			fieldPath == $higher.fieldPath,
			( operator == Operator.LESS || == Operator.LESS_OR_EQUAL || == Operator.EQUAL)
		)
		
		eval( $lower.compareValues( $higher ) == - 1 )
	then 
		insert( new Subsumption( $higher, $lower ) );
end
