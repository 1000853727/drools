#created on: 27.10.2007
package org.drools.analytics.optimisation

#list any import classes here.
import java.util.Collection;
import java.util.ArrayList;

import org.drools.analytics.components.Pattern;
import org.drools.analytics.components.AnalyticsRule;
import org.drools.analytics.components.OperatorDescr;
import org.drools.analytics.components.AnalyticsEvalDescr;
import org.drools.analytics.components.AnalyticsComponent;
import org.drools.analytics.components.AnalyticsComponentType;
import org.drools.analytics.report.components.AnalyticsMessage;
import org.drools.analytics.dao.AnalyticsResult;


#declare any global variables here
global AnalyticsResult result;




# Informs that rule would be more effective if eval
# was after fact patterns.
# 
# Type: Note
# Example: eval(function( $something )) Pattern() 
#
rule "Optimise evals inside pattern"
	when
		$operator :OperatorDescr()
		
		$eval :AnalyticsEvalDescr( 
			parent == $operator 
		)
		
		# Any other AnalyticsComponent that is not predicate or operator 
		$other :AnalyticsComponent(
			parent == $operator,
			orderNumber > $eval.orderNumber,
			( componentType != AnalyticsComponentType.OPERATOR && != AnalyticsComponentType.EVAL )
		)

		$rule :AnalyticsRule( 
			id == $eval.ruleId 
		)
	then 
		Collection list = new ArrayList();
		list.add( $eval );
		list.add( $other );
		result.add( new AnalyticsMessage(
								AnalyticsMessage.Severity.NOTE, 
								AnalyticsMessage.MessageType.OPTIMISATION, 
								$rule, 
								"Rule \"" + $eval.getRuleName() + 
								"\" would be more effective if the less expensive component, (" + 
								$other +
								"), could be before (" + 
								$eval + ").", 
								list ) );
end
