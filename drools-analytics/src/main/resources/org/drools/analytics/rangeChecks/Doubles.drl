#created on: 7.6.2007
package org.drools.analytics.rangeChecks.doubles;

#list any import classes here.
import org.drools.analytics.components.*;
import org.drools.analytics.result.AnalysisResult;
import org.drools.analytics.result.Gap;

import org.drools.analytics.dao.AnalyticsData;

#declare any global variables here
global AnalyticsData data;


# If all ranges are not checked for a field.
# 
# Type: Warning
# Example: in "Rule 1" Foo( bar > 42 ) 
#						and in Foo( <= 42 || == 42 ) is missing.
#
rule "Range check for doubles, if smaller than or equal is missing"
	when
		$f :Field( fieldType == Field.FieldType.DOUBLE )
		
		# Foo( bar > 42 )
		$r :LiteralRestriction( 
			fieldId == $f.id, 
			evaluator == ">"
		)
		
		# Check if Foo( bar == 42 || <= 42 ) is missing.
		not	LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator  == "==" || == "<=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue 
		)
	then
		Gap gap = new Gap( $f, "<=", $r );
		
		gap.setFiredRuleName( drools.getRule().getName() );
		
		data.save( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
# 
# Type: Warning
# Example: in "Rule 1" Foo( bar < 42 ) 
#						and in Foo( >= 42 || == 42 ) is missing.
#
rule "Range check for doubles, if greater than or equal is missing"
	when
		$f :Field( fieldType == Field.FieldType.DOUBLE )
		
		# Foo( bar > 42 )
		$r :LiteralRestriction( 
			fieldId == $f.id, 
			evaluator == "<"
		)
		
		# Check if Foo( bar == 42 || <= 42 ) is missing.
		not	LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator  == "==" || == ">=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue 
		)
	then
		Gap gap = new Gap( $f, ">=", $r );
		
		gap.setFiredRuleName( drools.getRule().getName() );
		
		data.save( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
#
# Type: Warning
# Example: in "Rule 1" Foo( bar == 42 || bar <= 42 ) 
# 					and no Foo( bar > 42 || >= 42 || >= 43 || == 43 ) 
#						then Foo( bar > 42 ) is missing.
#
rule "Range check for doubles, equal and greater than"
	when
		$f :Field( fieldType == Field.FieldType.DOUBLE )

		# Foo( bar == 42 ) 
		$r :LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == "==" || == "<=" )
		)

		# Check if Foo( bar > 42 || >= 42 ) is missing.
		not	LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == ">" || == ">=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue 
		)
	then
		Gap gap =  new Gap( $f, ">", $r );
		
		gap.setFiredRuleName( drools.getRule().getName() );
		
		data.save( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
#
# Type: Warning
# Example: in "Rule 1" Foo( bar == 42 || bar >= 42 ) 
# 					and no Foo( bar < 42 || <= 42 || <= 41 || == 41 ) 
#						then Foo( bar < 42 ) is missing.
#
rule "Range check for doubles, equal and smaller than"
	when
		$f :Field( fieldType == Field.FieldType.DOUBLE )

		# Foo( bar == 42 ) 
		$r :LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == "==" || == ">=" )
		)

		# Check if Foo( bar < 42 || <= 42 ) is missing.
		not	LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == "<" || == "<=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue 
		)
	then
		Gap gap =  new Gap( $f, "<", $r );
		
		gap.setFiredRuleName( drools.getRule().getName() );
		
		data.save( gap );
		insert( gap );
end


/*
# If all ranges are not checked for a field.
# 
# Type: Warning
# Example: in "Rule 1" Foo(bar > 42 ) and in "Rule 2" Foo( bar < 42 )
# 					then Foo( bar == 42 ) is missing.
rule "Range check for doubles, smaller and greater than"
	when
		$f :Field( fieldType == Field.FieldType.DOUBLE )
		(
				$r :LiteralRestriction( 
					fieldId == $f.id, 
					evaluator == ">" 
				)
			and
				not LiteralRestriction( 
					fieldId == $f.id, 
					( evaluator == "==" || == "<=" ), 
					patternIsNot == $r.patternIsNot, 
					doubleValue == $r.doubleValue 
			)
		) or (
				$r :LiteralRestriction( 
					fieldId == $f.id, 
					evaluator == "<" 
				)
			and
				not LiteralRestriction( 
					fieldId == $f.id, 
					( evaluator == "==" || == ">=" ), 
					patternIsNot == $r.patternIsNot, 
					doubleValue == $r.doubleValue 
				)
		) or (
				$r :LiteralRestriction( 
					fieldId == $f.id, 
					evaluator == "<=" 
				)
			and
				not LiteralRestriction( 
					fieldId == $f.id, 
					evaluator  == ">", 
					patternIsNot == $r.patternIsNot, 
					doubleValue == $r.doubleValue 
				)
		) or (
				$r :LiteralRestriction( 
					fieldId == $f.id, 
					evaluator == ">=" 
				)
			and
				not LiteralRestriction( 
					fieldId == $f.id, 
					evaluator  == "<", 
					patternIsNot == $r.patternIsNot, 
					doubleValue == $r.doubleValue 
				)
		)
	then
		Gap gap = new Gap( $f, Gap.getReversedEvaluator($r.getEvaluator()), $r );
		gap.setFiredRuleName( drools.getRule().getName() );
		data.save( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
# If equality and smaller than exist check that greater than exists too.
#
# Type: Warning
# Example: in "Rule 1" Foo(bar == 42 ) and in "Rule 2" Foo( bar < 42 )
# 					then Foo( bar > 42 ) is missing.
rule "Range check for doubles, equal and greater than"
	when
		# Case Foo( bar == 42 ) Foo( bar >= 42 || > 42 ).
		$f :Field( fieldType == Field.FieldType.DOUBLE )
		$r :LiteralRestriction( 
			fieldId == $f.id, 
			evaluator == "=="
		)
		LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == ">" || == ">=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue  
		)
		# Check if Foo( bar < 42 || <= 42 ) is missing.
		not	LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == "<" || == "<=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue 
		)
	then
		Gap gap = new Gap( $f, "<", $r );
		gap.setFiredRuleName( drools.getRule().getName() );
		data.save( gap );
		insert( gap );
end

# If all ranges are not checked for a field.
# If equality and smaller than exist check that greater than exists too.
#
# Type: Warning
# Example: in "Rule 1" Foo(bar == 42 ) and in "Rule 2" Foo( bar > 42 )
# 					then Foo( bar < 42 ) is missing.
rule "Range check for doubles, equal and smaller than"
	when
		# Case Foo( bar == 42 ) Foo( bar <= 42 || < 42 ).
		$f :Field( fieldType == Field.FieldType.DOUBLE )
		$r :LiteralRestriction( 
			fieldId == $f.id, 
			evaluator == "==" 
		)
		LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == "<" || == "<=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue 
		)
		# Check if Foo( bar > 42 || >= 42 ) is missing.
		not	LiteralRestriction( 
			fieldId == $f.id, 
			( evaluator == ">" || == ">=" ), 
			patternIsNot == $r.patternIsNot, 
			doubleValue == $r.doubleValue 
		)
	then
		Gap gap = new Gap( $f, ">", $r );
		gap.setFiredRuleName( drools.getRule().getName() );
		data.save( gap );
		insert( gap );
end
*/
