#created on: 7.6.2007
package org.drools.analytics.rangeChecks.patterns;

#list any import classes here.
import org.drools.analytics.components.*;
import org.drools.analytics.accumulateFunction.ValidatePattern;
import org.drools.analytics.accumulateFunction.ValidatePatternResult;
import org.drools.analytics.result.AnalysisResult;
import org.drools.analytics.result.MissingNumberPattern;
import org.drools.analytics.result.Cause;
import org.drools.analytics.result.AnalysisWarning;
import org.drools.analytics.accumulateFunction.FindMissingNumber;

import java.util.ArrayList;
import java.util.List;

import org.drools.analytics.dao.AnalyticsData;

#declare any global variables here
global AnalyticsData data;

#
# If all pattern ranges are not checked for a field.
# 
# Type: Warning
# Example: in "Rule 1" Foo( bar == 10 ) and in "Rule 2" Foo( bar == 20 ) and in "Rule 3" Foo( bar == 40 )
# 					then Foo( bar == 30 ) is missing.
rule "Range check for number patterns"
	when
		$f :Field(
			( fieldType == Field.FieldType.INT || == Field.FieldType.DOUBLE )
		)
		(
			# Where pattern is false.
			$list :ArrayList( size > FindMissingNumber.MIN_NUMBER_OF_RESTRICTIONS )
				from collect(
					LiteralRestriction( 
						fieldId == $f.id, 
						patternIsNot == false, 
						evaluator == "=="
					)
				)
		) or (
			# Where pattern is true.
			$list :ArrayList( size > FindMissingNumber.MIN_NUMBER_OF_RESTRICTIONS )
				from collect(
					LiteralRestriction( 
						fieldId == $f.id, 
						patternIsNot == true, 
						evaluator == "=="
					)
				)
		)
	then
		Number number = FindMissingNumber.testForPattern( $list );
		if( number != null ){
			MissingNumberPattern mnp = new MissingNumberPattern( $f, "==", $f.getFieldType(), number.toString() );
			data.save( mnp );
		}
end

#
# If all pattern ranges are not checked for a field.
# 
# Type: Warning
# Example: in "Rule 1" Foo( bar == 10 ) and in "Rule 2" Foo( bar == 20 ) and in "Rule 3" Foo( bar == 40 )
# 					then Foo( bar == 30 ) is missing.
rule "Range check for number patterns, !="
	when
		$f :Field( 
			( fieldType == Field.FieldType.INT || == Field.FieldType.DOUBLE ) 
		)
		(
			# Where pattern is false.
			$list :ArrayList( size > FindMissingNumber.MIN_NUMBER_OF_RESTRICTIONS )
				from collect(
					LiteralRestriction( 
						fieldId == $f.id, 
						patternIsNot == false, 
						evaluator == "!="
					)
				)
		) or (
			# Where pattern is false.
			$list :ArrayList( size > FindMissingNumber.MIN_NUMBER_OF_RESTRICTIONS )
				from collect(
					LiteralRestriction( 
						fieldId == $f.id, 
						patternIsNot == true, 
						evaluator == "!="
					)
				)
		)
	then
		Number number = FindMissingNumber.testForPattern( $list );
		if( number != null ){
			MissingNumberPattern mnp = new MissingNumberPattern( $f, "!=", $f.getFieldType(), number.toString() );
			data.save( mnp );
		}
end
