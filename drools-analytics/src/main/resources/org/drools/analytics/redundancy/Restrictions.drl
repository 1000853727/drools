#created on: 7.9.2007
package org.drools.analytics.redundancy.restrictions

import org.drools.analytics.components.*;
import org.drools.analytics.result.Redundancy;

# TODO: And from and every object.
//TODO: Also check that patterns and rules are redundant.
/*
rule "Find redundant ReturnValueRestriction"
	when
		# Check that Restrictions $left and $right have redundant fields.
		$left :ReturnValueRestriction()
		$right :ReturnValueRestriction( 
			id != $left.id,
			evaluator == $left.evaluator,
			classMethodName matches $left.classMethodName,
			compareStringArrays( declarations, $left.declarations )
		)
					
		# Check that PatternPossibilities $pp1 and $pp2 have redundant fields
		# and that they contain $left and $right.
		$pp1 :PatternPossibility( restriction contains $left ) 
		$pp2 :PatternPossibility( 
					id != $pp1.id, 
					restriction contains $right, 
					exist == $pp1.exist, 
					notExist == $pp1.notExist,
					eval( restrictions.size() == $pp1.getRestrictions().size() ) 
		)
		# Check that there is not allready a pair with these values.
		not RedundantPair( left == $left, right == $right )
	then
		insert( new RedundantPair( $pp1, $pp2, $left, $right ) );
end
*/
rule "Find redundant VariableRestriction"
	when
		# Check that Restrictions $left and $right have redundant fields.
		$left :VariableRestriction()
		$right :VariableRestriction( 
			id != $left.id, 
			evaluator == $left.evaluator 
		)
		# Check that there is not already a pair with these values.
		not Redundancy( 
			left == $left, 
			right == $right 
		)
		not Redundancy(
			left == $right, 
			right == $left 
		)
		
		# Check that these two variables point to the same object.
		$v :Variable( id == $left.variableId )
		Variable( 
			id == $right.variableId,
			objectType == $v.objectType,
			objectId == $v.objectId
		)
	then
		insert( new Redundancy( Redundancy.RedundancyType.STRONG, $left, $right ) );
end

/*
XXX: Not sure if this can be done.
rule "Find redundant QualifiedIdentifierRestriction"
	when
		# Check that Restrictions $left and $right have redundant fields.
		$left :QualifiedIdentifierRestriction()
		$right :QualifiedIdentifierRestriction( 
			id != $left.id, 
			evaluator == $left.evaluator 
		)
		
		# Check that these two variables point to the same object.
		$v :Variable( id == $left.variableId )
		Variable( 
			id == $right.variableId,
			objectType == $v.objectType,
			objectId == $v.objectId
		)
		
		# Check that there is not already a pair with these values.
		not Redundancy( 
			left == $left, 
			right == $right 
		)
		not Redundancy( 
			left == $right, 
			right == $left 
		)
	then
		insert( new Redundancy( $left, $right ) );
end
*/


rule "Find redundant LiteralRestriction"
	when
		# Check that Restrictions $left and $right have redundant fields.
		$left :LiteralRestriction()
		and
		(
				$right :LiteralRestriction( 
					id != $left.id, 
					evaluator == $left.evaluator,
					valueType == Field.FieldType.BOOLEAN,
					booleanValue == $left.booleanValue
				)
			or
				$right :LiteralRestriction( id != $left.id, 
					evaluator == $left.evaluator,
					valueType == Field.FieldType.STRING,
					stringValue matches $left.stringValue
				)
			or
				$right :LiteralRestriction( 
					id != $left.id, 
					evaluator == $left.evaluator,
					valueType == Field.FieldType.INT,
					intValue == $left.intValue
				)
			or
				$right :LiteralRestriction( 
					id != $left.id, 
					evaluator == $left.evaluator,
					valueType == Field.FieldType.DOUBLE,
					doubleValue == $left.doubleValue
				)
			or
				$right :LiteralRestriction( 
					id != $left.id, 
					evaluator == $left.evaluator,
					valueType == Field.FieldType.DATE,
					eval( dateValue.equals($left.getDateValue()) )
				)
			or
			(
				$right :LiteralRestriction( 
					id != $left.id, 
					evaluator == $left.evaluator,
					valueType == Field.FieldType.VARIABLE
				)
				and
					$v :Variable( 
						objectType == AnalyticsComponentType.FIELD,
						objectId == $left.id
					)
				and
					Variable( 
						objectType == AnalyticsComponentType.FIELD,
						objectId == $right.id,
						objectName == $v.objectName,
						name == $v.name
					)
			)
		)
		# Check that there is not already a pair with these values.
		not Redundancy( 
			left == $left, 
			right == $right 
		)
		not Redundancy(
			left == $right, 
			right == $left 
		)
	then
		insert( new Redundancy( Redundancy.RedundancyType.STRONG, $left, $right ) );
end
