#created on: 7.9.2007
package org.drools.analytics.redundancy.possibilities

import org.drools.analytics.components.*;
import org.drools.analytics.report.components.Redundancy;
import org.drools.analytics.report.components.Redundancy.RedundancyType;
import org.drools.analytics.report.components.PartialRedundancy;
import org.drools.analytics.report.components.Subsumption;
import org.drools.analytics.report.components.Cause;
import org.drools.analytics.report.components.Cause.CauseType;

import java.util.ArrayList;

#
# Fires when two PatternPossibilities are redundant.
# Marks these possibilities as redundant.
# 
# Example 1: Pattern1( a == b) and Pattern1( a == b)
# Example 2: Pattern1( a == b || a == c) and Pattern1( a == b)
rule "Find pattern possibility redundancy"
	when
		$ppr :Redundancy( 
			type == Redundancy.RedundancyType.WEAK,
			left.causeType == Cause.CauseType.PATTERN 
		)

		# Find two PatternPossibilities.
		$pp1 :PatternPossibility(
			eval( id == $ppr.getLeft().getId() )
		)

		$pp2 :PatternPossibility(
			eval( id == $ppr.getRight().getId() )
		)
		
		# For every restriction in $pp1 there is a redundancy to $pp2. 
		forall(
			$r :Restriction(
				patternId == $pp1.patternId,
				this memberOf $pp1.items
			)
			
			Redundancy(
				(
					left == $r
					&&
					right memberOf $pp2.items
				) || (
					left memberOf $pp2.items
					&&
					right == $r
				)
			)
		)
		
		# For every restriction in $pp2 there is a redundancy to $pp1. 
		forall(
			$r :Restriction(
				patternId == $pp2.patternId,
				this memberOf $pp2.items
			)
			
			Redundancy(
				(
					left == $r
					&&
					right memberOf $pp1.items
				) || (
					left memberOf $pp1.items
					&&
					right == $r
				)
			)
		)
	then
		insert( new Redundancy( Redundancy.RedundancyType.STRONG, $pp1, $pp2 ) );
end

#
# Fires when two PatternPossibilities are redundant.
# Marks these possibilities as redundant.
# 
# Example: rule "1" Pattern( a == b) end
#		   rule "2" Pattern( a == b) end
rule "Find rule possibility redundancy"
	when
		$redundancy :Redundancy( 
			type == Redundancy.RedundancyType.WEAK,
			left.causeType == Cause.CauseType.RULE 
		)

		# Find two RulePossibilities.
		$rp1 :RulePossibility(
			eval( id == $redundancy.getLeft().getId() )
		)

		$rp2 :RulePossibility(
			eval( id == $redundancy.getRight().getId() )
		)
		
		# For every pattern possibility in $pp1 there is a pattern possibility in $pp2. 
		forall(
			$pp :PatternPossibility(
				patternId == $rp1.ruleId,
				this memberOf $rp1.items
			)
			
			Redundancy(
				type == Redundancy.RedundancyType.STRONG,
				(
					left == $pp
					&&
					right memberOf $rp2.items
				) || (
					left memberOf $rp2.items
					&&
					right == $pp
				)
			)
		)
		
		# For every restriction in $pp2 there is a redundancy to $pp1. 
		forall(
			$pp :PatternPossibility(
				patternId == $rp2.ruleId,
				this memberOf $rp2.items
			)
			
			Redundancy(
				type == Redundancy.RedundancyType.STRONG,
				(
					left == $pp
					&&
					right memberOf $rp1.items
				) || (
					left memberOf $rp1.items
					&&
					right == $pp
				)
			)
		)
	then
		insert( new Redundancy( Redundancy.RedundancyType.STRONG, $rp1, $rp2 ) );
end
