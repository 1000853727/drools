TestCase "Collect Node assert/retract test case"

Setup
	ObjectTypeNode:
	    otnLeft1, org.drools.Person;
	LeftInputAdapterNode:
	    lian0, otnLeft1;
	ObjectTypeNode:
	    otnRight1, org.drools.Cheese;
	Binding:
	     l1, 0, org.drools.Person, likes;
	CollectNode:
	    col1, lian0, otnRight1, java.util.ArrayList;
	    type, ==, l1;
	LeftTupleSink:
	    sink1, col1;
	Facts:
	    new org.drools.Person('darth', 35, "brie"), new org.drools.Person('bobba', 36, 'stilton'),
	    new org.drools.Cheese('brie', 10), new org.drools.Cheese('brie', 12),
	    new org.drools.Cheese('stilton', 15), new org.drools.Cheese('muzzarella', 12);
	
/**
 * check single left assertion and retraction
 */
Test "Simple assertion and retraction"	
	assert:
	    otnLeft1, [h0];
	col1:
	    leftMemory, [[h0]];
	sink1:
	    verify, assertLeft, count, 1;
	    verify, assertLeft, tuple0[0], sameInstance(h0);
	    verify, assertLeft, tuple0[1].object, instanceOf( java.util.Collection );  
	    verify, assertLeft, tuple0[1].object.isEmpty();  
	retract:
	    otnLeft1, [h0];   
	col1:
	    leftMemory, [];
	sink1:
	    verify, retractLeft, count, 1;
	    verify, retractLeft, tuple0[0], sameInstance(h0);
	    
/**    
 * check single right assertion and retraction
 */
Test "Single right assertion and retraction"
	assert:
	    otnRight1, [h2];
	col1:
	    rightMemory, [h2];
	retract:
	    otnRight1, [h2]; 
	col1:
	    rightMemory, [];
	sink1:
	    verify, assertLeft, count, 0;
	    verify, retractLeft, count, 0;
	
/**        
 *  check single left then right assertion
 */
 Test "single left then right assertion" 
	assert:
	    otnLeft1, [h0];  
	sink1:
	    verify, assertLeft, count, 1;
	    verify, assertLeft, tuple0[1].object.isEmpty();
	assert:
	    otnRight1, [h2];
	col1:
	    leftMemory, [[h0]];  
	    rightMemory, [h2];  
	sink1:
	    verify, modifyLeft, count, 1;
	    verify, modifyLeft, tuple0[1].object, hasItem( h2.object );
	retract:
	    otnLeft1, [h0]; 
	    otnRight1, [h2];
	sink1:
	    verify, retractLeft, count, 1;
	    verify, modifyLeft, count, 1; // still 1, so no new calls on the retract
	    verify, assertLeft, count, 1; // checking just in case
	   
/**    
 *  check single right then left assertion
 */
Test "single right then left assertion" 
	assert:
	    otnRight1, [h2];
	    otnLeft1, [h1];  
	col1:
	    leftMemory, [[h1]];  
	    rightMemory, [h2];  
	sink1:
	    verify, assertLeft, count, 1;
	    verify, assertLeft, tuple0[1].object.isEmpty();
	    verify, modifyLeft, count, 0; // checking, just in case
	retract:
	    otnLeft1, [h1]; 
	    otnRight1, [h2];    
	sink1:
	    verify, retractLeft, count, 1;
	    verify, modifyLeft, count, 0;
	
/**    
 * assert two left and two right, with incremental first removal
 */
Test "two left and two right" 
	assert:
	    otnLeft1, [h0, h1];
	    otnRight1, [h2, h3];
	col1:
	    leftMemory, [[h0]];
	    leftMemory, [[h1]];  
	    rightMemory, [h2, h3];  
	sink1:
	    verify, assertLeft, count, 2;
	    verify, modifyLeft, count, 2;
	    verify, assertLeft, tuple0[0], is( h0 );
	    verify, assertLeft, tuple1[0], is( h1 );
	    verify, modifyLeft, tuple1[1].object.size() == 2;
	    verify, modifyLeft, tuple1[1].object, hasItem( h2.object );
	    verify, modifyLeft, tuple1[1].object, hasItem( h3.object );
	retract:
	    otnLeft1, [h0];
	col1:
	    leftMemory, [[h1]];  
	    rightMemory, [h2, h3];  
	sink1:
	    verify, retractLeft, count, 1;
	    verify, retractLeft, tuple0[0], is( h0 );
	retract:
	    otnRight1, [h2];	
	col1:
	    leftMemory, [[h1]];  
	    rightMemory, [h3];  
	sink1:
	    verify, retractLeft, count, 1; // still 1, so no retracts were called
	    verify, modifyLeft, count, 2; // still 2, so no modifies were called
	retract:
	    otnLeft1, [h1]; 
	sink1:
	    verify, retractLeft, count, 2; 
	retract:
	    otnRight1, [h3]; 
	col1:
	    leftMemory, [];  
	    rightMemory, [];  

	
