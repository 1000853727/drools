TestCase "Join Node unification test case"

Setup
    ObjectTypeNode:
        otnLeft1, org.kie.base.DroolsQuery;
    LeftInputAdapterNode:
        lian0, otnLeft1;
    ObjectTypeNode:
        otnRight1, org.kie.Person;
    ObjectTypeNode:
        otnRight2, org.kie.Person;                        
    Binding:
         v, 0, org.kie.base.DroolsQuery, [0], java.lang.Integer;
         p1, 1, org.kie.Person, age;
    JoinNode:
        join1, lian0, otnRight1;
        name, :=,v;
    JoinNode:
        join2, join1, otnRight2;
        age, !=, p1;        
    Facts:
        new org.kie.base.DroolsQuery( "x", [org.kie.runtime.rule.Variable.v], null, true), 
        new org.kie.Person('bobba', 36);

Test "Assert right then left"
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1];
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];     
  
Test "Assert right then left then modify right"
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1];
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];  
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnRight1, [h1]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];            
        
Test "Assert right then left then modify left"
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1];
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];  
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnLeft1, [h0]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];          
                        
            
Test "Assert left then right"
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];  
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1]; 
    join2:
        leftMemory, [[h0, h1]];
        
Test "Assert left then right with right modify"
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];  
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1]; 
    join2:
        leftMemory, [[h0, h1]];        
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnRight1, [h1]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];        
        
Test "Assert left then right with left modify"
    /**
     * Insert Query
     */
    assert:
        otnLeft1, [h0];
    join1:
        leftMemory, [[h0]];  
    /**
     * Insert Person
     */
    assert:
        otnRight1, [h1];
    join1:
        rightMemory, [h1]; 
    join2:
        leftMemory, [[h0, h1]];        
   /** trigger modify Person, but don't actually change anything */
    modify:
        otnLeft1, [h0]; 
    join1:
        leftMemory, [[h0]];
    join2:
        leftMemory, [[h0, h1]];              